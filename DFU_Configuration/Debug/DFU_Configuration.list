
DFU_Configuration.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d68  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08005ef8  08005ef8  00006ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006008  08006008  0000813c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006008  08006008  00007008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006010  08006010  0000813c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006010  08006010  00007010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006014  08006014  00007014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000013c  20000000  08006018  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000813c  2**0
                  CONTENTS
 10 .bss          00001154  2000013c  2000013c  0000813c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001290  20001290  0000813c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000813c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019b0a  00000000  00000000  0000816c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003db1  00000000  00000000  00021c76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000c877  00000000  00000000  00025a27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000012a0  00000000  00000000  000322a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000e32  00000000  00000000  00033540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00025044  00000000  00000000  00034372  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001f3b8  00000000  00000000  000593b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ccf22  00000000  00000000  0007876e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00145690  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00003ac8  00000000  00000000  001456d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000006d  00000000  00000000  0014919c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000013c 	.word	0x2000013c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005ee0 	.word	0x08005ee0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000140 	.word	0x20000140
 80001cc:	08005ee0 	.word	0x08005ee0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800059c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80005a0:	b08d      	sub	sp, #52	@ 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a2:	2400      	movs	r4, #0
 80005a4:	9407      	str	r4, [sp, #28]
 80005a6:	9408      	str	r4, [sp, #32]
 80005a8:	9409      	str	r4, [sp, #36]	@ 0x24
 80005aa:	940a      	str	r4, [sp, #40]	@ 0x28
 80005ac:	940b      	str	r4, [sp, #44]	@ 0x2c
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005ae:	9401      	str	r4, [sp, #4]
 80005b0:	4b56      	ldr	r3, [pc, #344]	@ (800070c <MX_GPIO_Init+0x170>)
 80005b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005b4:	f042 0210 	orr.w	r2, r2, #16
 80005b8:	631a      	str	r2, [r3, #48]	@ 0x30
 80005ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005bc:	f002 0210 	and.w	r2, r2, #16
 80005c0:	9201      	str	r2, [sp, #4]
 80005c2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005c4:	9402      	str	r4, [sp, #8]
 80005c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005c8:	f042 0204 	orr.w	r2, r2, #4
 80005cc:	631a      	str	r2, [r3, #48]	@ 0x30
 80005ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005d0:	f002 0204 	and.w	r2, r2, #4
 80005d4:	9202      	str	r2, [sp, #8]
 80005d6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005d8:	9403      	str	r4, [sp, #12]
 80005da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005dc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80005e0:	631a      	str	r2, [r3, #48]	@ 0x30
 80005e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005e4:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80005e8:	9203      	str	r2, [sp, #12]
 80005ea:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ec:	9404      	str	r4, [sp, #16]
 80005ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005f0:	f042 0201 	orr.w	r2, r2, #1
 80005f4:	631a      	str	r2, [r3, #48]	@ 0x30
 80005f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005f8:	f002 0201 	and.w	r2, r2, #1
 80005fc:	9204      	str	r2, [sp, #16]
 80005fe:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000600:	9405      	str	r4, [sp, #20]
 8000602:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000604:	f042 0202 	orr.w	r2, r2, #2
 8000608:	631a      	str	r2, [r3, #48]	@ 0x30
 800060a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800060c:	f002 0202 	and.w	r2, r2, #2
 8000610:	9205      	str	r2, [sp, #20]
 8000612:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000614:	9406      	str	r4, [sp, #24]
 8000616:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000618:	f042 0208 	orr.w	r2, r2, #8
 800061c:	631a      	str	r2, [r3, #48]	@ 0x30
 800061e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000620:	f003 0308 	and.w	r3, r3, #8
 8000624:	9306      	str	r3, [sp, #24]
 8000626:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000628:	4e39      	ldr	r6, [pc, #228]	@ (8000710 <MX_GPIO_Init+0x174>)
 800062a:	4622      	mov	r2, r4
 800062c:	2108      	movs	r1, #8
 800062e:	4630      	mov	r0, r6
 8000630:	f000 fd12 	bl	8001058 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000634:	f8df 90e0 	ldr.w	r9, [pc, #224]	@ 8000718 <MX_GPIO_Init+0x17c>
 8000638:	2201      	movs	r2, #1
 800063a:	4611      	mov	r1, r2
 800063c:	4648      	mov	r0, r9
 800063e:	f000 fd0b 	bl	8001058 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|LD3_Pin|LD5_Pin|LD6_Pin
 8000642:	f8df 80d8 	ldr.w	r8, [pc, #216]	@ 800071c <MX_GPIO_Init+0x180>
 8000646:	4622      	mov	r2, r4
 8000648:	f24f 0110 	movw	r1, #61456	@ 0xf010
 800064c:	4640      	mov	r0, r8
 800064e:	f000 fd03 	bl	8001058 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000652:	2708      	movs	r7, #8
 8000654:	9707      	str	r7, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000656:	2501      	movs	r5, #1
 8000658:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065a:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065c:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800065e:	a907      	add	r1, sp, #28
 8000660:	4630      	mov	r0, r6
 8000662:	f000 fc03 	bl	8000e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000666:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000668:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066a:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066c:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800066e:	a907      	add	r1, sp, #28
 8000670:	4648      	mov	r0, r9
 8000672:	f000 fbfb 	bl	8000e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000676:	9707      	str	r7, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000678:	2702      	movs	r7, #2
 800067a:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067c:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067e:	940a      	str	r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000680:	f04f 0a05 	mov.w	sl, #5
 8000684:	f8cd a02c 	str.w	sl, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000688:	a907      	add	r1, sp, #28
 800068a:	4648      	mov	r0, r9
 800068c:	f000 fbee 	bl	8000e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000690:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000692:	f44f 1990 	mov.w	r9, #1179648	@ 0x120000
 8000696:	f8cd 9020 	str.w	r9, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069a:	9409      	str	r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800069c:	a907      	add	r1, sp, #28
 800069e:	481d      	ldr	r0, [pc, #116]	@ (8000714 <MX_GPIO_Init+0x178>)
 80006a0:	f000 fbe4 	bl	8000e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80006a4:	2304      	movs	r3, #4
 80006a6:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006a8:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	9409      	str	r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80006ac:	f8df b070 	ldr.w	fp, [pc, #112]	@ 8000720 <MX_GPIO_Init+0x184>
 80006b0:	a907      	add	r1, sp, #28
 80006b2:	4658      	mov	r0, fp
 80006b4:	f000 fbda 	bl	8000e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80006b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006bc:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006be:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c0:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c2:	940a      	str	r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80006c4:	f8cd a02c 	str.w	sl, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80006c8:	a907      	add	r1, sp, #28
 80006ca:	4658      	mov	r0, fp
 80006cc:	f000 fbce 	bl	8000e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_12|LD3_Pin|LD5_Pin|LD6_Pin
 80006d0:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80006d4:	9307      	str	r3, [sp, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d6:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d8:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006da:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006dc:	a907      	add	r1, sp, #28
 80006de:	4640      	mov	r0, r8
 80006e0:	f000 fbc4 	bl	8000e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80006e4:	2320      	movs	r3, #32
 80006e6:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006e8:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ea:	9409      	str	r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80006ec:	a907      	add	r1, sp, #28
 80006ee:	4640      	mov	r0, r8
 80006f0:	f000 fbbc 	bl	8000e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80006f4:	9707      	str	r7, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80006f6:	f8cd 9020 	str.w	r9, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fa:	9409      	str	r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80006fc:	a907      	add	r1, sp, #28
 80006fe:	4630      	mov	r0, r6
 8000700:	f000 fbb4 	bl	8000e6c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000704:	b00d      	add	sp, #52	@ 0x34
 8000706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800070a:	bf00      	nop
 800070c:	40023800 	.word	0x40023800
 8000710:	40021000 	.word	0x40021000
 8000714:	40020000 	.word	0x40020000
 8000718:	40020800 	.word	0x40020800
 800071c:	40020c00 	.word	0x40020c00
 8000720:	40020400 	.word	0x40020400

08000724 <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000724:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000726:	e7fe      	b.n	8000726 <Error_Handler+0x2>

08000728 <MX_I2C1_Init>:
{
 8000728:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 800072a:	480a      	ldr	r0, [pc, #40]	@ (8000754 <MX_I2C1_Init+0x2c>)
 800072c:	4b0a      	ldr	r3, [pc, #40]	@ (8000758 <MX_I2C1_Init+0x30>)
 800072e:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000730:	4b0a      	ldr	r3, [pc, #40]	@ (800075c <MX_I2C1_Init+0x34>)
 8000732:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000734:	2300      	movs	r3, #0
 8000736:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000738:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800073a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800073e:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000740:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000742:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000744:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000746:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000748:	f000 fc96 	bl	8001078 <HAL_I2C_Init>
 800074c:	b900      	cbnz	r0, 8000750 <MX_I2C1_Init+0x28>
}
 800074e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000750:	f7ff ffe8 	bl	8000724 <Error_Handler>
 8000754:	20000204 	.word	0x20000204
 8000758:	40005400 	.word	0x40005400
 800075c:	000186a0 	.word	0x000186a0

08000760 <MX_I2S3_Init>:
{
 8000760:	b508      	push	{r3, lr}
  hi2s3.Instance = SPI3;
 8000762:	480a      	ldr	r0, [pc, #40]	@ (800078c <MX_I2S3_Init+0x2c>)
 8000764:	4b0a      	ldr	r3, [pc, #40]	@ (8000790 <MX_I2S3_Init+0x30>)
 8000766:	6003      	str	r3, [r0, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000768:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800076c:	6042      	str	r2, [r0, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800076e:	2300      	movs	r3, #0
 8000770:	6083      	str	r3, [r0, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000772:	60c3      	str	r3, [r0, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000774:	6102      	str	r2, [r0, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000776:	4a07      	ldr	r2, [pc, #28]	@ (8000794 <MX_I2S3_Init+0x34>)
 8000778:	6142      	str	r2, [r0, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800077a:	6183      	str	r3, [r0, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800077c:	61c3      	str	r3, [r0, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800077e:	6203      	str	r3, [r0, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000780:	f000 fd58 	bl	8001234 <HAL_I2S_Init>
 8000784:	b900      	cbnz	r0, 8000788 <MX_I2S3_Init+0x28>
}
 8000786:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000788:	f7ff ffcc 	bl	8000724 <Error_Handler>
 800078c:	200001bc 	.word	0x200001bc
 8000790:	40003c00 	.word	0x40003c00
 8000794:	00017700 	.word	0x00017700

08000798 <MX_SPI1_Init>:
{
 8000798:	b508      	push	{r3, lr}
  hspi1.Instance = SPI1;
 800079a:	480d      	ldr	r0, [pc, #52]	@ (80007d0 <MX_SPI1_Init+0x38>)
 800079c:	4b0d      	ldr	r3, [pc, #52]	@ (80007d4 <MX_SPI1_Init+0x3c>)
 800079e:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007a0:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80007a4:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007a6:	2300      	movs	r3, #0
 80007a8:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007aa:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007ac:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007ae:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007b4:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007b6:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007b8:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007ba:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007bc:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007be:	230a      	movs	r3, #10
 80007c0:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007c2:	f002 fa67 	bl	8002c94 <HAL_SPI_Init>
 80007c6:	b900      	cbnz	r0, 80007ca <MX_SPI1_Init+0x32>
}
 80007c8:	bd08      	pop	{r3, pc}
    Error_Handler();
 80007ca:	f7ff ffab 	bl	8000724 <Error_Handler>
 80007ce:	bf00      	nop
 80007d0:	20000164 	.word	0x20000164
 80007d4:	40013000 	.word	0x40013000

080007d8 <SystemClock_Config>:
{
 80007d8:	b500      	push	{lr}
 80007da:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007dc:	2230      	movs	r2, #48	@ 0x30
 80007de:	2100      	movs	r1, #0
 80007e0:	a808      	add	r0, sp, #32
 80007e2:	f004 fd66 	bl	80052b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e6:	2300      	movs	r3, #0
 80007e8:	9303      	str	r3, [sp, #12]
 80007ea:	9304      	str	r3, [sp, #16]
 80007ec:	9305      	str	r3, [sp, #20]
 80007ee:	9306      	str	r3, [sp, #24]
 80007f0:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f2:	9301      	str	r3, [sp, #4]
 80007f4:	4a21      	ldr	r2, [pc, #132]	@ (800087c <SystemClock_Config+0xa4>)
 80007f6:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 80007f8:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 80007fc:	6411      	str	r1, [r2, #64]	@ 0x40
 80007fe:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8000800:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8000804:	9201      	str	r2, [sp, #4]
 8000806:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000808:	9302      	str	r3, [sp, #8]
 800080a:	4b1d      	ldr	r3, [pc, #116]	@ (8000880 <SystemClock_Config+0xa8>)
 800080c:	681a      	ldr	r2, [r3, #0]
 800080e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800081a:	9302      	str	r3, [sp, #8]
 800081c:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800081e:	2301      	movs	r3, #1
 8000820:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000822:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000826:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000828:	2302      	movs	r3, #2
 800082a:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800082c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000830:	920f      	str	r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000832:	2208      	movs	r2, #8
 8000834:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000836:	f44f 72a8 	mov.w	r2, #336	@ 0x150
 800083a:	9211      	str	r2, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800083c:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800083e:	2307      	movs	r3, #7
 8000840:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000842:	a808      	add	r0, sp, #32
 8000844:	f001 fe14 	bl	8002470 <HAL_RCC_OscConfig>
 8000848:	b998      	cbnz	r0, 8000872 <SystemClock_Config+0x9a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800084a:	230f      	movs	r3, #15
 800084c:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800084e:	2302      	movs	r3, #2
 8000850:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000852:	2300      	movs	r3, #0
 8000854:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000856:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800085a:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800085c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000860:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000862:	2105      	movs	r1, #5
 8000864:	a803      	add	r0, sp, #12
 8000866:	f002 f86d 	bl	8002944 <HAL_RCC_ClockConfig>
 800086a:	b920      	cbnz	r0, 8000876 <SystemClock_Config+0x9e>
}
 800086c:	b015      	add	sp, #84	@ 0x54
 800086e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000872:	f7ff ff57 	bl	8000724 <Error_Handler>
    Error_Handler();
 8000876:	f7ff ff55 	bl	8000724 <Error_Handler>
 800087a:	bf00      	nop
 800087c:	40023800 	.word	0x40023800
 8000880:	40007000 	.word	0x40007000

08000884 <main>:
{
 8000884:	b508      	push	{r3, lr}
	 doJump = 1;
 8000886:	4b2f      	ldr	r3, [pc, #188]	@ (8000944 <main+0xc0>)
 8000888:	2201      	movs	r2, #1
 800088a:	601a      	str	r2, [r3, #0]
  HAL_Init();
 800088c:	f000 fa32 	bl	8000cf4 <HAL_Init>
  SystemClock_Config();
 8000890:	f7ff ffa2 	bl	80007d8 <SystemClock_Config>
  MX_GPIO_Init();
 8000894:	f7ff fe82 	bl	800059c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000898:	f7ff ff46 	bl	8000728 <MX_I2C1_Init>
  MX_I2S3_Init();
 800089c:	f7ff ff60 	bl	8000760 <MX_I2S3_Init>
  MX_SPI1_Init();
 80008a0:	f7ff ff7a 	bl	8000798 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80008a4:	f004 f9c8 	bl	8004c38 <MX_USB_DEVICE_Init>
  printf("Boot loader Start\n\r");
 80008a8:	4827      	ldr	r0, [pc, #156]	@ (8000948 <main+0xc4>)
 80008aa:	f004 fcad 	bl	8005208 <iprintf>
 80008ae:	e003      	b.n	80008b8 <main+0x34>
		  	    *dfu_boot_flag = 0; // So next boot won't be affected
 80008b0:	4b26      	ldr	r3, [pc, #152]	@ (800094c <main+0xc8>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_12);
 80008b8:	4c25      	ldr	r4, [pc, #148]	@ (8000950 <main+0xcc>)
 80008ba:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008be:	4620      	mov	r0, r4
 80008c0:	f000 fbd0 	bl	8001064 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80008c4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80008c8:	f000 fa40 	bl	8000d4c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_12);
 80008cc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008d0:	4620      	mov	r0, r4
 80008d2:	f000 fbc7 	bl	8001064 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80008d6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80008da:	f000 fa37 	bl	8000d4c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_12);
 80008de:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008e2:	4620      	mov	r0, r4
 80008e4:	f000 fbbe 	bl	8001064 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80008e8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80008ec:	f000 fa2e 	bl	8000d4c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_12);
 80008f0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008f4:	4620      	mov	r0, r4
 80008f6:	f000 fbb5 	bl	8001064 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80008fa:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80008fe:	f000 fa25 	bl	8000d4c <HAL_Delay>
	  if(doJump){
 8000902:	4b10      	ldr	r3, [pc, #64]	@ (8000944 <main+0xc0>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d0d6      	beq.n	80008b8 <main+0x34>
		  doJump=0;
 800090a:	4b0e      	ldr	r3, [pc, #56]	@ (8000944 <main+0xc0>)
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
		  dfu_boot_flag = (uint32_t*) (&_bflag); // set in linker script
 8000910:	4b10      	ldr	r3, [pc, #64]	@ (8000954 <main+0xd0>)
 8000912:	4a0e      	ldr	r2, [pc, #56]	@ (800094c <main+0xc8>)
 8000914:	6013      	str	r3, [r2, #0]
		  	    if (*dfu_boot_flag != DFU_BOOT_FLAG) {
 8000916:	681a      	ldr	r2, [r3, #0]
 8000918:	4b0f      	ldr	r3, [pc, #60]	@ (8000958 <main+0xd4>)
 800091a:	429a      	cmp	r2, r3
 800091c:	d0c8      	beq.n	80008b0 <main+0x2c>
		  	        if (((*(__IO uint32_t*) USBD_DFU_APP_DEFAULT_ADD) & 0x2FFC0000)
 800091e:	4b0f      	ldr	r3, [pc, #60]	@ (800095c <main+0xd8>)
 8000920:	681a      	ldr	r2, [r3, #0]
 8000922:	4b0f      	ldr	r3, [pc, #60]	@ (8000960 <main+0xdc>)
 8000924:	4013      	ands	r3, r2
 8000926:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800092a:	d1c1      	bne.n	80008b0 <main+0x2c>
		  	            JumpAddress = *(__IO uint32_t*) (USBD_DFU_APP_DEFAULT_ADD + 4);
 800092c:	4a0b      	ldr	r2, [pc, #44]	@ (800095c <main+0xd8>)
 800092e:	6853      	ldr	r3, [r2, #4]
 8000930:	490c      	ldr	r1, [pc, #48]	@ (8000964 <main+0xe0>)
 8000932:	600b      	str	r3, [r1, #0]
		  	            JumpToApplication = (pFunction) JumpAddress;
 8000934:	490c      	ldr	r1, [pc, #48]	@ (8000968 <main+0xe4>)
 8000936:	600b      	str	r3, [r1, #0]
		  	            __set_MSP(*(__IO uint32_t*) USBD_DFU_APP_DEFAULT_ADD);
 8000938:	6812      	ldr	r2, [r2, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800093a:	f382 8808 	msr	MSP, r2
		  	            JumpToApplication();
 800093e:	4798      	blx	r3
 8000940:	e7b6      	b.n	80008b0 <main+0x2c>
 8000942:	bf00      	nop
 8000944:	20000000 	.word	0x20000000
 8000948:	08005ef8 	.word	0x08005ef8
 800094c:	20000160 	.word	0x20000160
 8000950:	40020c00 	.word	0x40020c00
 8000954:	2001fffc 	.word	0x2001fffc
 8000958:	deadbeef 	.word	0xdeadbeef
 800095c:	08010000 	.word	0x08010000
 8000960:	2ffc0000 	.word	0x2ffc0000
 8000964:	20000158 	.word	0x20000158
 8000968:	2000015c 	.word	0x2000015c

0800096c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800096c:	b500      	push	{lr}
 800096e:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000970:	2100      	movs	r1, #0
 8000972:	9100      	str	r1, [sp, #0]
 8000974:	4b0c      	ldr	r3, [pc, #48]	@ (80009a8 <HAL_MspInit+0x3c>)
 8000976:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000978:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800097c:	645a      	str	r2, [r3, #68]	@ 0x44
 800097e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000980:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8000984:	9200      	str	r2, [sp, #0]
 8000986:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000988:	9101      	str	r1, [sp, #4]
 800098a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800098c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000990:	641a      	str	r2, [r3, #64]	@ 0x40
 8000992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000994:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000998:	9301      	str	r3, [sp, #4]
 800099a:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800099c:	2007      	movs	r0, #7
 800099e:	f000 fa2b 	bl	8000df8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009a2:	b003      	add	sp, #12
 80009a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80009a8:	40023800 	.word	0x40023800

080009ac <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009ac:	b530      	push	{r4, r5, lr}
 80009ae:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b0:	2300      	movs	r3, #0
 80009b2:	9303      	str	r3, [sp, #12]
 80009b4:	9304      	str	r3, [sp, #16]
 80009b6:	9305      	str	r3, [sp, #20]
 80009b8:	9306      	str	r3, [sp, #24]
 80009ba:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C1)
 80009bc:	6802      	ldr	r2, [r0, #0]
 80009be:	4b14      	ldr	r3, [pc, #80]	@ (8000a10 <HAL_I2C_MspInit+0x64>)
 80009c0:	429a      	cmp	r2, r3
 80009c2:	d001      	beq.n	80009c8 <HAL_I2C_MspInit+0x1c>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80009c4:	b009      	add	sp, #36	@ 0x24
 80009c6:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c8:	2500      	movs	r5, #0
 80009ca:	9501      	str	r5, [sp, #4]
 80009cc:	4c11      	ldr	r4, [pc, #68]	@ (8000a14 <HAL_I2C_MspInit+0x68>)
 80009ce:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80009d0:	f043 0302 	orr.w	r3, r3, #2
 80009d4:	6323      	str	r3, [r4, #48]	@ 0x30
 80009d6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80009d8:	f003 0302 	and.w	r3, r3, #2
 80009dc:	9301      	str	r3, [sp, #4]
 80009de:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009e0:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80009e4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009e6:	2312      	movs	r3, #18
 80009e8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009ea:	2301      	movs	r3, #1
 80009ec:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009ee:	2304      	movs	r3, #4
 80009f0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f2:	a903      	add	r1, sp, #12
 80009f4:	4808      	ldr	r0, [pc, #32]	@ (8000a18 <HAL_I2C_MspInit+0x6c>)
 80009f6:	f000 fa39 	bl	8000e6c <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009fa:	9502      	str	r5, [sp, #8]
 80009fc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80009fe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a02:	6423      	str	r3, [r4, #64]	@ 0x40
 8000a04:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000a06:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a0a:	9302      	str	r3, [sp, #8]
 8000a0c:	9b02      	ldr	r3, [sp, #8]
}
 8000a0e:	e7d9      	b.n	80009c4 <HAL_I2C_MspInit+0x18>
 8000a10:	40005400 	.word	0x40005400
 8000a14:	40023800 	.word	0x40023800
 8000a18:	40020400 	.word	0x40020400

08000a1c <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000a1c:	b570      	push	{r4, r5, r6, lr}
 8000a1e:	b08c      	sub	sp, #48	@ 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a20:	2300      	movs	r3, #0
 8000a22:	9307      	str	r3, [sp, #28]
 8000a24:	9308      	str	r3, [sp, #32]
 8000a26:	9309      	str	r3, [sp, #36]	@ 0x24
 8000a28:	930a      	str	r3, [sp, #40]	@ 0x28
 8000a2a:	930b      	str	r3, [sp, #44]	@ 0x2c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a2c:	9303      	str	r3, [sp, #12]
 8000a2e:	9304      	str	r3, [sp, #16]
 8000a30:	9305      	str	r3, [sp, #20]
 8000a32:	9306      	str	r3, [sp, #24]
  if(hi2s->Instance==SPI3)
 8000a34:	6802      	ldr	r2, [r0, #0]
 8000a36:	4b25      	ldr	r3, [pc, #148]	@ (8000acc <HAL_I2S_MspInit+0xb0>)
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	d001      	beq.n	8000a40 <HAL_I2S_MspInit+0x24>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000a3c:	b00c      	add	sp, #48	@ 0x30
 8000a3e:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000a40:	2301      	movs	r3, #1
 8000a42:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000a44:	23c0      	movs	r3, #192	@ 0xc0
 8000a46:	9304      	str	r3, [sp, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	9305      	str	r3, [sp, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a4c:	a803      	add	r0, sp, #12
 8000a4e:	f002 f83f 	bl	8002ad0 <HAL_RCCEx_PeriphCLKConfig>
 8000a52:	2800      	cmp	r0, #0
 8000a54:	d137      	bne.n	8000ac6 <HAL_I2S_MspInit+0xaa>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000a56:	2400      	movs	r4, #0
 8000a58:	9400      	str	r4, [sp, #0]
 8000a5a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ad0 <HAL_I2S_MspInit+0xb4>)
 8000a5c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a5e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000a62:	641a      	str	r2, [r3, #64]	@ 0x40
 8000a64:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a66:	f402 4200 	and.w	r2, r2, #32768	@ 0x8000
 8000a6a:	9200      	str	r2, [sp, #0]
 8000a6c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6e:	9401      	str	r4, [sp, #4]
 8000a70:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000a72:	f042 0201 	orr.w	r2, r2, #1
 8000a76:	631a      	str	r2, [r3, #48]	@ 0x30
 8000a78:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000a7a:	f002 0201 	and.w	r2, r2, #1
 8000a7e:	9201      	str	r2, [sp, #4]
 8000a80:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a82:	9402      	str	r4, [sp, #8]
 8000a84:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000a86:	f042 0204 	orr.w	r2, r2, #4
 8000a8a:	631a      	str	r2, [r3, #48]	@ 0x30
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8e:	f003 0304 	and.w	r3, r3, #4
 8000a92:	9302      	str	r3, [sp, #8]
 8000a94:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000a96:	2310      	movs	r3, #16
 8000a98:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9a:	2602      	movs	r6, #2
 8000a9c:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	9409      	str	r4, [sp, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa0:	940a      	str	r4, [sp, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000aa2:	2506      	movs	r5, #6
 8000aa4:	950b      	str	r5, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000aa6:	a907      	add	r1, sp, #28
 8000aa8:	480a      	ldr	r0, [pc, #40]	@ (8000ad4 <HAL_I2S_MspInit+0xb8>)
 8000aaa:	f000 f9df 	bl	8000e6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000aae:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000ab2:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab4:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	9409      	str	r4, [sp, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab8:	940a      	str	r4, [sp, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000aba:	950b      	str	r5, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000abc:	a907      	add	r1, sp, #28
 8000abe:	4806      	ldr	r0, [pc, #24]	@ (8000ad8 <HAL_I2S_MspInit+0xbc>)
 8000ac0:	f000 f9d4 	bl	8000e6c <HAL_GPIO_Init>
}
 8000ac4:	e7ba      	b.n	8000a3c <HAL_I2S_MspInit+0x20>
      Error_Handler();
 8000ac6:	f7ff fe2d 	bl	8000724 <Error_Handler>
 8000aca:	e7c4      	b.n	8000a56 <HAL_I2S_MspInit+0x3a>
 8000acc:	40003c00 	.word	0x40003c00
 8000ad0:	40023800 	.word	0x40023800
 8000ad4:	40020000 	.word	0x40020000
 8000ad8:	40020800 	.word	0x40020800

08000adc <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000adc:	b500      	push	{lr}
 8000ade:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	9303      	str	r3, [sp, #12]
 8000ae4:	9304      	str	r3, [sp, #16]
 8000ae6:	9305      	str	r3, [sp, #20]
 8000ae8:	9306      	str	r3, [sp, #24]
 8000aea:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI1)
 8000aec:	6802      	ldr	r2, [r0, #0]
 8000aee:	4b14      	ldr	r3, [pc, #80]	@ (8000b40 <HAL_SPI_MspInit+0x64>)
 8000af0:	429a      	cmp	r2, r3
 8000af2:	d002      	beq.n	8000afa <HAL_SPI_MspInit+0x1e>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000af4:	b009      	add	sp, #36	@ 0x24
 8000af6:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000afa:	2100      	movs	r1, #0
 8000afc:	9101      	str	r1, [sp, #4]
 8000afe:	f503 3384 	add.w	r3, r3, #67584	@ 0x10800
 8000b02:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000b04:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000b08:	645a      	str	r2, [r3, #68]	@ 0x44
 8000b0a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000b0c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8000b10:	9201      	str	r2, [sp, #4]
 8000b12:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b14:	9102      	str	r1, [sp, #8]
 8000b16:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b18:	f042 0201 	orr.w	r2, r2, #1
 8000b1c:	631a      	str	r2, [r3, #48]	@ 0x30
 8000b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b20:	f003 0301 	and.w	r3, r3, #1
 8000b24:	9302      	str	r3, [sp, #8]
 8000b26:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000b28:	23e0      	movs	r3, #224	@ 0xe0
 8000b2a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b30:	2305      	movs	r3, #5
 8000b32:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b34:	a903      	add	r1, sp, #12
 8000b36:	4803      	ldr	r0, [pc, #12]	@ (8000b44 <HAL_SPI_MspInit+0x68>)
 8000b38:	f000 f998 	bl	8000e6c <HAL_GPIO_Init>
}
 8000b3c:	e7da      	b.n	8000af4 <HAL_SPI_MspInit+0x18>
 8000b3e:	bf00      	nop
 8000b40:	40013000 	.word	0x40013000
 8000b44:	40020000 	.word	0x40020000

08000b48 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b48:	e7fe      	b.n	8000b48 <NMI_Handler>

08000b4a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b4a:	e7fe      	b.n	8000b4a <HardFault_Handler>

08000b4c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b4c:	e7fe      	b.n	8000b4c <MemManage_Handler>

08000b4e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b4e:	e7fe      	b.n	8000b4e <BusFault_Handler>

08000b50 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <UsageFault_Handler>

08000b52 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b52:	4770      	bx	lr

08000b54 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b54:	4770      	bx	lr

08000b56 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b56:	4770      	bx	lr

08000b58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b58:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b5a:	f000 f8e5 	bl	8000d28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b5e:	bd08      	pop	{r3, pc}

08000b60 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000b60:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000b62:	4802      	ldr	r0, [pc, #8]	@ (8000b6c <OTG_FS_IRQHandler+0xc>)
 8000b64:	f001 f97a 	bl	8001e5c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000b68:	bd08      	pop	{r3, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20000c60 	.word	0x20000c60

08000b70 <ITM_SendChar>:
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )
void ITM_SendChar(uint8_t ch)
{
	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000b70:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8000b74:	f8d2 3dfc 	ldr.w	r3, [r2, #3580]	@ 0xdfc
 8000b78:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000b7c:	f8c2 3dfc 	str.w	r3, [r2, #3580]	@ 0xdfc
	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000b80:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8000b84:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	@ 0xe00
 8000b88:	f043 0301 	orr.w	r3, r3, #1
 8000b8c:	f8c2 3e00 	str.w	r3, [r2, #3584]	@ 0xe00
	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000b90:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	f013 0f01 	tst.w	r3, #1
 8000b9a:	d0f9      	beq.n	8000b90 <ITM_SendChar+0x20>
	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000b9c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000ba0:	6018      	str	r0, [r3, #0]
}
 8000ba2:	4770      	bx	lr

08000ba4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ba4:	b570      	push	{r4, r5, r6, lr}
 8000ba6:	460c      	mov	r4, r1
 8000ba8:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000baa:	2500      	movs	r5, #0
 8000bac:	e006      	b.n	8000bbc <_read+0x18>
  {
    *ptr++ = __io_getchar();
 8000bae:	f3af 8000 	nop.w
 8000bb2:	4621      	mov	r1, r4
 8000bb4:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bb8:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 8000bba:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bbc:	42b5      	cmp	r5, r6
 8000bbe:	dbf6      	blt.n	8000bae <_read+0xa>
  }

  return len;
}
 8000bc0:	4630      	mov	r0, r6
 8000bc2:	bd70      	pop	{r4, r5, r6, pc}

08000bc4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bc4:	b570      	push	{r4, r5, r6, lr}
 8000bc6:	460c      	mov	r4, r1
 8000bc8:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bca:	2500      	movs	r5, #0
 8000bcc:	e004      	b.n	8000bd8 <_write+0x14>
  {
//    __io_putchar(*ptr++);
    ITM_SendChar(*ptr++); // in __attribute__((weak)) int _write function
 8000bce:	f814 0b01 	ldrb.w	r0, [r4], #1
 8000bd2:	f7ff ffcd 	bl	8000b70 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bd6:	3501      	adds	r5, #1
 8000bd8:	42b5      	cmp	r5, r6
 8000bda:	dbf8      	blt.n	8000bce <_write+0xa>
  }
  return len;
}
 8000bdc:	4630      	mov	r0, r6
 8000bde:	bd70      	pop	{r4, r5, r6, pc}

08000be0 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8000be0:	f04f 30ff 	mov.w	r0, #4294967295
 8000be4:	4770      	bx	lr

08000be6 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8000be6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bea:	604b      	str	r3, [r1, #4]
  return 0;
}
 8000bec:	2000      	movs	r0, #0
 8000bee:	4770      	bx	lr

08000bf0 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8000bf0:	2001      	movs	r0, #1
 8000bf2:	4770      	bx	lr

08000bf4 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8000bf4:	2000      	movs	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bf8:	b510      	push	{r4, lr}
 8000bfa:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bfc:	4a0c      	ldr	r2, [pc, #48]	@ (8000c30 <_sbrk+0x38>)
 8000bfe:	490d      	ldr	r1, [pc, #52]	@ (8000c34 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c00:	480d      	ldr	r0, [pc, #52]	@ (8000c38 <_sbrk+0x40>)
 8000c02:	6800      	ldr	r0, [r0, #0]
 8000c04:	b140      	cbz	r0, 8000c18 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c06:	480c      	ldr	r0, [pc, #48]	@ (8000c38 <_sbrk+0x40>)
 8000c08:	6800      	ldr	r0, [r0, #0]
 8000c0a:	4403      	add	r3, r0
 8000c0c:	1a52      	subs	r2, r2, r1
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d806      	bhi.n	8000c20 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000c12:	4a09      	ldr	r2, [pc, #36]	@ (8000c38 <_sbrk+0x40>)
 8000c14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8000c16:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000c18:	4807      	ldr	r0, [pc, #28]	@ (8000c38 <_sbrk+0x40>)
 8000c1a:	4c08      	ldr	r4, [pc, #32]	@ (8000c3c <_sbrk+0x44>)
 8000c1c:	6004      	str	r4, [r0, #0]
 8000c1e:	e7f2      	b.n	8000c06 <_sbrk+0xe>
    errno = ENOMEM;
 8000c20:	f004 fb96 	bl	8005350 <__errno>
 8000c24:	230c      	movs	r3, #12
 8000c26:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000c28:	f04f 30ff 	mov.w	r0, #4294967295
 8000c2c:	e7f3      	b.n	8000c16 <_sbrk+0x1e>
 8000c2e:	bf00      	nop
 8000c30:	2001fffc 	.word	0x2001fffc
 8000c34:	00000400 	.word	0x00000400
 8000c38:	20000258 	.word	0x20000258
 8000c3c:	20001290 	.word	0x20001290

08000c40 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c40:	4a03      	ldr	r2, [pc, #12]	@ (8000c50 <SystemInit+0x10>)
 8000c42:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8000c46:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c4a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c4e:	4770      	bx	lr
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c54:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c8c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c58:	f7ff fff2 	bl	8000c40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c5c:	480c      	ldr	r0, [pc, #48]	@ (8000c90 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c5e:	490d      	ldr	r1, [pc, #52]	@ (8000c94 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c60:	4a0d      	ldr	r2, [pc, #52]	@ (8000c98 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c64:	e002      	b.n	8000c6c <LoopCopyDataInit>

08000c66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c6a:	3304      	adds	r3, #4

08000c6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c70:	d3f9      	bcc.n	8000c66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c72:	4a0a      	ldr	r2, [pc, #40]	@ (8000c9c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c74:	4c0a      	ldr	r4, [pc, #40]	@ (8000ca0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c78:	e001      	b.n	8000c7e <LoopFillZerobss>

08000c7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c7c:	3204      	adds	r2, #4

08000c7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c80:	d3fb      	bcc.n	8000c7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c82:	f004 fb6b 	bl	800535c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c86:	f7ff fdfd 	bl	8000884 <main>
  bx  lr    
 8000c8a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c8c:	2001fffc 	.word	0x2001fffc
  ldr r0, =_sdata
 8000c90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c94:	2000013c 	.word	0x2000013c
  ldr r2, =_sidata
 8000c98:	08006018 	.word	0x08006018
  ldr r2, =_sbss
 8000c9c:	2000013c 	.word	0x2000013c
  ldr r4, =_ebss
 8000ca0:	20001290 	.word	0x20001290

08000ca4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ca4:	e7fe      	b.n	8000ca4 <ADC_IRQHandler>
	...

08000ca8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ca8:	b510      	push	{r4, lr}
 8000caa:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cac:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce8 <HAL_InitTick+0x40>)
 8000cae:	781a      	ldrb	r2, [r3, #0]
 8000cb0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cb4:	fbb3 f3f2 	udiv	r3, r3, r2
 8000cb8:	4a0c      	ldr	r2, [pc, #48]	@ (8000cec <HAL_InitTick+0x44>)
 8000cba:	6810      	ldr	r0, [r2, #0]
 8000cbc:	fbb0 f0f3 	udiv	r0, r0, r3
 8000cc0:	f000 f8c0 	bl	8000e44 <HAL_SYSTICK_Config>
 8000cc4:	b968      	cbnz	r0, 8000ce2 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cc6:	2c0f      	cmp	r4, #15
 8000cc8:	d901      	bls.n	8000cce <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000cca:	2001      	movs	r0, #1
 8000ccc:	e00a      	b.n	8000ce4 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	4621      	mov	r1, r4
 8000cd2:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd6:	f000 f8a1 	bl	8000e1c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cda:	4b05      	ldr	r3, [pc, #20]	@ (8000cf0 <HAL_InitTick+0x48>)
 8000cdc:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000cde:	2000      	movs	r0, #0
 8000ce0:	e000      	b.n	8000ce4 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000ce2:	2001      	movs	r0, #1
}
 8000ce4:	bd10      	pop	{r4, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20000008 	.word	0x20000008
 8000cec:	20000004 	.word	0x20000004
 8000cf0:	2000000c 	.word	0x2000000c

08000cf4 <HAL_Init>:
{
 8000cf4:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cf6:	4b0b      	ldr	r3, [pc, #44]	@ (8000d24 <HAL_Init+0x30>)
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000cfe:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000d06:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000d0e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d10:	2003      	movs	r0, #3
 8000d12:	f000 f871 	bl	8000df8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d16:	2000      	movs	r0, #0
 8000d18:	f7ff ffc6 	bl	8000ca8 <HAL_InitTick>
  HAL_MspInit();
 8000d1c:	f7ff fe26 	bl	800096c <HAL_MspInit>
}
 8000d20:	2000      	movs	r0, #0
 8000d22:	bd08      	pop	{r3, pc}
 8000d24:	40023c00 	.word	0x40023c00

08000d28 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000d28:	4a03      	ldr	r2, [pc, #12]	@ (8000d38 <HAL_IncTick+0x10>)
 8000d2a:	6811      	ldr	r1, [r2, #0]
 8000d2c:	4b03      	ldr	r3, [pc, #12]	@ (8000d3c <HAL_IncTick+0x14>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	440b      	add	r3, r1
 8000d32:	6013      	str	r3, [r2, #0]
}
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	2000025c 	.word	0x2000025c
 8000d3c:	20000008 	.word	0x20000008

08000d40 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000d40:	4b01      	ldr	r3, [pc, #4]	@ (8000d48 <HAL_GetTick+0x8>)
 8000d42:	6818      	ldr	r0, [r3, #0]
}
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	2000025c 	.word	0x2000025c

08000d4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d4c:	b538      	push	{r3, r4, r5, lr}
 8000d4e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000d50:	f7ff fff6 	bl	8000d40 <HAL_GetTick>
 8000d54:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d56:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000d5a:	d002      	beq.n	8000d62 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d5c:	4b04      	ldr	r3, [pc, #16]	@ (8000d70 <HAL_Delay+0x24>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d62:	f7ff ffed 	bl	8000d40 <HAL_GetTick>
 8000d66:	1b40      	subs	r0, r0, r5
 8000d68:	42a0      	cmp	r0, r4
 8000d6a:	d3fa      	bcc.n	8000d62 <HAL_Delay+0x16>
  {
  }
}
 8000d6c:	bd38      	pop	{r3, r4, r5, pc}
 8000d6e:	bf00      	nop
 8000d70:	20000008 	.word	0x20000008

08000d74 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8000d74:	2800      	cmp	r0, #0
 8000d76:	db07      	blt.n	8000d88 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d78:	f000 021f 	and.w	r2, r0, #31
 8000d7c:	0940      	lsrs	r0, r0, #5
 8000d7e:	2301      	movs	r3, #1
 8000d80:	4093      	lsls	r3, r2
 8000d82:	4a02      	ldr	r2, [pc, #8]	@ (8000d8c <__NVIC_EnableIRQ+0x18>)
 8000d84:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	e000e100 	.word	0xe000e100

08000d90 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000d90:	2800      	cmp	r0, #0
 8000d92:	db08      	blt.n	8000da6 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d94:	0109      	lsls	r1, r1, #4
 8000d96:	b2c9      	uxtb	r1, r1
 8000d98:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8000d9c:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8000da0:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8000da4:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da6:	f000 000f 	and.w	r0, r0, #15
 8000daa:	0109      	lsls	r1, r1, #4
 8000dac:	b2c9      	uxtb	r1, r1
 8000dae:	4b01      	ldr	r3, [pc, #4]	@ (8000db4 <__NVIC_SetPriority+0x24>)
 8000db0:	5419      	strb	r1, [r3, r0]
  }
}
 8000db2:	4770      	bx	lr
 8000db4:	e000ed14 	.word	0xe000ed14

08000db8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000db8:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dba:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dbe:	f1c0 0c07 	rsb	ip, r0, #7
 8000dc2:	f1bc 0f04 	cmp.w	ip, #4
 8000dc6:	bf28      	it	cs
 8000dc8:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dcc:	1d03      	adds	r3, r0, #4
 8000dce:	2b06      	cmp	r3, #6
 8000dd0:	d90f      	bls.n	8000df2 <NVIC_EncodePriority+0x3a>
 8000dd2:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd4:	f04f 3eff 	mov.w	lr, #4294967295
 8000dd8:	fa0e f00c 	lsl.w	r0, lr, ip
 8000ddc:	ea21 0100 	bic.w	r1, r1, r0
 8000de0:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000de2:	fa0e fe03 	lsl.w	lr, lr, r3
 8000de6:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8000dea:	ea41 0002 	orr.w	r0, r1, r2
 8000dee:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000df2:	2300      	movs	r3, #0
 8000df4:	e7ee      	b.n	8000dd4 <NVIC_EncodePriority+0x1c>
	...

08000df8 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000df8:	4a07      	ldr	r2, [pc, #28]	@ (8000e18 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000dfa:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dfc:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000e00:	041b      	lsls	r3, r3, #16
 8000e02:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e04:	0200      	lsls	r0, r0, #8
 8000e06:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e0a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000e0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8000e14:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000e16:	4770      	bx	lr
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e1c:	b510      	push	{r4, lr}
 8000e1e:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e20:	4b05      	ldr	r3, [pc, #20]	@ (8000e38 <HAL_NVIC_SetPriority+0x1c>)
 8000e22:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e24:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8000e28:	f7ff ffc6 	bl	8000db8 <NVIC_EncodePriority>
 8000e2c:	4601      	mov	r1, r0
 8000e2e:	4620      	mov	r0, r4
 8000e30:	f7ff ffae 	bl	8000d90 <__NVIC_SetPriority>
}
 8000e34:	bd10      	pop	{r4, pc}
 8000e36:	bf00      	nop
 8000e38:	e000ed00 	.word	0xe000ed00

08000e3c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e3c:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e3e:	f7ff ff99 	bl	8000d74 <__NVIC_EnableIRQ>
}
 8000e42:	bd08      	pop	{r3, pc}

08000e44 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e44:	3801      	subs	r0, #1
 8000e46:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000e4a:	d20b      	bcs.n	8000e64 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e4c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000e50:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e52:	4a05      	ldr	r2, [pc, #20]	@ (8000e68 <HAL_SYSTICK_Config+0x24>)
 8000e54:	21f0      	movs	r1, #240	@ 0xf0
 8000e56:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e5a:	2000      	movs	r0, #0
 8000e5c:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e5e:	2207      	movs	r2, #7
 8000e60:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e62:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000e64:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000e66:	4770      	bx	lr
 8000e68:	e000ed00 	.word	0xe000ed00

08000e6c <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	2b0f      	cmp	r3, #15
 8000e70:	f200 80e9 	bhi.w	8001046 <HAL_GPIO_Init+0x1da>
{
 8000e74:	b570      	push	{r4, r5, r6, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	e065      	b.n	8000f46 <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e7a:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e7c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000e80:	2403      	movs	r4, #3
 8000e82:	fa04 f40e 	lsl.w	r4, r4, lr
 8000e86:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e8a:	68cc      	ldr	r4, [r1, #12]
 8000e8c:	fa04 f40e 	lsl.w	r4, r4, lr
 8000e90:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8000e92:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e94:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e96:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e9a:	684a      	ldr	r2, [r1, #4]
 8000e9c:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8000ea0:	409a      	lsls	r2, r3
 8000ea2:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8000ea4:	6042      	str	r2, [r0, #4]
 8000ea6:	e05c      	b.n	8000f62 <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ea8:	08dc      	lsrs	r4, r3, #3
 8000eaa:	3408      	adds	r4, #8
 8000eac:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000eb0:	f003 0507 	and.w	r5, r3, #7
 8000eb4:	00ad      	lsls	r5, r5, #2
 8000eb6:	f04f 0e0f 	mov.w	lr, #15
 8000eba:	fa0e fe05 	lsl.w	lr, lr, r5
 8000ebe:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ec2:	690a      	ldr	r2, [r1, #16]
 8000ec4:	40aa      	lsls	r2, r5
 8000ec6:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000eca:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8000ece:	e05c      	b.n	8000f8a <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ed0:	2207      	movs	r2, #7
 8000ed2:	e000      	b.n	8000ed6 <HAL_GPIO_Init+0x6a>
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	fa02 f20e 	lsl.w	r2, r2, lr
 8000eda:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000edc:	3402      	adds	r4, #2
 8000ede:	4d5a      	ldr	r5, [pc, #360]	@ (8001048 <HAL_GPIO_Init+0x1dc>)
 8000ee0:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ee4:	4a59      	ldr	r2, [pc, #356]	@ (800104c <HAL_GPIO_Init+0x1e0>)
 8000ee6:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000ee8:	ea6f 020c 	mvn.w	r2, ip
 8000eec:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ef0:	684e      	ldr	r6, [r1, #4]
 8000ef2:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 8000ef6:	d001      	beq.n	8000efc <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8000ef8:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8000efc:	4c53      	ldr	r4, [pc, #332]	@ (800104c <HAL_GPIO_Init+0x1e0>)
 8000efe:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8000f00:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8000f02:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f06:	684e      	ldr	r6, [r1, #4]
 8000f08:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8000f0c:	d001      	beq.n	8000f12 <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8000f0e:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8000f12:	4c4e      	ldr	r4, [pc, #312]	@ (800104c <HAL_GPIO_Init+0x1e0>)
 8000f14:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8000f16:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8000f18:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f1c:	684e      	ldr	r6, [r1, #4]
 8000f1e:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8000f22:	d001      	beq.n	8000f28 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8000f24:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8000f28:	4c48      	ldr	r4, [pc, #288]	@ (800104c <HAL_GPIO_Init+0x1e0>)
 8000f2a:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f2c:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8000f2e:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f30:	684d      	ldr	r5, [r1, #4]
 8000f32:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 8000f36:	d001      	beq.n	8000f3c <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8000f38:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8000f3c:	4c43      	ldr	r4, [pc, #268]	@ (800104c <HAL_GPIO_Init+0x1e0>)
 8000f3e:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f40:	3301      	adds	r3, #1
 8000f42:	2b0f      	cmp	r3, #15
 8000f44:	d87d      	bhi.n	8001042 <HAL_GPIO_Init+0x1d6>
    ioposition = 0x01U << position;
 8000f46:	2201      	movs	r2, #1
 8000f48:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f4a:	680c      	ldr	r4, [r1, #0]
 8000f4c:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8000f50:	ea32 0404 	bics.w	r4, r2, r4
 8000f54:	d1f4      	bne.n	8000f40 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f56:	684c      	ldr	r4, [r1, #4]
 8000f58:	f004 0403 	and.w	r4, r4, #3
 8000f5c:	3c01      	subs	r4, #1
 8000f5e:	2c01      	cmp	r4, #1
 8000f60:	d98b      	bls.n	8000e7a <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f62:	684a      	ldr	r2, [r1, #4]
 8000f64:	f002 0203 	and.w	r2, r2, #3
 8000f68:	2a03      	cmp	r2, #3
 8000f6a:	d009      	beq.n	8000f80 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8000f6c:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f6e:	005d      	lsls	r5, r3, #1
 8000f70:	2203      	movs	r2, #3
 8000f72:	40aa      	lsls	r2, r5
 8000f74:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f78:	688a      	ldr	r2, [r1, #8]
 8000f7a:	40aa      	lsls	r2, r5
 8000f7c:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8000f7e:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f80:	684a      	ldr	r2, [r1, #4]
 8000f82:	f002 0203 	and.w	r2, r2, #3
 8000f86:	2a02      	cmp	r2, #2
 8000f88:	d08e      	beq.n	8000ea8 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 8000f8a:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f8c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000f90:	2203      	movs	r2, #3
 8000f92:	fa02 f20e 	lsl.w	r2, r2, lr
 8000f96:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f9a:	684a      	ldr	r2, [r1, #4]
 8000f9c:	f002 0203 	and.w	r2, r2, #3
 8000fa0:	fa02 f20e 	lsl.w	r2, r2, lr
 8000fa4:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8000fa6:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fa8:	684a      	ldr	r2, [r1, #4]
 8000faa:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 8000fae:	d0c7      	beq.n	8000f40 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	9201      	str	r2, [sp, #4]
 8000fb4:	4a26      	ldr	r2, [pc, #152]	@ (8001050 <HAL_GPIO_Init+0x1e4>)
 8000fb6:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8000fb8:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8000fbc:	6454      	str	r4, [r2, #68]	@ 0x44
 8000fbe:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8000fc0:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8000fc4:	9201      	str	r2, [sp, #4]
 8000fc6:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000fc8:	089c      	lsrs	r4, r3, #2
 8000fca:	1ca5      	adds	r5, r4, #2
 8000fcc:	4a1e      	ldr	r2, [pc, #120]	@ (8001048 <HAL_GPIO_Init+0x1dc>)
 8000fce:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fd2:	f003 0e03 	and.w	lr, r3, #3
 8000fd6:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000fda:	220f      	movs	r2, #15
 8000fdc:	fa02 f20e 	lsl.w	r2, r2, lr
 8000fe0:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fe4:	4a1b      	ldr	r2, [pc, #108]	@ (8001054 <HAL_GPIO_Init+0x1e8>)
 8000fe6:	4290      	cmp	r0, r2
 8000fe8:	f43f af74 	beq.w	8000ed4 <HAL_GPIO_Init+0x68>
 8000fec:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000ff0:	4290      	cmp	r0, r2
 8000ff2:	d01a      	beq.n	800102a <HAL_GPIO_Init+0x1be>
 8000ff4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000ff8:	4290      	cmp	r0, r2
 8000ffa:	d018      	beq.n	800102e <HAL_GPIO_Init+0x1c2>
 8000ffc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001000:	4290      	cmp	r0, r2
 8001002:	d016      	beq.n	8001032 <HAL_GPIO_Init+0x1c6>
 8001004:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001008:	4290      	cmp	r0, r2
 800100a:	d014      	beq.n	8001036 <HAL_GPIO_Init+0x1ca>
 800100c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001010:	4290      	cmp	r0, r2
 8001012:	d012      	beq.n	800103a <HAL_GPIO_Init+0x1ce>
 8001014:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001018:	4290      	cmp	r0, r2
 800101a:	d010      	beq.n	800103e <HAL_GPIO_Init+0x1d2>
 800101c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001020:	4290      	cmp	r0, r2
 8001022:	f43f af55 	beq.w	8000ed0 <HAL_GPIO_Init+0x64>
 8001026:	2208      	movs	r2, #8
 8001028:	e755      	b.n	8000ed6 <HAL_GPIO_Init+0x6a>
 800102a:	2201      	movs	r2, #1
 800102c:	e753      	b.n	8000ed6 <HAL_GPIO_Init+0x6a>
 800102e:	2202      	movs	r2, #2
 8001030:	e751      	b.n	8000ed6 <HAL_GPIO_Init+0x6a>
 8001032:	2203      	movs	r2, #3
 8001034:	e74f      	b.n	8000ed6 <HAL_GPIO_Init+0x6a>
 8001036:	2204      	movs	r2, #4
 8001038:	e74d      	b.n	8000ed6 <HAL_GPIO_Init+0x6a>
 800103a:	2205      	movs	r2, #5
 800103c:	e74b      	b.n	8000ed6 <HAL_GPIO_Init+0x6a>
 800103e:	2206      	movs	r2, #6
 8001040:	e749      	b.n	8000ed6 <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 8001042:	b002      	add	sp, #8
 8001044:	bd70      	pop	{r4, r5, r6, pc}
 8001046:	4770      	bx	lr
 8001048:	40013800 	.word	0x40013800
 800104c:	40013c00 	.word	0x40013c00
 8001050:	40023800 	.word	0x40023800
 8001054:	40020000 	.word	0x40020000

08001058 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001058:	b10a      	cbz	r2, 800105e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 800105a:	6181      	str	r1, [r0, #24]
 800105c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800105e:	0409      	lsls	r1, r1, #16
 8001060:	6181      	str	r1, [r0, #24]
  }
}
 8001062:	4770      	bx	lr

08001064 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001064:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001066:	ea01 0203 	and.w	r2, r1, r3
 800106a:	ea21 0103 	bic.w	r1, r1, r3
 800106e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8001072:	6181      	str	r1, [r0, #24]
}
 8001074:	4770      	bx	lr
	...

08001078 <HAL_I2C_Init>:
{
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001078:	2800      	cmp	r0, #0
 800107a:	f000 80cc 	beq.w	8001216 <HAL_I2C_Init+0x19e>
{
 800107e:	b570      	push	{r4, r5, r6, lr}
 8001080:	4604      	mov	r4, r0
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001082:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8001086:	2b00      	cmp	r3, #0
 8001088:	d077      	beq.n	800117a <HAL_I2C_Init+0x102>
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800108a:	2324      	movs	r3, #36	@ 0x24
 800108c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001090:	6822      	ldr	r2, [r4, #0]
 8001092:	6813      	ldr	r3, [r2, #0]
 8001094:	f023 0301 	bic.w	r3, r3, #1
 8001098:	6013      	str	r3, [r2, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800109a:	6822      	ldr	r2, [r4, #0]
 800109c:	6813      	ldr	r3, [r2, #0]
 800109e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80010a2:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80010a4:	6822      	ldr	r2, [r4, #0]
 80010a6:	6813      	ldr	r3, [r2, #0]
 80010a8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80010ac:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80010ae:	f001 fcff 	bl	8002ab0 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80010b2:	6862      	ldr	r2, [r4, #4]
 80010b4:	4b5a      	ldr	r3, [pc, #360]	@ (8001220 <HAL_I2C_Init+0x1a8>)
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d864      	bhi.n	8001184 <HAL_I2C_Init+0x10c>
 80010ba:	4b5a      	ldr	r3, [pc, #360]	@ (8001224 <HAL_I2C_Init+0x1ac>)
 80010bc:	4298      	cmp	r0, r3
 80010be:	bf8c      	ite	hi
 80010c0:	2300      	movhi	r3, #0
 80010c2:	2301      	movls	r3, #1
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	f040 80a8 	bne.w	800121a <HAL_I2C_Init+0x1a2>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80010ca:	4957      	ldr	r1, [pc, #348]	@ (8001228 <HAL_I2C_Init+0x1b0>)
 80010cc:	fba1 3100 	umull	r3, r1, r1, r0
 80010d0:	0c8b      	lsrs	r3, r1, #18

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80010d2:	6825      	ldr	r5, [r4, #0]
 80010d4:	686a      	ldr	r2, [r5, #4]
 80010d6:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80010da:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 80010de:	606a      	str	r2, [r5, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80010e0:	6821      	ldr	r1, [r4, #0]
 80010e2:	6a0a      	ldr	r2, [r1, #32]
 80010e4:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80010e8:	6866      	ldr	r6, [r4, #4]
 80010ea:	4d4d      	ldr	r5, [pc, #308]	@ (8001220 <HAL_I2C_Init+0x1a8>)
 80010ec:	42ae      	cmp	r6, r5
 80010ee:	d84f      	bhi.n	8001190 <HAL_I2C_Init+0x118>
 80010f0:	3301      	adds	r3, #1
 80010f2:	4313      	orrs	r3, r2
 80010f4:	620b      	str	r3, [r1, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80010f6:	6821      	ldr	r1, [r4, #0]
 80010f8:	69ca      	ldr	r2, [r1, #28]
 80010fa:	f422 424f 	bic.w	r2, r2, #52992	@ 0xcf00
 80010fe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001102:	6865      	ldr	r5, [r4, #4]
 8001104:	4b46      	ldr	r3, [pc, #280]	@ (8001220 <HAL_I2C_Init+0x1a8>)
 8001106:	429d      	cmp	r5, r3
 8001108:	d84c      	bhi.n	80011a4 <HAL_I2C_Init+0x12c>
 800110a:	1e43      	subs	r3, r0, #1
 800110c:	006d      	lsls	r5, r5, #1
 800110e:	fbb3 f3f5 	udiv	r3, r3, r5
 8001112:	3301      	adds	r3, #1
 8001114:	f640 70fc 	movw	r0, #4092	@ 0xffc
 8001118:	4203      	tst	r3, r0
 800111a:	d078      	beq.n	800120e <HAL_I2C_Init+0x196>
 800111c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001120:	431a      	orrs	r2, r3
 8001122:	61ca      	str	r2, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001124:	6821      	ldr	r1, [r4, #0]
 8001126:	680b      	ldr	r3, [r1, #0]
 8001128:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800112c:	69e2      	ldr	r2, [r4, #28]
 800112e:	6a20      	ldr	r0, [r4, #32]
 8001130:	4302      	orrs	r2, r0
 8001132:	4313      	orrs	r3, r2
 8001134:	600b      	str	r3, [r1, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001136:	6821      	ldr	r1, [r4, #0]
 8001138:	688b      	ldr	r3, [r1, #8]
 800113a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800113e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001142:	6922      	ldr	r2, [r4, #16]
 8001144:	68e0      	ldr	r0, [r4, #12]
 8001146:	4302      	orrs	r2, r0
 8001148:	4313      	orrs	r3, r2
 800114a:	608b      	str	r3, [r1, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800114c:	6821      	ldr	r1, [r4, #0]
 800114e:	68cb      	ldr	r3, [r1, #12]
 8001150:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001154:	6962      	ldr	r2, [r4, #20]
 8001156:	69a0      	ldr	r0, [r4, #24]
 8001158:	4302      	orrs	r2, r0
 800115a:	4313      	orrs	r3, r2
 800115c:	60cb      	str	r3, [r1, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800115e:	6822      	ldr	r2, [r4, #0]
 8001160:	6813      	ldr	r3, [r2, #0]
 8001162:	f043 0301 	orr.w	r3, r3, #1
 8001166:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001168:	2000      	movs	r0, #0
 800116a:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800116c:	2320      	movs	r3, #32
 800116e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001172:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001174:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e

  return HAL_OK;
}
 8001178:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800117a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 800117e:	f7ff fc15 	bl	80009ac <HAL_I2C_MspInit>
 8001182:	e782      	b.n	800108a <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001184:	4b29      	ldr	r3, [pc, #164]	@ (800122c <HAL_I2C_Init+0x1b4>)
 8001186:	4298      	cmp	r0, r3
 8001188:	bf8c      	ite	hi
 800118a:	2300      	movhi	r3, #0
 800118c:	2301      	movls	r3, #1
 800118e:	e799      	b.n	80010c4 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001190:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 8001194:	fb05 f303 	mul.w	r3, r5, r3
 8001198:	4d25      	ldr	r5, [pc, #148]	@ (8001230 <HAL_I2C_Init+0x1b8>)
 800119a:	fba5 5303 	umull	r5, r3, r5, r3
 800119e:	099b      	lsrs	r3, r3, #6
 80011a0:	3301      	adds	r3, #1
 80011a2:	e7a6      	b.n	80010f2 <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80011a4:	68a6      	ldr	r6, [r4, #8]
 80011a6:	b9be      	cbnz	r6, 80011d8 <HAL_I2C_Init+0x160>
 80011a8:	1e43      	subs	r3, r0, #1
 80011aa:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 80011ae:	fbb3 f3fc 	udiv	r3, r3, ip
 80011b2:	3301      	adds	r3, #1
 80011b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011b8:	fab3 f383 	clz	r3, r3
 80011bc:	095b      	lsrs	r3, r3, #5
 80011be:	bb43      	cbnz	r3, 8001212 <HAL_I2C_Init+0x19a>
 80011c0:	b9c6      	cbnz	r6, 80011f4 <HAL_I2C_Init+0x17c>
 80011c2:	1e43      	subs	r3, r0, #1
 80011c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80011c8:	fbb3 f3f5 	udiv	r3, r3, r5
 80011cc:	3301      	adds	r3, #1
 80011ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80011d6:	e7a3      	b.n	8001120 <HAL_I2C_Init+0xa8>
 80011d8:	1e43      	subs	r3, r0, #1
 80011da:	eb05 0c85 	add.w	ip, r5, r5, lsl #2
 80011de:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 80011e2:	fbb3 f3fc 	udiv	r3, r3, ip
 80011e6:	3301      	adds	r3, #1
 80011e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011ec:	fab3 f383 	clz	r3, r3
 80011f0:	095b      	lsrs	r3, r3, #5
 80011f2:	e7e4      	b.n	80011be <HAL_I2C_Init+0x146>
 80011f4:	1e43      	subs	r3, r0, #1
 80011f6:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80011fa:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80011fe:	fbb3 f3f5 	udiv	r3, r3, r5
 8001202:	3301      	adds	r3, #1
 8001204:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001208:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800120c:	e788      	b.n	8001120 <HAL_I2C_Init+0xa8>
 800120e:	2304      	movs	r3, #4
 8001210:	e786      	b.n	8001120 <HAL_I2C_Init+0xa8>
 8001212:	2301      	movs	r3, #1
 8001214:	e784      	b.n	8001120 <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 8001216:	2001      	movs	r0, #1
}
 8001218:	4770      	bx	lr
    return HAL_ERROR;
 800121a:	2001      	movs	r0, #1
 800121c:	e7ac      	b.n	8001178 <HAL_I2C_Init+0x100>
 800121e:	bf00      	nop
 8001220:	000186a0 	.word	0x000186a0
 8001224:	001e847f 	.word	0x001e847f
 8001228:	431bde83 	.word	0x431bde83
 800122c:	003d08ff 	.word	0x003d08ff
 8001230:	10624dd3 	.word	0x10624dd3

08001234 <HAL_I2S_Init>:
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001234:	2800      	cmp	r0, #0
 8001236:	f000 80be 	beq.w	80013b6 <HAL_I2S_Init+0x182>
{
 800123a:	b538      	push	{r3, r4, r5, lr}
 800123c:	4604      	mov	r4, r0
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800123e:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8001242:	2b00      	cmp	r3, #0
 8001244:	d051      	beq.n	80012ea <HAL_I2S_Init+0xb6>
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001246:	2202      	movs	r2, #2
 8001248:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800124c:	6821      	ldr	r1, [r4, #0]
 800124e:	69cb      	ldr	r3, [r1, #28]
 8001250:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8001254:	f023 030f 	bic.w	r3, r3, #15
 8001258:	61cb      	str	r3, [r1, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800125a:	6823      	ldr	r3, [r4, #0]
 800125c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800125e:	6963      	ldr	r3, [r4, #20]
 8001260:	4293      	cmp	r3, r2
 8001262:	d069      	beq.n	8001338 <HAL_I2S_Init+0x104>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001264:	68e3      	ldr	r3, [r4, #12]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d146      	bne.n	80012f8 <HAL_I2S_Init+0xc4>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800126a:	2510      	movs	r5, #16
      /* Packet length is 32 bits */
      packetlength = 32U;
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800126c:	68a3      	ldr	r3, [r4, #8]
 800126e:	2b20      	cmp	r3, #32
 8001270:	d800      	bhi.n	8001274 <HAL_I2S_Init+0x40>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001272:	006d      	lsls	r5, r5, #1
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001274:	2001      	movs	r0, #1
 8001276:	f001 fcd5 	bl	8002c24 <HAL_RCCEx_GetPeriphCLKFreq>
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800127a:	6923      	ldr	r3, [r4, #16]
 800127c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001280:	d03c      	beq.n	80012fc <HAL_I2S_Init+0xc8>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001282:	fbb0 f0f5 	udiv	r0, r0, r5
 8001286:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800128a:	0043      	lsls	r3, r0, #1
 800128c:	6962      	ldr	r2, [r4, #20]
 800128e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001292:	3305      	adds	r3, #5
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001294:	4a49      	ldr	r2, [pc, #292]	@ (80013bc <HAL_I2S_Init+0x188>)
 8001296:	fba2 2303 	umull	r2, r3, r2, r3

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800129a:	f3c3 02c0 	ubfx	r2, r3, #3, #1

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800129e:	ebc2 03d3 	rsb	r3, r2, r3, lsr #3
 80012a2:	085b      	lsrs	r3, r3, #1

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80012a4:	0211      	lsls	r1, r2, #8
    i2sdiv = 2U;
    i2sodd = 0U;
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80012a6:	1e9a      	subs	r2, r3, #2
 80012a8:	2afd      	cmp	r2, #253	@ 0xfd
 80012aa:	d83f      	bhi.n	800132c <HAL_I2S_Init+0xf8>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80012ac:	6922      	ldr	r2, [r4, #16]
 80012ae:	430a      	orrs	r2, r1
 80012b0:	6821      	ldr	r1, [r4, #0]
 80012b2:	431a      	orrs	r2, r3
 80012b4:	620a      	str	r2, [r1, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80012b6:	6821      	ldr	r1, [r4, #0]
 80012b8:	69cb      	ldr	r3, [r1, #28]
 80012ba:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80012be:	f023 030f 	bic.w	r3, r3, #15
 80012c2:	6862      	ldr	r2, [r4, #4]
 80012c4:	68a0      	ldr	r0, [r4, #8]
 80012c6:	4302      	orrs	r2, r0
 80012c8:	68e0      	ldr	r0, [r4, #12]
 80012ca:	4302      	orrs	r2, r0
 80012cc:	69a0      	ldr	r0, [r4, #24]
 80012ce:	4302      	orrs	r2, r0
 80012d0:	4313      	orrs	r3, r2
 80012d2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80012d6:	61cb      	str	r3, [r1, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80012d8:	6a23      	ldr	r3, [r4, #32]
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d02e      	beq.n	800133c <HAL_I2S_Init+0x108>
    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80012de:	2000      	movs	r0, #0
 80012e0:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80012e2:	2301      	movs	r3, #1
 80012e4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41

  return HAL_OK;
}
 80012e8:	bd38      	pop	{r3, r4, r5, pc}
    hi2s->Lock = HAL_UNLOCKED;
 80012ea:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80012ee:	4b34      	ldr	r3, [pc, #208]	@ (80013c0 <HAL_I2S_Init+0x18c>)
 80012f0:	6343      	str	r3, [r0, #52]	@ 0x34
    HAL_I2S_MspInit(hi2s);
 80012f2:	f7ff fb93 	bl	8000a1c <HAL_I2S_MspInit>
 80012f6:	e7a6      	b.n	8001246 <HAL_I2S_Init+0x12>
      packetlength = 32U;
 80012f8:	2520      	movs	r5, #32
 80012fa:	e7b7      	b.n	800126c <HAL_I2S_Init+0x38>
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80012fc:	68e3      	ldr	r3, [r4, #12]
 80012fe:	b153      	cbz	r3, 8001316 <HAL_I2S_Init+0xe2>
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001300:	00ad      	lsls	r5, r5, #2
 8001302:	fbb0 f0f5 	udiv	r0, r0, r5
 8001306:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800130a:	0043      	lsls	r3, r0, #1
 800130c:	6962      	ldr	r2, [r4, #20]
 800130e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001312:	3305      	adds	r3, #5
 8001314:	e7be      	b.n	8001294 <HAL_I2S_Init+0x60>
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001316:	00ed      	lsls	r5, r5, #3
 8001318:	fbb0 f0f5 	udiv	r0, r0, r5
 800131c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001320:	0043      	lsls	r3, r0, #1
 8001322:	6962      	ldr	r2, [r4, #20]
 8001324:	fbb3 f3f2 	udiv	r3, r3, r2
 8001328:	3305      	adds	r3, #5
 800132a:	e7b3      	b.n	8001294 <HAL_I2S_Init+0x60>
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800132c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800132e:	f043 0310 	orr.w	r3, r3, #16
 8001332:	6463      	str	r3, [r4, #68]	@ 0x44
    return  HAL_ERROR;
 8001334:	2001      	movs	r0, #1
 8001336:	e7d7      	b.n	80012e8 <HAL_I2S_Init+0xb4>
    i2sodd = 0U;
 8001338:	2100      	movs	r1, #0
 800133a:	e7b7      	b.n	80012ac <HAL_I2S_Init+0x78>
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800133c:	4b21      	ldr	r3, [pc, #132]	@ (80013c4 <HAL_I2S_Init+0x190>)
 800133e:	6363      	str	r3, [r4, #52]	@ 0x34
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001340:	6822      	ldr	r2, [r4, #0]
 8001342:	4b21      	ldr	r3, [pc, #132]	@ (80013c8 <HAL_I2S_Init+0x194>)
 8001344:	429a      	cmp	r2, r3
 8001346:	d01f      	beq.n	8001388 <HAL_I2S_Init+0x154>
 8001348:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 800134c:	69d3      	ldr	r3, [r2, #28]
 800134e:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8001352:	f023 030f 	bic.w	r3, r3, #15
 8001356:	61d3      	str	r3, [r2, #28]
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001358:	6822      	ldr	r2, [r4, #0]
 800135a:	4b1b      	ldr	r3, [pc, #108]	@ (80013c8 <HAL_I2S_Init+0x194>)
 800135c:	429a      	cmp	r2, r3
 800135e:	d015      	beq.n	800138c <HAL_I2S_Init+0x158>
 8001360:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8001364:	2302      	movs	r3, #2
 8001366:	6213      	str	r3, [r2, #32]
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001368:	6822      	ldr	r2, [r4, #0]
 800136a:	4b17      	ldr	r3, [pc, #92]	@ (80013c8 <HAL_I2S_Init+0x194>)
 800136c:	429a      	cmp	r2, r3
 800136e:	d00f      	beq.n	8001390 <HAL_I2S_Init+0x15c>
 8001370:	f04f 2540 	mov.w	r5, #1073758208	@ 0x40004000
 8001374:	69eb      	ldr	r3, [r5, #28]
 8001376:	b29b      	uxth	r3, r3
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001378:	6862      	ldr	r2, [r4, #4]
 800137a:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 800137e:	d009      	beq.n	8001394 <HAL_I2S_Init+0x160>
 8001380:	b9ba      	cbnz	r2, 80013b2 <HAL_I2S_Init+0x17e>
      tmp = I2S_MODE_SLAVE_RX;
 8001382:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001386:	e007      	b.n	8001398 <HAL_I2S_Init+0x164>
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001388:	4a10      	ldr	r2, [pc, #64]	@ (80013cc <HAL_I2S_Init+0x198>)
 800138a:	e7df      	b.n	800134c <HAL_I2S_Init+0x118>
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800138c:	4a0f      	ldr	r2, [pc, #60]	@ (80013cc <HAL_I2S_Init+0x198>)
 800138e:	e7e9      	b.n	8001364 <HAL_I2S_Init+0x130>
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001390:	4d0e      	ldr	r5, [pc, #56]	@ (80013cc <HAL_I2S_Init+0x198>)
 8001392:	e7ef      	b.n	8001374 <HAL_I2S_Init+0x140>
      tmp = I2S_MODE_SLAVE_RX;
 8001394:	f44f 7080 	mov.w	r0, #256	@ 0x100
                         (uint16_t)hi2s->Init.Standard   | \
 8001398:	f8b4 c008 	ldrh.w	ip, [r4, #8]
                         (uint16_t)hi2s->Init.DataFormat | \
 800139c:	89a1      	ldrh	r1, [r4, #12]
                         (uint16_t)hi2s->Init.CPOL);
 800139e:	8b22      	ldrh	r2, [r4, #24]
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80013a0:	ea40 000c 	orr.w	r0, r0, ip
 80013a4:	4301      	orrs	r1, r0
 80013a6:	430a      	orrs	r2, r1
 80013a8:	4313      	orrs	r3, r2
 80013aa:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80013ae:	61eb      	str	r3, [r5, #28]
 80013b0:	e795      	b.n	80012de <HAL_I2S_Init+0xaa>
      tmp = I2S_MODE_SLAVE_TX;
 80013b2:	2000      	movs	r0, #0
 80013b4:	e7f0      	b.n	8001398 <HAL_I2S_Init+0x164>
    return HAL_ERROR;
 80013b6:	2001      	movs	r0, #1
}
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	cccccccd 	.word	0xcccccccd
 80013c0:	08001447 	.word	0x08001447
 80013c4:	08001659 	.word	0x08001659
 80013c8:	40003800 	.word	0x40003800
 80013cc:	40003400 	.word	0x40003400

080013d0 <HAL_I2S_TxCpltCallback>:
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80013d0:	4770      	bx	lr

080013d2 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80013d2:	b508      	push	{r3, lr}
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80013d4:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 80013d6:	6803      	ldr	r3, [r0, #0]
 80013d8:	8812      	ldrh	r2, [r2, #0]
 80013da:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80013dc:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80013de:	3302      	adds	r3, #2
 80013e0:	6243      	str	r3, [r0, #36]	@ 0x24
  hi2s->TxXferCount--;
 80013e2:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 80013e4:	b29b      	uxth	r3, r3
 80013e6:	3b01      	subs	r3, #1
 80013e8:	b29b      	uxth	r3, r3
 80013ea:	8543      	strh	r3, [r0, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80013ec:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	b103      	cbz	r3, 80013f4 <I2S_Transmit_IT+0x22>
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80013f2:	bd08      	pop	{r3, pc}
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80013f4:	6802      	ldr	r2, [r0, #0]
 80013f6:	6853      	ldr	r3, [r2, #4]
 80013f8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80013fc:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 80013fe:	2301      	movs	r3, #1
 8001400:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    HAL_I2S_TxCpltCallback(hi2s);
 8001404:	f7ff ffe4 	bl	80013d0 <HAL_I2S_TxCpltCallback>
}
 8001408:	e7f3      	b.n	80013f2 <I2S_Transmit_IT+0x20>

0800140a <HAL_I2S_RxCpltCallback>:
}
 800140a:	4770      	bx	lr

0800140c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800140c:	b508      	push	{r3, lr}
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800140e:	6803      	ldr	r3, [r0, #0]
 8001410:	68da      	ldr	r2, [r3, #12]
 8001412:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001414:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001416:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001418:	3302      	adds	r3, #2
 800141a:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hi2s->RxXferCount--;
 800141c:	8e43      	ldrh	r3, [r0, #50]	@ 0x32
 800141e:	b29b      	uxth	r3, r3
 8001420:	3b01      	subs	r3, #1
 8001422:	b29b      	uxth	r3, r3
 8001424:	8643      	strh	r3, [r0, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8001426:	8e43      	ldrh	r3, [r0, #50]	@ 0x32
 8001428:	b29b      	uxth	r3, r3
 800142a:	b103      	cbz	r3, 800142e <I2S_Receive_IT+0x22>
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800142c:	bd08      	pop	{r3, pc}
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800142e:	6802      	ldr	r2, [r0, #0]
 8001430:	6853      	ldr	r3, [r2, #4]
 8001432:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 8001436:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8001438:	2301      	movs	r3, #1
 800143a:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    HAL_I2S_RxCpltCallback(hi2s);
 800143e:	f7ff ffe4 	bl	800140a <HAL_I2S_RxCpltCallback>
}
 8001442:	e7f3      	b.n	800142c <I2S_Receive_IT+0x20>

08001444 <HAL_I2S_ErrorCallback>:
}
 8001444:	4770      	bx	lr

08001446 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001446:	b510      	push	{r4, lr}
 8001448:	b084      	sub	sp, #16
 800144a:	4604      	mov	r4, r0
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800144c:	6802      	ldr	r2, [r0, #0]
 800144e:	6893      	ldr	r3, [r2, #8]
 8001450:	9303      	str	r3, [sp, #12]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001452:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8001456:	b2db      	uxtb	r3, r3
 8001458:	2b04      	cmp	r3, #4
 800145a:	d006      	beq.n	800146a <I2S_IRQHandler+0x24>
      HAL_I2S_ErrorCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800145c:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8001460:	b2db      	uxtb	r3, r3
 8001462:	2b03      	cmp	r3, #3
 8001464:	d02c      	beq.n	80014c0 <I2S_IRQHandler+0x7a>
#else
      HAL_I2S_ErrorCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001466:	b004      	add	sp, #16
 8001468:	bd10      	pop	{r4, pc}
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800146a:	9b03      	ldr	r3, [sp, #12]
 800146c:	f013 0f01 	tst.w	r3, #1
 8001470:	d003      	beq.n	800147a <I2S_IRQHandler+0x34>
 8001472:	6853      	ldr	r3, [r2, #4]
 8001474:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8001478:	d11f      	bne.n	80014ba <I2S_IRQHandler+0x74>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800147a:	9b03      	ldr	r3, [sp, #12]
 800147c:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8001480:	d0ec      	beq.n	800145c <I2S_IRQHandler+0x16>
 8001482:	6823      	ldr	r3, [r4, #0]
 8001484:	685a      	ldr	r2, [r3, #4]
 8001486:	f012 0f20 	tst.w	r2, #32
 800148a:	d0e7      	beq.n	800145c <I2S_IRQHandler+0x16>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800148c:	685a      	ldr	r2, [r3, #4]
 800148e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001492:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001494:	2300      	movs	r3, #0
 8001496:	9301      	str	r3, [sp, #4]
 8001498:	6823      	ldr	r3, [r4, #0]
 800149a:	68da      	ldr	r2, [r3, #12]
 800149c:	9201      	str	r2, [sp, #4]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	9301      	str	r3, [sp, #4]
 80014a2:	9b01      	ldr	r3, [sp, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 80014a4:	2301      	movs	r3, #1
 80014a6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80014aa:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80014ac:	f043 0302 	orr.w	r3, r3, #2
 80014b0:	6463      	str	r3, [r4, #68]	@ 0x44
      HAL_I2S_ErrorCallback(hi2s);
 80014b2:	4620      	mov	r0, r4
 80014b4:	f7ff ffc6 	bl	8001444 <HAL_I2S_ErrorCallback>
 80014b8:	e7d0      	b.n	800145c <I2S_IRQHandler+0x16>
      I2S_Receive_IT(hi2s);
 80014ba:	f7ff ffa7 	bl	800140c <I2S_Receive_IT>
 80014be:	e7dc      	b.n	800147a <I2S_IRQHandler+0x34>
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80014c0:	9b03      	ldr	r3, [sp, #12]
 80014c2:	f013 0f02 	tst.w	r3, #2
 80014c6:	d004      	beq.n	80014d2 <I2S_IRQHandler+0x8c>
 80014c8:	6823      	ldr	r3, [r4, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80014d0:	d11d      	bne.n	800150e <I2S_IRQHandler+0xc8>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80014d2:	9b03      	ldr	r3, [sp, #12]
 80014d4:	f013 0f08 	tst.w	r3, #8
 80014d8:	d0c5      	beq.n	8001466 <I2S_IRQHandler+0x20>
 80014da:	6823      	ldr	r3, [r4, #0]
 80014dc:	685a      	ldr	r2, [r3, #4]
 80014de:	f012 0f20 	tst.w	r2, #32
 80014e2:	d0c0      	beq.n	8001466 <I2S_IRQHandler+0x20>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80014e4:	685a      	ldr	r2, [r3, #4]
 80014e6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80014ea:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80014ec:	2300      	movs	r3, #0
 80014ee:	9302      	str	r3, [sp, #8]
 80014f0:	6823      	ldr	r3, [r4, #0]
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	9302      	str	r3, [sp, #8]
 80014f6:	9b02      	ldr	r3, [sp, #8]
      hi2s->State = HAL_I2S_STATE_READY;
 80014f8:	2301      	movs	r3, #1
 80014fa:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80014fe:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8001500:	f043 0304 	orr.w	r3, r3, #4
 8001504:	6463      	str	r3, [r4, #68]	@ 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001506:	4620      	mov	r0, r4
 8001508:	f7ff ff9c 	bl	8001444 <HAL_I2S_ErrorCallback>
}
 800150c:	e7ab      	b.n	8001466 <I2S_IRQHandler+0x20>
      I2S_Transmit_IT(hi2s);
 800150e:	4620      	mov	r0, r4
 8001510:	f7ff ff5f 	bl	80013d2 <I2S_Transmit_IT>
 8001514:	e7dd      	b.n	80014d2 <I2S_IRQHandler+0x8c>

08001516 <HAL_I2SEx_TxRxCpltCallback>:
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8001516:	4770      	bx	lr

08001518 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8001518:	b508      	push	{r3, lr}
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800151a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800151c:	1c9a      	adds	r2, r3, #2
 800151e:	6242      	str	r2, [r0, #36]	@ 0x24
 8001520:	6802      	ldr	r2, [r0, #0]
 8001522:	881b      	ldrh	r3, [r3, #0]
 8001524:	60d3      	str	r3, [r2, #12]
  hi2s->TxXferCount--;
 8001526:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8001528:	b29b      	uxth	r3, r3
 800152a:	3b01      	subs	r3, #1
 800152c:	b29b      	uxth	r3, r3
 800152e:	8543      	strh	r3, [r0, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8001530:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8001532:	b29b      	uxth	r3, r3
 8001534:	b93b      	cbnz	r3, 8001546 <I2SEx_TxISR_I2S+0x2e>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001536:	6802      	ldr	r2, [r0, #0]
 8001538:	6853      	ldr	r3, [r2, #4]
 800153a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800153e:	6053      	str	r3, [r2, #4]

    if (hi2s->RxXferCount == 0U)
 8001540:	8e43      	ldrh	r3, [r0, #50]	@ 0x32
 8001542:	b29b      	uxth	r3, r3
 8001544:	b103      	cbz	r3, 8001548 <I2SEx_TxISR_I2S+0x30>
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001546:	bd08      	pop	{r3, pc}
      hi2s->State = HAL_I2S_STATE_READY;
 8001548:	2301      	movs	r3, #1
 800154a:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800154e:	f7ff ffe2 	bl	8001516 <HAL_I2SEx_TxRxCpltCallback>
}
 8001552:	e7f8      	b.n	8001546 <I2SEx_TxISR_I2S+0x2e>

08001554 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8001554:	b508      	push	{r3, lr}
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8001556:	6802      	ldr	r2, [r0, #0]
 8001558:	4b15      	ldr	r3, [pc, #84]	@ (80015b0 <I2SEx_RxISR_I2SExt+0x5c>)
 800155a:	429a      	cmp	r2, r3
 800155c:	d01c      	beq.n	8001598 <I2SEx_RxISR_I2SExt+0x44>
 800155e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001562:	68da      	ldr	r2, [r3, #12]
 8001564:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001566:	1c99      	adds	r1, r3, #2
 8001568:	62c1      	str	r1, [r0, #44]	@ 0x2c
 800156a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800156c:	8e43      	ldrh	r3, [r0, #50]	@ 0x32
 800156e:	b29b      	uxth	r3, r3
 8001570:	3b01      	subs	r3, #1
 8001572:	b29b      	uxth	r3, r3
 8001574:	8643      	strh	r3, [r0, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8001576:	8e43      	ldrh	r3, [r0, #50]	@ 0x32
 8001578:	b29b      	uxth	r3, r3
 800157a:	b963      	cbnz	r3, 8001596 <I2SEx_RxISR_I2SExt+0x42>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800157c:	6802      	ldr	r2, [r0, #0]
 800157e:	4b0c      	ldr	r3, [pc, #48]	@ (80015b0 <I2SEx_RxISR_I2SExt+0x5c>)
 8001580:	429a      	cmp	r2, r3
 8001582:	d00c      	beq.n	800159e <I2SEx_RxISR_I2SExt+0x4a>
 8001584:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8001588:	6853      	ldr	r3, [r2, #4]
 800158a:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 800158e:	6053      	str	r3, [r2, #4]

    if (hi2s->TxXferCount == 0U)
 8001590:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8001592:	b29b      	uxth	r3, r3
 8001594:	b12b      	cbz	r3, 80015a2 <I2SEx_RxISR_I2SExt+0x4e>
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001596:	bd08      	pop	{r3, pc}
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8001598:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800159c:	e7e1      	b.n	8001562 <I2SEx_RxISR_I2SExt+0xe>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800159e:	4a05      	ldr	r2, [pc, #20]	@ (80015b4 <I2SEx_RxISR_I2SExt+0x60>)
 80015a0:	e7f2      	b.n	8001588 <I2SEx_RxISR_I2SExt+0x34>
      hi2s->State = HAL_I2S_STATE_READY;
 80015a2:	2301      	movs	r3, #1
 80015a4:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80015a8:	f7ff ffb5 	bl	8001516 <HAL_I2SEx_TxRxCpltCallback>
}
 80015ac:	e7f3      	b.n	8001596 <I2SEx_RxISR_I2SExt+0x42>
 80015ae:	bf00      	nop
 80015b0:	40003800 	.word	0x40003800
 80015b4:	40003400 	.word	0x40003400

080015b8 <I2SEx_TxISR_I2SExt>:
{
 80015b8:	b508      	push	{r3, lr}
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80015ba:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80015bc:	1c9a      	adds	r2, r3, #2
 80015be:	6242      	str	r2, [r0, #36]	@ 0x24
 80015c0:	881a      	ldrh	r2, [r3, #0]
 80015c2:	6801      	ldr	r1, [r0, #0]
 80015c4:	4b13      	ldr	r3, [pc, #76]	@ (8001614 <I2SEx_TxISR_I2SExt+0x5c>)
 80015c6:	4299      	cmp	r1, r3
 80015c8:	d018      	beq.n	80015fc <I2SEx_TxISR_I2SExt+0x44>
 80015ca:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80015ce:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80015d0:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	3b01      	subs	r3, #1
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	8543      	strh	r3, [r0, #42]	@ 0x2a
  if (hi2s->TxXferCount == 0U)
 80015da:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 80015dc:	b29b      	uxth	r3, r3
 80015de:	b963      	cbnz	r3, 80015fa <I2SEx_TxISR_I2SExt+0x42>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80015e0:	6802      	ldr	r2, [r0, #0]
 80015e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001614 <I2SEx_TxISR_I2SExt+0x5c>)
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d00c      	beq.n	8001602 <I2SEx_TxISR_I2SExt+0x4a>
 80015e8:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80015ec:	6853      	ldr	r3, [r2, #4]
 80015ee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80015f2:	6053      	str	r3, [r2, #4]
    if (hi2s->RxXferCount == 0U)
 80015f4:	8e43      	ldrh	r3, [r0, #50]	@ 0x32
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	b12b      	cbz	r3, 8001606 <I2SEx_TxISR_I2SExt+0x4e>
}
 80015fa:	bd08      	pop	{r3, pc}
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80015fc:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8001600:	e7e5      	b.n	80015ce <I2SEx_TxISR_I2SExt+0x16>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001602:	4a05      	ldr	r2, [pc, #20]	@ (8001618 <I2SEx_TxISR_I2SExt+0x60>)
 8001604:	e7f2      	b.n	80015ec <I2SEx_TxISR_I2SExt+0x34>
      hi2s->State = HAL_I2S_STATE_READY;
 8001606:	2301      	movs	r3, #1
 8001608:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800160c:	f7ff ff83 	bl	8001516 <HAL_I2SEx_TxRxCpltCallback>
}
 8001610:	e7f3      	b.n	80015fa <I2SEx_TxISR_I2SExt+0x42>
 8001612:	bf00      	nop
 8001614:	40003800 	.word	0x40003800
 8001618:	40003400 	.word	0x40003400

0800161c <I2SEx_RxISR_I2S>:
{
 800161c:	b508      	push	{r3, lr}
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800161e:	6803      	ldr	r3, [r0, #0]
 8001620:	68da      	ldr	r2, [r3, #12]
 8001622:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001624:	1c99      	adds	r1, r3, #2
 8001626:	62c1      	str	r1, [r0, #44]	@ 0x2c
 8001628:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800162a:	8e43      	ldrh	r3, [r0, #50]	@ 0x32
 800162c:	b29b      	uxth	r3, r3
 800162e:	3b01      	subs	r3, #1
 8001630:	b29b      	uxth	r3, r3
 8001632:	8643      	strh	r3, [r0, #50]	@ 0x32
  if (hi2s->RxXferCount == 0U)
 8001634:	8e43      	ldrh	r3, [r0, #50]	@ 0x32
 8001636:	b29b      	uxth	r3, r3
 8001638:	b93b      	cbnz	r3, 800164a <I2SEx_RxISR_I2S+0x2e>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800163a:	6802      	ldr	r2, [r0, #0]
 800163c:	6853      	ldr	r3, [r2, #4]
 800163e:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 8001642:	6053      	str	r3, [r2, #4]
    if (hi2s->TxXferCount == 0U)
 8001644:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8001646:	b29b      	uxth	r3, r3
 8001648:	b103      	cbz	r3, 800164c <I2SEx_RxISR_I2S+0x30>
}
 800164a:	bd08      	pop	{r3, pc}
      hi2s->State = HAL_I2S_STATE_READY;
 800164c:	2301      	movs	r3, #1
 800164e:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001652:	f7ff ff60 	bl	8001516 <HAL_I2SEx_TxRxCpltCallback>
}
 8001656:	e7f8      	b.n	800164a <I2SEx_RxISR_I2S+0x2e>

08001658 <HAL_I2SEx_FullDuplex_IRQHandler>:
{
 8001658:	b510      	push	{r4, lr}
 800165a:	b086      	sub	sp, #24
 800165c:	4604      	mov	r4, r0
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800165e:	6803      	ldr	r3, [r0, #0]
 8001660:	689a      	ldr	r2, [r3, #8]
 8001662:	9205      	str	r2, [sp, #20]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001664:	4a70      	ldr	r2, [pc, #448]	@ (8001828 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d06f      	beq.n	800174a <HAL_I2SEx_FullDuplex_IRQHandler+0xf2>
 800166a:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 800166e:	6891      	ldr	r1, [r2, #8]
 8001670:	9104      	str	r1, [sp, #16]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	9303      	str	r3, [sp, #12]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001676:	6853      	ldr	r3, [r2, #4]
 8001678:	9302      	str	r3, [sp, #8]
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800167a:	6863      	ldr	r3, [r4, #4]
 800167c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001680:	d001      	beq.n	8001686 <HAL_I2SEx_FullDuplex_IRQHandler+0x2e>
 8001682:	2b00      	cmp	r3, #0
 8001684:	d170      	bne.n	8001768 <HAL_I2SEx_FullDuplex_IRQHandler+0x110>
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001686:	9b05      	ldr	r3, [sp, #20]
 8001688:	f013 0f02 	tst.w	r3, #2
 800168c:	d003      	beq.n	8001696 <HAL_I2SEx_FullDuplex_IRQHandler+0x3e>
 800168e:	9b03      	ldr	r3, [sp, #12]
 8001690:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001694:	d15c      	bne.n	8001750 <HAL_I2SEx_FullDuplex_IRQHandler+0xf8>
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001696:	9b04      	ldr	r3, [sp, #16]
 8001698:	f013 0f01 	tst.w	r3, #1
 800169c:	d003      	beq.n	80016a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x4e>
 800169e:	9b02      	ldr	r3, [sp, #8]
 80016a0:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80016a4:	d158      	bne.n	8001758 <HAL_I2SEx_FullDuplex_IRQHandler+0x100>
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80016a6:	9b04      	ldr	r3, [sp, #16]
 80016a8:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80016ac:	d024      	beq.n	80016f8 <HAL_I2SEx_FullDuplex_IRQHandler+0xa0>
 80016ae:	9b02      	ldr	r3, [sp, #8]
 80016b0:	f013 0f20 	tst.w	r3, #32
 80016b4:	d020      	beq.n	80016f8 <HAL_I2SEx_FullDuplex_IRQHandler+0xa0>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80016b6:	6822      	ldr	r2, [r4, #0]
 80016b8:	4b5b      	ldr	r3, [pc, #364]	@ (8001828 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d050      	beq.n	8001760 <HAL_I2SEx_FullDuplex_IRQHandler+0x108>
 80016be:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80016c2:	6853      	ldr	r3, [r2, #4]
 80016c4:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 80016c8:	6053      	str	r3, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80016ca:	6822      	ldr	r2, [r4, #0]
 80016cc:	6853      	ldr	r3, [r2, #4]
 80016ce:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80016d2:	6053      	str	r3, [r2, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80016d4:	2300      	movs	r3, #0
 80016d6:	9300      	str	r3, [sp, #0]
 80016d8:	6823      	ldr	r3, [r4, #0]
 80016da:	68da      	ldr	r2, [r3, #12]
 80016dc:	9200      	str	r2, [sp, #0]
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	9300      	str	r3, [sp, #0]
 80016e2:	9b00      	ldr	r3, [sp, #0]
      hi2s->State = HAL_I2S_STATE_READY;
 80016e4:	2301      	movs	r3, #1
 80016e6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80016ea:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80016ec:	f043 0302 	orr.w	r3, r3, #2
 80016f0:	6463      	str	r3, [r4, #68]	@ 0x44
      HAL_I2S_ErrorCallback(hi2s);
 80016f2:	4620      	mov	r0, r4
 80016f4:	f7ff fea6 	bl	8001444 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80016f8:	9b05      	ldr	r3, [sp, #20]
 80016fa:	f013 0f08 	tst.w	r3, #8
 80016fe:	d022      	beq.n	8001746 <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
 8001700:	9b03      	ldr	r3, [sp, #12]
 8001702:	f013 0f20 	tst.w	r3, #32
 8001706:	d01e      	beq.n	8001746 <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001708:	6822      	ldr	r2, [r4, #0]
 800170a:	6853      	ldr	r3, [r2, #4]
 800170c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8001710:	6053      	str	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001712:	6822      	ldr	r2, [r4, #0]
 8001714:	4b44      	ldr	r3, [pc, #272]	@ (8001828 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 8001716:	429a      	cmp	r2, r3
 8001718:	d024      	beq.n	8001764 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800171a:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 800171e:	6853      	ldr	r3, [r2, #4]
 8001720:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 8001724:	6053      	str	r3, [r2, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001726:	2300      	movs	r3, #0
 8001728:	9301      	str	r3, [sp, #4]
 800172a:	6823      	ldr	r3, [r4, #0]
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	9301      	str	r3, [sp, #4]
 8001730:	9b01      	ldr	r3, [sp, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8001732:	2301      	movs	r3, #1
 8001734:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001738:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800173a:	f043 0304 	orr.w	r3, r3, #4
 800173e:	6463      	str	r3, [r4, #68]	@ 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001740:	4620      	mov	r0, r4
 8001742:	f7ff fe7f 	bl	8001444 <HAL_I2S_ErrorCallback>
}
 8001746:	b006      	add	sp, #24
 8001748:	bd10      	pop	{r4, pc}
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800174a:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 800174e:	e78e      	b.n	800166e <HAL_I2SEx_FullDuplex_IRQHandler+0x16>
      I2SEx_TxISR_I2S(hi2s);
 8001750:	4620      	mov	r0, r4
 8001752:	f7ff fee1 	bl	8001518 <I2SEx_TxISR_I2S>
 8001756:	e79e      	b.n	8001696 <HAL_I2SEx_FullDuplex_IRQHandler+0x3e>
      I2SEx_RxISR_I2SExt(hi2s);
 8001758:	4620      	mov	r0, r4
 800175a:	f7ff fefb 	bl	8001554 <I2SEx_RxISR_I2SExt>
 800175e:	e7a2      	b.n	80016a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x4e>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001760:	4a32      	ldr	r2, [pc, #200]	@ (800182c <HAL_I2SEx_FullDuplex_IRQHandler+0x1d4>)
 8001762:	e7ae      	b.n	80016c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001764:	4a31      	ldr	r2, [pc, #196]	@ (800182c <HAL_I2SEx_FullDuplex_IRQHandler+0x1d4>)
 8001766:	e7da      	b.n	800171e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8001768:	9b04      	ldr	r3, [sp, #16]
 800176a:	f013 0f02 	tst.w	r3, #2
 800176e:	d003      	beq.n	8001778 <HAL_I2SEx_FullDuplex_IRQHandler+0x120>
 8001770:	9b02      	ldr	r3, [sp, #8]
 8001772:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001776:	d14a      	bne.n	800180e <HAL_I2SEx_FullDuplex_IRQHandler+0x1b6>
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8001778:	9b05      	ldr	r3, [sp, #20]
 800177a:	f013 0f01 	tst.w	r3, #1
 800177e:	d003      	beq.n	8001788 <HAL_I2SEx_FullDuplex_IRQHandler+0x130>
 8001780:	9b03      	ldr	r3, [sp, #12]
 8001782:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8001786:	d146      	bne.n	8001816 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001788:	9b05      	ldr	r3, [sp, #20]
 800178a:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800178e:	d01c      	beq.n	80017ca <HAL_I2SEx_FullDuplex_IRQHandler+0x172>
 8001790:	9b03      	ldr	r3, [sp, #12]
 8001792:	f013 0f20 	tst.w	r3, #32
 8001796:	d018      	beq.n	80017ca <HAL_I2SEx_FullDuplex_IRQHandler+0x172>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001798:	6822      	ldr	r2, [r4, #0]
 800179a:	6853      	ldr	r3, [r2, #4]
 800179c:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 80017a0:	6053      	str	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80017a2:	6822      	ldr	r2, [r4, #0]
 80017a4:	4b20      	ldr	r3, [pc, #128]	@ (8001828 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d039      	beq.n	800181e <HAL_I2SEx_FullDuplex_IRQHandler+0x1c6>
 80017aa:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80017ae:	6853      	ldr	r3, [r2, #4]
 80017b0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80017b4:	6053      	str	r3, [r2, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 80017b6:	2301      	movs	r3, #1
 80017b8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80017bc:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80017be:	f043 0302 	orr.w	r3, r3, #2
 80017c2:	6463      	str	r3, [r4, #68]	@ 0x44
      HAL_I2S_ErrorCallback(hi2s);
 80017c4:	4620      	mov	r0, r4
 80017c6:	f7ff fe3d 	bl	8001444 <HAL_I2S_ErrorCallback>
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80017ca:	9b04      	ldr	r3, [sp, #16]
 80017cc:	f013 0f08 	tst.w	r3, #8
 80017d0:	d0b9      	beq.n	8001746 <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
 80017d2:	9b02      	ldr	r3, [sp, #8]
 80017d4:	f013 0f20 	tst.w	r3, #32
 80017d8:	d0b5      	beq.n	8001746 <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80017da:	6822      	ldr	r2, [r4, #0]
 80017dc:	4b12      	ldr	r3, [pc, #72]	@ (8001828 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 80017de:	429a      	cmp	r2, r3
 80017e0:	d01f      	beq.n	8001822 <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
 80017e2:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80017e6:	6853      	ldr	r3, [r2, #4]
 80017e8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80017ec:	6053      	str	r3, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80017ee:	6822      	ldr	r2, [r4, #0]
 80017f0:	6853      	ldr	r3, [r2, #4]
 80017f2:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 80017f6:	6053      	str	r3, [r2, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 80017f8:	2301      	movs	r3, #1
 80017fa:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80017fe:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8001800:	f043 0304 	orr.w	r3, r3, #4
 8001804:	6463      	str	r3, [r4, #68]	@ 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001806:	4620      	mov	r0, r4
 8001808:	f7ff fe1c 	bl	8001444 <HAL_I2S_ErrorCallback>
}
 800180c:	e79b      	b.n	8001746 <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
      I2SEx_TxISR_I2SExt(hi2s);
 800180e:	4620      	mov	r0, r4
 8001810:	f7ff fed2 	bl	80015b8 <I2SEx_TxISR_I2SExt>
 8001814:	e7b0      	b.n	8001778 <HAL_I2SEx_FullDuplex_IRQHandler+0x120>
      I2SEx_RxISR_I2S(hi2s);
 8001816:	4620      	mov	r0, r4
 8001818:	f7ff ff00 	bl	800161c <I2SEx_RxISR_I2S>
 800181c:	e7b4      	b.n	8001788 <HAL_I2SEx_FullDuplex_IRQHandler+0x130>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800181e:	4a03      	ldr	r2, [pc, #12]	@ (800182c <HAL_I2SEx_FullDuplex_IRQHandler+0x1d4>)
 8001820:	e7c5      	b.n	80017ae <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001822:	4a02      	ldr	r2, [pc, #8]	@ (800182c <HAL_I2SEx_FullDuplex_IRQHandler+0x1d4>)
 8001824:	e7df      	b.n	80017e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18e>
 8001826:	bf00      	nop
 8001828:	40003800 	.word	0x40003800
 800182c:	40003400 	.word	0x40003400

08001830 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001830:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001834:	b083      	sub	sp, #12
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001836:	f8d0 8000 	ldr.w	r8, [r0]
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 800183a:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 800183e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8001842:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001846:	429a      	cmp	r2, r3
 8001848:	d854      	bhi.n	80018f4 <PCD_WriteEmptyTxFifo+0xc4>
 800184a:	4607      	mov	r7, r0
 800184c:	460c      	mov	r4, r1
  {
    return HAL_ERROR;
  }

  len = ep->xfer_len - ep->xfer_count;
 800184e:	1a9b      	subs	r3, r3, r2

  if (len > ep->maxpacket)
 8001850:	eb01 02c1 	add.w	r2, r1, r1, lsl #3
 8001854:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001858:	69d2      	ldr	r2, [r2, #28]
 800185a:	429a      	cmp	r2, r3
 800185c:	d300      	bcc.n	8001860 <PCD_WriteEmptyTxFifo+0x30>
  len = ep->xfer_len - ep->xfer_count;
 800185e:	461a      	mov	r2, r3
  {
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;
 8001860:	f102 0903 	add.w	r9, r2, #3
 8001864:	ea4f 0999 	mov.w	r9, r9, lsr #2

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001868:	e015      	b.n	8001896 <PCD_WriteEmptyTxFifo+0x66>

    if (len > ep->maxpacket)
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;
 800186a:	f106 0903 	add.w	r9, r6, #3
 800186e:	ea4f 0999 	mov.w	r9, r9, lsr #2

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
                          (uint8_t)hpcd->Init.dma_enable);
 8001872:	79bb      	ldrb	r3, [r7, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001874:	eb04 05c4 	add.w	r5, r4, r4, lsl #3
 8001878:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800187c:	6a29      	ldr	r1, [r5, #32]
 800187e:	9300      	str	r3, [sp, #0]
 8001880:	b2b3      	uxth	r3, r6
 8001882:	b2e2      	uxtb	r2, r4
 8001884:	4640      	mov	r0, r8
 8001886:	f001 fd2e 	bl	80032e6 <USB_WritePacket>

    ep->xfer_buff  += len;
 800188a:	6a2b      	ldr	r3, [r5, #32]
 800188c:	4433      	add	r3, r6
 800188e:	622b      	str	r3, [r5, #32]
    ep->xfer_count += len;
 8001890:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8001892:	4433      	add	r3, r6
 8001894:	62ab      	str	r3, [r5, #40]	@ 0x28
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001896:	eb08 1344 	add.w	r3, r8, r4, lsl #5
 800189a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80018a2:	454b      	cmp	r3, r9
 80018a4:	d312      	bcc.n	80018cc <PCD_WriteEmptyTxFifo+0x9c>
 80018a6:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 80018aa:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80018ae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80018b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d20a      	bcs.n	80018cc <PCD_WriteEmptyTxFifo+0x9c>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80018b6:	b14b      	cbz	r3, 80018cc <PCD_WriteEmptyTxFifo+0x9c>
    len = ep->xfer_len - ep->xfer_count;
 80018b8:	1a9b      	subs	r3, r3, r2
    if (len > ep->maxpacket)
 80018ba:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 80018be:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 80018c2:	69d6      	ldr	r6, [r2, #28]
 80018c4:	429e      	cmp	r6, r3
 80018c6:	d3d0      	bcc.n	800186a <PCD_WriteEmptyTxFifo+0x3a>
    len = ep->xfer_len - ep->xfer_count;
 80018c8:	461e      	mov	r6, r3
 80018ca:	e7ce      	b.n	800186a <PCD_WriteEmptyTxFifo+0x3a>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80018cc:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 80018d0:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 80018d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018d8:	429a      	cmp	r2, r3
 80018da:	d80f      	bhi.n	80018fc <PCD_WriteEmptyTxFifo+0xcc>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80018dc:	f004 040f 	and.w	r4, r4, #15
 80018e0:	2201      	movs	r2, #1
 80018e2:	40a2      	lsls	r2, r4
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80018e4:	f8d8 3834 	ldr.w	r3, [r8, #2100]	@ 0x834
 80018e8:	ea23 0302 	bic.w	r3, r3, r2
 80018ec:	f8c8 3834 	str.w	r3, [r8, #2100]	@ 0x834
  }

  return HAL_OK;
 80018f0:	2000      	movs	r0, #0
 80018f2:	e000      	b.n	80018f6 <PCD_WriteEmptyTxFifo+0xc6>
    return HAL_ERROR;
 80018f4:	2001      	movs	r0, #1
}
 80018f6:	b003      	add	sp, #12
 80018f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return HAL_OK;
 80018fc:	2000      	movs	r0, #0
 80018fe:	e7fa      	b.n	80018f6 <PCD_WriteEmptyTxFifo+0xc6>

08001900 <HAL_PCD_Init>:
{
 8001900:	b530      	push	{r4, r5, lr}
 8001902:	b083      	sub	sp, #12
  if (hpcd == NULL)
 8001904:	2800      	cmp	r0, #0
 8001906:	d07a      	beq.n	80019fe <HAL_PCD_Init+0xfe>
 8001908:	4604      	mov	r4, r0
  USBx = hpcd->Instance;
 800190a:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 800190c:	f890 3495 	ldrb.w	r3, [r0, #1173]	@ 0x495
 8001910:	b1c3      	cbz	r3, 8001944 <HAL_PCD_Init+0x44>
  hpcd->State = HAL_PCD_STATE_BUSY;
 8001912:	2303      	movs	r3, #3
 8001914:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
  if (USBx == USB_OTG_FS)
 8001918:	f1b5 4fa0 	cmp.w	r5, #1342177280	@ 0x50000000
 800191c:	d017      	beq.n	800194e <HAL_PCD_Init+0x4e>
  __HAL_PCD_DISABLE(hpcd);
 800191e:	6820      	ldr	r0, [r4, #0]
 8001920:	f001 fb04 	bl	8002f2c <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001924:	7c23      	ldrb	r3, [r4, #16]
 8001926:	f88d 3000 	strb.w	r3, [sp]
 800192a:	1d23      	adds	r3, r4, #4
 800192c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800192e:	6820      	ldr	r0, [r4, #0]
 8001930:	f001 fa3b 	bl	8002daa <USB_CoreInit>
 8001934:	b170      	cbz	r0, 8001954 <HAL_PCD_Init+0x54>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001936:	2302      	movs	r3, #2
 8001938:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 800193c:	2501      	movs	r5, #1
}
 800193e:	4628      	mov	r0, r5
 8001940:	b003      	add	sp, #12
 8001942:	bd30      	pop	{r4, r5, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8001944:	f880 3494 	strb.w	r3, [r0, #1172]	@ 0x494
    HAL_PCD_MspInit(hpcd);
 8001948:	f003 fa46 	bl	8004dd8 <HAL_PCD_MspInit>
 800194c:	e7e1      	b.n	8001912 <HAL_PCD_Init+0x12>
    hpcd->Init.dma_enable = 0U;
 800194e:	2300      	movs	r3, #0
 8001950:	71a3      	strb	r3, [r4, #6]
 8001952:	e7e4      	b.n	800191e <HAL_PCD_Init+0x1e>
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001954:	2100      	movs	r1, #0
 8001956:	6820      	ldr	r0, [r4, #0]
 8001958:	f001 fedb 	bl	8003712 <USB_SetCurrentMode>
 800195c:	4602      	mov	r2, r0
 800195e:	b908      	cbnz	r0, 8001964 <HAL_PCD_Init+0x64>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001960:	4603      	mov	r3, r0
 8001962:	e017      	b.n	8001994 <HAL_PCD_Init+0x94>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001964:	2302      	movs	r3, #2
 8001966:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 800196a:	2501      	movs	r5, #1
 800196c:	e7e7      	b.n	800193e <HAL_PCD_Init+0x3e>
    hpcd->IN_ep[i].is_in = 1U;
 800196e:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 8001972:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8001976:	2001      	movs	r0, #1
 8001978:	7548      	strb	r0, [r1, #21]
    hpcd->IN_ep[i].num = i;
 800197a:	750b      	strb	r3, [r1, #20]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800197c:	85cb      	strh	r3, [r1, #46]	@ 0x2e
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800197e:	2000      	movs	r0, #0
 8001980:	7608      	strb	r0, [r1, #24]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001982:	61c8      	str	r0, [r1, #28]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001984:	6208      	str	r0, [r1, #32]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001986:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 800198a:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800198e:	6248      	str	r0, [r1, #36]	@ 0x24
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001990:	3301      	adds	r3, #1
 8001992:	b2db      	uxtb	r3, r3
 8001994:	7920      	ldrb	r0, [r4, #4]
 8001996:	4298      	cmp	r0, r3
 8001998:	d8e9      	bhi.n	800196e <HAL_PCD_Init+0x6e>
 800199a:	e016      	b.n	80019ca <HAL_PCD_Init+0xca>
    hpcd->OUT_ep[i].is_in = 0U;
 800199c:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
 80019a0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80019a4:	2100      	movs	r1, #0
 80019a6:	f883 1255 	strb.w	r1, [r3, #597]	@ 0x255
    hpcd->OUT_ep[i].num = i;
 80019aa:	f883 2254 	strb.w	r2, [r3, #596]	@ 0x254
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80019ae:	f883 1258 	strb.w	r1, [r3, #600]	@ 0x258
    hpcd->OUT_ep[i].maxpacket = 0U;
 80019b2:	f8c3 125c 	str.w	r1, [r3, #604]	@ 0x25c
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80019b6:	f8c3 1260 	str.w	r1, [r3, #608]	@ 0x260
    hpcd->OUT_ep[i].xfer_len = 0U;
 80019ba:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
 80019be:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80019c2:	f8c3 1264 	str.w	r1, [r3, #612]	@ 0x264
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019c6:	3201      	adds	r2, #1
 80019c8:	b2d2      	uxtb	r2, r2
 80019ca:	4290      	cmp	r0, r2
 80019cc:	d8e6      	bhi.n	800199c <HAL_PCD_Init+0x9c>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019ce:	7c23      	ldrb	r3, [r4, #16]
 80019d0:	f88d 3000 	strb.w	r3, [sp]
 80019d4:	1d23      	adds	r3, r4, #4
 80019d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019d8:	6820      	ldr	r0, [r4, #0]
 80019da:	f001 fafd 	bl	8002fd8 <USB_DevInit>
 80019de:	4605      	mov	r5, r0
 80019e0:	b120      	cbz	r0, 80019ec <HAL_PCD_Init+0xec>
    hpcd->State = HAL_PCD_STATE_ERROR;
 80019e2:	2302      	movs	r3, #2
 80019e4:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 80019e8:	2501      	movs	r5, #1
 80019ea:	e7a8      	b.n	800193e <HAL_PCD_Init+0x3e>
  hpcd->USB_Address = 0U;
 80019ec:	2300      	movs	r3, #0
 80019ee:	7463      	strb	r3, [r4, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80019f0:	2301      	movs	r3, #1
 80019f2:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
  (void)USB_DevDisconnect(hpcd->Instance);
 80019f6:	6820      	ldr	r0, [r4, #0]
 80019f8:	f001 fe4a 	bl	8003690 <USB_DevDisconnect>
  return HAL_OK;
 80019fc:	e79f      	b.n	800193e <HAL_PCD_Init+0x3e>
    return HAL_ERROR;
 80019fe:	2501      	movs	r5, #1
 8001a00:	e79d      	b.n	800193e <HAL_PCD_Init+0x3e>

08001a02 <HAL_PCD_Start>:
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a02:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hpcd);
 8001a04:	f890 2494 	ldrb.w	r2, [r0, #1172]	@ 0x494
 8001a08:	2a01      	cmp	r2, #1
 8001a0a:	d01a      	beq.n	8001a42 <HAL_PCD_Start+0x40>
{
 8001a0c:	b510      	push	{r4, lr}
 8001a0e:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001a10:	2201      	movs	r2, #1
 8001a12:	f880 2494 	strb.w	r2, [r0, #1172]	@ 0x494
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001a16:	68da      	ldr	r2, [r3, #12]
 8001a18:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8001a1c:	d002      	beq.n	8001a24 <HAL_PCD_Start+0x22>
      (hpcd->Init.battery_charging_enable == 1U))
 8001a1e:	7b42      	ldrb	r2, [r0, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001a20:	2a01      	cmp	r2, #1
 8001a22:	d009      	beq.n	8001a38 <HAL_PCD_Start+0x36>
  __HAL_PCD_ENABLE(hpcd);
 8001a24:	6820      	ldr	r0, [r4, #0]
 8001a26:	f001 fa7b 	bl	8002f20 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001a2a:	6820      	ldr	r0, [r4, #0]
 8001a2c:	f001 fe22 	bl	8003674 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001a30:	2000      	movs	r0, #0
 8001a32:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8001a36:	bd10      	pop	{r4, pc}
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001a38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001a3a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001a3e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001a40:	e7f0      	b.n	8001a24 <HAL_PCD_Start+0x22>
  __HAL_LOCK(hpcd);
 8001a42:	2002      	movs	r0, #2
}
 8001a44:	4770      	bx	lr

08001a46 <HAL_PCD_Stop>:
{
 8001a46:	b538      	push	{r3, r4, r5, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a48:	6805      	ldr	r5, [r0, #0]
  __HAL_LOCK(hpcd);
 8001a4a:	f890 3494 	ldrb.w	r3, [r0, #1172]	@ 0x494
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d01d      	beq.n	8001a8e <HAL_PCD_Stop+0x48>
 8001a52:	4604      	mov	r4, r0
 8001a54:	2301      	movs	r3, #1
 8001a56:	f880 3494 	strb.w	r3, [r0, #1172]	@ 0x494
  __HAL_PCD_DISABLE(hpcd);
 8001a5a:	4628      	mov	r0, r5
 8001a5c:	f001 fa66 	bl	8002f2c <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 8001a60:	6820      	ldr	r0, [r4, #0]
 8001a62:	f001 fe15 	bl	8003690 <USB_DevDisconnect>
  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001a66:	2110      	movs	r1, #16
 8001a68:	6820      	ldr	r0, [r4, #0]
 8001a6a:	f001 fa65 	bl	8002f38 <USB_FlushTxFifo>
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001a6e:	68eb      	ldr	r3, [r5, #12]
 8001a70:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8001a74:	d002      	beq.n	8001a7c <HAL_PCD_Stop+0x36>
      (hpcd->Init.battery_charging_enable == 1U))
 8001a76:	7b63      	ldrb	r3, [r4, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d003      	beq.n	8001a84 <HAL_PCD_Stop+0x3e>
  __HAL_UNLOCK(hpcd);
 8001a7c:	2000      	movs	r0, #0
 8001a7e:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8001a82:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8001a84:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 8001a86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a8a:	63ab      	str	r3, [r5, #56]	@ 0x38
 8001a8c:	e7f6      	b.n	8001a7c <HAL_PCD_Stop+0x36>
  __HAL_LOCK(hpcd);
 8001a8e:	2002      	movs	r0, #2
 8001a90:	e7f7      	b.n	8001a82 <HAL_PCD_Stop+0x3c>
	...

08001a94 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001a94:	b570      	push	{r4, r5, r6, lr}
 8001a96:	4604      	mov	r4, r0
 8001a98:	460d      	mov	r5, r1
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a9a:	6800      	ldr	r0, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8001a9c:	6c06      	ldr	r6, [r0, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001a9e:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8001aa2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001aa6:	689a      	ldr	r2, [r3, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001aa8:	79a1      	ldrb	r1, [r4, #6]
 8001aaa:	2901      	cmp	r1, #1
 8001aac:	d011      	beq.n	8001ad2 <PCD_EP_OutXfrComplete_int+0x3e>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001aae:	4938      	ldr	r1, [pc, #224]	@ (8001b90 <PCD_EP_OutXfrComplete_int+0xfc>)
 8001ab0:	428e      	cmp	r6, r1
 8001ab2:	d056      	beq.n	8001b62 <PCD_EP_OutXfrComplete_int+0xce>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001ab4:	b93d      	cbnz	r5, 8001ac6 <PCD_EP_OutXfrComplete_int+0x32>
 8001ab6:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 8001aba:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001abe:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d05e      	beq.n	8001b84 <PCD_EP_OutXfrComplete_int+0xf0>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001ac6:	b2e9      	uxtb	r1, r5
 8001ac8:	4620      	mov	r0, r4
 8001aca:	f003 f9d7 	bl	8004e7c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
}
 8001ace:	2000      	movs	r0, #0
 8001ad0:	bd70      	pop	{r4, r5, r6, pc}
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001ad2:	f012 0f08 	tst.w	r2, #8
 8001ad6:	d009      	beq.n	8001aec <PCD_EP_OutXfrComplete_int+0x58>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001ad8:	492e      	ldr	r1, [pc, #184]	@ (8001b94 <PCD_EP_OutXfrComplete_int+0x100>)
 8001ada:	428e      	cmp	r6, r1
 8001adc:	d9f7      	bls.n	8001ace <PCD_EP_OutXfrComplete_int+0x3a>
 8001ade:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 8001ae2:	d0f4      	beq.n	8001ace <PCD_EP_OutXfrComplete_int+0x3a>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001ae4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001ae8:	609a      	str	r2, [r3, #8]
 8001aea:	e7f0      	b.n	8001ace <PCD_EP_OutXfrComplete_int+0x3a>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001aec:	f012 0f20 	tst.w	r2, #32
 8001af0:	d002      	beq.n	8001af8 <PCD_EP_OutXfrComplete_int+0x64>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001af2:	2220      	movs	r2, #32
 8001af4:	609a      	str	r2, [r3, #8]
 8001af6:	e7ea      	b.n	8001ace <PCD_EP_OutXfrComplete_int+0x3a>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8001af8:	f012 0f28 	tst.w	r2, #40	@ 0x28
 8001afc:	d1e7      	bne.n	8001ace <PCD_EP_OutXfrComplete_int+0x3a>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001afe:	4925      	ldr	r1, [pc, #148]	@ (8001b94 <PCD_EP_OutXfrComplete_int+0x100>)
 8001b00:	428e      	cmp	r6, r1
 8001b02:	d906      	bls.n	8001b12 <PCD_EP_OutXfrComplete_int+0x7e>
 8001b04:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 8001b08:	d003      	beq.n	8001b12 <PCD_EP_OutXfrComplete_int+0x7e>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001b0a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001b0e:	609a      	str	r2, [r3, #8]
 8001b10:	e7dd      	b.n	8001ace <PCD_EP_OutXfrComplete_int+0x3a>
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8001b12:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 8001b16:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8001b1a:	f8d2 1274 	ldr.w	r1, [r2, #628]	@ 0x274
 8001b1e:	691b      	ldr	r3, [r3, #16]
 8001b20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b24:	1acb      	subs	r3, r1, r3
 8001b26:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        if (epnum == 0U)
 8001b2a:	b97d      	cbnz	r5, 8001b4c <PCD_EP_OutXfrComplete_int+0xb8>
          if (ep->xfer_len == 0U)
 8001b2c:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 8001b30:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8001b34:	f8d2 2264 	ldr.w	r2, [r2, #612]	@ 0x264
 8001b38:	b16a      	cbz	r2, 8001b56 <PCD_EP_OutXfrComplete_int+0xc2>
            ep->xfer_buff += ep->xfer_count;
 8001b3a:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 8001b3e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8001b42:	f8d2 1260 	ldr.w	r1, [r2, #608]	@ 0x260
 8001b46:	4419      	add	r1, r3
 8001b48:	f8c2 1260 	str.w	r1, [r2, #608]	@ 0x260
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001b4c:	b2e9      	uxtb	r1, r5
 8001b4e:	4620      	mov	r0, r4
 8001b50:	f003 f994 	bl	8004e7c <HAL_PCD_DataOutStageCallback>
 8001b54:	e7bb      	b.n	8001ace <PCD_EP_OutXfrComplete_int+0x3a>
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001b56:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8001b5a:	2101      	movs	r1, #1
 8001b5c:	f001 fe18 	bl	8003790 <USB_EP0_OutStart>
 8001b60:	e7f4      	b.n	8001b4c <PCD_EP_OutXfrComplete_int+0xb8>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001b62:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 8001b66:	d003      	beq.n	8001b70 <PCD_EP_OutXfrComplete_int+0xdc>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001b68:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001b6c:	609a      	str	r2, [r3, #8]
 8001b6e:	e7ae      	b.n	8001ace <PCD_EP_OutXfrComplete_int+0x3a>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001b70:	f012 0f20 	tst.w	r2, #32
 8001b74:	d001      	beq.n	8001b7a <PCD_EP_OutXfrComplete_int+0xe6>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001b76:	2220      	movs	r2, #32
 8001b78:	609a      	str	r2, [r3, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001b7a:	b2e9      	uxtb	r1, r5
 8001b7c:	4620      	mov	r0, r4
 8001b7e:	f003 f97d 	bl	8004e7c <HAL_PCD_DataOutStageCallback>
 8001b82:	e7a4      	b.n	8001ace <PCD_EP_OutXfrComplete_int+0x3a>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8001b84:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8001b88:	2100      	movs	r1, #0
 8001b8a:	f001 fe01 	bl	8003790 <USB_EP0_OutStart>
 8001b8e:	e79a      	b.n	8001ac6 <PCD_EP_OutXfrComplete_int+0x32>
 8001b90:	4f54310a 	.word	0x4f54310a
 8001b94:	4f54300a 	.word	0x4f54300a

08001b98 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001b98:	b538      	push	{r3, r4, r5, lr}
 8001b9a:	4604      	mov	r4, r0
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001b9c:	6803      	ldr	r3, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8001b9e:	6c1d      	ldr	r5, [r3, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001ba0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8001ba4:	f8d3 1b08 	ldr.w	r1, [r3, #2824]	@ 0xb08

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001ba8:	4a0e      	ldr	r2, [pc, #56]	@ (8001be4 <PCD_EP_OutSetupPacket_int+0x4c>)
 8001baa:	4295      	cmp	r5, r2
 8001bac:	d907      	bls.n	8001bbe <PCD_EP_OutSetupPacket_int+0x26>
 8001bae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001bb2:	f411 4f00 	tst.w	r1, #32768	@ 0x8000
 8001bb6:	d002      	beq.n	8001bbe <PCD_EP_OutSetupPacket_int+0x26>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001bb8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001bbc:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8001bbe:	4620      	mov	r0, r4
 8001bc0:	f003 f954 	bl	8004e6c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8001bc4:	4b07      	ldr	r3, [pc, #28]	@ (8001be4 <PCD_EP_OutSetupPacket_int+0x4c>)
 8001bc6:	429d      	cmp	r5, r3
 8001bc8:	d902      	bls.n	8001bd0 <PCD_EP_OutSetupPacket_int+0x38>
 8001bca:	79a3      	ldrb	r3, [r4, #6]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d001      	beq.n	8001bd4 <PCD_EP_OutSetupPacket_int+0x3c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
  }

  return HAL_OK;
}
 8001bd0:	2000      	movs	r0, #0
 8001bd2:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001bd4:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8001bd8:	2101      	movs	r1, #1
 8001bda:	6820      	ldr	r0, [r4, #0]
 8001bdc:	f001 fdd8 	bl	8003790 <USB_EP0_OutStart>
 8001be0:	e7f6      	b.n	8001bd0 <PCD_EP_OutSetupPacket_int+0x38>
 8001be2:	bf00      	nop
 8001be4:	4f54300a 	.word	0x4f54300a

08001be8 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8001be8:	f890 3494 	ldrb.w	r3, [r0, #1172]	@ 0x494
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d00c      	beq.n	8001c0a <HAL_PCD_SetAddress+0x22>
{
 8001bf0:	b510      	push	{r4, lr}
 8001bf2:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	f880 3494 	strb.w	r3, [r0, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001bfa:	7441      	strb	r1, [r0, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001bfc:	6800      	ldr	r0, [r0, #0]
 8001bfe:	f001 fd29 	bl	8003654 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001c02:	2000      	movs	r0, #0
 8001c04:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8001c08:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8001c0a:	2002      	movs	r0, #2
}
 8001c0c:	4770      	bx	lr

08001c0e <HAL_PCD_EP_Open>:
{
 8001c0e:	b538      	push	{r3, r4, r5, lr}
 8001c10:	4605      	mov	r5, r0
 8001c12:	468c      	mov	ip, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8001c14:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8001c18:	d12b      	bne.n	8001c72 <HAL_PCD_EP_Open+0x64>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c1a:	f001 0e0f 	and.w	lr, r1, #15
 8001c1e:	eb0e 04ce 	add.w	r4, lr, lr, lsl #3
 8001c22:	00a4      	lsls	r4, r4, #2
 8001c24:	f504 7414 	add.w	r4, r4, #592	@ 0x250
 8001c28:	4404      	add	r4, r0
 8001c2a:	1d21      	adds	r1, r4, #4
    ep->is_in = 0U;
 8001c2c:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 8001c30:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8001c34:	2000      	movs	r0, #0
 8001c36:	f88e 0255 	strb.w	r0, [lr, #597]	@ 0x255
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c3a:	f00c 0c0f 	and.w	ip, ip, #15
 8001c3e:	f881 c000 	strb.w	ip, [r1]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8001c42:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8001c46:	608a      	str	r2, [r1, #8]
  ep->type = ep_type;
 8001c48:	710b      	strb	r3, [r1, #4]
  if (ep->is_in != 0U)
 8001c4a:	784a      	ldrb	r2, [r1, #1]
 8001c4c:	b10a      	cbz	r2, 8001c52 <HAL_PCD_EP_Open+0x44>
    ep->tx_fifo_num = ep->num;
 8001c4e:	f8a1 c01a 	strh.w	ip, [r1, #26]
  if (ep_type == EP_TYPE_BULK)
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d01c      	beq.n	8001c90 <HAL_PCD_EP_Open+0x82>
  __HAL_LOCK(hpcd);
 8001c56:	f895 3494 	ldrb.w	r3, [r5, #1172]	@ 0x494
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d01b      	beq.n	8001c96 <HAL_PCD_EP_Open+0x88>
 8001c5e:	2301      	movs	r3, #1
 8001c60:	f885 3494 	strb.w	r3, [r5, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001c64:	6828      	ldr	r0, [r5, #0]
 8001c66:	f001 fa92 	bl	800318e <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c6a:	2000      	movs	r0, #0
 8001c6c:	f885 0494 	strb.w	r0, [r5, #1172]	@ 0x494
}
 8001c70:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c72:	f001 000f 	and.w	r0, r1, #15
 8001c76:	eb00 01c0 	add.w	r1, r0, r0, lsl #3
 8001c7a:	0089      	lsls	r1, r1, #2
 8001c7c:	3110      	adds	r1, #16
 8001c7e:	4429      	add	r1, r5
 8001c80:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8001c82:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8001c86:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8001c8a:	2401      	movs	r4, #1
 8001c8c:	7544      	strb	r4, [r0, #21]
 8001c8e:	e7d4      	b.n	8001c3a <HAL_PCD_EP_Open+0x2c>
    ep->data_pid_start = 0U;
 8001c90:	2300      	movs	r3, #0
 8001c92:	714b      	strb	r3, [r1, #5]
 8001c94:	e7df      	b.n	8001c56 <HAL_PCD_EP_Open+0x48>
  __HAL_LOCK(hpcd);
 8001c96:	2002      	movs	r0, #2
 8001c98:	e7ea      	b.n	8001c70 <HAL_PCD_EP_Open+0x62>

08001c9a <HAL_PCD_EP_Receive>:
{
 8001c9a:	b510      	push	{r4, lr}
 8001c9c:	4614      	mov	r4, r2
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c9e:	f001 0c0f 	and.w	ip, r1, #15
 8001ca2:	eb0c 01cc 	add.w	r1, ip, ip, lsl #3
 8001ca6:	0089      	lsls	r1, r1, #2
 8001ca8:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 8001cac:	4401      	add	r1, r0
 8001cae:	3104      	adds	r1, #4
  ep->xfer_buff = pBuf;
 8001cb0:	eb0c 0ecc 	add.w	lr, ip, ip, lsl #3
 8001cb4:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8001cb8:	f8ce 2260 	str.w	r2, [lr, #608]	@ 0x260
  ep->xfer_len = len;
 8001cbc:	f8ce 3264 	str.w	r3, [lr, #612]	@ 0x264
  ep->xfer_count = 0U;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	f8ce 3268 	str.w	r3, [lr, #616]	@ 0x268
  ep->is_in = 0U;
 8001cc6:	f88e 3255 	strb.w	r3, [lr, #597]	@ 0x255
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cca:	f88e c254 	strb.w	ip, [lr, #596]	@ 0x254
  if (hpcd->Init.dma_enable == 1U)
 8001cce:	7982      	ldrb	r2, [r0, #6]
 8001cd0:	2a01      	cmp	r2, #1
 8001cd2:	d004      	beq.n	8001cde <HAL_PCD_EP_Receive+0x44>
  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001cd4:	6800      	ldr	r0, [r0, #0]
 8001cd6:	f001 fb1d 	bl	8003314 <USB_EPStartXfer>
}
 8001cda:	2000      	movs	r0, #0
 8001cdc:	bd10      	pop	{r4, pc}
    ep->dma_addr = (uint32_t)pBuf;
 8001cde:	f8ce 4270 	str.w	r4, [lr, #624]	@ 0x270
 8001ce2:	e7f7      	b.n	8001cd4 <HAL_PCD_EP_Receive+0x3a>

08001ce4 <HAL_PCD_EP_Transmit>:
{
 8001ce4:	b510      	push	{r4, lr}
 8001ce6:	4614      	mov	r4, r2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ce8:	f001 0c0f 	and.w	ip, r1, #15
 8001cec:	eb0c 01cc 	add.w	r1, ip, ip, lsl #3
 8001cf0:	0089      	lsls	r1, r1, #2
 8001cf2:	3110      	adds	r1, #16
 8001cf4:	4401      	add	r1, r0
 8001cf6:	3104      	adds	r1, #4
  ep->xfer_buff = pBuf;
 8001cf8:	eb0c 0ecc 	add.w	lr, ip, ip, lsl #3
 8001cfc:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8001d00:	f8ce 2020 	str.w	r2, [lr, #32]
  ep->xfer_len = len;
 8001d04:	f8ce 3024 	str.w	r3, [lr, #36]	@ 0x24
  ep->xfer_count = 0U;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	f8ce 3028 	str.w	r3, [lr, #40]	@ 0x28
  ep->is_in = 1U;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	f88e 3015 	strb.w	r3, [lr, #21]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d14:	f88e c014 	strb.w	ip, [lr, #20]
  if (hpcd->Init.dma_enable == 1U)
 8001d18:	7982      	ldrb	r2, [r0, #6]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d004      	beq.n	8001d28 <HAL_PCD_EP_Transmit+0x44>
  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d1e:	6800      	ldr	r0, [r0, #0]
 8001d20:	f001 faf8 	bl	8003314 <USB_EPStartXfer>
}
 8001d24:	2000      	movs	r0, #0
 8001d26:	bd10      	pop	{r4, pc}
    ep->dma_addr = (uint32_t)pBuf;
 8001d28:	f8ce 4030 	str.w	r4, [lr, #48]	@ 0x30
 8001d2c:	e7f7      	b.n	8001d1e <HAL_PCD_EP_Transmit+0x3a>

08001d2e <HAL_PCD_EP_SetStall>:
{
 8001d2e:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001d30:	f001 050f 	and.w	r5, r1, #15
 8001d34:	7902      	ldrb	r2, [r0, #4]
 8001d36:	42aa      	cmp	r2, r5
 8001d38:	d338      	bcc.n	8001dac <HAL_PCD_EP_SetStall+0x7e>
 8001d3a:	4604      	mov	r4, r0
 8001d3c:	460b      	mov	r3, r1
  if ((0x80U & ep_addr) == 0x80U)
 8001d3e:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8001d42:	d11f      	bne.n	8001d84 <HAL_PCD_EP_SetStall+0x56>
    ep = &hpcd->OUT_ep[ep_addr];
 8001d44:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8001d48:	0089      	lsls	r1, r1, #2
 8001d4a:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 8001d4e:	4401      	add	r1, r0
 8001d50:	3104      	adds	r1, #4
    ep->is_in = 0U;
 8001d52:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8001d56:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f883 2255 	strb.w	r2, [r3, #597]	@ 0x255
  ep->is_stall = 1U;
 8001d60:	2301      	movs	r3, #1
 8001d62:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d64:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 8001d66:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d020      	beq.n	8001db0 <HAL_PCD_EP_SetStall+0x82>
 8001d6e:	2301      	movs	r3, #1
 8001d70:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001d74:	6820      	ldr	r0, [r4, #0]
 8001d76:	f001 fc12 	bl	800359e <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d7a:	b185      	cbz	r5, 8001d9e <HAL_PCD_EP_SetStall+0x70>
  __HAL_UNLOCK(hpcd);
 8001d7c:	2000      	movs	r0, #0
 8001d7e:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8001d82:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d84:	eb05 01c5 	add.w	r1, r5, r5, lsl #3
 8001d88:	0089      	lsls	r1, r1, #2
 8001d8a:	3110      	adds	r1, #16
 8001d8c:	4401      	add	r1, r0
 8001d8e:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8001d90:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 8001d94:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8001d98:	2201      	movs	r2, #1
 8001d9a:	755a      	strb	r2, [r3, #21]
 8001d9c:	e7e0      	b.n	8001d60 <HAL_PCD_EP_SetStall+0x32>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001d9e:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8001da2:	79a1      	ldrb	r1, [r4, #6]
 8001da4:	6820      	ldr	r0, [r4, #0]
 8001da6:	f001 fcf3 	bl	8003790 <USB_EP0_OutStart>
 8001daa:	e7e7      	b.n	8001d7c <HAL_PCD_EP_SetStall+0x4e>
    return HAL_ERROR;
 8001dac:	2001      	movs	r0, #1
 8001dae:	e7e8      	b.n	8001d82 <HAL_PCD_EP_SetStall+0x54>
  __HAL_LOCK(hpcd);
 8001db0:	2002      	movs	r0, #2
 8001db2:	e7e6      	b.n	8001d82 <HAL_PCD_EP_SetStall+0x54>

08001db4 <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001db4:	f001 030f 	and.w	r3, r1, #15
 8001db8:	7902      	ldrb	r2, [r0, #4]
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d330      	bcc.n	8001e20 <HAL_PCD_EP_ClrStall+0x6c>
{
 8001dbe:	b510      	push	{r4, lr}
 8001dc0:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 8001dc2:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8001dc6:	d11e      	bne.n	8001e06 <HAL_PCD_EP_ClrStall+0x52>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001dc8:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 8001dcc:	0089      	lsls	r1, r1, #2
 8001dce:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 8001dd2:	4401      	add	r1, r0
 8001dd4:	3104      	adds	r1, #4
    ep->is_in = 0U;
 8001dd6:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8001dda:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001dde:	2000      	movs	r0, #0
 8001de0:	f882 0255 	strb.w	r0, [r2, #597]	@ 0x255
  ep->is_stall = 0U;
 8001de4:	2200      	movs	r2, #0
 8001de6:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001de8:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8001dea:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d018      	beq.n	8001e24 <HAL_PCD_EP_ClrStall+0x70>
 8001df2:	2301      	movs	r3, #1
 8001df4:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001df8:	6820      	ldr	r0, [r4, #0]
 8001dfa:	f001 fbfd 	bl	80035f8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001dfe:	2000      	movs	r0, #0
 8001e00:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8001e04:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e06:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 8001e0a:	0089      	lsls	r1, r1, #2
 8001e0c:	3110      	adds	r1, #16
 8001e0e:	4401      	add	r1, r0
 8001e10:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8001e12:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8001e16:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001e1a:	2001      	movs	r0, #1
 8001e1c:	7550      	strb	r0, [r2, #21]
 8001e1e:	e7e1      	b.n	8001de4 <HAL_PCD_EP_ClrStall+0x30>
    return HAL_ERROR;
 8001e20:	2001      	movs	r0, #1
}
 8001e22:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 8001e24:	2002      	movs	r0, #2
 8001e26:	e7ed      	b.n	8001e04 <HAL_PCD_EP_ClrStall+0x50>

08001e28 <HAL_PCD_EP_Abort>:
{
 8001e28:	b508      	push	{r3, lr}
  if ((0x80U & ep_addr) == 0x80U)
 8001e2a:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8001e2e:	d10c      	bne.n	8001e4a <HAL_PCD_EP_Abort+0x22>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e30:	f001 010f 	and.w	r1, r1, #15
 8001e34:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8001e38:	0089      	lsls	r1, r1, #2
 8001e3a:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 8001e3e:	4401      	add	r1, r0
 8001e40:	3104      	adds	r1, #4
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001e42:	6800      	ldr	r0, [r0, #0]
 8001e44:	f001 f9f0 	bl	8003228 <USB_EPStopXfer>
}
 8001e48:	bd08      	pop	{r3, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e4a:	f001 010f 	and.w	r1, r1, #15
 8001e4e:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8001e52:	0089      	lsls	r1, r1, #2
 8001e54:	3110      	adds	r1, #16
 8001e56:	4401      	add	r1, r0
 8001e58:	3104      	adds	r1, #4
 8001e5a:	e7f2      	b.n	8001e42 <HAL_PCD_EP_Abort+0x1a>

08001e5c <HAL_PCD_IRQHandler>:
{
 8001e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e60:	b083      	sub	sp, #12
 8001e62:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e64:	6805      	ldr	r5, [r0, #0]
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001e66:	4628      	mov	r0, r5
 8001e68:	f001 fc4f 	bl	800370a <USB_GetMode>
 8001e6c:	b110      	cbz	r0, 8001e74 <HAL_PCD_IRQHandler+0x18>
}
 8001e6e:	b003      	add	sp, #12
 8001e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e74:	4606      	mov	r6, r0
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001e76:	6820      	ldr	r0, [r4, #0]
 8001e78:	f001 fc18 	bl	80036ac <USB_ReadInterrupts>
 8001e7c:	2800      	cmp	r0, #0
 8001e7e:	d0f6      	beq.n	8001e6e <HAL_PCD_IRQHandler+0x12>
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001e80:	f505 6700 	add.w	r7, r5, #2048	@ 0x800
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	f3c3 230d 	ubfx	r3, r3, #8, #14
 8001e8a:	f8c4 34d4 	str.w	r3, [r4, #1236]	@ 0x4d4
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001e8e:	6820      	ldr	r0, [r4, #0]
 8001e90:	f001 fc0c 	bl	80036ac <USB_ReadInterrupts>
 8001e94:	f010 0f02 	tst.w	r0, #2
 8001e98:	d004      	beq.n	8001ea4 <HAL_PCD_IRQHandler+0x48>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001e9a:	6822      	ldr	r2, [r4, #0]
 8001e9c:	6953      	ldr	r3, [r2, #20]
 8001e9e:	f003 0302 	and.w	r3, r3, #2
 8001ea2:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001ea4:	6820      	ldr	r0, [r4, #0]
 8001ea6:	f001 fc01 	bl	80036ac <USB_ReadInterrupts>
 8001eaa:	f010 0f10 	tst.w	r0, #16
 8001eae:	d015      	beq.n	8001edc <HAL_PCD_IRQHandler+0x80>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001eb0:	6822      	ldr	r2, [r4, #0]
 8001eb2:	6993      	ldr	r3, [r2, #24]
 8001eb4:	f023 0310 	bic.w	r3, r3, #16
 8001eb8:	6193      	str	r3, [r2, #24]
      RegVal = USBx->GRXSTSP;
 8001eba:	f8d5 8020 	ldr.w	r8, [r5, #32]
      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001ebe:	f008 090f 	and.w	r9, r8, #15
      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001ec2:	f408 13f0 	and.w	r3, r8, #1966080	@ 0x1e0000
 8001ec6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001eca:	d04c      	beq.n	8001f66 <HAL_PCD_IRQHandler+0x10a>
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001ecc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8001ed0:	d06f      	beq.n	8001fb2 <HAL_PCD_IRQHandler+0x156>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ed2:	6822      	ldr	r2, [r4, #0]
 8001ed4:	6993      	ldr	r3, [r2, #24]
 8001ed6:	f043 0310 	orr.w	r3, r3, #16
 8001eda:	6193      	str	r3, [r2, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001edc:	6820      	ldr	r0, [r4, #0]
 8001ede:	f001 fbe5 	bl	80036ac <USB_ReadInterrupts>
 8001ee2:	f410 2f00 	tst.w	r0, #524288	@ 0x80000
 8001ee6:	d176      	bne.n	8001fd6 <HAL_PCD_IRQHandler+0x17a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001ee8:	6820      	ldr	r0, [r4, #0]
 8001eea:	f001 fbdf 	bl	80036ac <USB_ReadInterrupts>
 8001eee:	f410 2f80 	tst.w	r0, #262144	@ 0x40000
 8001ef2:	f040 80e0 	bne.w	80020b6 <HAL_PCD_IRQHandler+0x25a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001ef6:	6820      	ldr	r0, [r4, #0]
 8001ef8:	f001 fbd8 	bl	80036ac <USB_ReadInterrupts>
 8001efc:	2800      	cmp	r0, #0
 8001efe:	f2c0 8161 	blt.w	80021c4 <HAL_PCD_IRQHandler+0x368>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001f02:	6820      	ldr	r0, [r4, #0]
 8001f04:	f001 fbd2 	bl	80036ac <USB_ReadInterrupts>
 8001f08:	f410 6f00 	tst.w	r0, #2048	@ 0x800
 8001f0c:	d009      	beq.n	8001f22 <HAL_PCD_IRQHandler+0xc6>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	f013 0f01 	tst.w	r3, #1
 8001f14:	f040 816e 	bne.w	80021f4 <HAL_PCD_IRQHandler+0x398>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001f18:	6822      	ldr	r2, [r4, #0]
 8001f1a:	6953      	ldr	r3, [r2, #20]
 8001f1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f20:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001f22:	6820      	ldr	r0, [r4, #0]
 8001f24:	f001 fbc2 	bl	80036ac <USB_ReadInterrupts>
 8001f28:	f410 5f80 	tst.w	r0, #4096	@ 0x1000
 8001f2c:	f040 8166 	bne.w	80021fc <HAL_PCD_IRQHandler+0x3a0>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001f30:	6820      	ldr	r0, [r4, #0]
 8001f32:	f001 fbbb 	bl	80036ac <USB_ReadInterrupts>
 8001f36:	f410 5f00 	tst.w	r0, #8192	@ 0x2000
 8001f3a:	f040 81b3 	bne.w	80022a4 <HAL_PCD_IRQHandler+0x448>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001f3e:	6820      	ldr	r0, [r4, #0]
 8001f40:	f001 fbb4 	bl	80036ac <USB_ReadInterrupts>
 8001f44:	f010 0f08 	tst.w	r0, #8
 8001f48:	f040 81c4 	bne.w	80022d4 <HAL_PCD_IRQHandler+0x478>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001f4c:	6820      	ldr	r0, [r4, #0]
 8001f4e:	f001 fbad 	bl	80036ac <USB_ReadInterrupts>
 8001f52:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8001f56:	f000 81d7 	beq.w	8002308 <HAL_PCD_IRQHandler+0x4ac>
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001f5a:	69ab      	ldr	r3, [r5, #24]
 8001f5c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001f60:	61ab      	str	r3, [r5, #24]
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f62:	2601      	movs	r6, #1
 8001f64:	e1c0      	b.n	80022e8 <HAL_PCD_IRQHandler+0x48c>
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001f66:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001f6a:	ea18 0f03 	tst.w	r8, r3
 8001f6e:	d0b0      	beq.n	8001ed2 <HAL_PCD_IRQHandler+0x76>
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001f70:	ea4f 1a18 	mov.w	sl, r8, lsr #4
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001f74:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f78:	9301      	str	r3, [sp, #4]
 8001f7a:	eb09 0bc9 	add.w	fp, r9, r9, lsl #3
 8001f7e:	eb04 0b8b 	add.w	fp, r4, fp, lsl #2
 8001f82:	f3c8 120a 	ubfx	r2, r8, #4, #11
 8001f86:	f8db 1260 	ldr.w	r1, [fp, #608]	@ 0x260
 8001f8a:	4628      	mov	r0, r5
 8001f8c:	f001 fae4 	bl	8003558 <USB_ReadPacket>
          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f90:	f8db 3260 	ldr.w	r3, [fp, #608]	@ 0x260
 8001f94:	f3ca 0a0a 	ubfx	sl, sl, #0, #11
 8001f98:	4453      	add	r3, sl
 8001f9a:	f8cb 3260 	str.w	r3, [fp, #608]	@ 0x260
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f9e:	f8db 3268 	ldr.w	r3, [fp, #616]	@ 0x268
 8001fa2:	9a01      	ldr	r2, [sp, #4]
 8001fa4:	444a      	add	r2, r9
 8001fa6:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8001faa:	4453      	add	r3, sl
 8001fac:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
 8001fb0:	e78f      	b.n	8001ed2 <HAL_PCD_IRQHandler+0x76>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001fb2:	2208      	movs	r2, #8
 8001fb4:	f204 419c 	addw	r1, r4, #1180	@ 0x49c
 8001fb8:	4628      	mov	r0, r5
 8001fba:	f001 facd 	bl	8003558 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001fbe:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8001fc2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001fc6:	f8d3 2268 	ldr.w	r2, [r3, #616]	@ 0x268
 8001fca:	f3c8 180a 	ubfx	r8, r8, #4, #11
 8001fce:	4442      	add	r2, r8
 8001fd0:	f8c3 2268 	str.w	r2, [r3, #616]	@ 0x268
 8001fd4:	e77d      	b.n	8001ed2 <HAL_PCD_IRQHandler+0x76>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001fd6:	6820      	ldr	r0, [r4, #0]
 8001fd8:	f001 fb6c 	bl	80036b4 <USB_ReadDevAllOutEpInterrupt>
 8001fdc:	4680      	mov	r8, r0
      epnum = 0U;
 8001fde:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 8001fe0:	e035      	b.n	800204e <HAL_PCD_IRQHandler+0x1f2>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001fe2:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001fec:	4649      	mov	r1, r9
 8001fee:	4620      	mov	r0, r4
 8001ff0:	f7ff fd50 	bl	8001a94 <PCD_EP_OutXfrComplete_int>
 8001ff4:	e03c      	b.n	8002070 <HAL_PCD_IRQHandler+0x214>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001ff6:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8001ffa:	2208      	movs	r2, #8
 8001ffc:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002000:	4649      	mov	r1, r9
 8002002:	4620      	mov	r0, r4
 8002004:	f7ff fdc8 	bl	8001b98 <PCD_EP_OutSetupPacket_int>
 8002008:	e035      	b.n	8002076 <HAL_PCD_IRQHandler+0x21a>
            if (ep->is_iso_incomplete == 1U)
 800200a:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 800200e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8002012:	f893 3257 	ldrb.w	r3, [r3, #599]	@ 0x257
 8002016:	2b01      	cmp	r3, #1
 8002018:	d041      	beq.n	800209e <HAL_PCD_IRQHandler+0x242>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800201a:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 800201e:	2202      	movs	r2, #2
 8002020:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002024:	f01a 0f20 	tst.w	sl, #32
 8002028:	d004      	beq.n	8002034 <HAL_PCD_IRQHandler+0x1d8>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800202a:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 800202e:	2220      	movs	r2, #32
 8002030:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002034:	f41a 5f00 	tst.w	sl, #8192	@ 0x2000
 8002038:	d005      	beq.n	8002046 <HAL_PCD_IRQHandler+0x1ea>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800203a:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 800203e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002042:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
        epnum++;
 8002046:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 800204a:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 800204e:	f1b8 0f00 	cmp.w	r8, #0
 8002052:	f43f af49 	beq.w	8001ee8 <HAL_PCD_IRQHandler+0x8c>
        if ((ep_intr & 0x1U) != 0U)
 8002056:	f018 0f01 	tst.w	r8, #1
 800205a:	d0f4      	beq.n	8002046 <HAL_PCD_IRQHandler+0x1ea>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800205c:	fa5f fb89 	uxtb.w	fp, r9
 8002060:	4659      	mov	r1, fp
 8002062:	6820      	ldr	r0, [r4, #0]
 8002064:	f001 fb36 	bl	80036d4 <USB_ReadDevOutEPInterrupt>
 8002068:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800206a:	f010 0f01 	tst.w	r0, #1
 800206e:	d1b8      	bne.n	8001fe2 <HAL_PCD_IRQHandler+0x186>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002070:	f01a 0f08 	tst.w	sl, #8
 8002074:	d1bf      	bne.n	8001ff6 <HAL_PCD_IRQHandler+0x19a>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002076:	f01a 0f10 	tst.w	sl, #16
 800207a:	d004      	beq.n	8002086 <HAL_PCD_IRQHandler+0x22a>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800207c:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8002080:	2210      	movs	r2, #16
 8002082:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002086:	f01a 0f02 	tst.w	sl, #2
 800208a:	d0cb      	beq.n	8002024 <HAL_PCD_IRQHandler+0x1c8>
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800208c:	696b      	ldr	r3, [r5, #20]
 800208e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002092:	d0ba      	beq.n	800200a <HAL_PCD_IRQHandler+0x1ae>
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800209a:	607b      	str	r3, [r7, #4]
 800209c:	e7b5      	b.n	800200a <HAL_PCD_IRQHandler+0x1ae>
              ep->is_iso_incomplete = 0U;
 800209e:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 80020a2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80020a6:	2200      	movs	r2, #0
 80020a8:	f883 2257 	strb.w	r2, [r3, #599]	@ 0x257
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80020ac:	4659      	mov	r1, fp
 80020ae:	4620      	mov	r0, r4
 80020b0:	f002 ff34 	bl	8004f1c <HAL_PCD_ISOOUTIncompleteCallback>
 80020b4:	e7b1      	b.n	800201a <HAL_PCD_IRQHandler+0x1be>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80020b6:	6820      	ldr	r0, [r4, #0]
 80020b8:	f001 fb04 	bl	80036c4 <USB_ReadDevAllInEpInterrupt>
 80020bc:	4680      	mov	r8, r0
      epnum = 0U;
 80020be:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 80020c0:	e025      	b.n	800210e <HAL_PCD_IRQHandler+0x2b2>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80020c2:	4659      	mov	r1, fp
 80020c4:	4620      	mov	r0, r4
 80020c6:	f002 fee5 	bl	8004e94 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80020ca:	f01a 0f08 	tst.w	sl, #8
 80020ce:	d004      	beq.n	80020da <HAL_PCD_IRQHandler+0x27e>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80020d0:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 80020d4:	2208      	movs	r2, #8
 80020d6:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80020da:	f01a 0f10 	tst.w	sl, #16
 80020de:	d004      	beq.n	80020ea <HAL_PCD_IRQHandler+0x28e>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80020e0:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 80020e4:	2210      	movs	r2, #16
 80020e6:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80020ea:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 80020ee:	d004      	beq.n	80020fa <HAL_PCD_IRQHandler+0x29e>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80020f0:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 80020f4:	2240      	movs	r2, #64	@ 0x40
 80020f6:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80020fa:	f01a 0f02 	tst.w	sl, #2
 80020fe:	d140      	bne.n	8002182 <HAL_PCD_IRQHandler+0x326>
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002100:	f01a 0f80 	tst.w	sl, #128	@ 0x80
 8002104:	d159      	bne.n	80021ba <HAL_PCD_IRQHandler+0x35e>
        epnum++;
 8002106:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 800210a:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 800210e:	f1b8 0f00 	cmp.w	r8, #0
 8002112:	f43f aef0 	beq.w	8001ef6 <HAL_PCD_IRQHandler+0x9a>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002116:	f018 0f01 	tst.w	r8, #1
 800211a:	d0f4      	beq.n	8002106 <HAL_PCD_IRQHandler+0x2aa>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800211c:	fa5f fb89 	uxtb.w	fp, r9
 8002120:	4659      	mov	r1, fp
 8002122:	6820      	ldr	r0, [r4, #0]
 8002124:	f001 fadf 	bl	80036e6 <USB_ReadDevInEPInterrupt>
 8002128:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800212a:	f010 0f01 	tst.w	r0, #1
 800212e:	d0cc      	beq.n	80020ca <HAL_PCD_IRQHandler+0x26e>
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002130:	f009 020f 	and.w	r2, r9, #15
 8002134:	2101      	movs	r1, #1
 8002136:	fa01 f202 	lsl.w	r2, r1, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800213a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800213c:	ea23 0302 	bic.w	r3, r3, r2
 8002140:	637b      	str	r3, [r7, #52]	@ 0x34
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002142:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8002146:	f8c3 1908 	str.w	r1, [r3, #2312]	@ 0x908
            if (hpcd->Init.dma_enable == 1U)
 800214a:	79a3      	ldrb	r3, [r4, #6]
 800214c:	428b      	cmp	r3, r1
 800214e:	d1b8      	bne.n	80020c2 <HAL_PCD_IRQHandler+0x266>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002150:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8002154:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8002158:	6a1a      	ldr	r2, [r3, #32]
 800215a:	69d9      	ldr	r1, [r3, #28]
 800215c:	440a      	add	r2, r1
 800215e:	621a      	str	r2, [r3, #32]
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002160:	f1b9 0f00 	cmp.w	r9, #0
 8002164:	d1ad      	bne.n	80020c2 <HAL_PCD_IRQHandler+0x266>
 8002166:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 800216a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800216e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002170:	2b00      	cmp	r3, #0
 8002172:	d1a6      	bne.n	80020c2 <HAL_PCD_IRQHandler+0x266>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002174:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8002178:	2101      	movs	r1, #1
 800217a:	6820      	ldr	r0, [r4, #0]
 800217c:	f001 fb08 	bl	8003790 <USB_EP0_OutStart>
 8002180:	e79f      	b.n	80020c2 <HAL_PCD_IRQHandler+0x266>
            (void)USB_FlushTxFifo(USBx, epnum);
 8002182:	4649      	mov	r1, r9
 8002184:	4628      	mov	r0, r5
 8002186:	f000 fed7 	bl	8002f38 <USB_FlushTxFifo>
            if (ep->is_iso_incomplete == 1U)
 800218a:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 800218e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8002192:	7ddb      	ldrb	r3, [r3, #23]
 8002194:	2b01      	cmp	r3, #1
 8002196:	d005      	beq.n	80021a4 <HAL_PCD_IRQHandler+0x348>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002198:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 800219c:	2202      	movs	r2, #2
 800219e:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
 80021a2:	e7ad      	b.n	8002100 <HAL_PCD_IRQHandler+0x2a4>
              ep->is_iso_incomplete = 0U;
 80021a4:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 80021a8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80021ac:	2200      	movs	r2, #0
 80021ae:	75da      	strb	r2, [r3, #23]
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80021b0:	4659      	mov	r1, fp
 80021b2:	4620      	mov	r0, r4
 80021b4:	f002 feb8 	bl	8004f28 <HAL_PCD_ISOINIncompleteCallback>
 80021b8:	e7ee      	b.n	8002198 <HAL_PCD_IRQHandler+0x33c>
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80021ba:	4649      	mov	r1, r9
 80021bc:	4620      	mov	r0, r4
 80021be:	f7ff fb37 	bl	8001830 <PCD_WriteEmptyTxFifo>
 80021c2:	e7a0      	b.n	8002106 <HAL_PCD_IRQHandler+0x2aa>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f023 0301 	bic.w	r3, r3, #1
 80021ca:	607b      	str	r3, [r7, #4]
      if (hpcd->LPM_State == LPM_L1)
 80021cc:	f894 34cc 	ldrb.w	r3, [r4, #1228]	@ 0x4cc
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d008      	beq.n	80021e6 <HAL_PCD_IRQHandler+0x38a>
        HAL_PCD_ResumeCallback(hpcd);
 80021d4:	4620      	mov	r0, r4
 80021d6:	f002 fe9b 	bl	8004f10 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80021da:	6822      	ldr	r2, [r4, #0]
 80021dc:	6953      	ldr	r3, [r2, #20]
 80021de:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80021e2:	6153      	str	r3, [r2, #20]
 80021e4:	e68d      	b.n	8001f02 <HAL_PCD_IRQHandler+0xa6>
        hpcd->LPM_State = LPM_L0;
 80021e6:	2100      	movs	r1, #0
 80021e8:	f884 14cc 	strb.w	r1, [r4, #1228]	@ 0x4cc
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80021ec:	4620      	mov	r0, r4
 80021ee:	f000 f93e 	bl	800246e <HAL_PCDEx_LPM_Callback>
 80021f2:	e7f2      	b.n	80021da <HAL_PCD_IRQHandler+0x37e>
        HAL_PCD_SuspendCallback(hpcd);
 80021f4:	4620      	mov	r0, r4
 80021f6:	f002 fe73 	bl	8004ee0 <HAL_PCD_SuspendCallback>
 80021fa:	e68d      	b.n	8001f18 <HAL_PCD_IRQHandler+0xbc>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f023 0301 	bic.w	r3, r3, #1
 8002202:	607b      	str	r3, [r7, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002204:	2110      	movs	r1, #16
 8002206:	6820      	ldr	r0, [r4, #0]
 8002208:	f000 fe96 	bl	8002f38 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800220c:	e01a      	b.n	8002244 <HAL_PCD_IRQHandler+0x3e8>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800220e:	eb05 1346 	add.w	r3, r5, r6, lsl #5
 8002212:	f64f 317f 	movw	r1, #64383	@ 0xfb7f
 8002216:	f8c3 1908 	str.w	r1, [r3, #2312]	@ 0x908
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800221a:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 800221e:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8002222:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002226:	f8c3 1b08 	str.w	r1, [r3, #2824]	@ 0xb08
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800222a:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 800222e:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8002232:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002236:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 800223a:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 800223e:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002242:	3601      	adds	r6, #1
 8002244:	7923      	ldrb	r3, [r4, #4]
 8002246:	42b3      	cmp	r3, r6
 8002248:	d8e1      	bhi.n	800220e <HAL_PCD_IRQHandler+0x3b2>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002250:	61fb      	str	r3, [r7, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002252:	7be3      	ldrb	r3, [r4, #15]
 8002254:	b1db      	cbz	r3, 800228e <HAL_PCD_IRQHandler+0x432>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002256:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800225a:	f043 030b 	orr.w	r3, r3, #11
 800225e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002262:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002264:	f043 030b 	orr.w	r3, r3, #11
 8002268:	647b      	str	r3, [r7, #68]	@ 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800226a:	f8d5 3800 	ldr.w	r3, [r5, #2048]	@ 0x800
 800226e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002272:	f8c5 3800 	str.w	r3, [r5, #2048]	@ 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002276:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 800227a:	79a1      	ldrb	r1, [r4, #6]
 800227c:	6820      	ldr	r0, [r4, #0]
 800227e:	f001 fa87 	bl	8003790 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002282:	6822      	ldr	r2, [r4, #0]
 8002284:	6953      	ldr	r3, [r2, #20]
 8002286:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800228a:	6153      	str	r3, [r2, #20]
 800228c:	e650      	b.n	8001f30 <HAL_PCD_IRQHandler+0xd4>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002294:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002298:	617b      	str	r3, [r7, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	f043 030b 	orr.w	r3, r3, #11
 80022a0:	613b      	str	r3, [r7, #16]
 80022a2:	e7e2      	b.n	800226a <HAL_PCD_IRQHandler+0x40e>
      (void)USB_ActivateSetup(hpcd->Instance);
 80022a4:	6820      	ldr	r0, [r4, #0]
 80022a6:	f001 fa65 	bl	8003774 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80022aa:	6820      	ldr	r0, [r4, #0]
 80022ac:	f000 ff5e 	bl	800316c <USB_GetDevSpeed>
 80022b0:	71e0      	strb	r0, [r4, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80022b2:	6826      	ldr	r6, [r4, #0]
 80022b4:	f000 fbf6 	bl	8002aa4 <HAL_RCC_GetHCLKFreq>
 80022b8:	4601      	mov	r1, r0
 80022ba:	79e2      	ldrb	r2, [r4, #7]
 80022bc:	4630      	mov	r0, r6
 80022be:	f000 fdbd 	bl	8002e3c <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 80022c2:	4620      	mov	r0, r4
 80022c4:	f002 fdf7 	bl	8004eb6 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80022c8:	6822      	ldr	r2, [r4, #0]
 80022ca:	6953      	ldr	r3, [r2, #20]
 80022cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022d0:	6153      	str	r3, [r2, #20]
 80022d2:	e634      	b.n	8001f3e <HAL_PCD_IRQHandler+0xe2>
      HAL_PCD_SOFCallback(hpcd);
 80022d4:	4620      	mov	r0, r4
 80022d6:	f002 fde8 	bl	8004eaa <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80022da:	6822      	ldr	r2, [r4, #0]
 80022dc:	6953      	ldr	r3, [r2, #20]
 80022de:	f003 0308 	and.w	r3, r3, #8
 80022e2:	6153      	str	r3, [r2, #20]
 80022e4:	e632      	b.n	8001f4c <HAL_PCD_IRQHandler+0xf0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80022e6:	3601      	adds	r6, #1
 80022e8:	7923      	ldrb	r3, [r4, #4]
 80022ea:	42b3      	cmp	r3, r6
 80022ec:	d90c      	bls.n	8002308 <HAL_PCD_IRQHandler+0x4ac>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80022ee:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 80022f2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80022f6:	f893 3257 	ldrb.w	r3, [r3, #599]	@ 0x257
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d1f3      	bne.n	80022e6 <HAL_PCD_IRQHandler+0x48a>
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80022fe:	b2f1      	uxtb	r1, r6
 8002300:	4620      	mov	r0, r4
 8002302:	f7ff fd91 	bl	8001e28 <HAL_PCD_EP_Abort>
 8002306:	e7ee      	b.n	80022e6 <HAL_PCD_IRQHandler+0x48a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002308:	6820      	ldr	r0, [r4, #0]
 800230a:	f001 f9cf 	bl	80036ac <USB_ReadInterrupts>
 800230e:	f410 1f80 	tst.w	r0, #1048576	@ 0x100000
 8002312:	d125      	bne.n	8002360 <HAL_PCD_IRQHandler+0x504>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002314:	6820      	ldr	r0, [r4, #0]
 8002316:	f001 f9c9 	bl	80036ac <USB_ReadInterrupts>
 800231a:	f410 1f00 	tst.w	r0, #2097152	@ 0x200000
 800231e:	d058      	beq.n	80023d2 <HAL_PCD_IRQHandler+0x576>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002320:	2301      	movs	r3, #1
 8002322:	e026      	b.n	8002372 <HAL_PCD_IRQHandler+0x516>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002324:	3601      	adds	r6, #1
 8002326:	7923      	ldrb	r3, [r4, #4]
 8002328:	42b3      	cmp	r3, r6
 800232a:	d91b      	bls.n	8002364 <HAL_PCD_IRQHandler+0x508>
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800232c:	eb05 1346 	add.w	r3, r5, r6, lsl #5
 8002330:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002334:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 8002338:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800233c:	7e1b      	ldrb	r3, [r3, #24]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d1f0      	bne.n	8002324 <HAL_PCD_IRQHandler+0x4c8>
 8002342:	2a00      	cmp	r2, #0
 8002344:	daee      	bge.n	8002324 <HAL_PCD_IRQHandler+0x4c8>
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002346:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 800234a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800234e:	2201      	movs	r2, #1
 8002350:	75da      	strb	r2, [r3, #23]
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002352:	f066 017f 	orn	r1, r6, #127	@ 0x7f
 8002356:	b2c9      	uxtb	r1, r1
 8002358:	4620      	mov	r0, r4
 800235a:	f7ff fd65 	bl	8001e28 <HAL_PCD_EP_Abort>
 800235e:	e7e1      	b.n	8002324 <HAL_PCD_IRQHandler+0x4c8>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002360:	2601      	movs	r6, #1
 8002362:	e7e0      	b.n	8002326 <HAL_PCD_IRQHandler+0x4ca>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002364:	6822      	ldr	r2, [r4, #0]
 8002366:	6953      	ldr	r3, [r2, #20]
 8002368:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800236c:	6153      	str	r3, [r2, #20]
 800236e:	e7d1      	b.n	8002314 <HAL_PCD_IRQHandler+0x4b8>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002370:	3301      	adds	r3, #1
 8002372:	7922      	ldrb	r2, [r4, #4]
 8002374:	429a      	cmp	r2, r3
 8002376:	d927      	bls.n	80023c8 <HAL_PCD_IRQHandler+0x56c>
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002378:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 800237c:	f8d2 1b00 	ldr.w	r1, [r2, #2816]	@ 0xb00
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002380:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8002384:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8002388:	f892 2258 	ldrb.w	r2, [r2, #600]	@ 0x258
 800238c:	2a01      	cmp	r2, #1
 800238e:	d1ef      	bne.n	8002370 <HAL_PCD_IRQHandler+0x514>
 8002390:	2900      	cmp	r1, #0
 8002392:	daed      	bge.n	8002370 <HAL_PCD_IRQHandler+0x514>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8002394:	f8d4 24d4 	ldr.w	r2, [r4, #1236]	@ 0x4d4
 8002398:	ea82 4211 	eor.w	r2, r2, r1, lsr #16
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800239c:	f012 0f01 	tst.w	r2, #1
 80023a0:	d1e6      	bne.n	8002370 <HAL_PCD_IRQHandler+0x514>
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80023a2:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 80023a6:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80023aa:	2101      	movs	r1, #1
 80023ac:	f882 1257 	strb.w	r1, [r2, #599]	@ 0x257
          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80023b0:	69aa      	ldr	r2, [r5, #24]
 80023b2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80023b6:	61aa      	str	r2, [r5, #24]
          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80023b8:	696a      	ldr	r2, [r5, #20]
 80023ba:	f012 0f80 	tst.w	r2, #128	@ 0x80
 80023be:	d1d7      	bne.n	8002370 <HAL_PCD_IRQHandler+0x514>
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80023c6:	607b      	str	r3, [r7, #4]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80023c8:	6822      	ldr	r2, [r4, #0]
 80023ca:	6953      	ldr	r3, [r2, #20]
 80023cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023d0:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80023d2:	6820      	ldr	r0, [r4, #0]
 80023d4:	f001 f96a 	bl	80036ac <USB_ReadInterrupts>
 80023d8:	f010 4f80 	tst.w	r0, #1073741824	@ 0x40000000
 80023dc:	d110      	bne.n	8002400 <HAL_PCD_IRQHandler+0x5a4>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80023de:	6820      	ldr	r0, [r4, #0]
 80023e0:	f001 f964 	bl	80036ac <USB_ReadInterrupts>
 80023e4:	f010 0f04 	tst.w	r0, #4
 80023e8:	f43f ad41 	beq.w	8001e6e <HAL_PCD_IRQHandler+0x12>
      RegVal = hpcd->Instance->GOTGINT;
 80023ec:	6823      	ldr	r3, [r4, #0]
 80023ee:	685d      	ldr	r5, [r3, #4]
      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80023f0:	f015 0f04 	tst.w	r5, #4
 80023f4:	d10d      	bne.n	8002412 <HAL_PCD_IRQHandler+0x5b6>
      hpcd->Instance->GOTGINT |= RegVal;
 80023f6:	6822      	ldr	r2, [r4, #0]
 80023f8:	6853      	ldr	r3, [r2, #4]
 80023fa:	432b      	orrs	r3, r5
 80023fc:	6053      	str	r3, [r2, #4]
 80023fe:	e536      	b.n	8001e6e <HAL_PCD_IRQHandler+0x12>
      HAL_PCD_ConnectCallback(hpcd);
 8002400:	4620      	mov	r0, r4
 8002402:	f002 fd97 	bl	8004f34 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002406:	6822      	ldr	r2, [r4, #0]
 8002408:	6953      	ldr	r3, [r2, #20]
 800240a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800240e:	6153      	str	r3, [r2, #20]
 8002410:	e7e5      	b.n	80023de <HAL_PCD_IRQHandler+0x582>
        HAL_PCD_DisconnectCallback(hpcd);
 8002412:	4620      	mov	r0, r4
 8002414:	f002 fd94 	bl	8004f40 <HAL_PCD_DisconnectCallback>
 8002418:	e7ed      	b.n	80023f6 <HAL_PCD_IRQHandler+0x59a>

0800241a <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800241a:	b410      	push	{r4}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800241c:	6804      	ldr	r4, [r0, #0]
 800241e:	6a60      	ldr	r0, [r4, #36]	@ 0x24

  if (fifo == 0U)
 8002420:	b931      	cbnz	r1, 8002430 <HAL_PCDEx_SetTxFiFo+0x16>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002422:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8002426:	62a0      	str	r0, [r4, #40]	@ 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 8002428:	2000      	movs	r0, #0
 800242a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800242e:	4770      	bx	lr
 8002430:	468c      	mov	ip, r1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002432:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002434:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8002438:	2300      	movs	r3, #0
 800243a:	e008      	b.n	800244e <HAL_PCDEx_SetTxFiFo+0x34>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800243c:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8002440:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8002444:	6849      	ldr	r1, [r1, #4]
 8002446:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800244a:	3301      	adds	r3, #1
 800244c:	b2db      	uxtb	r3, r3
 800244e:	f10c 31ff 	add.w	r1, ip, #4294967295
 8002452:	428b      	cmp	r3, r1
 8002454:	d3f2      	bcc.n	800243c <HAL_PCDEx_SetTxFiFo+0x22>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002456:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800245a:	f10c 013f 	add.w	r1, ip, #63	@ 0x3f
 800245e:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8002462:	6060      	str	r0, [r4, #4]
 8002464:	e7e0      	b.n	8002428 <HAL_PCDEx_SetTxFiFo+0xe>

08002466 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8002466:	6803      	ldr	r3, [r0, #0]
 8002468:	6259      	str	r1, [r3, #36]	@ 0x24

  return HAL_OK;
}
 800246a:	2000      	movs	r0, #0
 800246c:	4770      	bx	lr

0800246e <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800246e:	4770      	bx	lr

08002470 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002470:	2800      	cmp	r0, #0
 8002472:	f000 81e0 	beq.w	8002836 <HAL_RCC_OscConfig+0x3c6>
{
 8002476:	b570      	push	{r4, r5, r6, lr}
 8002478:	b082      	sub	sp, #8
 800247a:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800247c:	6803      	ldr	r3, [r0, #0]
 800247e:	f013 0f01 	tst.w	r3, #1
 8002482:	d03b      	beq.n	80024fc <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002484:	4b9f      	ldr	r3, [pc, #636]	@ (8002704 <HAL_RCC_OscConfig+0x294>)
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f003 030c 	and.w	r3, r3, #12
 800248c:	2b04      	cmp	r3, #4
 800248e:	d02c      	beq.n	80024ea <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002490:	4b9c      	ldr	r3, [pc, #624]	@ (8002704 <HAL_RCC_OscConfig+0x294>)
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002498:	2b08      	cmp	r3, #8
 800249a:	d021      	beq.n	80024e0 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800249c:	6863      	ldr	r3, [r4, #4]
 800249e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024a2:	d04f      	beq.n	8002544 <HAL_RCC_OscConfig+0xd4>
 80024a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024a8:	d052      	beq.n	8002550 <HAL_RCC_OscConfig+0xe0>
 80024aa:	4b96      	ldr	r3, [pc, #600]	@ (8002704 <HAL_RCC_OscConfig+0x294>)
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80024ba:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024bc:	6863      	ldr	r3, [r4, #4]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d050      	beq.n	8002564 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c2:	f7fe fc3d 	bl	8000d40 <HAL_GetTick>
 80024c6:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024c8:	4b8e      	ldr	r3, [pc, #568]	@ (8002704 <HAL_RCC_OscConfig+0x294>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80024d0:	d114      	bne.n	80024fc <HAL_RCC_OscConfig+0x8c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024d2:	f7fe fc35 	bl	8000d40 <HAL_GetTick>
 80024d6:	1b40      	subs	r0, r0, r5
 80024d8:	2864      	cmp	r0, #100	@ 0x64
 80024da:	d9f5      	bls.n	80024c8 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 80024dc:	2003      	movs	r0, #3
 80024de:	e1b1      	b.n	8002844 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024e0:	4b88      	ldr	r3, [pc, #544]	@ (8002704 <HAL_RCC_OscConfig+0x294>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80024e8:	d0d8      	beq.n	800249c <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024ea:	4b86      	ldr	r3, [pc, #536]	@ (8002704 <HAL_RCC_OscConfig+0x294>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80024f2:	d003      	beq.n	80024fc <HAL_RCC_OscConfig+0x8c>
 80024f4:	6863      	ldr	r3, [r4, #4]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f000 819f 	beq.w	800283a <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024fc:	6823      	ldr	r3, [r4, #0]
 80024fe:	f013 0f02 	tst.w	r3, #2
 8002502:	d054      	beq.n	80025ae <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002504:	4b7f      	ldr	r3, [pc, #508]	@ (8002704 <HAL_RCC_OscConfig+0x294>)
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f013 0f0c 	tst.w	r3, #12
 800250c:	d03e      	beq.n	800258c <HAL_RCC_OscConfig+0x11c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800250e:	4b7d      	ldr	r3, [pc, #500]	@ (8002704 <HAL_RCC_OscConfig+0x294>)
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002516:	2b08      	cmp	r3, #8
 8002518:	d033      	beq.n	8002582 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800251a:	68e3      	ldr	r3, [r4, #12]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d068      	beq.n	80025f2 <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002520:	4b79      	ldr	r3, [pc, #484]	@ (8002708 <HAL_RCC_OscConfig+0x298>)
 8002522:	2201      	movs	r2, #1
 8002524:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002526:	f7fe fc0b 	bl	8000d40 <HAL_GetTick>
 800252a:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800252c:	4b75      	ldr	r3, [pc, #468]	@ (8002704 <HAL_RCC_OscConfig+0x294>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f013 0f02 	tst.w	r3, #2
 8002534:	d154      	bne.n	80025e0 <HAL_RCC_OscConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002536:	f7fe fc03 	bl	8000d40 <HAL_GetTick>
 800253a:	1b40      	subs	r0, r0, r5
 800253c:	2802      	cmp	r0, #2
 800253e:	d9f5      	bls.n	800252c <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8002540:	2003      	movs	r0, #3
 8002542:	e17f      	b.n	8002844 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002544:	4a6f      	ldr	r2, [pc, #444]	@ (8002704 <HAL_RCC_OscConfig+0x294>)
 8002546:	6813      	ldr	r3, [r2, #0]
 8002548:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800254c:	6013      	str	r3, [r2, #0]
 800254e:	e7b5      	b.n	80024bc <HAL_RCC_OscConfig+0x4c>
 8002550:	4b6c      	ldr	r3, [pc, #432]	@ (8002704 <HAL_RCC_OscConfig+0x294>)
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002558:	601a      	str	r2, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002560:	601a      	str	r2, [r3, #0]
 8002562:	e7ab      	b.n	80024bc <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8002564:	f7fe fbec 	bl	8000d40 <HAL_GetTick>
 8002568:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800256a:	4b66      	ldr	r3, [pc, #408]	@ (8002704 <HAL_RCC_OscConfig+0x294>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8002572:	d0c3      	beq.n	80024fc <HAL_RCC_OscConfig+0x8c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002574:	f7fe fbe4 	bl	8000d40 <HAL_GetTick>
 8002578:	1b40      	subs	r0, r0, r5
 800257a:	2864      	cmp	r0, #100	@ 0x64
 800257c:	d9f5      	bls.n	800256a <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 800257e:	2003      	movs	r0, #3
 8002580:	e160      	b.n	8002844 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002582:	4b60      	ldr	r3, [pc, #384]	@ (8002704 <HAL_RCC_OscConfig+0x294>)
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 800258a:	d1c6      	bne.n	800251a <HAL_RCC_OscConfig+0xaa>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800258c:	4b5d      	ldr	r3, [pc, #372]	@ (8002704 <HAL_RCC_OscConfig+0x294>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f013 0f02 	tst.w	r3, #2
 8002594:	d003      	beq.n	800259e <HAL_RCC_OscConfig+0x12e>
 8002596:	68e3      	ldr	r3, [r4, #12]
 8002598:	2b01      	cmp	r3, #1
 800259a:	f040 8150 	bne.w	800283e <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800259e:	4a59      	ldr	r2, [pc, #356]	@ (8002704 <HAL_RCC_OscConfig+0x294>)
 80025a0:	6813      	ldr	r3, [r2, #0]
 80025a2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80025a6:	6921      	ldr	r1, [r4, #16]
 80025a8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80025ac:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025ae:	6823      	ldr	r3, [r4, #0]
 80025b0:	f013 0f08 	tst.w	r3, #8
 80025b4:	d042      	beq.n	800263c <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80025b6:	6963      	ldr	r3, [r4, #20]
 80025b8:	b36b      	cbz	r3, 8002616 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025ba:	4b53      	ldr	r3, [pc, #332]	@ (8002708 <HAL_RCC_OscConfig+0x298>)
 80025bc:	2201      	movs	r2, #1
 80025be:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025c2:	f7fe fbbd 	bl	8000d40 <HAL_GetTick>
 80025c6:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025c8:	4b4e      	ldr	r3, [pc, #312]	@ (8002704 <HAL_RCC_OscConfig+0x294>)
 80025ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025cc:	f013 0f02 	tst.w	r3, #2
 80025d0:	d134      	bne.n	800263c <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025d2:	f7fe fbb5 	bl	8000d40 <HAL_GetTick>
 80025d6:	1b40      	subs	r0, r0, r5
 80025d8:	2802      	cmp	r0, #2
 80025da:	d9f5      	bls.n	80025c8 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 80025dc:	2003      	movs	r0, #3
 80025de:	e131      	b.n	8002844 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025e0:	4a48      	ldr	r2, [pc, #288]	@ (8002704 <HAL_RCC_OscConfig+0x294>)
 80025e2:	6813      	ldr	r3, [r2, #0]
 80025e4:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80025e8:	6921      	ldr	r1, [r4, #16]
 80025ea:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80025ee:	6013      	str	r3, [r2, #0]
 80025f0:	e7dd      	b.n	80025ae <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 80025f2:	4b45      	ldr	r3, [pc, #276]	@ (8002708 <HAL_RCC_OscConfig+0x298>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80025f8:	f7fe fba2 	bl	8000d40 <HAL_GetTick>
 80025fc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025fe:	4b41      	ldr	r3, [pc, #260]	@ (8002704 <HAL_RCC_OscConfig+0x294>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f013 0f02 	tst.w	r3, #2
 8002606:	d0d2      	beq.n	80025ae <HAL_RCC_OscConfig+0x13e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002608:	f7fe fb9a 	bl	8000d40 <HAL_GetTick>
 800260c:	1b40      	subs	r0, r0, r5
 800260e:	2802      	cmp	r0, #2
 8002610:	d9f5      	bls.n	80025fe <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8002612:	2003      	movs	r0, #3
 8002614:	e116      	b.n	8002844 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002616:	4b3c      	ldr	r3, [pc, #240]	@ (8002708 <HAL_RCC_OscConfig+0x298>)
 8002618:	2200      	movs	r2, #0
 800261a:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800261e:	f7fe fb8f 	bl	8000d40 <HAL_GetTick>
 8002622:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002624:	4b37      	ldr	r3, [pc, #220]	@ (8002704 <HAL_RCC_OscConfig+0x294>)
 8002626:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002628:	f013 0f02 	tst.w	r3, #2
 800262c:	d006      	beq.n	800263c <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800262e:	f7fe fb87 	bl	8000d40 <HAL_GetTick>
 8002632:	1b40      	subs	r0, r0, r5
 8002634:	2802      	cmp	r0, #2
 8002636:	d9f5      	bls.n	8002624 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 8002638:	2003      	movs	r0, #3
 800263a:	e103      	b.n	8002844 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800263c:	6823      	ldr	r3, [r4, #0]
 800263e:	f013 0f04 	tst.w	r3, #4
 8002642:	d077      	beq.n	8002734 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002644:	4b2f      	ldr	r3, [pc, #188]	@ (8002704 <HAL_RCC_OscConfig+0x294>)
 8002646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002648:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 800264c:	d133      	bne.n	80026b6 <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800264e:	2300      	movs	r3, #0
 8002650:	9301      	str	r3, [sp, #4]
 8002652:	4b2c      	ldr	r3, [pc, #176]	@ (8002704 <HAL_RCC_OscConfig+0x294>)
 8002654:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002656:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800265a:	641a      	str	r2, [r3, #64]	@ 0x40
 800265c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800265e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002662:	9301      	str	r3, [sp, #4]
 8002664:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002666:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002668:	4b28      	ldr	r3, [pc, #160]	@ (800270c <HAL_RCC_OscConfig+0x29c>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002670:	d023      	beq.n	80026ba <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002672:	68a3      	ldr	r3, [r4, #8]
 8002674:	2b01      	cmp	r3, #1
 8002676:	d034      	beq.n	80026e2 <HAL_RCC_OscConfig+0x272>
 8002678:	2b05      	cmp	r3, #5
 800267a:	d038      	beq.n	80026ee <HAL_RCC_OscConfig+0x27e>
 800267c:	4b21      	ldr	r3, [pc, #132]	@ (8002704 <HAL_RCC_OscConfig+0x294>)
 800267e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002680:	f022 0201 	bic.w	r2, r2, #1
 8002684:	671a      	str	r2, [r3, #112]	@ 0x70
 8002686:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002688:	f022 0204 	bic.w	r2, r2, #4
 800268c:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800268e:	68a3      	ldr	r3, [r4, #8]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d03d      	beq.n	8002710 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002694:	f7fe fb54 	bl	8000d40 <HAL_GetTick>
 8002698:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800269a:	4b1a      	ldr	r3, [pc, #104]	@ (8002704 <HAL_RCC_OscConfig+0x294>)
 800269c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800269e:	f013 0f02 	tst.w	r3, #2
 80026a2:	d146      	bne.n	8002732 <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026a4:	f7fe fb4c 	bl	8000d40 <HAL_GetTick>
 80026a8:	1b80      	subs	r0, r0, r6
 80026aa:	f241 3388 	movw	r3, #5000	@ 0x1388
 80026ae:	4298      	cmp	r0, r3
 80026b0:	d9f3      	bls.n	800269a <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 80026b2:	2003      	movs	r0, #3
 80026b4:	e0c6      	b.n	8002844 <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 80026b6:	2500      	movs	r5, #0
 80026b8:	e7d6      	b.n	8002668 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026ba:	4a14      	ldr	r2, [pc, #80]	@ (800270c <HAL_RCC_OscConfig+0x29c>)
 80026bc:	6813      	ldr	r3, [r2, #0]
 80026be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026c2:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80026c4:	f7fe fb3c 	bl	8000d40 <HAL_GetTick>
 80026c8:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ca:	4b10      	ldr	r3, [pc, #64]	@ (800270c <HAL_RCC_OscConfig+0x29c>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80026d2:	d1ce      	bne.n	8002672 <HAL_RCC_OscConfig+0x202>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026d4:	f7fe fb34 	bl	8000d40 <HAL_GetTick>
 80026d8:	1b80      	subs	r0, r0, r6
 80026da:	2802      	cmp	r0, #2
 80026dc:	d9f5      	bls.n	80026ca <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 80026de:	2003      	movs	r0, #3
 80026e0:	e0b0      	b.n	8002844 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026e2:	4a08      	ldr	r2, [pc, #32]	@ (8002704 <HAL_RCC_OscConfig+0x294>)
 80026e4:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 80026e6:	f043 0301 	orr.w	r3, r3, #1
 80026ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80026ec:	e7cf      	b.n	800268e <HAL_RCC_OscConfig+0x21e>
 80026ee:	4b05      	ldr	r3, [pc, #20]	@ (8002704 <HAL_RCC_OscConfig+0x294>)
 80026f0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80026f2:	f042 0204 	orr.w	r2, r2, #4
 80026f6:	671a      	str	r2, [r3, #112]	@ 0x70
 80026f8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80026fa:	f042 0201 	orr.w	r2, r2, #1
 80026fe:	671a      	str	r2, [r3, #112]	@ 0x70
 8002700:	e7c5      	b.n	800268e <HAL_RCC_OscConfig+0x21e>
 8002702:	bf00      	nop
 8002704:	40023800 	.word	0x40023800
 8002708:	42470000 	.word	0x42470000
 800270c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002710:	f7fe fb16 	bl	8000d40 <HAL_GetTick>
 8002714:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002716:	4b52      	ldr	r3, [pc, #328]	@ (8002860 <HAL_RCC_OscConfig+0x3f0>)
 8002718:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800271a:	f013 0f02 	tst.w	r3, #2
 800271e:	d008      	beq.n	8002732 <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002720:	f7fe fb0e 	bl	8000d40 <HAL_GetTick>
 8002724:	1b80      	subs	r0, r0, r6
 8002726:	f241 3388 	movw	r3, #5000	@ 0x1388
 800272a:	4298      	cmp	r0, r3
 800272c:	d9f3      	bls.n	8002716 <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 800272e:	2003      	movs	r0, #3
 8002730:	e088      	b.n	8002844 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002732:	b9ed      	cbnz	r5, 8002770 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002734:	69a3      	ldr	r3, [r4, #24]
 8002736:	2b00      	cmp	r3, #0
 8002738:	f000 8083 	beq.w	8002842 <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800273c:	4a48      	ldr	r2, [pc, #288]	@ (8002860 <HAL_RCC_OscConfig+0x3f0>)
 800273e:	6892      	ldr	r2, [r2, #8]
 8002740:	f002 020c 	and.w	r2, r2, #12
 8002744:	2a08      	cmp	r2, #8
 8002746:	d051      	beq.n	80027ec <HAL_RCC_OscConfig+0x37c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002748:	2b02      	cmp	r3, #2
 800274a:	d017      	beq.n	800277c <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800274c:	4b45      	ldr	r3, [pc, #276]	@ (8002864 <HAL_RCC_OscConfig+0x3f4>)
 800274e:	2200      	movs	r2, #0
 8002750:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002752:	f7fe faf5 	bl	8000d40 <HAL_GetTick>
 8002756:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002758:	4b41      	ldr	r3, [pc, #260]	@ (8002860 <HAL_RCC_OscConfig+0x3f0>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002760:	d042      	beq.n	80027e8 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002762:	f7fe faed 	bl	8000d40 <HAL_GetTick>
 8002766:	1b00      	subs	r0, r0, r4
 8002768:	2802      	cmp	r0, #2
 800276a:	d9f5      	bls.n	8002758 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800276c:	2003      	movs	r0, #3
 800276e:	e069      	b.n	8002844 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002770:	4a3b      	ldr	r2, [pc, #236]	@ (8002860 <HAL_RCC_OscConfig+0x3f0>)
 8002772:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8002774:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002778:	6413      	str	r3, [r2, #64]	@ 0x40
 800277a:	e7db      	b.n	8002734 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 800277c:	4b39      	ldr	r3, [pc, #228]	@ (8002864 <HAL_RCC_OscConfig+0x3f4>)
 800277e:	2200      	movs	r2, #0
 8002780:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8002782:	f7fe fadd 	bl	8000d40 <HAL_GetTick>
 8002786:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002788:	4b35      	ldr	r3, [pc, #212]	@ (8002860 <HAL_RCC_OscConfig+0x3f0>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002790:	d006      	beq.n	80027a0 <HAL_RCC_OscConfig+0x330>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002792:	f7fe fad5 	bl	8000d40 <HAL_GetTick>
 8002796:	1b40      	subs	r0, r0, r5
 8002798:	2802      	cmp	r0, #2
 800279a:	d9f5      	bls.n	8002788 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 800279c:	2003      	movs	r0, #3
 800279e:	e051      	b.n	8002844 <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027a0:	69e3      	ldr	r3, [r4, #28]
 80027a2:	6a22      	ldr	r2, [r4, #32]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80027a8:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80027ac:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80027ae:	0852      	lsrs	r2, r2, #1
 80027b0:	3a01      	subs	r2, #1
 80027b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80027b6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80027b8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80027bc:	4a28      	ldr	r2, [pc, #160]	@ (8002860 <HAL_RCC_OscConfig+0x3f0>)
 80027be:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80027c0:	4b28      	ldr	r3, [pc, #160]	@ (8002864 <HAL_RCC_OscConfig+0x3f4>)
 80027c2:	2201      	movs	r2, #1
 80027c4:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80027c6:	f7fe fabb 	bl	8000d40 <HAL_GetTick>
 80027ca:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027cc:	4b24      	ldr	r3, [pc, #144]	@ (8002860 <HAL_RCC_OscConfig+0x3f0>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80027d4:	d106      	bne.n	80027e4 <HAL_RCC_OscConfig+0x374>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027d6:	f7fe fab3 	bl	8000d40 <HAL_GetTick>
 80027da:	1b00      	subs	r0, r0, r4
 80027dc:	2802      	cmp	r0, #2
 80027de:	d9f5      	bls.n	80027cc <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 80027e0:	2003      	movs	r0, #3
 80027e2:	e02f      	b.n	8002844 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80027e4:	2000      	movs	r0, #0
 80027e6:	e02d      	b.n	8002844 <HAL_RCC_OscConfig+0x3d4>
 80027e8:	2000      	movs	r0, #0
 80027ea:	e02b      	b.n	8002844 <HAL_RCC_OscConfig+0x3d4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d02b      	beq.n	8002848 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 80027f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002860 <HAL_RCC_OscConfig+0x3f0>)
 80027f2:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027f4:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 80027f8:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027fa:	4291      	cmp	r1, r2
 80027fc:	d126      	bne.n	800284c <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002802:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002804:	428a      	cmp	r2, r1
 8002806:	d123      	bne.n	8002850 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002808:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800280a:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 800280e:	401a      	ands	r2, r3
 8002810:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8002814:	d11e      	bne.n	8002854 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002816:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 800281a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800281c:	0852      	lsrs	r2, r2, #1
 800281e:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002820:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8002824:	d118      	bne.n	8002858 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002826:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 800282a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800282c:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8002830:	d114      	bne.n	800285c <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 8002832:	2000      	movs	r0, #0
 8002834:	e006      	b.n	8002844 <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 8002836:	2001      	movs	r0, #1
}
 8002838:	4770      	bx	lr
        return HAL_ERROR;
 800283a:	2001      	movs	r0, #1
 800283c:	e002      	b.n	8002844 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 800283e:	2001      	movs	r0, #1
 8002840:	e000      	b.n	8002844 <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 8002842:	2000      	movs	r0, #0
}
 8002844:	b002      	add	sp, #8
 8002846:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8002848:	2001      	movs	r0, #1
 800284a:	e7fb      	b.n	8002844 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 800284c:	2001      	movs	r0, #1
 800284e:	e7f9      	b.n	8002844 <HAL_RCC_OscConfig+0x3d4>
 8002850:	2001      	movs	r0, #1
 8002852:	e7f7      	b.n	8002844 <HAL_RCC_OscConfig+0x3d4>
 8002854:	2001      	movs	r0, #1
 8002856:	e7f5      	b.n	8002844 <HAL_RCC_OscConfig+0x3d4>
 8002858:	2001      	movs	r0, #1
 800285a:	e7f3      	b.n	8002844 <HAL_RCC_OscConfig+0x3d4>
 800285c:	2001      	movs	r0, #1
 800285e:	e7f1      	b.n	8002844 <HAL_RCC_OscConfig+0x3d4>
 8002860:	40023800 	.word	0x40023800
 8002864:	42470000 	.word	0x42470000

08002868 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002868:	b508      	push	{r3, lr}
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800286a:	4b33      	ldr	r3, [pc, #204]	@ (8002938 <HAL_RCC_GetSysClockFreq+0xd0>)
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f003 030c 	and.w	r3, r3, #12
 8002872:	2b04      	cmp	r3, #4
 8002874:	d05b      	beq.n	800292e <HAL_RCC_GetSysClockFreq+0xc6>
 8002876:	2b08      	cmp	r3, #8
 8002878:	d15b      	bne.n	8002932 <HAL_RCC_GetSysClockFreq+0xca>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800287a:	4b2f      	ldr	r3, [pc, #188]	@ (8002938 <HAL_RCC_GetSysClockFreq+0xd0>)
 800287c:	685a      	ldr	r2, [r3, #4]
 800287e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002888:	d02c      	beq.n	80028e4 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800288a:	4b2b      	ldr	r3, [pc, #172]	@ (8002938 <HAL_RCC_GetSysClockFreq+0xd0>)
 800288c:	6858      	ldr	r0, [r3, #4]
 800288e:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8002892:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8002896:	ebbc 0c00 	subs.w	ip, ip, r0
 800289a:	eb6e 0e0e 	sbc.w	lr, lr, lr
 800289e:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80028a2:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 80028a6:	ea4f 118c 	mov.w	r1, ip, lsl #6
 80028aa:	ebb1 010c 	subs.w	r1, r1, ip
 80028ae:	eb63 030e 	sbc.w	r3, r3, lr
 80028b2:	00db      	lsls	r3, r3, #3
 80028b4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028b8:	00c9      	lsls	r1, r1, #3
 80028ba:	eb11 0c00 	adds.w	ip, r1, r0
 80028be:	f143 0300 	adc.w	r3, r3, #0
 80028c2:	0259      	lsls	r1, r3, #9
 80028c4:	2300      	movs	r3, #0
 80028c6:	ea4f 204c 	mov.w	r0, ip, lsl #9
 80028ca:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 80028ce:	f7fd fccf 	bl	8000270 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80028d2:	4b19      	ldr	r3, [pc, #100]	@ (8002938 <HAL_RCC_GetSysClockFreq+0xd0>)
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80028da:	3301      	adds	r3, #1
 80028dc:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 80028de:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80028e2:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028e4:	4b14      	ldr	r3, [pc, #80]	@ (8002938 <HAL_RCC_GetSysClockFreq+0xd0>)
 80028e6:	6858      	ldr	r0, [r3, #4]
 80028e8:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80028ec:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 80028f0:	ebbc 0c00 	subs.w	ip, ip, r0
 80028f4:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80028f8:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80028fc:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8002900:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8002904:	ebb1 010c 	subs.w	r1, r1, ip
 8002908:	eb63 030e 	sbc.w	r3, r3, lr
 800290c:	00db      	lsls	r3, r3, #3
 800290e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002912:	00c9      	lsls	r1, r1, #3
 8002914:	eb11 0c00 	adds.w	ip, r1, r0
 8002918:	f143 0300 	adc.w	r3, r3, #0
 800291c:	0299      	lsls	r1, r3, #10
 800291e:	2300      	movs	r3, #0
 8002920:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8002924:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8002928:	f7fd fca2 	bl	8000270 <__aeabi_uldivmod>
 800292c:	e7d1      	b.n	80028d2 <HAL_RCC_GetSysClockFreq+0x6a>
      sysclockfreq = HSE_VALUE;
 800292e:	4803      	ldr	r0, [pc, #12]	@ (800293c <HAL_RCC_GetSysClockFreq+0xd4>)
 8002930:	e7d7      	b.n	80028e2 <HAL_RCC_GetSysClockFreq+0x7a>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002932:	4803      	ldr	r0, [pc, #12]	@ (8002940 <HAL_RCC_GetSysClockFreq+0xd8>)
  return sysclockfreq;
 8002934:	e7d5      	b.n	80028e2 <HAL_RCC_GetSysClockFreq+0x7a>
 8002936:	bf00      	nop
 8002938:	40023800 	.word	0x40023800
 800293c:	007a1200 	.word	0x007a1200
 8002940:	00f42400 	.word	0x00f42400

08002944 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8002944:	2800      	cmp	r0, #0
 8002946:	f000 809b 	beq.w	8002a80 <HAL_RCC_ClockConfig+0x13c>
{
 800294a:	b570      	push	{r4, r5, r6, lr}
 800294c:	460d      	mov	r5, r1
 800294e:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002950:	4b4f      	ldr	r3, [pc, #316]	@ (8002a90 <HAL_RCC_ClockConfig+0x14c>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0307 	and.w	r3, r3, #7
 8002958:	428b      	cmp	r3, r1
 800295a:	d208      	bcs.n	800296e <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800295c:	b2cb      	uxtb	r3, r1
 800295e:	4a4c      	ldr	r2, [pc, #304]	@ (8002a90 <HAL_RCC_ClockConfig+0x14c>)
 8002960:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002962:	6813      	ldr	r3, [r2, #0]
 8002964:	f003 0307 	and.w	r3, r3, #7
 8002968:	428b      	cmp	r3, r1
 800296a:	f040 808b 	bne.w	8002a84 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800296e:	6823      	ldr	r3, [r4, #0]
 8002970:	f013 0f02 	tst.w	r3, #2
 8002974:	d017      	beq.n	80029a6 <HAL_RCC_ClockConfig+0x62>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002976:	f013 0f04 	tst.w	r3, #4
 800297a:	d004      	beq.n	8002986 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800297c:	4a45      	ldr	r2, [pc, #276]	@ (8002a94 <HAL_RCC_ClockConfig+0x150>)
 800297e:	6893      	ldr	r3, [r2, #8]
 8002980:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002984:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002986:	6823      	ldr	r3, [r4, #0]
 8002988:	f013 0f08 	tst.w	r3, #8
 800298c:	d004      	beq.n	8002998 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800298e:	4a41      	ldr	r2, [pc, #260]	@ (8002a94 <HAL_RCC_ClockConfig+0x150>)
 8002990:	6893      	ldr	r3, [r2, #8]
 8002992:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002996:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002998:	4a3e      	ldr	r2, [pc, #248]	@ (8002a94 <HAL_RCC_ClockConfig+0x150>)
 800299a:	6893      	ldr	r3, [r2, #8]
 800299c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80029a0:	68a1      	ldr	r1, [r4, #8]
 80029a2:	430b      	orrs	r3, r1
 80029a4:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029a6:	6823      	ldr	r3, [r4, #0]
 80029a8:	f013 0f01 	tst.w	r3, #1
 80029ac:	d032      	beq.n	8002a14 <HAL_RCC_ClockConfig+0xd0>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029ae:	6863      	ldr	r3, [r4, #4]
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d021      	beq.n	80029f8 <HAL_RCC_ClockConfig+0xb4>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029b4:	1e9a      	subs	r2, r3, #2
 80029b6:	2a01      	cmp	r2, #1
 80029b8:	d925      	bls.n	8002a06 <HAL_RCC_ClockConfig+0xc2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ba:	4a36      	ldr	r2, [pc, #216]	@ (8002a94 <HAL_RCC_ClockConfig+0x150>)
 80029bc:	6812      	ldr	r2, [r2, #0]
 80029be:	f012 0f02 	tst.w	r2, #2
 80029c2:	d061      	beq.n	8002a88 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029c4:	4933      	ldr	r1, [pc, #204]	@ (8002a94 <HAL_RCC_ClockConfig+0x150>)
 80029c6:	688a      	ldr	r2, [r1, #8]
 80029c8:	f022 0203 	bic.w	r2, r2, #3
 80029cc:	4313      	orrs	r3, r2
 80029ce:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80029d0:	f7fe f9b6 	bl	8000d40 <HAL_GetTick>
 80029d4:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029d6:	4b2f      	ldr	r3, [pc, #188]	@ (8002a94 <HAL_RCC_ClockConfig+0x150>)
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f003 030c 	and.w	r3, r3, #12
 80029de:	6862      	ldr	r2, [r4, #4]
 80029e0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80029e4:	d016      	beq.n	8002a14 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029e6:	f7fe f9ab 	bl	8000d40 <HAL_GetTick>
 80029ea:	1b80      	subs	r0, r0, r6
 80029ec:	f241 3388 	movw	r3, #5000	@ 0x1388
 80029f0:	4298      	cmp	r0, r3
 80029f2:	d9f0      	bls.n	80029d6 <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 80029f4:	2003      	movs	r0, #3
 80029f6:	e042      	b.n	8002a7e <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029f8:	4a26      	ldr	r2, [pc, #152]	@ (8002a94 <HAL_RCC_ClockConfig+0x150>)
 80029fa:	6812      	ldr	r2, [r2, #0]
 80029fc:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8002a00:	d1e0      	bne.n	80029c4 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8002a02:	2001      	movs	r0, #1
 8002a04:	e03b      	b.n	8002a7e <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a06:	4a23      	ldr	r2, [pc, #140]	@ (8002a94 <HAL_RCC_ClockConfig+0x150>)
 8002a08:	6812      	ldr	r2, [r2, #0]
 8002a0a:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8002a0e:	d1d9      	bne.n	80029c4 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8002a10:	2001      	movs	r0, #1
 8002a12:	e034      	b.n	8002a7e <HAL_RCC_ClockConfig+0x13a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a14:	4b1e      	ldr	r3, [pc, #120]	@ (8002a90 <HAL_RCC_ClockConfig+0x14c>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0307 	and.w	r3, r3, #7
 8002a1c:	42ab      	cmp	r3, r5
 8002a1e:	d907      	bls.n	8002a30 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a20:	b2ea      	uxtb	r2, r5
 8002a22:	4b1b      	ldr	r3, [pc, #108]	@ (8002a90 <HAL_RCC_ClockConfig+0x14c>)
 8002a24:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0307 	and.w	r3, r3, #7
 8002a2c:	42ab      	cmp	r3, r5
 8002a2e:	d12d      	bne.n	8002a8c <HAL_RCC_ClockConfig+0x148>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a30:	6823      	ldr	r3, [r4, #0]
 8002a32:	f013 0f04 	tst.w	r3, #4
 8002a36:	d006      	beq.n	8002a46 <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a38:	4a16      	ldr	r2, [pc, #88]	@ (8002a94 <HAL_RCC_ClockConfig+0x150>)
 8002a3a:	6893      	ldr	r3, [r2, #8]
 8002a3c:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8002a40:	68e1      	ldr	r1, [r4, #12]
 8002a42:	430b      	orrs	r3, r1
 8002a44:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a46:	6823      	ldr	r3, [r4, #0]
 8002a48:	f013 0f08 	tst.w	r3, #8
 8002a4c:	d007      	beq.n	8002a5e <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a4e:	4a11      	ldr	r2, [pc, #68]	@ (8002a94 <HAL_RCC_ClockConfig+0x150>)
 8002a50:	6893      	ldr	r3, [r2, #8]
 8002a52:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8002a56:	6921      	ldr	r1, [r4, #16]
 8002a58:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002a5c:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a5e:	f7ff ff03 	bl	8002868 <HAL_RCC_GetSysClockFreq>
 8002a62:	4b0c      	ldr	r3, [pc, #48]	@ (8002a94 <HAL_RCC_ClockConfig+0x150>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002a6a:	4a0b      	ldr	r2, [pc, #44]	@ (8002a98 <HAL_RCC_ClockConfig+0x154>)
 8002a6c:	5cd3      	ldrb	r3, [r2, r3]
 8002a6e:	40d8      	lsrs	r0, r3
 8002a70:	4b0a      	ldr	r3, [pc, #40]	@ (8002a9c <HAL_RCC_ClockConfig+0x158>)
 8002a72:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8002a74:	4b0a      	ldr	r3, [pc, #40]	@ (8002aa0 <HAL_RCC_ClockConfig+0x15c>)
 8002a76:	6818      	ldr	r0, [r3, #0]
 8002a78:	f7fe f916 	bl	8000ca8 <HAL_InitTick>
  return HAL_OK;
 8002a7c:	2000      	movs	r0, #0
}
 8002a7e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002a80:	2001      	movs	r0, #1
}
 8002a82:	4770      	bx	lr
      return HAL_ERROR;
 8002a84:	2001      	movs	r0, #1
 8002a86:	e7fa      	b.n	8002a7e <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8002a88:	2001      	movs	r0, #1
 8002a8a:	e7f8      	b.n	8002a7e <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8002a8c:	2001      	movs	r0, #1
 8002a8e:	e7f6      	b.n	8002a7e <HAL_RCC_ClockConfig+0x13a>
 8002a90:	40023c00 	.word	0x40023c00
 8002a94:	40023800 	.word	0x40023800
 8002a98:	08005fc4 	.word	0x08005fc4
 8002a9c:	20000004 	.word	0x20000004
 8002aa0:	2000000c 	.word	0x2000000c

08002aa4 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002aa4:	4b01      	ldr	r3, [pc, #4]	@ (8002aac <HAL_RCC_GetHCLKFreq+0x8>)
 8002aa6:	6818      	ldr	r0, [r3, #0]
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	20000004 	.word	0x20000004

08002ab0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ab0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ab2:	f7ff fff7 	bl	8002aa4 <HAL_RCC_GetHCLKFreq>
 8002ab6:	4b04      	ldr	r3, [pc, #16]	@ (8002ac8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002abe:	4a03      	ldr	r2, [pc, #12]	@ (8002acc <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002ac0:	5cd3      	ldrb	r3, [r2, r3]
}
 8002ac2:	40d8      	lsrs	r0, r3
 8002ac4:	bd08      	pop	{r3, pc}
 8002ac6:	bf00      	nop
 8002ac8:	40023800 	.word	0x40023800
 8002acc:	08005fbc 	.word	0x08005fbc

08002ad0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ad0:	b530      	push	{r4, r5, lr}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002ad6:	6803      	ldr	r3, [r0, #0]
 8002ad8:	f013 0f05 	tst.w	r3, #5
 8002adc:	d106      	bne.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x1c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002ade:	6823      	ldr	r3, [r4, #0]
 8002ae0:	f013 0f02 	tst.w	r3, #2
 8002ae4:	d12e      	bne.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x74>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002ae6:	2000      	movs	r0, #0
}
 8002ae8:	b003      	add	sp, #12
 8002aea:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 8002aec:	4b4a      	ldr	r3, [pc, #296]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	669a      	str	r2, [r3, #104]	@ 0x68
    tickstart = HAL_GetTick();
 8002af2:	f7fe f925 	bl	8000d40 <HAL_GetTick>
 8002af6:	4605      	mov	r5, r0
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002af8:	4b48      	ldr	r3, [pc, #288]	@ (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8002b00:	d006      	beq.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x40>
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002b02:	f7fe f91d 	bl	8000d40 <HAL_GetTick>
 8002b06:	1b43      	subs	r3, r0, r5
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d9f5      	bls.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x28>
        return HAL_TIMEOUT;
 8002b0c:	2003      	movs	r0, #3
 8002b0e:	e7eb      	b.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x18>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b10:	6862      	ldr	r2, [r4, #4]
 8002b12:	68a3      	ldr	r3, [r4, #8]
 8002b14:	071b      	lsls	r3, r3, #28
 8002b16:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002b1a:	4a40      	ldr	r2, [pc, #256]	@ (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002b1c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8002b20:	4b3d      	ldr	r3, [pc, #244]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8002b22:	2201      	movs	r2, #1
 8002b24:	669a      	str	r2, [r3, #104]	@ 0x68
    tickstart = HAL_GetTick();
 8002b26:	f7fe f90b 	bl	8000d40 <HAL_GetTick>
 8002b2a:	4605      	mov	r5, r0
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b2c:	4b3b      	ldr	r3, [pc, #236]	@ (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8002b34:	d1d3      	bne.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0xe>
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002b36:	f7fe f903 	bl	8000d40 <HAL_GetTick>
 8002b3a:	1b43      	subs	r3, r0, r5
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d9f5      	bls.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x5c>
        return HAL_TIMEOUT;
 8002b40:	2003      	movs	r0, #3
 8002b42:	e7d1      	b.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x18>
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b44:	2300      	movs	r3, #0
 8002b46:	9301      	str	r3, [sp, #4]
 8002b48:	4b34      	ldr	r3, [pc, #208]	@ (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002b4a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b4c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002b50:	641a      	str	r2, [r3, #64]	@ 0x40
 8002b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b58:	9301      	str	r3, [sp, #4]
 8002b5a:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8002b5c:	4a30      	ldr	r2, [pc, #192]	@ (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002b5e:	6813      	ldr	r3, [r2, #0]
 8002b60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b64:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002b66:	f7fe f8eb 	bl	8000d40 <HAL_GetTick>
 8002b6a:	4605      	mov	r5, r0
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002b6c:	4b2c      	ldr	r3, [pc, #176]	@ (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002b74:	d106      	bne.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b76:	f7fe f8e3 	bl	8000d40 <HAL_GetTick>
 8002b7a:	1b43      	subs	r3, r0, r5
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d9f5      	bls.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x9c>
        return HAL_TIMEOUT;
 8002b80:	2003      	movs	r0, #3
 8002b82:	e7b1      	b.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x18>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b84:	4b25      	ldr	r3, [pc, #148]	@ (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002b86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b88:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8002b8c:	d014      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002b8e:	68e2      	ldr	r2, [r4, #12]
 8002b90:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d00f      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b98:	4b20      	ldr	r3, [pc, #128]	@ (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002b9a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002b9c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ba0:	491d      	ldr	r1, [pc, #116]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8002ba2:	2001      	movs	r0, #1
 8002ba4:	f8c1 0e40 	str.w	r0, [r1, #3648]	@ 0xe40
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ba8:	2000      	movs	r0, #0
 8002baa:	f8c1 0e40 	str.w	r0, [r1, #3648]	@ 0xe40
      RCC->BDCR = tmpreg1;
 8002bae:	671a      	str	r2, [r3, #112]	@ 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002bb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bb2:	f013 0f01 	tst.w	r3, #1
 8002bb6:	d113      	bne.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x110>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bb8:	68e3      	ldr	r3, [r4, #12]
 8002bba:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8002bbe:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8002bc2:	d01e      	beq.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x132>
 8002bc4:	4a15      	ldr	r2, [pc, #84]	@ (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002bc6:	6893      	ldr	r3, [r2, #8]
 8002bc8:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002bcc:	6093      	str	r3, [r2, #8]
 8002bce:	4913      	ldr	r1, [pc, #76]	@ (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002bd0:	6f0b      	ldr	r3, [r1, #112]	@ 0x70
 8002bd2:	68e2      	ldr	r2, [r4, #12]
 8002bd4:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	670b      	str	r3, [r1, #112]	@ 0x70
  return HAL_OK;
 8002bdc:	2000      	movs	r0, #0
 8002bde:	e783      	b.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x18>
        tickstart = HAL_GetTick();
 8002be0:	f7fe f8ae 	bl	8000d40 <HAL_GetTick>
 8002be4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002be6:	4b0d      	ldr	r3, [pc, #52]	@ (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002be8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bea:	f013 0f02 	tst.w	r3, #2
 8002bee:	d1e3      	bne.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bf0:	f7fe f8a6 	bl	8000d40 <HAL_GetTick>
 8002bf4:	1b40      	subs	r0, r0, r5
 8002bf6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002bfa:	4298      	cmp	r0, r3
 8002bfc:	d9f3      	bls.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x116>
            return HAL_TIMEOUT;
 8002bfe:	2003      	movs	r0, #3
 8002c00:	e772      	b.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x18>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c02:	4906      	ldr	r1, [pc, #24]	@ (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002c04:	688a      	ldr	r2, [r1, #8]
 8002c06:	f422 12f8 	bic.w	r2, r2, #2031616	@ 0x1f0000
 8002c0a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002c0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c12:	4313      	orrs	r3, r2
 8002c14:	608b      	str	r3, [r1, #8]
 8002c16:	e7da      	b.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002c18:	42470000 	.word	0x42470000
 8002c1c:	40023800 	.word	0x40023800
 8002c20:	40007000 	.word	0x40007000

08002c24 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
  uint32_t srcclk = 0U;
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
  switch (PeriphClk)
 8002c24:	2801      	cmp	r0, #1
 8002c26:	d001      	beq.n	8002c2c <HAL_RCCEx_GetPeriphCLKFreq+0x8>
  uint32_t frequency = 0U;
 8002c28:	2000      	movs	r0, #0
 8002c2a:	4770      	bx	lr
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8002c2c:	4b15      	ldr	r3, [pc, #84]	@ (8002c84 <HAL_RCCEx_GetPeriphCLKFreq+0x60>)
 8002c2e:	689b      	ldr	r3, [r3, #8]
      switch (srcclk)
 8002c30:	f413 0300 	ands.w	r3, r3, #8388608	@ 0x800000
 8002c34:	d002      	beq.n	8002c3c <HAL_RCCEx_GetPeriphCLKFreq+0x18>
 8002c36:	b31b      	cbz	r3, 8002c80 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
 8002c38:	4813      	ldr	r0, [pc, #76]	@ (8002c88 <HAL_RCCEx_GetPeriphCLKFreq+0x64>)
 8002c3a:	4770      	bx	lr
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002c3c:	4b11      	ldr	r3, [pc, #68]	@ (8002c84 <HAL_RCCEx_GetPeriphCLKFreq+0x60>)
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002c44:	d014      	beq.n	8002c70 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002c46:	4b0f      	ldr	r3, [pc, #60]	@ (8002c84 <HAL_RCCEx_GetPeriphCLKFreq+0x60>)
 8002c48:	685a      	ldr	r2, [r3, #4]
 8002c4a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8002c4e:	4b0f      	ldr	r3, [pc, #60]	@ (8002c8c <HAL_RCCEx_GetPeriphCLKFreq+0x68>)
 8002c50:	fbb3 f3f2 	udiv	r3, r3, r2
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8002c54:	4a0b      	ldr	r2, [pc, #44]	@ (8002c84 <HAL_RCCEx_GetPeriphCLKFreq+0x60>)
 8002c56:	f8d2 0084 	ldr.w	r0, [r2, #132]	@ 0x84
 8002c5a:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8002c5e:	fb03 f000 	mul.w	r0, r3, r0
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8002c62:	f8d2 3084 	ldr.w	r3, [r2, #132]	@ 0x84
 8002c66:	f3c3 7302 	ubfx	r3, r3, #28, #3
 8002c6a:	fbb0 f0f3 	udiv	r0, r0, r3
          break;
 8002c6e:	4770      	bx	lr
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002c70:	4b04      	ldr	r3, [pc, #16]	@ (8002c84 <HAL_RCCEx_GetPeriphCLKFreq+0x60>)
 8002c72:	685a      	ldr	r2, [r3, #4]
 8002c74:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8002c78:	4b05      	ldr	r3, [pc, #20]	@ (8002c90 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>)
 8002c7a:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c7e:	e7e9      	b.n	8002c54 <HAL_RCCEx_GetPeriphCLKFreq+0x30>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8002c80:	2000      	movs	r0, #0
    {
      break;
    }
  }
  return frequency;
}
 8002c82:	4770      	bx	lr
 8002c84:	40023800 	.word	0x40023800
 8002c88:	00bb8000 	.word	0x00bb8000
 8002c8c:	007a1200 	.word	0x007a1200
 8002c90:	00f42400 	.word	0x00f42400

08002c94 <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c94:	2800      	cmp	r0, #0
 8002c96:	d05a      	beq.n	8002d4e <HAL_SPI_Init+0xba>
{
 8002c98:	b510      	push	{r4, lr}
 8002c9a:	4604      	mov	r4, r0
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002c9c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8002c9e:	b933      	cbnz	r3, 8002cae <HAL_SPI_Init+0x1a>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ca0:	6843      	ldr	r3, [r0, #4]
 8002ca2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002ca6:	d005      	beq.n	8002cb4 <HAL_SPI_Init+0x20>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	61c3      	str	r3, [r0, #28]
 8002cac:	e002      	b.n	8002cb4 <HAL_SPI_Init+0x20>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002cb2:	6143      	str	r3, [r0, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	62a3      	str	r3, [r4, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002cb8:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d040      	beq.n	8002d42 <HAL_SPI_Init+0xae>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002cc6:	6822      	ldr	r2, [r4, #0]
 8002cc8:	6813      	ldr	r3, [r2, #0]
 8002cca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002cce:	6013      	str	r3, [r2, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002cd0:	6863      	ldr	r3, [r4, #4]
 8002cd2:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8002cd6:	68a2      	ldr	r2, [r4, #8]
 8002cd8:	f402 4204 	and.w	r2, r2, #33792	@ 0x8400
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	68e2      	ldr	r2, [r4, #12]
 8002ce0:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	6922      	ldr	r2, [r4, #16]
 8002ce8:	f002 0202 	and.w	r2, r2, #2
 8002cec:	4313      	orrs	r3, r2
 8002cee:	6962      	ldr	r2, [r4, #20]
 8002cf0:	f002 0201 	and.w	r2, r2, #1
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	69a2      	ldr	r2, [r4, #24]
 8002cf8:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	69e2      	ldr	r2, [r4, #28]
 8002d00:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 8002d04:	4313      	orrs	r3, r2
 8002d06:	6a22      	ldr	r2, [r4, #32]
 8002d08:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002d10:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002d14:	6821      	ldr	r1, [r4, #0]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	600b      	str	r3, [r1, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002d1a:	8b63      	ldrh	r3, [r4, #26]
 8002d1c:	f003 0304 	and.w	r3, r3, #4
 8002d20:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002d22:	f002 0210 	and.w	r2, r2, #16
 8002d26:	6821      	ldr	r1, [r4, #0]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	604b      	str	r3, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002d2c:	6822      	ldr	r2, [r4, #0]
 8002d2e:	69d3      	ldr	r3, [r2, #28]
 8002d30:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002d34:	61d3      	str	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d36:	2000      	movs	r0, #0
 8002d38:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51

  return HAL_OK;
}
 8002d40:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8002d42:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 8002d46:	4620      	mov	r0, r4
 8002d48:	f7fd fec8 	bl	8000adc <HAL_SPI_MspInit>
 8002d4c:	e7b8      	b.n	8002cc0 <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 8002d4e:	2001      	movs	r0, #1
}
 8002d50:	4770      	bx	lr

08002d52 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8002d52:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8002d54:	2300      	movs	r3, #0
 8002d56:	9301      	str	r3, [sp, #4]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002d58:	9b01      	ldr	r3, [sp, #4]
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
 8002d5e:	9b01      	ldr	r3, [sp, #4]
 8002d60:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002d64:	d81c      	bhi.n	8002da0 <USB_CoreReset+0x4e>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002d66:	6903      	ldr	r3, [r0, #16]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	daf5      	bge.n	8002d58 <USB_CoreReset+0x6>

  count = 10U;
 8002d6c:	230a      	movs	r3, #10
 8002d6e:	9301      	str	r3, [sp, #4]

  /* few cycles before setting core reset */
  while (count > 0U)
 8002d70:	e002      	b.n	8002d78 <USB_CoreReset+0x26>
  {
    count--;
 8002d72:	9b01      	ldr	r3, [sp, #4]
 8002d74:	3b01      	subs	r3, #1
 8002d76:	9301      	str	r3, [sp, #4]
  while (count > 0U)
 8002d78:	9b01      	ldr	r3, [sp, #4]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d1f9      	bne.n	8002d72 <USB_CoreReset+0x20>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8002d7e:	6903      	ldr	r3, [r0, #16]
 8002d80:	f043 0301 	orr.w	r3, r3, #1
 8002d84:	6103      	str	r3, [r0, #16]

  do
  {
    count++;
 8002d86:	9b01      	ldr	r3, [sp, #4]
 8002d88:	3301      	adds	r3, #1
 8002d8a:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
 8002d8c:	9b01      	ldr	r3, [sp, #4]
 8002d8e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002d92:	d808      	bhi.n	8002da6 <USB_CoreReset+0x54>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8002d94:	6903      	ldr	r3, [r0, #16]
 8002d96:	f013 0f01 	tst.w	r3, #1
 8002d9a:	d1f4      	bne.n	8002d86 <USB_CoreReset+0x34>

  return HAL_OK;
 8002d9c:	2000      	movs	r0, #0
 8002d9e:	e000      	b.n	8002da2 <USB_CoreReset+0x50>
      return HAL_TIMEOUT;
 8002da0:	2003      	movs	r0, #3
}
 8002da2:	b002      	add	sp, #8
 8002da4:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002da6:	2003      	movs	r0, #3
 8002da8:	e7fb      	b.n	8002da2 <USB_CoreReset+0x50>

08002daa <USB_CoreInit>:
{
 8002daa:	b084      	sub	sp, #16
 8002dac:	b510      	push	{r4, lr}
 8002dae:	4604      	mov	r4, r0
 8002db0:	a803      	add	r0, sp, #12
 8002db2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002db6:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d121      	bne.n	8002e02 <USB_CoreInit+0x58>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002dbe:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002dc0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002dc4:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002dc6:	68e3      	ldr	r3, [r4, #12]
 8002dc8:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8002dcc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002dd0:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002dd2:	68e3      	ldr	r3, [r4, #12]
 8002dd4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8002dd8:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 8002dda:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d00a      	beq.n	8002df8 <USB_CoreInit+0x4e>
    ret = USB_CoreReset(USBx);
 8002de2:	4620      	mov	r0, r4
 8002de4:	f7ff ffb5 	bl	8002d52 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8002de8:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d01c      	beq.n	8002e2a <USB_CoreInit+0x80>
}
 8002df0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002df4:	b004      	add	sp, #16
 8002df6:	4770      	bx	lr
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002df8:	68e3      	ldr	r3, [r4, #12]
 8002dfa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002dfe:	60e3      	str	r3, [r4, #12]
 8002e00:	e7ef      	b.n	8002de2 <USB_CoreInit+0x38>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002e02:	68e3      	ldr	r3, [r4, #12]
 8002e04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002e08:	60e3      	str	r3, [r4, #12]
    ret = USB_CoreReset(USBx);
 8002e0a:	4620      	mov	r0, r4
 8002e0c:	f7ff ffa1 	bl	8002d52 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 8002e10:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8002e14:	b923      	cbnz	r3, 8002e20 <USB_CoreInit+0x76>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002e16:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002e18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e1c:	63a3      	str	r3, [r4, #56]	@ 0x38
 8002e1e:	e7e3      	b.n	8002de8 <USB_CoreInit+0x3e>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002e20:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002e22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e26:	63a3      	str	r3, [r4, #56]	@ 0x38
 8002e28:	e7de      	b.n	8002de8 <USB_CoreInit+0x3e>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002e2a:	68a3      	ldr	r3, [r4, #8]
 8002e2c:	f043 0306 	orr.w	r3, r3, #6
 8002e30:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002e32:	68a3      	ldr	r3, [r4, #8]
 8002e34:	f043 0320 	orr.w	r3, r3, #32
 8002e38:	60a3      	str	r3, [r4, #8]
 8002e3a:	e7d9      	b.n	8002df0 <USB_CoreInit+0x46>

08002e3c <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 8002e3c:	2a02      	cmp	r2, #2
 8002e3e:	d00a      	beq.n	8002e56 <USB_SetTurnaroundTime+0x1a>
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002e40:	2209      	movs	r2, #9
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002e42:	68c3      	ldr	r3, [r0, #12]
 8002e44:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 8002e48:	60c3      	str	r3, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002e4a:	68c3      	ldr	r3, [r0, #12]
 8002e4c:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 8002e50:	60c3      	str	r3, [r0, #12]
}
 8002e52:	2000      	movs	r0, #0
 8002e54:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002e56:	4b23      	ldr	r3, [pc, #140]	@ (8002ee4 <USB_SetTurnaroundTime+0xa8>)
 8002e58:	440b      	add	r3, r1
 8002e5a:	4a23      	ldr	r2, [pc, #140]	@ (8002ee8 <USB_SetTurnaroundTime+0xac>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d92f      	bls.n	8002ec0 <USB_SetTurnaroundTime+0x84>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002e60:	4b22      	ldr	r3, [pc, #136]	@ (8002eec <USB_SetTurnaroundTime+0xb0>)
 8002e62:	440b      	add	r3, r1
 8002e64:	4a22      	ldr	r2, [pc, #136]	@ (8002ef0 <USB_SetTurnaroundTime+0xb4>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d92c      	bls.n	8002ec4 <USB_SetTurnaroundTime+0x88>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002e6a:	f5a1 0374 	sub.w	r3, r1, #15990784	@ 0xf40000
 8002e6e:	f5a3 5310 	sub.w	r3, r3, #9216	@ 0x2400
 8002e72:	4a20      	ldr	r2, [pc, #128]	@ (8002ef4 <USB_SetTurnaroundTime+0xb8>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d927      	bls.n	8002ec8 <USB_SetTurnaroundTime+0x8c>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002e78:	f1a1 7383 	sub.w	r3, r1, #17170432	@ 0x1060000
 8002e7c:	f5a3 43e7 	sub.w	r3, r3, #29568	@ 0x7380
 8002e80:	4a1d      	ldr	r2, [pc, #116]	@ (8002ef8 <USB_SetTurnaroundTime+0xbc>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d322      	bcc.n	8002ecc <USB_SetTurnaroundTime+0x90>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002e86:	4b1d      	ldr	r3, [pc, #116]	@ (8002efc <USB_SetTurnaroundTime+0xc0>)
 8002e88:	440b      	add	r3, r1
 8002e8a:	4a1d      	ldr	r2, [pc, #116]	@ (8002f00 <USB_SetTurnaroundTime+0xc4>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d91f      	bls.n	8002ed0 <USB_SetTurnaroundTime+0x94>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002e90:	4b1c      	ldr	r3, [pc, #112]	@ (8002f04 <USB_SetTurnaroundTime+0xc8>)
 8002e92:	440b      	add	r3, r1
 8002e94:	4a1c      	ldr	r2, [pc, #112]	@ (8002f08 <USB_SetTurnaroundTime+0xcc>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d31c      	bcc.n	8002ed4 <USB_SetTurnaroundTime+0x98>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002e9a:	4b1c      	ldr	r3, [pc, #112]	@ (8002f0c <USB_SetTurnaroundTime+0xd0>)
 8002e9c:	440b      	add	r3, r1
 8002e9e:	4a1c      	ldr	r2, [pc, #112]	@ (8002f10 <USB_SetTurnaroundTime+0xd4>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d319      	bcc.n	8002ed8 <USB_SetTurnaroundTime+0x9c>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002ea4:	f1a1 73b7 	sub.w	r3, r1, #23986176	@ 0x16e0000
 8002ea8:	f5a3 5358 	sub.w	r3, r3, #13824	@ 0x3600
 8002eac:	4a19      	ldr	r2, [pc, #100]	@ (8002f14 <USB_SetTurnaroundTime+0xd8>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d314      	bcc.n	8002edc <USB_SetTurnaroundTime+0xa0>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002eb2:	4b19      	ldr	r3, [pc, #100]	@ (8002f18 <USB_SetTurnaroundTime+0xdc>)
 8002eb4:	440b      	add	r3, r1
 8002eb6:	4a19      	ldr	r2, [pc, #100]	@ (8002f1c <USB_SetTurnaroundTime+0xe0>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d211      	bcs.n	8002ee0 <USB_SetTurnaroundTime+0xa4>
      UsbTrd = 0x7U;
 8002ebc:	2207      	movs	r2, #7
 8002ebe:	e7c0      	b.n	8002e42 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xFU;
 8002ec0:	220f      	movs	r2, #15
 8002ec2:	e7be      	b.n	8002e42 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xEU;
 8002ec4:	220e      	movs	r2, #14
 8002ec6:	e7bc      	b.n	8002e42 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xDU;
 8002ec8:	220d      	movs	r2, #13
 8002eca:	e7ba      	b.n	8002e42 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xCU;
 8002ecc:	220c      	movs	r2, #12
 8002ece:	e7b8      	b.n	8002e42 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xBU;
 8002ed0:	220b      	movs	r2, #11
 8002ed2:	e7b6      	b.n	8002e42 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xAU;
 8002ed4:	220a      	movs	r2, #10
 8002ed6:	e7b4      	b.n	8002e42 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x9U;
 8002ed8:	2209      	movs	r2, #9
 8002eda:	e7b2      	b.n	8002e42 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x8U;
 8002edc:	2208      	movs	r2, #8
 8002ede:	e7b0      	b.n	8002e42 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x6U;
 8002ee0:	2206      	movs	r2, #6
 8002ee2:	e7ae      	b.n	8002e42 <USB_SetTurnaroundTime+0x6>
 8002ee4:	ff275340 	.word	0xff275340
 8002ee8:	000c34ff 	.word	0x000c34ff
 8002eec:	ff1b1e40 	.word	0xff1b1e40
 8002ef0:	000f423f 	.word	0x000f423f
 8002ef4:	00124f7f 	.word	0x00124f7f
 8002ef8:	0013d620 	.word	0x0013d620
 8002efc:	fee5b660 	.word	0xfee5b660
 8002f00:	0016e35f 	.word	0x0016e35f
 8002f04:	feced300 	.word	0xfeced300
 8002f08:	001b7740 	.word	0x001b7740
 8002f0c:	feb35bc0 	.word	0xfeb35bc0
 8002f10:	002191c0 	.word	0x002191c0
 8002f14:	00387520 	.word	0x00387520
 8002f18:	fe5954e0 	.word	0xfe5954e0
 8002f1c:	00419ce0 	.word	0x00419ce0

08002f20 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002f20:	6883      	ldr	r3, [r0, #8]
 8002f22:	f043 0301 	orr.w	r3, r3, #1
 8002f26:	6083      	str	r3, [r0, #8]
}
 8002f28:	2000      	movs	r0, #0
 8002f2a:	4770      	bx	lr

08002f2c <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002f2c:	6883      	ldr	r3, [r0, #8]
 8002f2e:	f023 0301 	bic.w	r3, r3, #1
 8002f32:	6083      	str	r3, [r0, #8]
}
 8002f34:	2000      	movs	r0, #0
 8002f36:	4770      	bx	lr

08002f38 <USB_FlushTxFifo>:
{
 8002f38:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	9301      	str	r3, [sp, #4]
    count++;
 8002f3e:	9b01      	ldr	r3, [sp, #4]
 8002f40:	3301      	adds	r3, #1
 8002f42:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8002f44:	9b01      	ldr	r3, [sp, #4]
 8002f46:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002f4a:	d815      	bhi.n	8002f78 <USB_FlushTxFifo+0x40>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002f4c:	6903      	ldr	r3, [r0, #16]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	daf5      	bge.n	8002f3e <USB_FlushTxFifo+0x6>
  count = 0U;
 8002f52:	2300      	movs	r3, #0
 8002f54:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002f56:	0189      	lsls	r1, r1, #6
 8002f58:	f041 0120 	orr.w	r1, r1, #32
 8002f5c:	6101      	str	r1, [r0, #16]
    count++;
 8002f5e:	9b01      	ldr	r3, [sp, #4]
 8002f60:	3301      	adds	r3, #1
 8002f62:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8002f64:	9b01      	ldr	r3, [sp, #4]
 8002f66:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002f6a:	d808      	bhi.n	8002f7e <USB_FlushTxFifo+0x46>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002f6c:	6903      	ldr	r3, [r0, #16]
 8002f6e:	f013 0f20 	tst.w	r3, #32
 8002f72:	d1f4      	bne.n	8002f5e <USB_FlushTxFifo+0x26>
  return HAL_OK;
 8002f74:	2000      	movs	r0, #0
 8002f76:	e000      	b.n	8002f7a <USB_FlushTxFifo+0x42>
      return HAL_TIMEOUT;
 8002f78:	2003      	movs	r0, #3
}
 8002f7a:	b002      	add	sp, #8
 8002f7c:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002f7e:	2003      	movs	r0, #3
 8002f80:	e7fb      	b.n	8002f7a <USB_FlushTxFifo+0x42>

08002f82 <USB_FlushRxFifo>:
{
 8002f82:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8002f84:	2300      	movs	r3, #0
 8002f86:	9301      	str	r3, [sp, #4]
    count++;
 8002f88:	9b01      	ldr	r3, [sp, #4]
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8002f8e:	9b01      	ldr	r3, [sp, #4]
 8002f90:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002f94:	d813      	bhi.n	8002fbe <USB_FlushRxFifo+0x3c>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002f96:	6903      	ldr	r3, [r0, #16]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	daf5      	bge.n	8002f88 <USB_FlushRxFifo+0x6>
  count = 0U;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002fa0:	2310      	movs	r3, #16
 8002fa2:	6103      	str	r3, [r0, #16]
    count++;
 8002fa4:	9b01      	ldr	r3, [sp, #4]
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8002faa:	9b01      	ldr	r3, [sp, #4]
 8002fac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002fb0:	d808      	bhi.n	8002fc4 <USB_FlushRxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002fb2:	6903      	ldr	r3, [r0, #16]
 8002fb4:	f013 0f10 	tst.w	r3, #16
 8002fb8:	d1f4      	bne.n	8002fa4 <USB_FlushRxFifo+0x22>
  return HAL_OK;
 8002fba:	2000      	movs	r0, #0
 8002fbc:	e000      	b.n	8002fc0 <USB_FlushRxFifo+0x3e>
      return HAL_TIMEOUT;
 8002fbe:	2003      	movs	r0, #3
}
 8002fc0:	b002      	add	sp, #8
 8002fc2:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002fc4:	2003      	movs	r0, #3
 8002fc6:	e7fb      	b.n	8002fc0 <USB_FlushRxFifo+0x3e>

08002fc8 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8002fc8:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 8002fcc:	4319      	orrs	r1, r3
 8002fce:	f8c0 1800 	str.w	r1, [r0, #2048]	@ 0x800
}
 8002fd2:	2000      	movs	r0, #0
 8002fd4:	4770      	bx	lr
	...

08002fd8 <USB_DevInit>:
{
 8002fd8:	b084      	sub	sp, #16
 8002fda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fdc:	4604      	mov	r4, r0
 8002fde:	a807      	add	r0, sp, #28
 8002fe0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	e006      	b.n	8002ff6 <USB_DevInit+0x1e>
    USBx->DIEPTXF[i] = 0U;
 8002fe8:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8002fec:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8002ff0:	2100      	movs	r1, #0
 8002ff2:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	2b0e      	cmp	r3, #14
 8002ff8:	d9f6      	bls.n	8002fe8 <USB_DevInit+0x10>
  if (cfg.vbus_sensing_enable == 0U)
 8002ffa:	f89d 6026 	ldrb.w	r6, [sp, #38]	@ 0x26
 8002ffe:	bb06      	cbnz	r6, 8003042 <USB_DevInit+0x6a>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003000:	f8d4 3804 	ldr.w	r3, [r4, #2052]	@ 0x804
 8003004:	f043 0302 	orr.w	r3, r3, #2
 8003008:	f8c4 3804 	str.w	r3, [r4, #2052]	@ 0x804
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800300c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800300e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003012:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003014:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003016:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 800301a:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800301c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800301e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003022:	63a3      	str	r3, [r4, #56]	@ 0x38
  USBx_PCGCCTL = 0U;
 8003024:	2300      	movs	r3, #0
 8003026:	f8c4 3e00 	str.w	r3, [r4, #3584]	@ 0xe00
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800302a:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 800302e:	2b01      	cmp	r3, #1
 8003030:	d115      	bne.n	800305e <USB_DevInit+0x86>
    if (cfg.speed == USBD_HS_SPEED)
 8003032:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8003036:	b96b      	cbnz	r3, 8003054 <USB_DevInit+0x7c>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003038:	2100      	movs	r1, #0
 800303a:	4620      	mov	r0, r4
 800303c:	f7ff ffc4 	bl	8002fc8 <USB_SetDevSpeed>
 8003040:	e011      	b.n	8003066 <USB_DevInit+0x8e>
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003042:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003044:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003048:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800304a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800304c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003050:	63a3      	str	r3, [r4, #56]	@ 0x38
 8003052:	e7e7      	b.n	8003024 <USB_DevInit+0x4c>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003054:	2101      	movs	r1, #1
 8003056:	4620      	mov	r0, r4
 8003058:	f7ff ffb6 	bl	8002fc8 <USB_SetDevSpeed>
 800305c:	e003      	b.n	8003066 <USB_DevInit+0x8e>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800305e:	2103      	movs	r1, #3
 8003060:	4620      	mov	r0, r4
 8003062:	f7ff ffb1 	bl	8002fc8 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003066:	2110      	movs	r1, #16
 8003068:	4620      	mov	r0, r4
 800306a:	f7ff ff65 	bl	8002f38 <USB_FlushTxFifo>
 800306e:	4605      	mov	r5, r0
 8003070:	b100      	cbz	r0, 8003074 <USB_DevInit+0x9c>
    ret = HAL_ERROR;
 8003072:	2501      	movs	r5, #1
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003074:	4620      	mov	r0, r4
 8003076:	f7ff ff84 	bl	8002f82 <USB_FlushRxFifo>
 800307a:	b100      	cbz	r0, 800307e <USB_DevInit+0xa6>
    ret = HAL_ERROR;
 800307c:	2501      	movs	r5, #1
  USBx_DEVICE->DIEPMSK = 0U;
 800307e:	f504 6c00 	add.w	ip, r4, #2048	@ 0x800
 8003082:	2300      	movs	r3, #0
 8003084:	f8cc 3010 	str.w	r3, [ip, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003088:	f8cc 3014 	str.w	r3, [ip, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800308c:	f8cc 301c 	str.w	r3, [ip, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003090:	e00a      	b.n	80030a8 <USB_DevInit+0xd0>
      if (i == 0U)
 8003092:	b9cb      	cbnz	r3, 80030c8 <USB_DevInit+0xf0>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003094:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8003098:	f8c2 0900 	str.w	r0, [r2, #2304]	@ 0x900
    USBx_INEP(i)->DIEPTSIZ = 0U;
 800309c:	2200      	movs	r2, #0
 800309e:	610a      	str	r2, [r1, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80030a0:	f64f 327f 	movw	r2, #64383	@ 0xfb7f
 80030a4:	608a      	str	r2, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80030a6:	3301      	adds	r3, #1
 80030a8:	f89d 101c 	ldrb.w	r1, [sp, #28]
 80030ac:	4299      	cmp	r1, r3
 80030ae:	d910      	bls.n	80030d2 <USB_DevInit+0xfa>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80030b0:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 80030b4:	f502 6110 	add.w	r1, r2, #2304	@ 0x900
 80030b8:	f8d2 0900 	ldr.w	r0, [r2, #2304]	@ 0x900
 80030bc:	2800      	cmp	r0, #0
 80030be:	dbe8      	blt.n	8003092 <USB_DevInit+0xba>
      USBx_INEP(i)->DIEPCTL = 0U;
 80030c0:	2000      	movs	r0, #0
 80030c2:	f8c2 0900 	str.w	r0, [r2, #2304]	@ 0x900
 80030c6:	e7e9      	b.n	800309c <USB_DevInit+0xc4>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80030c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80030cc:	f8c2 0900 	str.w	r0, [r2, #2304]	@ 0x900
 80030d0:	e7e4      	b.n	800309c <USB_DevInit+0xc4>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80030d2:	2300      	movs	r3, #0
 80030d4:	e00a      	b.n	80030ec <USB_DevInit+0x114>
      if (i == 0U)
 80030d6:	b1bb      	cbz	r3, 8003108 <USB_DevInit+0x130>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80030d8:	f04f 4790 	mov.w	r7, #1207959552	@ 0x48000000
 80030dc:	f8c2 7b00 	str.w	r7, [r2, #2816]	@ 0xb00
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80030e0:	2200      	movs	r2, #0
 80030e2:	6102      	str	r2, [r0, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80030e4:	f64f 327f 	movw	r2, #64383	@ 0xfb7f
 80030e8:	6082      	str	r2, [r0, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80030ea:	3301      	adds	r3, #1
 80030ec:	4299      	cmp	r1, r3
 80030ee:	d910      	bls.n	8003112 <USB_DevInit+0x13a>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80030f0:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 80030f4:	f502 6030 	add.w	r0, r2, #2816	@ 0xb00
 80030f8:	f8d2 7b00 	ldr.w	r7, [r2, #2816]	@ 0xb00
 80030fc:	2f00      	cmp	r7, #0
 80030fe:	dbea      	blt.n	80030d6 <USB_DevInit+0xfe>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003100:	2700      	movs	r7, #0
 8003102:	f8c2 7b00 	str.w	r7, [r2, #2816]	@ 0xb00
 8003106:	e7eb      	b.n	80030e0 <USB_DevInit+0x108>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003108:	f04f 6700 	mov.w	r7, #134217728	@ 0x8000000
 800310c:	f8c2 7b00 	str.w	r7, [r2, #2816]	@ 0xb00
 8003110:	e7e6      	b.n	80030e0 <USB_DevInit+0x108>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003112:	f8dc 3010 	ldr.w	r3, [ip, #16]
 8003116:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800311a:	f8cc 3010 	str.w	r3, [ip, #16]
  USBx->GINTMSK = 0U;
 800311e:	2300      	movs	r3, #0
 8003120:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003122:	f06f 4380 	mvn.w	r3, #1073741824	@ 0x40000000
 8003126:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 8003128:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800312c:	b91b      	cbnz	r3, 8003136 <USB_DevInit+0x15e>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800312e:	69a3      	ldr	r3, [r4, #24]
 8003130:	f043 0310 	orr.w	r3, r3, #16
 8003134:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003136:	69a2      	ldr	r2, [r4, #24]
 8003138:	4b0b      	ldr	r3, [pc, #44]	@ (8003168 <USB_DevInit+0x190>)
 800313a:	4313      	orrs	r3, r2
 800313c:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 800313e:	f89d 3022 	ldrb.w	r3, [sp, #34]	@ 0x22
 8003142:	b11b      	cbz	r3, 800314c <USB_DevInit+0x174>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003144:	69a3      	ldr	r3, [r4, #24]
 8003146:	f043 0308 	orr.w	r3, r3, #8
 800314a:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 800314c:	2e01      	cmp	r6, #1
 800314e:	d004      	beq.n	800315a <USB_DevInit+0x182>
}
 8003150:	4628      	mov	r0, r5
 8003152:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003156:	b004      	add	sp, #16
 8003158:	4770      	bx	lr
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800315a:	69a3      	ldr	r3, [r4, #24]
 800315c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003160:	f043 0304 	orr.w	r3, r3, #4
 8003164:	61a3      	str	r3, [r4, #24]
 8003166:	e7f3      	b.n	8003150 <USB_DevInit+0x178>
 8003168:	803c3800 	.word	0x803c3800

0800316c <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800316c:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 8003170:	f003 0306 	and.w	r3, r3, #6
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003174:	2b02      	cmp	r3, #2
 8003176:	d004      	beq.n	8003182 <USB_GetDevSpeed+0x16>
 8003178:	2b06      	cmp	r3, #6
 800317a:	d004      	beq.n	8003186 <USB_GetDevSpeed+0x1a>
 800317c:	b92b      	cbnz	r3, 800318a <USB_GetDevSpeed+0x1e>
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800317e:	2000      	movs	r0, #0
 8003180:	4770      	bx	lr
 8003182:	2002      	movs	r0, #2
 8003184:	4770      	bx	lr
 8003186:	2002      	movs	r0, #2
 8003188:	4770      	bx	lr
 800318a:	200f      	movs	r0, #15
}
 800318c:	4770      	bx	lr

0800318e <USB_ActivateEndpoint>:
{
 800318e:	b510      	push	{r4, lr}
  uint32_t epnum = (uint32_t)ep->num;
 8003190:	f891 c000 	ldrb.w	ip, [r1]
  if (ep->is_in == 1U)
 8003194:	784b      	ldrb	r3, [r1, #1]
 8003196:	2b01      	cmp	r3, #1
 8003198:	d023      	beq.n	80031e2 <USB_ActivateEndpoint+0x54>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800319a:	f500 6e00 	add.w	lr, r0, #2048	@ 0x800
 800319e:	f8d0 381c 	ldr.w	r3, [r0, #2076]	@ 0x81c
 80031a2:	f00c 040f 	and.w	r4, ip, #15
 80031a6:	2201      	movs	r2, #1
 80031a8:	40a2      	lsls	r2, r4
 80031aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80031ae:	f8c0 381c 	str.w	r3, [r0, #2076]	@ 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80031b2:	eb00 104c 	add.w	r0, r0, ip, lsl #5
 80031b6:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 80031ba:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 80031be:	d10e      	bne.n	80031de <USB_ActivateEndpoint+0x50>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80031c0:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 80031c4:	688a      	ldr	r2, [r1, #8]
 80031c6:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80031ca:	7909      	ldrb	r1, [r1, #4]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80031cc:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 80031d0:	4313      	orrs	r3, r2
 80031d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80031da:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 80031de:	2000      	movs	r0, #0
 80031e0:	bd10      	pop	{r4, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80031e2:	f8d0 281c 	ldr.w	r2, [r0, #2076]	@ 0x81c
 80031e6:	f00c 0e0f 	and.w	lr, ip, #15
 80031ea:	fa03 f30e 	lsl.w	r3, r3, lr
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	4313      	orrs	r3, r2
 80031f2:	f8c0 381c 	str.w	r3, [r0, #2076]	@ 0x81c
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80031f6:	eb00 104c 	add.w	r0, r0, ip, lsl #5
 80031fa:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 80031fe:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8003202:	d1ec      	bne.n	80031de <USB_ActivateEndpoint+0x50>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003204:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8003208:	688a      	ldr	r2, [r1, #8]
 800320a:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800320e:	7909      	ldrb	r1, [r1, #4]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003210:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003214:	ea42 528c 	orr.w	r2, r2, ip, lsl #22
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003218:	4313      	orrs	r3, r2
 800321a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800321e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003222:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 8003226:	e7da      	b.n	80031de <USB_ActivateEndpoint+0x50>

08003228 <USB_EPStopXfer>:
{
 8003228:	b410      	push	{r4}
 800322a:	b083      	sub	sp, #12
 800322c:	4602      	mov	r2, r0
  __IO uint32_t count = 0U;
 800322e:	2300      	movs	r3, #0
 8003230:	9301      	str	r3, [sp, #4]
  if (ep->is_in == 1U)
 8003232:	7848      	ldrb	r0, [r1, #1]
 8003234:	2801      	cmp	r0, #1
 8003236:	d00b      	beq.n	8003250 <USB_EPStopXfer+0x28>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003238:	780b      	ldrb	r3, [r1, #0]
 800323a:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 800323e:	f8d3 0b00 	ldr.w	r0, [r3, #2816]	@ 0xb00
 8003242:	2800      	cmp	r0, #0
 8003244:	db2d      	blt.n	80032a2 <USB_EPStopXfer+0x7a>
  HAL_StatusTypeDef ret = HAL_OK;
 8003246:	2000      	movs	r0, #0
}
 8003248:	b003      	add	sp, #12
 800324a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800324e:	4770      	bx	lr
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003250:	780b      	ldrb	r3, [r1, #0]
 8003252:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8003256:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
 800325a:	2c00      	cmp	r4, #0
 800325c:	db01      	blt.n	8003262 <USB_EPStopXfer+0x3a>
  HAL_StatusTypeDef ret = HAL_OK;
 800325e:	2000      	movs	r0, #0
 8003260:	e7f2      	b.n	8003248 <USB_EPStopXfer+0x20>
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8003262:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
 8003266:	f044 6400 	orr.w	r4, r4, #134217728	@ 0x8000000
 800326a:	f8c3 4900 	str.w	r4, [r3, #2304]	@ 0x900
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800326e:	780b      	ldrb	r3, [r1, #0]
 8003270:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8003274:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
 8003278:	f044 4480 	orr.w	r4, r4, #1073741824	@ 0x40000000
 800327c:	f8c3 4900 	str.w	r4, [r3, #2304]	@ 0x900
        count++;
 8003280:	9b01      	ldr	r3, [sp, #4]
 8003282:	3301      	adds	r3, #1
 8003284:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 8003286:	9c01      	ldr	r4, [sp, #4]
 8003288:	f242 7310 	movw	r3, #10000	@ 0x2710
 800328c:	429c      	cmp	r4, r3
 800328e:	d8db      	bhi.n	8003248 <USB_EPStopXfer+0x20>
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8003290:	780b      	ldrb	r3, [r1, #0]
 8003292:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8003296:	f8d3 3900 	ldr.w	r3, [r3, #2304]	@ 0x900
 800329a:	2b00      	cmp	r3, #0
 800329c:	dbf0      	blt.n	8003280 <USB_EPStopXfer+0x58>
  HAL_StatusTypeDef ret = HAL_OK;
 800329e:	2000      	movs	r0, #0
 80032a0:	e7d2      	b.n	8003248 <USB_EPStopXfer+0x20>
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80032a2:	f8d3 0b00 	ldr.w	r0, [r3, #2816]	@ 0xb00
 80032a6:	f040 6000 	orr.w	r0, r0, #134217728	@ 0x8000000
 80032aa:	f8c3 0b00 	str.w	r0, [r3, #2816]	@ 0xb00
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80032ae:	780b      	ldrb	r3, [r1, #0]
 80032b0:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 80032b4:	f8d3 0b00 	ldr.w	r0, [r3, #2816]	@ 0xb00
 80032b8:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 80032bc:	f8c3 0b00 	str.w	r0, [r3, #2816]	@ 0xb00
        count++;
 80032c0:	9b01      	ldr	r3, [sp, #4]
 80032c2:	3301      	adds	r3, #1
 80032c4:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 80032c6:	9801      	ldr	r0, [sp, #4]
 80032c8:	f242 7310 	movw	r3, #10000	@ 0x2710
 80032cc:	4298      	cmp	r0, r3
 80032ce:	d808      	bhi.n	80032e2 <USB_EPStopXfer+0xba>
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80032d0:	780b      	ldrb	r3, [r1, #0]
 80032d2:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 80032d6:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 80032da:	2b00      	cmp	r3, #0
 80032dc:	dbf0      	blt.n	80032c0 <USB_EPStopXfer+0x98>
  HAL_StatusTypeDef ret = HAL_OK;
 80032de:	2000      	movs	r0, #0
 80032e0:	e7b2      	b.n	8003248 <USB_EPStopXfer+0x20>
          ret = HAL_ERROR;
 80032e2:	2001      	movs	r0, #1
 80032e4:	e7b0      	b.n	8003248 <USB_EPStopXfer+0x20>

080032e6 <USB_WritePacket>:
{
 80032e6:	b510      	push	{r4, lr}
 80032e8:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 80032ec:	b984      	cbnz	r4, 8003310 <USB_WritePacket+0x2a>
    count32b = ((uint32_t)len + 3U) / 4U;
 80032ee:	3303      	adds	r3, #3
 80032f0:	ea4f 0e93 	mov.w	lr, r3, lsr #2
    for (i = 0U; i < count32b; i++)
 80032f4:	f04f 0c00 	mov.w	ip, #0
 80032f8:	e008      	b.n	800330c <USB_WritePacket+0x26>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80032fa:	eb00 3302 	add.w	r3, r0, r2, lsl #12
 80032fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003302:	f851 4b04 	ldr.w	r4, [r1], #4
 8003306:	601c      	str	r4, [r3, #0]
    for (i = 0U; i < count32b; i++)
 8003308:	f10c 0c01 	add.w	ip, ip, #1
 800330c:	45f4      	cmp	ip, lr
 800330e:	d3f4      	bcc.n	80032fa <USB_WritePacket+0x14>
}
 8003310:	2000      	movs	r0, #0
 8003312:	bd10      	pop	{r4, pc}

08003314 <USB_EPStartXfer>:
{
 8003314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003316:	b083      	sub	sp, #12
  uint32_t epnum = (uint32_t)ep->num;
 8003318:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 800331a:	784b      	ldrb	r3, [r1, #1]
 800331c:	2b01      	cmp	r3, #1
 800331e:	d02d      	beq.n	800337c <USB_EPStartXfer+0x68>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003320:	eb00 1c44 	add.w	ip, r0, r4, lsl #5
 8003324:	f50c 6330 	add.w	r3, ip, #2816	@ 0xb00
 8003328:	691d      	ldr	r5, [r3, #16]
 800332a:	f36f 0512 	bfc	r5, #0, #19
 800332e:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003330:	691d      	ldr	r5, [r3, #16]
 8003332:	f36f 45dc 	bfc	r5, #19, #10
 8003336:	611d      	str	r5, [r3, #16]
    if (epnum == 0U)
 8003338:	2c00      	cmp	r4, #0
 800333a:	f040 80ce 	bne.w	80034da <USB_EPStartXfer+0x1c6>
      if (ep->xfer_len > 0U)
 800333e:	690c      	ldr	r4, [r1, #16]
 8003340:	b10c      	cbz	r4, 8003346 <USB_EPStartXfer+0x32>
        ep->xfer_len = ep->maxpacket;
 8003342:	688c      	ldr	r4, [r1, #8]
 8003344:	610c      	str	r4, [r1, #16]
      ep->xfer_size = ep->maxpacket;
 8003346:	688c      	ldr	r4, [r1, #8]
 8003348:	620c      	str	r4, [r1, #32]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800334a:	691d      	ldr	r5, [r3, #16]
 800334c:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8003350:	432c      	orrs	r4, r5
 8003352:	611c      	str	r4, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003354:	691c      	ldr	r4, [r3, #16]
 8003356:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 800335a:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 800335c:	2a01      	cmp	r2, #1
 800335e:	f000 80df 	beq.w	8003520 <USB_EPStartXfer+0x20c>
    if (ep->type == EP_TYPE_ISOC)
 8003362:	790b      	ldrb	r3, [r1, #4]
 8003364:	2b01      	cmp	r3, #1
 8003366:	f000 80e1 	beq.w	800352c <USB_EPStartXfer+0x218>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800336a:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	@ 0xb00
 800336e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003372:	f8cc 3b00 	str.w	r3, [ip, #2816]	@ 0xb00
}
 8003376:	2000      	movs	r0, #0
 8003378:	b003      	add	sp, #12
 800337a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (ep->xfer_len == 0U)
 800337c:	690b      	ldr	r3, [r1, #16]
 800337e:	bb73      	cbnz	r3, 80033de <USB_EPStartXfer+0xca>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003380:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 8003384:	f8d3 5910 	ldr.w	r5, [r3, #2320]	@ 0x910
 8003388:	f36f 45dc 	bfc	r5, #19, #10
 800338c:	f8c3 5910 	str.w	r5, [r3, #2320]	@ 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003390:	f8d3 5910 	ldr.w	r5, [r3, #2320]	@ 0x910
 8003394:	f445 2500 	orr.w	r5, r5, #524288	@ 0x80000
 8003398:	f8c3 5910 	str.w	r5, [r3, #2320]	@ 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800339c:	f8d3 5910 	ldr.w	r5, [r3, #2320]	@ 0x910
 80033a0:	f36f 0512 	bfc	r5, #0, #19
 80033a4:	f8c3 5910 	str.w	r5, [r3, #2320]	@ 0x910
    if (dma == 1U)
 80033a8:	2a01      	cmp	r2, #1
 80033aa:	d054      	beq.n	8003456 <USB_EPStartXfer+0x142>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80033ac:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 80033b0:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 80033b4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80033b8:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
      if (ep->type != EP_TYPE_ISOC)
 80033bc:	790b      	ldrb	r3, [r1, #4]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d072      	beq.n	80034a8 <USB_EPStartXfer+0x194>
        if (ep->xfer_len > 0U)
 80033c2:	690b      	ldr	r3, [r1, #16]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d0d6      	beq.n	8003376 <USB_EPStartXfer+0x62>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80033c8:	f8d0 3834 	ldr.w	r3, [r0, #2100]	@ 0x834
 80033cc:	7809      	ldrb	r1, [r1, #0]
 80033ce:	f001 010f 	and.w	r1, r1, #15
 80033d2:	2201      	movs	r2, #1
 80033d4:	408a      	lsls	r2, r1
 80033d6:	4313      	orrs	r3, r2
 80033d8:	f8c0 3834 	str.w	r3, [r0, #2100]	@ 0x834
 80033dc:	e7cb      	b.n	8003376 <USB_EPStartXfer+0x62>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80033de:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 80033e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80033e6:	691d      	ldr	r5, [r3, #16]
 80033e8:	f36f 0512 	bfc	r5, #0, #19
 80033ec:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80033ee:	691d      	ldr	r5, [r3, #16]
 80033f0:	f36f 45dc 	bfc	r5, #19, #10
 80033f4:	611d      	str	r5, [r3, #16]
      if (epnum == 0U)
 80033f6:	b984      	cbnz	r4, 800341a <USB_EPStartXfer+0x106>
        if (ep->xfer_len > ep->maxpacket)
 80033f8:	690e      	ldr	r6, [r1, #16]
 80033fa:	688d      	ldr	r5, [r1, #8]
 80033fc:	42ae      	cmp	r6, r5
 80033fe:	d900      	bls.n	8003402 <USB_EPStartXfer+0xee>
          ep->xfer_len = ep->maxpacket;
 8003400:	610d      	str	r5, [r1, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003402:	691d      	ldr	r5, [r3, #16]
 8003404:	f445 2500 	orr.w	r5, r5, #524288	@ 0x80000
 8003408:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800340a:	691d      	ldr	r5, [r3, #16]
 800340c:	690e      	ldr	r6, [r1, #16]
 800340e:	f3c6 0c12 	ubfx	ip, r6, #0, #19
 8003412:	ea45 050c 	orr.w	r5, r5, ip
 8003416:	611d      	str	r5, [r3, #16]
 8003418:	e7c6      	b.n	80033a8 <USB_EPStartXfer+0x94>
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800341a:	690d      	ldr	r5, [r1, #16]
 800341c:	688e      	ldr	r6, [r1, #8]
 800341e:	4435      	add	r5, r6
 8003420:	3d01      	subs	r5, #1
 8003422:	fbb5 f5f6 	udiv	r5, r5, r6
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8003426:	691e      	ldr	r6, [r3, #16]
 8003428:	fa1f fc85 	uxth.w	ip, r5
 800342c:	4f49      	ldr	r7, [pc, #292]	@ (8003554 <USB_EPStartXfer+0x240>)
 800342e:	ea07 45c5 	and.w	r5, r7, r5, lsl #19
 8003432:	4335      	orrs	r5, r6
 8003434:	611d      	str	r5, [r3, #16]
        if (ep->type == EP_TYPE_ISOC)
 8003436:	790d      	ldrb	r5, [r1, #4]
 8003438:	2d01      	cmp	r5, #1
 800343a:	d1e6      	bne.n	800340a <USB_EPStartXfer+0xf6>
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800343c:	691d      	ldr	r5, [r3, #16]
 800343e:	f025 45c0 	bic.w	r5, r5, #1610612736	@ 0x60000000
 8003442:	611d      	str	r5, [r3, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8003444:	691d      	ldr	r5, [r3, #16]
 8003446:	ea4f 7c4c 	mov.w	ip, ip, lsl #29
 800344a:	f00c 4cc0 	and.w	ip, ip, #1610612736	@ 0x60000000
 800344e:	ea45 050c 	orr.w	r5, r5, ip
 8003452:	611d      	str	r5, [r3, #16]
 8003454:	e7d9      	b.n	800340a <USB_EPStartXfer+0xf6>
      if ((uint32_t)ep->dma_addr != 0U)
 8003456:	69cb      	ldr	r3, [r1, #28]
 8003458:	b11b      	cbz	r3, 8003462 <USB_EPStartXfer+0x14e>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800345a:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 800345e:	f8c2 3914 	str.w	r3, [r2, #2324]	@ 0x914
      if (ep->type == EP_TYPE_ISOC)
 8003462:	790b      	ldrb	r3, [r1, #4]
 8003464:	2b01      	cmp	r3, #1
 8003466:	d008      	beq.n	800347a <USB_EPStartXfer+0x166>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003468:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 800346c:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 8003470:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003474:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
 8003478:	e77d      	b.n	8003376 <USB_EPStartXfer+0x62>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800347a:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 800347e:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8003482:	d108      	bne.n	8003496 <USB_EPStartXfer+0x182>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003484:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 8003488:	f8d2 3900 	ldr.w	r3, [r2, #2304]	@ 0x900
 800348c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003490:	f8c2 3900 	str.w	r3, [r2, #2304]	@ 0x900
 8003494:	e7e8      	b.n	8003468 <USB_EPStartXfer+0x154>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003496:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 800349a:	f8d2 3900 	ldr.w	r3, [r2, #2304]	@ 0x900
 800349e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034a2:	f8c2 3900 	str.w	r3, [r2, #2304]	@ 0x900
 80034a6:	e7df      	b.n	8003468 <USB_EPStartXfer+0x154>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80034a8:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 80034ac:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80034b0:	d10c      	bne.n	80034cc <USB_EPStartXfer+0x1b8>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80034b2:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 80034b6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80034ba:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80034be:	9200      	str	r2, [sp, #0]
 80034c0:	8a0b      	ldrh	r3, [r1, #16]
 80034c2:	780a      	ldrb	r2, [r1, #0]
 80034c4:	68c9      	ldr	r1, [r1, #12]
 80034c6:	f7ff ff0e 	bl	80032e6 <USB_WritePacket>
 80034ca:	e754      	b.n	8003376 <USB_EPStartXfer+0x62>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80034cc:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 80034d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034d4:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
 80034d8:	e7f1      	b.n	80034be <USB_EPStartXfer+0x1aa>
      if (ep->xfer_len == 0U)
 80034da:	690c      	ldr	r4, [r1, #16]
 80034dc:	b954      	cbnz	r4, 80034f4 <USB_EPStartXfer+0x1e0>
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80034de:	691c      	ldr	r4, [r3, #16]
 80034e0:	688d      	ldr	r5, [r1, #8]
 80034e2:	f3c5 0512 	ubfx	r5, r5, #0, #19
 80034e6:	432c      	orrs	r4, r5
 80034e8:	611c      	str	r4, [r3, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80034ea:	691c      	ldr	r4, [r3, #16]
 80034ec:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 80034f0:	611c      	str	r4, [r3, #16]
 80034f2:	e733      	b.n	800335c <USB_EPStartXfer+0x48>
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80034f4:	688d      	ldr	r5, [r1, #8]
 80034f6:	442c      	add	r4, r5
 80034f8:	3c01      	subs	r4, #1
 80034fa:	fbb4 f4f5 	udiv	r4, r4, r5
        ep->xfer_size = ep->maxpacket * pktcnt;
 80034fe:	b2a4      	uxth	r4, r4
 8003500:	fb04 f505 	mul.w	r5, r4, r5
 8003504:	620d      	str	r5, [r1, #32]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003506:	691d      	ldr	r5, [r3, #16]
 8003508:	4e12      	ldr	r6, [pc, #72]	@ (8003554 <USB_EPStartXfer+0x240>)
 800350a:	ea06 44c4 	and.w	r4, r6, r4, lsl #19
 800350e:	432c      	orrs	r4, r5
 8003510:	611c      	str	r4, [r3, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8003512:	691c      	ldr	r4, [r3, #16]
 8003514:	6a0d      	ldr	r5, [r1, #32]
 8003516:	f3c5 0512 	ubfx	r5, r5, #0, #19
 800351a:	432c      	orrs	r4, r5
 800351c:	611c      	str	r4, [r3, #16]
 800351e:	e71d      	b.n	800335c <USB_EPStartXfer+0x48>
      if ((uint32_t)ep->xfer_buff != 0U)
 8003520:	68ca      	ldr	r2, [r1, #12]
 8003522:	2a00      	cmp	r2, #0
 8003524:	f43f af1d 	beq.w	8003362 <USB_EPStartXfer+0x4e>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003528:	615a      	str	r2, [r3, #20]
 800352a:	e71a      	b.n	8003362 <USB_EPStartXfer+0x4e>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800352c:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 8003530:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8003534:	d106      	bne.n	8003544 <USB_EPStartXfer+0x230>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003536:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	@ 0xb00
 800353a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800353e:	f8cc 3b00 	str.w	r3, [ip, #2816]	@ 0xb00
 8003542:	e712      	b.n	800336a <USB_EPStartXfer+0x56>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003544:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	@ 0xb00
 8003548:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800354c:	f8cc 3b00 	str.w	r3, [ip, #2816]	@ 0xb00
 8003550:	e70b      	b.n	800336a <USB_EPStartXfer+0x56>
 8003552:	bf00      	nop
 8003554:	1ff80000 	.word	0x1ff80000

08003558 <USB_ReadPacket>:
{
 8003558:	b510      	push	{r4, lr}
 800355a:	4684      	mov	ip, r0
 800355c:	4608      	mov	r0, r1
  uint32_t count32b = (uint32_t)len >> 2U;
 800355e:	ea4f 0e92 	mov.w	lr, r2, lsr #2
  uint16_t remaining_bytes = len % 4U;
 8003562:	f002 0203 	and.w	r2, r2, #3
  for (i = 0U; i < count32b; i++)
 8003566:	2300      	movs	r3, #0
 8003568:	e005      	b.n	8003576 <USB_ReadPacket+0x1e>
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800356a:	f50c 5180 	add.w	r1, ip, #4096	@ 0x1000
 800356e:	6809      	ldr	r1, [r1, #0]
 8003570:	f840 1b04 	str.w	r1, [r0], #4
  for (i = 0U; i < count32b; i++)
 8003574:	3301      	adds	r3, #1
 8003576:	4573      	cmp	r3, lr
 8003578:	d3f7      	bcc.n	800356a <USB_ReadPacket+0x12>
  if (remaining_bytes != 0U)
 800357a:	b17a      	cbz	r2, 800359c <USB_ReadPacket+0x44>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800357c:	f50c 5c80 	add.w	ip, ip, #4096	@ 0x1000
 8003580:	f8dc 4000 	ldr.w	r4, [ip]
    i = 0U;
 8003584:	2100      	movs	r1, #0
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003586:	b2cb      	uxtb	r3, r1
 8003588:	00db      	lsls	r3, r3, #3
 800358a:	fa24 f303 	lsr.w	r3, r4, r3
 800358e:	f800 3b01 	strb.w	r3, [r0], #1
      i++;
 8003592:	3101      	adds	r1, #1
      remaining_bytes--;
 8003594:	3a01      	subs	r2, #1
 8003596:	b292      	uxth	r2, r2
    } while (remaining_bytes != 0U);
 8003598:	2a00      	cmp	r2, #0
 800359a:	d1f4      	bne.n	8003586 <USB_ReadPacket+0x2e>
}
 800359c:	bd10      	pop	{r4, pc}

0800359e <USB_EPSetStall>:
  uint32_t epnum = (uint32_t)ep->num;
 800359e:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 80035a0:	784a      	ldrb	r2, [r1, #1]
 80035a2:	2a01      	cmp	r2, #1
 80035a4:	d014      	beq.n	80035d0 <USB_EPSetStall+0x32>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80035a6:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80035aa:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	@ 0xb00
 80035ae:	2a00      	cmp	r2, #0
 80035b0:	db06      	blt.n	80035c0 <USB_EPSetStall+0x22>
 80035b2:	b12b      	cbz	r3, 80035c0 <USB_EPSetStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80035b4:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 80035b8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80035bc:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80035c0:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 80035c4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80035c8:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 80035cc:	2000      	movs	r0, #0
 80035ce:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80035d0:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80035d4:	f8d0 2900 	ldr.w	r2, [r0, #2304]	@ 0x900
 80035d8:	2a00      	cmp	r2, #0
 80035da:	db06      	blt.n	80035ea <USB_EPSetStall+0x4c>
 80035dc:	b12b      	cbz	r3, 80035ea <USB_EPSetStall+0x4c>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80035de:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 80035e2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80035e6:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80035ea:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 80035ee:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80035f2:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 80035f6:	e7e9      	b.n	80035cc <USB_EPSetStall+0x2e>

080035f8 <USB_EPClearStall>:
  uint32_t epnum = (uint32_t)ep->num;
 80035f8:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 80035fa:	784a      	ldrb	r2, [r1, #1]
 80035fc:	2a01      	cmp	r2, #1
 80035fe:	d00e      	beq.n	800361e <USB_EPClearStall+0x26>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003600:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8003604:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8003608:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800360c:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003610:	790b      	ldrb	r3, [r1, #4]
 8003612:	3b02      	subs	r3, #2
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2b01      	cmp	r3, #1
 8003618:	d915      	bls.n	8003646 <USB_EPClearStall+0x4e>
}
 800361a:	2000      	movs	r0, #0
 800361c:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800361e:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8003622:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8003626:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800362a:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800362e:	790b      	ldrb	r3, [r1, #4]
 8003630:	3b02      	subs	r3, #2
 8003632:	b2db      	uxtb	r3, r3
 8003634:	2b01      	cmp	r3, #1
 8003636:	d8f0      	bhi.n	800361a <USB_EPClearStall+0x22>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003638:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 800363c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003640:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 8003644:	e7e9      	b.n	800361a <USB_EPClearStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003646:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 800364a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800364e:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
 8003652:	e7e2      	b.n	800361a <USB_EPClearStall+0x22>

08003654 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8003654:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 8003658:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800365c:	f8c0 3800 	str.w	r3, [r0, #2048]	@ 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8003660:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 8003664:	0109      	lsls	r1, r1, #4
 8003666:	f401 61fe 	and.w	r1, r1, #2032	@ 0x7f0
 800366a:	430b      	orrs	r3, r1
 800366c:	f8c0 3800 	str.w	r3, [r0, #2048]	@ 0x800
}
 8003670:	2000      	movs	r0, #0
 8003672:	4770      	bx	lr

08003674 <USB_DevConnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003674:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	@ 0xe00
 8003678:	f023 0303 	bic.w	r3, r3, #3
 800367c:	f8c0 3e00 	str.w	r3, [r0, #3584]	@ 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8003680:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 8003684:	f023 0302 	bic.w	r3, r3, #2
 8003688:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 800368c:	2000      	movs	r0, #0
 800368e:	4770      	bx	lr

08003690 <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003690:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	@ 0xe00
 8003694:	f023 0303 	bic.w	r3, r3, #3
 8003698:	f8c0 3e00 	str.w	r3, [r0, #3584]	@ 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800369c:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 80036a0:	f043 0302 	orr.w	r3, r3, #2
 80036a4:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 80036a8:	2000      	movs	r0, #0
 80036aa:	4770      	bx	lr

080036ac <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 80036ac:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 80036ae:	6980      	ldr	r0, [r0, #24]
}
 80036b0:	4010      	ands	r0, r2
 80036b2:	4770      	bx	lr

080036b4 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 80036b4:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
 80036b8:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80036bc:	69c0      	ldr	r0, [r0, #28]
 80036be:	4018      	ands	r0, r3
}
 80036c0:	0c00      	lsrs	r0, r0, #16
 80036c2:	4770      	bx	lr

080036c4 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 80036c4:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
 80036c8:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80036cc:	69c0      	ldr	r0, [r0, #28]
 80036ce:	4018      	ands	r0, r3
}
 80036d0:	b280      	uxth	r0, r0
 80036d2:	4770      	bx	lr

080036d4 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80036d4:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 80036d8:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	@ 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80036dc:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
 80036e0:	6940      	ldr	r0, [r0, #20]
}
 80036e2:	4010      	ands	r0, r2
 80036e4:	4770      	bx	lr

080036e6 <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 80036e6:	f8d0 2810 	ldr.w	r2, [r0, #2064]	@ 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 80036ea:	f8d0 3834 	ldr.w	r3, [r0, #2100]	@ 0x834
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80036ee:	f001 0c0f 	and.w	ip, r1, #15
 80036f2:	fa23 f30c 	lsr.w	r3, r3, ip
 80036f6:	01db      	lsls	r3, r3, #7
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	4313      	orrs	r3, r2
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80036fc:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 8003700:	f500 6010 	add.w	r0, r0, #2304	@ 0x900
 8003704:	6880      	ldr	r0, [r0, #8]
}
 8003706:	4018      	ands	r0, r3
 8003708:	4770      	bx	lr

0800370a <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 800370a:	6940      	ldr	r0, [r0, #20]
}
 800370c:	f000 0001 	and.w	r0, r0, #1
 8003710:	4770      	bx	lr

08003712 <USB_SetCurrentMode>:
{
 8003712:	b538      	push	{r3, r4, r5, lr}
 8003714:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003716:	68c3      	ldr	r3, [r0, #12]
 8003718:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800371c:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800371e:	2901      	cmp	r1, #1
 8003720:	d013      	beq.n	800374a <USB_SetCurrentMode+0x38>
  else if (mode == USB_DEVICE_MODE)
 8003722:	bb19      	cbnz	r1, 800376c <USB_SetCurrentMode+0x5a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003724:	68c3      	ldr	r3, [r0, #12]
 8003726:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800372a:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 800372c:	2400      	movs	r4, #0
      HAL_Delay(10U);
 800372e:	200a      	movs	r0, #10
 8003730:	f7fd fb0c 	bl	8000d4c <HAL_Delay>
      ms += 10U;
 8003734:	340a      	adds	r4, #10
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003736:	4628      	mov	r0, r5
 8003738:	f7ff ffe7 	bl	800370a <USB_GetMode>
 800373c:	b108      	cbz	r0, 8003742 <USB_SetCurrentMode+0x30>
 800373e:	2cc7      	cmp	r4, #199	@ 0xc7
 8003740:	d9f5      	bls.n	800372e <USB_SetCurrentMode+0x1c>
  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003742:	2cc8      	cmp	r4, #200	@ 0xc8
 8003744:	d014      	beq.n	8003770 <USB_SetCurrentMode+0x5e>
  return HAL_OK;
 8003746:	2000      	movs	r0, #0
}
 8003748:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800374a:	68c3      	ldr	r3, [r0, #12]
 800374c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003750:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8003752:	2400      	movs	r4, #0
      HAL_Delay(10U);
 8003754:	200a      	movs	r0, #10
 8003756:	f7fd faf9 	bl	8000d4c <HAL_Delay>
      ms += 10U;
 800375a:	340a      	adds	r4, #10
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800375c:	4628      	mov	r0, r5
 800375e:	f7ff ffd4 	bl	800370a <USB_GetMode>
 8003762:	2801      	cmp	r0, #1
 8003764:	d0ed      	beq.n	8003742 <USB_SetCurrentMode+0x30>
 8003766:	2cc7      	cmp	r4, #199	@ 0xc7
 8003768:	d9f4      	bls.n	8003754 <USB_SetCurrentMode+0x42>
 800376a:	e7ea      	b.n	8003742 <USB_SetCurrentMode+0x30>
    return HAL_ERROR;
 800376c:	2001      	movs	r0, #1
 800376e:	e7eb      	b.n	8003748 <USB_SetCurrentMode+0x36>
    return HAL_ERROR;
 8003770:	2001      	movs	r0, #1
 8003772:	e7e9      	b.n	8003748 <USB_SetCurrentMode+0x36>

08003774 <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8003774:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8003778:	f36f 030a 	bfc	r3, #0, #11
 800377c:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8003780:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 8003784:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003788:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 800378c:	2000      	movs	r0, #0
 800378e:	4770      	bx	lr

08003790 <USB_EP0_OutStart>:
{
 8003790:	b410      	push	{r4}
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003792:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8003794:	4b15      	ldr	r3, [pc, #84]	@ (80037ec <USB_EP0_OutStart+0x5c>)
 8003796:	429c      	cmp	r4, r3
 8003798:	d903      	bls.n	80037a2 <USB_EP0_OutStart+0x12>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800379a:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 800379e:	2b00      	cmp	r3, #0
 80037a0:	db16      	blt.n	80037d0 <USB_EP0_OutStart+0x40>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80037a2:	2400      	movs	r4, #0
 80037a4:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80037a8:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	@ 0xb10
 80037ac:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 80037b0:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80037b4:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	@ 0xb10
 80037b8:	f044 0418 	orr.w	r4, r4, #24
 80037bc:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80037c0:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	@ 0xb10
 80037c4:	f044 44c0 	orr.w	r4, r4, #1610612736	@ 0x60000000
 80037c8:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  if (dma == 1U)
 80037cc:	2901      	cmp	r1, #1
 80037ce:	d003      	beq.n	80037d8 <USB_EP0_OutStart+0x48>
}
 80037d0:	2000      	movs	r0, #0
 80037d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80037d6:	4770      	bx	lr
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80037d8:	f8c0 2b14 	str.w	r2, [r0, #2836]	@ 0xb14
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80037dc:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 80037e0:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80037e4:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
 80037e8:	e7f2      	b.n	80037d0 <USB_EP0_OutStart+0x40>
 80037ea:	bf00      	nop
 80037ec:	4f54300a 	.word	0x4f54300a

080037f0 <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 80037f0:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80037f4:	4905      	ldr	r1, [pc, #20]	@ (800380c <__NVIC_SystemReset+0x1c>)
 80037f6:	68ca      	ldr	r2, [r1, #12]
 80037f8:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80037fc:	4b04      	ldr	r3, [pc, #16]	@ (8003810 <__NVIC_SystemReset+0x20>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	60cb      	str	r3, [r1, #12]
 8003802:	f3bf 8f4f 	dsb	sy
    __NOP();
 8003806:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8003808:	e7fd      	b.n	8003806 <__NVIC_SystemReset+0x16>
 800380a:	bf00      	nop
 800380c:	e000ed00 	.word	0xe000ed00
 8003810:	05fa0004 	.word	0x05fa0004

08003814 <USBD_DFU_GetCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_DFU_CfgDesc);
 8003814:	231b      	movs	r3, #27
 8003816:	8003      	strh	r3, [r0, #0]

  return USBD_DFU_CfgDesc;
}
 8003818:	4800      	ldr	r0, [pc, #0]	@ (800381c <USBD_DFU_GetCfgDesc+0x8>)
 800381a:	4770      	bx	lr
 800381c:	2000001c 	.word	0x2000001c

08003820 <USBD_DFU_EP0_RxReady>:
static uint8_t USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
}
 8003820:	2000      	movs	r0, #0
 8003822:	4770      	bx	lr

08003824 <USBD_DFU_SOF>:
static uint8_t USBD_DFU_SOF(USBD_HandleTypeDef *pdev)
{
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
}
 8003824:	2000      	movs	r0, #0
 8003826:	4770      	bx	lr

08003828 <USBD_DFU_GetDeviceQualifierDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_DFU_DeviceQualifierDesc);
 8003828:	230a      	movs	r3, #10
 800382a:	8003      	strh	r3, [r0, #0]

  return USBD_DFU_DeviceQualifierDesc;
}
 800382c:	4800      	ldr	r0, [pc, #0]	@ (8003830 <USBD_DFU_GetDeviceQualifierDesc+0x8>)
 800382e:	4770      	bx	lr
 8003830:	20000010 	.word	0x20000010

08003834 <DFU_ClearStatus>:
  * @param  pdev: device instance
  * @retval status
  */
static void DFU_ClearStatus(USBD_HandleTypeDef *pdev)
{
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8003834:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8003838:	33b0      	adds	r3, #176	@ 0xb0
 800383a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]

  if (hdfu == NULL)
 800383e:	b1a3      	cbz	r3, 800386a <DFU_ClearStatus+0x36>
  {
    return;
  }

  if (hdfu->dev_state == DFU_STATE_ERROR)
 8003840:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 8003844:	2a0a      	cmp	r2, #10
 8003846:	d011      	beq.n	800386c <DFU_ClearStatus+0x38>
    hdfu->dev_status[5] = 0U; /* iString */
  }
  else
  {
    /* State Error */
    hdfu->dev_state = DFU_STATE_ERROR;
 8003848:	210a      	movs	r1, #10
 800384a:	f883 141c 	strb.w	r1, [r3, #1052]	@ 0x41c
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN; /* bStatus */
 800384e:	220e      	movs	r2, #14
 8003850:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[1] = 0U;
 8003854:	2200      	movs	r2, #0
 8003856:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 800385a:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 800385e:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 8003862:	f883 1418 	strb.w	r1, [r3, #1048]	@ 0x418
    hdfu->dev_status[5] = 0U; /* iString */
 8003866:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
  }
}
 800386a:	4770      	bx	lr
    hdfu->dev_state = DFU_STATE_IDLE;
 800386c:	2102      	movs	r1, #2
 800386e:	f883 141c 	strb.w	r1, [r3, #1052]	@ 0x41c
    hdfu->dev_status[0] = DFU_ERROR_NONE; /* bStatus */
 8003872:	2200      	movs	r2, #0
 8003874:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[1] = 0U;
 8003878:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 800387c:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 8003880:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 8003884:	f883 1418 	strb.w	r1, [r3, #1048]	@ 0x418
    hdfu->dev_status[5] = 0U; /* iString */
 8003888:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
 800388c:	4770      	bx	lr

0800388e <DFU_Abort>:
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Abort(USBD_HandleTypeDef *pdev)
{
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800388e:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8003892:	33b0      	adds	r3, #176	@ 0xb0
 8003894:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]

  if (hdfu == NULL)
 8003898:	b1eb      	cbz	r3, 80038d6 <DFU_Abort+0x48>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 800389a:	f893 141c 	ldrb.w	r1, [r3, #1052]	@ 0x41c
 800389e:	2909      	cmp	r1, #9
 80038a0:	d819      	bhi.n	80038d6 <DFU_Abort+0x48>
 80038a2:	f44f 721b 	mov.w	r2, #620	@ 0x26c
 80038a6:	40ca      	lsrs	r2, r1
 80038a8:	f012 0f01 	tst.w	r2, #1
 80038ac:	d013      	beq.n	80038d6 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 80038ae:	2102      	movs	r1, #2
 80038b0:	f883 141c 	strb.w	r1, [r3, #1052]	@ 0x41c
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[1] = 0U;
 80038ba:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 80038be:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 80038c2:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
    hdfu->dev_status[4] = hdfu->dev_state;
 80038c6:	f883 1418 	strb.w	r1, [r3, #1048]	@ 0x418
    hdfu->dev_status[5] = 0U; /* iString */
 80038ca:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
    hdfu->wblock_num = 0U;
 80038ce:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
    hdfu->wlength = 0U;
 80038d2:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
  }
}
 80038d6:	4770      	bx	lr

080038d8 <USBD_DFU_GetUsrStringDesc>:
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 80038d8:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 80038dc:	33b0      	adds	r3, #176	@ 0xb0
 80038de:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80038e2:	6843      	ldr	r3, [r0, #4]
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 80038e4:	2906      	cmp	r1, #6
 80038e6:	d807      	bhi.n	80038f8 <USBD_DFU_GetUsrStringDesc+0x20>
{
 80038e8:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)DfuInterface->pStrDesc, USBD_StrDesc, length);
 80038ea:	4c05      	ldr	r4, [pc, #20]	@ (8003900 <USBD_DFU_GetUsrStringDesc+0x28>)
 80038ec:	4621      	mov	r1, r4
 80038ee:	6818      	ldr	r0, [r3, #0]
 80038f0:	f001 f93a 	bl	8004b68 <USBD_GetString>
    return USBD_StrDesc;
 80038f4:	4620      	mov	r0, r4
}
 80038f6:	bd10      	pop	{r4, pc}
    *length = 0U;
 80038f8:	2000      	movs	r0, #0
 80038fa:	8010      	strh	r0, [r2, #0]
}
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	20000260 	.word	0x20000260

08003904 <USBD_DFU_GetDfuFuncDesc>:
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
  uint8_t *pDfuDesc = NULL;
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8003904:	8842      	ldrh	r2, [r0, #2]
 8003906:	7803      	ldrb	r3, [r0, #0]
 8003908:	429a      	cmp	r2, r3
 800390a:	d914      	bls.n	8003936 <USBD_DFU_GetDfuFuncDesc+0x32>
{
 800390c:	b510      	push	{r4, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	4604      	mov	r4, r0
  {
    ptr = desc->bLength;
 8003912:	f8ad 3006 	strh.w	r3, [sp, #6]

    while (ptr < desc->wTotalLength)
 8003916:	8863      	ldrh	r3, [r4, #2]
 8003918:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800391c:	429a      	cmp	r2, r3
 800391e:	d207      	bcs.n	8003930 <USBD_DFU_GetDfuFuncDesc+0x2c>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8003920:	f10d 0106 	add.w	r1, sp, #6
 8003924:	f000 fd8d 	bl	8004442 <USBD_GetNextDesc>

      if (pdesc->bDescriptorType == DFU_DESCRIPTOR_TYPE)
 8003928:	7843      	ldrb	r3, [r0, #1]
 800392a:	2b21      	cmp	r3, #33	@ 0x21
 800392c:	d1f3      	bne.n	8003916 <USBD_DFU_GetDfuFuncDesc+0x12>
 800392e:	e000      	b.n	8003932 <USBD_DFU_GetDfuFuncDesc+0x2e>
  uint8_t *pDfuDesc = NULL;
 8003930:	2000      	movs	r0, #0
        break;
      }
    }
  }
  return pDfuDesc;
}
 8003932:	b002      	add	sp, #8
 8003934:	bd10      	pop	{r4, pc}
  uint8_t *pDfuDesc = NULL;
 8003936:	2000      	movs	r0, #0
}
 8003938:	4770      	bx	lr

0800393a <DFU_Leave>:
{
 800393a:	b570      	push	{r4, r5, r6, lr}
 800393c:	4604      	mov	r4, r0
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800393e:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8003942:	33b0      	adds	r3, #176	@ 0xb0
 8003944:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 8003948:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800394c:	685e      	ldr	r6, [r3, #4]
  USBD_DFUFuncDescTypeDef *pDfuFunc = (USBD_DFUFuncDescTypeDef *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 800394e:	f8d0 02d0 	ldr.w	r0, [r0, #720]	@ 0x2d0
 8003952:	f7ff ffd7 	bl	8003904 <USBD_DFU_GetDfuFuncDesc>
  if ((hdfu == NULL) || (DfuInterface == NULL) || (pDfuFunc == NULL))
 8003956:	b1a5      	cbz	r5, 8003982 <DFU_Leave+0x48>
 8003958:	b19e      	cbz	r6, 8003982 <DFU_Leave+0x48>
 800395a:	b190      	cbz	r0, 8003982 <DFU_Leave+0x48>
  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 800395c:	2300      	movs	r3, #0
 800395e:	f885 341d 	strb.w	r3, [r5, #1053]	@ 0x41d
  if ((pDfuFunc->bmAttributes & DFU_MANIFEST_MASK) != 0U)
 8003962:	7883      	ldrb	r3, [r0, #2]
 8003964:	f013 0f04 	tst.w	r3, #4
 8003968:	d00c      	beq.n	8003984 <DFU_Leave+0x4a>
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 800396a:	2206      	movs	r2, #6
 800396c:	f885 241c 	strb.w	r2, [r5, #1052]	@ 0x41c
    hdfu->dev_status[1] = 0U;
 8003970:	2300      	movs	r3, #0
 8003972:	f885 3415 	strb.w	r3, [r5, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 8003976:	f885 3416 	strb.w	r3, [r5, #1046]	@ 0x416
    hdfu->dev_status[3] = 0U;
 800397a:	f885 3417 	strb.w	r3, [r5, #1047]	@ 0x417
    hdfu->dev_status[4] = hdfu->dev_state;
 800397e:	f885 2418 	strb.w	r2, [r5, #1048]	@ 0x418
}
 8003982:	bd70      	pop	{r4, r5, r6, pc}
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 8003984:	2208      	movs	r2, #8
 8003986:	f885 241c 	strb.w	r2, [r5, #1052]	@ 0x41c
    hdfu->dev_status[1] = 0U;
 800398a:	2300      	movs	r3, #0
 800398c:	f885 3415 	strb.w	r3, [r5, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 8003990:	f885 3416 	strb.w	r3, [r5, #1046]	@ 0x416
    hdfu->dev_status[3] = 0U;
 8003994:	f885 3417 	strb.w	r3, [r5, #1047]	@ 0x417
    hdfu->dev_status[4] = hdfu->dev_state;
 8003998:	f885 2418 	strb.w	r2, [r5, #1048]	@ 0x418
    (void)USBD_Stop(pdev);
 800399c:	4620      	mov	r0, r4
 800399e:	f000 fb8d 	bl	80040bc <USBD_Stop>
    NVIC_SystemReset();
 80039a2:	f7ff ff25 	bl	80037f0 <__NVIC_SystemReset>

080039a6 <USBD_DFU_EP0_TxReady>:
{
 80039a6:	b510      	push	{r4, lr}
 80039a8:	b082      	sub	sp, #8
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80039aa:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 80039ae:	33b0      	adds	r3, #176	@ 0xb0
 80039b0:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 80039b4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80039b8:	685a      	ldr	r2, [r3, #4]
  if (hdfu == NULL)
 80039ba:	2c00      	cmp	r4, #0
 80039bc:	f000 808c 	beq.w	8003ad8 <USBD_DFU_EP0_TxReady+0x132>
  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 80039c0:	f894 341c 	ldrb.w	r3, [r4, #1052]	@ 0x41c
 80039c4:	2b04      	cmp	r3, #4
 80039c6:	d005      	beq.n	80039d4 <USBD_DFU_EP0_TxReady+0x2e>
  else if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 80039c8:	2b07      	cmp	r3, #7
 80039ca:	f000 8081 	beq.w	8003ad0 <USBD_DFU_EP0_TxReady+0x12a>
    return (uint8_t)USBD_FAIL;
 80039ce:	2003      	movs	r0, #3
}
 80039d0:	b002      	add	sp, #8
 80039d2:	bd10      	pop	{r4, pc}
    if (hdfu->wblock_num == 0U)
 80039d4:	f8d4 1400 	ldr.w	r1, [r4, #1024]	@ 0x400
 80039d8:	2900      	cmp	r1, #0
 80039da:	d14a      	bne.n	8003a72 <USBD_DFU_EP0_TxReady+0xcc>
      if (hdfu->wlength == 1U)
 80039dc:	f8d4 3404 	ldr.w	r3, [r4, #1028]	@ 0x404
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d053      	beq.n	8003a8c <USBD_DFU_EP0_TxReady+0xe6>
      else if (hdfu->wlength == 5U)
 80039e4:	2b05      	cmp	r3, #5
 80039e6:	d136      	bne.n	8003a56 <USBD_DFU_EP0_TxReady+0xb0>
        if (hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER)
 80039e8:	7823      	ldrb	r3, [r4, #0]
 80039ea:	2b21      	cmp	r3, #33	@ 0x21
 80039ec:	d020      	beq.n	8003a30 <USBD_DFU_EP0_TxReady+0x8a>
        else if (hdfu->buffer.d8[0] == DFU_CMD_ERASE)
 80039ee:	2b41      	cmp	r3, #65	@ 0x41
 80039f0:	d174      	bne.n	8003adc <USBD_DFU_EP0_TxReady+0x136>
          app_addr_ptr = hdfu->buffer.d8[1];
 80039f2:	7863      	ldrb	r3, [r4, #1]
          app_addr_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 80039f4:	78a1      	ldrb	r1, [r4, #2]
 80039f6:	eb03 2301 	add.w	r3, r3, r1, lsl #8
          app_addr_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 80039fa:	78e1      	ldrb	r1, [r4, #3]
 80039fc:	eb03 4301 	add.w	r3, r3, r1, lsl #16
          app_addr_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8003a00:	7920      	ldrb	r0, [r4, #4]
          if (DfuInterface->Erase(app_addr_ptr) != USBD_OK)
 8003a02:	68d2      	ldr	r2, [r2, #12]
 8003a04:	eb03 6000 	add.w	r0, r3, r0, lsl #24
 8003a08:	4790      	blx	r2
 8003a0a:	2800      	cmp	r0, #0
 8003a0c:	d03e      	beq.n	8003a8c <USBD_DFU_EP0_TxReady+0xe6>
            hdfu->dev_state = DFU_STATE_ERROR;
 8003a0e:	220a      	movs	r2, #10
 8003a10:	f884 241c 	strb.w	r2, [r4, #1052]	@ 0x41c
            hdfu->dev_status[0] = DFU_ERROR_VENDOR;
 8003a14:	230b      	movs	r3, #11
 8003a16:	f884 3414 	strb.w	r3, [r4, #1044]	@ 0x414
            hdfu->dev_status[1] = 0U;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	f884 3415 	strb.w	r3, [r4, #1045]	@ 0x415
            hdfu->dev_status[2] = 0U;
 8003a20:	f884 3416 	strb.w	r3, [r4, #1046]	@ 0x416
            hdfu->dev_status[3] = 0U;
 8003a24:	f884 3417 	strb.w	r3, [r4, #1047]	@ 0x417
            hdfu->dev_status[4] = hdfu->dev_state;
 8003a28:	f884 2418 	strb.w	r2, [r4, #1048]	@ 0x418
            return (uint8_t)USBD_FAIL;
 8003a2c:	2003      	movs	r0, #3
 8003a2e:	e7cf      	b.n	80039d0 <USBD_DFU_EP0_TxReady+0x2a>
          hdfu->data_ptr = hdfu->buffer.d8[1];
 8003a30:	7863      	ldrb	r3, [r4, #1]
 8003a32:	f8c4 3408 	str.w	r3, [r4, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 8003a36:	78a2      	ldrb	r2, [r4, #2]
 8003a38:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003a3c:	f8c4 3408 	str.w	r3, [r4, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8003a40:	78e2      	ldrb	r2, [r4, #3]
 8003a42:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 8003a46:	f8c4 3408 	str.w	r3, [r4, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8003a4a:	7922      	ldrb	r2, [r4, #4]
 8003a4c:	eb03 6302 	add.w	r3, r3, r2, lsl #24
 8003a50:	f8c4 3408 	str.w	r3, [r4, #1032]	@ 0x408
 8003a54:	e01a      	b.n	8003a8c <USBD_DFU_EP0_TxReady+0xe6>
        hdfu->wlength = 0U;
 8003a56:	2300      	movs	r3, #0
 8003a58:	f8c4 3404 	str.w	r3, [r4, #1028]	@ 0x404
        hdfu->wblock_num = 0U;
 8003a5c:	f8c4 3400 	str.w	r3, [r4, #1024]	@ 0x400
        req.bmRequest = 0U;
 8003a60:	f88d 3000 	strb.w	r3, [sp]
        req.wLength = 1U;
 8003a64:	2301      	movs	r3, #1
 8003a66:	f8ad 3006 	strh.w	r3, [sp, #6]
        USBD_CtlError(pdev, &req);
 8003a6a:	4669      	mov	r1, sp
 8003a6c:	f000 fd0e 	bl	800448c <USBD_CtlError>
 8003a70:	e00c      	b.n	8003a8c <USBD_DFU_EP0_TxReady+0xe6>
      if (hdfu->wblock_num > 1U)
 8003a72:	2901      	cmp	r1, #1
 8003a74:	d90a      	bls.n	8003a8c <USBD_DFU_EP0_TxReady+0xe6>
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 8003a76:	3902      	subs	r1, #2
 8003a78:	f8d4 0408 	ldr.w	r0, [r4, #1032]	@ 0x408
        if (DfuInterface->Write(hdfu->buffer.d8, (uint8_t *)addr, hdfu->wlength) != USBD_OK)
 8003a7c:	6913      	ldr	r3, [r2, #16]
 8003a7e:	f8d4 2404 	ldr.w	r2, [r4, #1028]	@ 0x404
 8003a82:	eb00 2181 	add.w	r1, r0, r1, lsl #10
 8003a86:	4620      	mov	r0, r4
 8003a88:	4798      	blx	r3
 8003a8a:	b980      	cbnz	r0, 8003aae <USBD_DFU_EP0_TxReady+0x108>
    hdfu->wlength = 0U;
 8003a8c:	2000      	movs	r0, #0
 8003a8e:	f8c4 0404 	str.w	r0, [r4, #1028]	@ 0x404
    hdfu->wblock_num = 0U;
 8003a92:	f8c4 0400 	str.w	r0, [r4, #1024]	@ 0x400
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 8003a96:	2303      	movs	r3, #3
 8003a98:	f884 341c 	strb.w	r3, [r4, #1052]	@ 0x41c
    hdfu->dev_status[1] = 0U;
 8003a9c:	f884 0415 	strb.w	r0, [r4, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 8003aa0:	f884 0416 	strb.w	r0, [r4, #1046]	@ 0x416
    hdfu->dev_status[3] = 0U;
 8003aa4:	f884 0417 	strb.w	r0, [r4, #1047]	@ 0x417
    hdfu->dev_status[4] = hdfu->dev_state;
 8003aa8:	f884 3418 	strb.w	r3, [r4, #1048]	@ 0x418
 8003aac:	e790      	b.n	80039d0 <USBD_DFU_EP0_TxReady+0x2a>
          hdfu->dev_state = DFU_STATE_ERROR;
 8003aae:	220a      	movs	r2, #10
 8003ab0:	f884 241c 	strb.w	r2, [r4, #1052]	@ 0x41c
          hdfu->dev_status[0] = DFU_ERROR_VENDOR;
 8003ab4:	230b      	movs	r3, #11
 8003ab6:	f884 3414 	strb.w	r3, [r4, #1044]	@ 0x414
          hdfu->dev_status[1] = 0U;
 8003aba:	2300      	movs	r3, #0
 8003abc:	f884 3415 	strb.w	r3, [r4, #1045]	@ 0x415
          hdfu->dev_status[2] = 0U;
 8003ac0:	f884 3416 	strb.w	r3, [r4, #1046]	@ 0x416
          hdfu->dev_status[3] = 0U;
 8003ac4:	f884 3417 	strb.w	r3, [r4, #1047]	@ 0x417
          hdfu->dev_status[4] = hdfu->dev_state;
 8003ac8:	f884 2418 	strb.w	r2, [r4, #1048]	@ 0x418
          return (uint8_t)USBD_FAIL;
 8003acc:	2003      	movs	r0, #3
 8003ace:	e77f      	b.n	80039d0 <USBD_DFU_EP0_TxReady+0x2a>
    DFU_Leave(pdev);
 8003ad0:	f7ff ff33 	bl	800393a <DFU_Leave>
  return (uint8_t)USBD_OK;
 8003ad4:	2000      	movs	r0, #0
 8003ad6:	e77b      	b.n	80039d0 <USBD_DFU_EP0_TxReady+0x2a>
    return (uint8_t)USBD_FAIL;
 8003ad8:	2003      	movs	r0, #3
 8003ada:	e779      	b.n	80039d0 <USBD_DFU_EP0_TxReady+0x2a>
          return (uint8_t)USBD_FAIL;
 8003adc:	2003      	movs	r0, #3
 8003ade:	e777      	b.n	80039d0 <USBD_DFU_EP0_TxReady+0x2a>

08003ae0 <DFU_Upload>:
{
 8003ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ae2:	460e      	mov	r6, r1
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8003ae4:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8003ae8:	33b0      	adds	r3, #176	@ 0xb0
 8003aea:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 8003aee:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8003af2:	6859      	ldr	r1, [r3, #4]
  if (hdfu == NULL)
 8003af4:	2c00      	cmp	r4, #0
 8003af6:	f000 8087 	beq.w	8003c08 <DFU_Upload+0x128>
 8003afa:	4605      	mov	r5, r0
  if (req->wLength > 0U)
 8003afc:	88f3      	ldrh	r3, [r6, #6]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d076      	beq.n	8003bf0 <DFU_Upload+0x110>
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8003b02:	f894 341c 	ldrb.w	r3, [r4, #1052]	@ 0x41c
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d001      	beq.n	8003b0e <DFU_Upload+0x2e>
 8003b0a:	2b09      	cmp	r3, #9
 8003b0c:	d167      	bne.n	8003bde <DFU_Upload+0xfe>
      hdfu->wblock_num = req->wValue;
 8003b0e:	8870      	ldrh	r0, [r6, #2]
 8003b10:	f8c4 0400 	str.w	r0, [r4, #1024]	@ 0x400
      hdfu->wlength = MIN(req->wLength, USBD_DFU_XFER_SIZE);
 8003b14:	88f2      	ldrh	r2, [r6, #6]
 8003b16:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8003b1a:	bf28      	it	cs
 8003b1c:	f44f 6280 	movcs.w	r2, #1024	@ 0x400
 8003b20:	f8c4 2404 	str.w	r2, [r4, #1028]	@ 0x404
      if (hdfu->wblock_num == 0U)
 8003b24:	b9d0      	cbnz	r0, 8003b5c <DFU_Upload+0x7c>
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 8003b26:	2a03      	cmp	r2, #3
 8003b28:	d916      	bls.n	8003b58 <DFU_Upload+0x78>
 8003b2a:	2202      	movs	r2, #2
 8003b2c:	f884 241c 	strb.w	r2, [r4, #1052]	@ 0x41c
        hdfu->dev_status[1] = 0U;
 8003b30:	2300      	movs	r3, #0
 8003b32:	f884 3415 	strb.w	r3, [r4, #1045]	@ 0x415
        hdfu->dev_status[2] = 0U;
 8003b36:	f884 3416 	strb.w	r3, [r4, #1046]	@ 0x416
        hdfu->dev_status[3] = 0U;
 8003b3a:	f884 3417 	strb.w	r3, [r4, #1047]	@ 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 8003b3e:	f884 2418 	strb.w	r2, [r4, #1048]	@ 0x418
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 8003b42:	7023      	strb	r3, [r4, #0]
        hdfu->buffer.d8[1] = DFU_CMD_SETADDRESSPOINTER;
 8003b44:	2321      	movs	r3, #33	@ 0x21
 8003b46:	7063      	strb	r3, [r4, #1]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 8003b48:	2341      	movs	r3, #65	@ 0x41
 8003b4a:	70a3      	strb	r3, [r4, #2]
        (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), CmdLength);
 8003b4c:	2203      	movs	r2, #3
 8003b4e:	4621      	mov	r1, r4
 8003b50:	4628      	mov	r0, r5
 8003b52:	f001 f82c 	bl	8004bae <USBD_CtlSendData>
 8003b56:	e057      	b.n	8003c08 <DFU_Upload+0x128>
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 8003b58:	2209      	movs	r2, #9
 8003b5a:	e7e7      	b.n	8003b2c <DFU_Upload+0x4c>
      else if (hdfu->wblock_num > 1U)
 8003b5c:	2801      	cmp	r0, #1
 8003b5e:	d92d      	bls.n	8003bbc <DFU_Upload+0xdc>
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 8003b60:	f04f 0c09 	mov.w	ip, #9
 8003b64:	f884 c41c 	strb.w	ip, [r4, #1052]	@ 0x41c
        hdfu->dev_status[1] = 0U;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	f884 3415 	strb.w	r3, [r4, #1045]	@ 0x415
        hdfu->dev_status[2] = 0U;
 8003b6e:	f884 3416 	strb.w	r3, [r4, #1046]	@ 0x416
        hdfu->dev_status[3] = 0U;
 8003b72:	f884 3417 	strb.w	r3, [r4, #1047]	@ 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 8003b76:	f884 c418 	strb.w	ip, [r4, #1048]	@ 0x418
          addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 8003b7a:	3802      	subs	r0, #2
 8003b7c:	f8d4 3408 	ldr.w	r3, [r4, #1032]	@ 0x408
          phaddr = DfuInterface->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 8003b80:	694f      	ldr	r7, [r1, #20]
 8003b82:	4621      	mov	r1, r4
 8003b84:	eb03 2080 	add.w	r0, r3, r0, lsl #10
 8003b88:	47b8      	blx	r7
          if (phaddr == NULL)
 8003b8a:	4601      	mov	r1, r0
 8003b8c:	b128      	cbz	r0, 8003b9a <DFU_Upload+0xba>
            (void)USBD_CtlSendData(pdev, phaddr, hdfu->wlength);
 8003b8e:	f8d4 2404 	ldr.w	r2, [r4, #1028]	@ 0x404
 8003b92:	4628      	mov	r0, r5
 8003b94:	f001 f80b 	bl	8004bae <USBD_CtlSendData>
 8003b98:	e036      	b.n	8003c08 <DFU_Upload+0x128>
            hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 8003b9a:	220f      	movs	r2, #15
 8003b9c:	f884 241c 	strb.w	r2, [r4, #1052]	@ 0x41c
            hdfu->dev_status[1] = 0U;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	f884 3415 	strb.w	r3, [r4, #1045]	@ 0x415
            hdfu->dev_status[2] = 0U;
 8003ba6:	f884 3416 	strb.w	r3, [r4, #1046]	@ 0x416
            hdfu->dev_status[3] = 0U;
 8003baa:	f884 3417 	strb.w	r3, [r4, #1047]	@ 0x417
            hdfu->dev_status[4] = hdfu->dev_state;
 8003bae:	f884 2418 	strb.w	r2, [r4, #1048]	@ 0x418
            USBD_CtlError(pdev, req);
 8003bb2:	4631      	mov	r1, r6
 8003bb4:	4628      	mov	r0, r5
 8003bb6:	f000 fc69 	bl	800448c <USBD_CtlError>
 8003bba:	e025      	b.n	8003c08 <DFU_Upload+0x128>
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 8003bbc:	220f      	movs	r2, #15
 8003bbe:	f884 241c 	strb.w	r2, [r4, #1052]	@ 0x41c
        hdfu->dev_status[1] = 0U;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	f884 3415 	strb.w	r3, [r4, #1045]	@ 0x415
        hdfu->dev_status[2] = 0U;
 8003bc8:	f884 3416 	strb.w	r3, [r4, #1046]	@ 0x416
        hdfu->dev_status[3] = 0U;
 8003bcc:	f884 3417 	strb.w	r3, [r4, #1047]	@ 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 8003bd0:	f884 2418 	strb.w	r2, [r4, #1048]	@ 0x418
        USBD_CtlError(pdev, req);
 8003bd4:	4631      	mov	r1, r6
 8003bd6:	4628      	mov	r0, r5
 8003bd8:	f000 fc58 	bl	800448c <USBD_CtlError>
 8003bdc:	e014      	b.n	8003c08 <DFU_Upload+0x128>
      hdfu->wlength = 0U;
 8003bde:	2300      	movs	r3, #0
 8003be0:	f8c4 3404 	str.w	r3, [r4, #1028]	@ 0x404
      hdfu->wblock_num = 0U;
 8003be4:	f8c4 3400 	str.w	r3, [r4, #1024]	@ 0x400
      USBD_CtlError(pdev, req);
 8003be8:	4631      	mov	r1, r6
 8003bea:	f000 fc4f 	bl	800448c <USBD_CtlError>
 8003bee:	e00b      	b.n	8003c08 <DFU_Upload+0x128>
    hdfu->dev_state = DFU_STATE_IDLE;
 8003bf0:	2202      	movs	r2, #2
 8003bf2:	f884 241c 	strb.w	r2, [r4, #1052]	@ 0x41c
    hdfu->dev_status[1] = 0U;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	f884 3415 	strb.w	r3, [r4, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 8003bfc:	f884 3416 	strb.w	r3, [r4, #1046]	@ 0x416
    hdfu->dev_status[3] = 0U;
 8003c00:	f884 3417 	strb.w	r3, [r4, #1047]	@ 0x417
    hdfu->dev_status[4] = hdfu->dev_state;
 8003c04:	f884 2418 	strb.w	r2, [r4, #1048]	@ 0x418
}
 8003c08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003c0a <DFU_GetStatus>:
{
 8003c0a:	b570      	push	{r4, r5, r6, lr}
 8003c0c:	4604      	mov	r4, r0
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8003c0e:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8003c12:	33b0      	adds	r3, #176	@ 0xb0
 8003c14:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 8003c18:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8003c1c:	685e      	ldr	r6, [r3, #4]
  USBD_DFUFuncDescTypeDef *pDfuFunc = (USBD_DFUFuncDescTypeDef *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 8003c1e:	f8d0 02d0 	ldr.w	r0, [r0, #720]	@ 0x2d0
 8003c22:	f7ff fe6f 	bl	8003904 <USBD_DFU_GetDfuFuncDesc>
  if ((hdfu == NULL) || (DfuInterface == NULL) || (pDfuFunc == NULL))
 8003c26:	b16d      	cbz	r5, 8003c44 <DFU_GetStatus+0x3a>
 8003c28:	b166      	cbz	r6, 8003c44 <DFU_GetStatus+0x3a>
 8003c2a:	b158      	cbz	r0, 8003c44 <DFU_GetStatus+0x3a>
  switch (hdfu->dev_state)
 8003c2c:	f895 341c 	ldrb.w	r3, [r5, #1052]	@ 0x41c
 8003c30:	2b03      	cmp	r3, #3
 8003c32:	d008      	beq.n	8003c46 <DFU_GetStatus+0x3c>
 8003c34:	2b06      	cmp	r3, #6
 8003c36:	d038      	beq.n	8003caa <DFU_GetStatus+0xa0>
  (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 8003c38:	2206      	movs	r2, #6
 8003c3a:	f205 4114 	addw	r1, r5, #1044	@ 0x414
 8003c3e:	4620      	mov	r0, r4
 8003c40:	f000 ffb5 	bl	8004bae <USBD_CtlSendData>
}
 8003c44:	bd70      	pop	{r4, r5, r6, pc}
      if (hdfu->wlength != 0U)
 8003c46:	f8d5 3404 	ldr.w	r3, [r5, #1028]	@ 0x404
 8003c4a:	b30b      	cbz	r3, 8003c90 <DFU_GetStatus+0x86>
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 8003c4c:	2204      	movs	r2, #4
 8003c4e:	f885 241c 	strb.w	r2, [r5, #1052]	@ 0x41c
        hdfu->dev_status[1] = 0U;
 8003c52:	2300      	movs	r3, #0
 8003c54:	f885 3415 	strb.w	r3, [r5, #1045]	@ 0x415
        hdfu->dev_status[2] = 0U;
 8003c58:	f885 3416 	strb.w	r3, [r5, #1046]	@ 0x416
        hdfu->dev_status[3] = 0U;
 8003c5c:	f885 3417 	strb.w	r3, [r5, #1047]	@ 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 8003c60:	f885 2418 	strb.w	r2, [r5, #1048]	@ 0x418
        if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 8003c64:	f8d5 3400 	ldr.w	r3, [r5, #1024]	@ 0x400
 8003c68:	b913      	cbnz	r3, 8003c70 <DFU_GetStatus+0x66>
 8003c6a:	782b      	ldrb	r3, [r5, #0]
 8003c6c:	2b41      	cmp	r3, #65	@ 0x41
 8003c6e:	d007      	beq.n	8003c80 <DFU_GetStatus+0x76>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 8003c70:	69b3      	ldr	r3, [r6, #24]
 8003c72:	f205 4214 	addw	r2, r5, #1044	@ 0x414
 8003c76:	2101      	movs	r1, #1
 8003c78:	f8d5 0408 	ldr.w	r0, [r5, #1032]	@ 0x408
 8003c7c:	4798      	blx	r3
 8003c7e:	e7db      	b.n	8003c38 <DFU_GetStatus+0x2e>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 8003c80:	69b3      	ldr	r3, [r6, #24]
 8003c82:	f205 4214 	addw	r2, r5, #1044	@ 0x414
 8003c86:	2100      	movs	r1, #0
 8003c88:	f8d5 0408 	ldr.w	r0, [r5, #1032]	@ 0x408
 8003c8c:	4798      	blx	r3
 8003c8e:	e7d3      	b.n	8003c38 <DFU_GetStatus+0x2e>
        hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 8003c90:	2205      	movs	r2, #5
 8003c92:	f885 241c 	strb.w	r2, [r5, #1052]	@ 0x41c
        hdfu->dev_status[1] = 0U;
 8003c96:	2300      	movs	r3, #0
 8003c98:	f885 3415 	strb.w	r3, [r5, #1045]	@ 0x415
        hdfu->dev_status[2] = 0U;
 8003c9c:	f885 3416 	strb.w	r3, [r5, #1046]	@ 0x416
        hdfu->dev_status[3] = 0U;
 8003ca0:	f885 3417 	strb.w	r3, [r5, #1047]	@ 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 8003ca4:	f885 2418 	strb.w	r2, [r5, #1048]	@ 0x418
 8003ca8:	e7c6      	b.n	8003c38 <DFU_GetStatus+0x2e>
      if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 8003caa:	f895 341d 	ldrb.w	r3, [r5, #1053]	@ 0x41d
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d012      	beq.n	8003cd8 <DFU_GetStatus+0xce>
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1c0      	bne.n	8003c38 <DFU_GetStatus+0x2e>
            ((pDfuFunc->bmAttributes & DFU_MANIFEST_MASK) != 0U))
 8003cb6:	7883      	ldrb	r3, [r0, #2]
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 8003cb8:	f013 0f04 	tst.w	r3, #4
 8003cbc:	d0bc      	beq.n	8003c38 <DFU_GetStatus+0x2e>
          hdfu->dev_state = DFU_STATE_IDLE;
 8003cbe:	2202      	movs	r2, #2
 8003cc0:	f885 241c 	strb.w	r2, [r5, #1052]	@ 0x41c
          hdfu->dev_status[1] = 0U;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	f885 3415 	strb.w	r3, [r5, #1045]	@ 0x415
          hdfu->dev_status[2] = 0U;
 8003cca:	f885 3416 	strb.w	r3, [r5, #1046]	@ 0x416
          hdfu->dev_status[3] = 0U;
 8003cce:	f885 3417 	strb.w	r3, [r5, #1047]	@ 0x417
          hdfu->dev_status[4] = hdfu->dev_state;
 8003cd2:	f885 2418 	strb.w	r2, [r5, #1048]	@ 0x418
 8003cd6:	e7af      	b.n	8003c38 <DFU_GetStatus+0x2e>
        hdfu->dev_state = DFU_STATE_MANIFEST;
 8003cd8:	2307      	movs	r3, #7
 8003cda:	f885 341c 	strb.w	r3, [r5, #1052]	@ 0x41c
        hdfu->dev_status[1] = 1U;             /* bwPollTimeout = 1ms */
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f885 2415 	strb.w	r2, [r5, #1045]	@ 0x415
        hdfu->dev_status[2] = 0U;
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f885 2416 	strb.w	r2, [r5, #1046]	@ 0x416
        hdfu->dev_status[3] = 0U;
 8003cea:	f885 2417 	strb.w	r2, [r5, #1047]	@ 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 8003cee:	f885 3418 	strb.w	r3, [r5, #1048]	@ 0x418
 8003cf2:	e7a1      	b.n	8003c38 <DFU_GetStatus+0x2e>

08003cf4 <DFU_GetState>:
{
 8003cf4:	b508      	push	{r3, lr}
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8003cf6:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8003cfa:	33b0      	adds	r3, #176	@ 0xb0
 8003cfc:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
  if (hdfu == NULL)
 8003d00:	b121      	cbz	r1, 8003d0c <DFU_GetState+0x18>
  (void)USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 8003d02:	2201      	movs	r2, #1
 8003d04:	f201 411c 	addw	r1, r1, #1052	@ 0x41c
 8003d08:	f000 ff51 	bl	8004bae <USBD_CtlSendData>
}
 8003d0c:	bd08      	pop	{r3, pc}

08003d0e <DFU_Download>:
{
 8003d0e:	b508      	push	{r3, lr}
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8003d10:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8003d14:	33b0      	adds	r3, #176	@ 0xb0
 8003d16:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
  if (hdfu == NULL)
 8003d1a:	b39b      	cbz	r3, 8003d84 <DFU_Download+0x76>
  if (req->wLength > 0U)
 8003d1c:	88ca      	ldrh	r2, [r1, #6]
 8003d1e:	b1e2      	cbz	r2, 8003d5a <DFU_Download+0x4c>
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 8003d20:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 8003d24:	2a02      	cmp	r2, #2
 8003d26:	d001      	beq.n	8003d2c <DFU_Download+0x1e>
 8003d28:	2a05      	cmp	r2, #5
 8003d2a:	d113      	bne.n	8003d54 <DFU_Download+0x46>
      hdfu->wblock_num = req->wValue;
 8003d2c:	884a      	ldrh	r2, [r1, #2]
 8003d2e:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      hdfu->wlength = MIN(req->wLength, USBD_DFU_XFER_SIZE);
 8003d32:	88ca      	ldrh	r2, [r1, #6]
 8003d34:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8003d38:	bf28      	it	cs
 8003d3a:	f44f 6280 	movcs.w	r2, #1024	@ 0x400
 8003d3e:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 8003d42:	2103      	movs	r1, #3
 8003d44:	f883 141c 	strb.w	r1, [r3, #1052]	@ 0x41c
      hdfu->dev_status[4] = hdfu->dev_state;
 8003d48:	f883 1418 	strb.w	r1, [r3, #1048]	@ 0x418
      (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8, hdfu->wlength);
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	f000 ff44 	bl	8004bda <USBD_CtlPrepareRx>
 8003d52:	e017      	b.n	8003d84 <DFU_Download+0x76>
      USBD_CtlError(pdev, req);
 8003d54:	f000 fb9a 	bl	800448c <USBD_CtlError>
 8003d58:	e014      	b.n	8003d84 <DFU_Download+0x76>
    if ((hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) || (hdfu->dev_state == DFU_STATE_IDLE))
 8003d5a:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 8003d5e:	2a05      	cmp	r2, #5
 8003d60:	d001      	beq.n	8003d66 <DFU_Download+0x58>
 8003d62:	2a02      	cmp	r2, #2
 8003d64:	d10f      	bne.n	8003d86 <DFU_Download+0x78>
        hdfu->manif_state = DFU_MANIFEST_IN_PROGRESS;
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
        hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8003d6c:	2106      	movs	r1, #6
 8003d6e:	f883 141c 	strb.w	r1, [r3, #1052]	@ 0x41c
        hdfu->dev_status[1] = 0U;
 8003d72:	2200      	movs	r2, #0
 8003d74:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
        hdfu->dev_status[2] = 0U;
 8003d78:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
        hdfu->dev_status[3] = 0U;
 8003d7c:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 8003d80:	f883 1418 	strb.w	r1, [r3, #1048]	@ 0x418
}
 8003d84:	bd08      	pop	{r3, pc}
      USBD_CtlError(pdev, req);
 8003d86:	f000 fb81 	bl	800448c <USBD_CtlError>
 8003d8a:	e7fb      	b.n	8003d84 <DFU_Download+0x76>

08003d8c <DFU_Detach>:
{
 8003d8c:	b570      	push	{r4, r5, r6, lr}
 8003d8e:	4604      	mov	r4, r0
 8003d90:	460e      	mov	r6, r1
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8003d92:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8003d96:	33b0      	adds	r3, #176	@ 0xb0
 8003d98:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  USBD_DFUFuncDescTypeDef *pDfuFunc = (USBD_DFUFuncDescTypeDef *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 8003d9c:	f8d0 02d0 	ldr.w	r0, [r0, #720]	@ 0x2d0
 8003da0:	f7ff fdb0 	bl	8003904 <USBD_DFU_GetDfuFuncDesc>
  if ((hdfu == NULL) || (pDfuFunc == NULL))
 8003da4:	b345      	cbz	r5, 8003df8 <DFU_Detach+0x6c>
 8003da6:	b338      	cbz	r0, 8003df8 <DFU_Detach+0x6c>
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8003da8:	f895 241c 	ldrb.w	r2, [r5, #1052]	@ 0x41c
 8003dac:	2a09      	cmp	r2, #9
 8003dae:	d819      	bhi.n	8003de4 <DFU_Detach+0x58>
 8003db0:	f44f 731b 	mov.w	r3, #620	@ 0x26c
 8003db4:	40d3      	lsrs	r3, r2
 8003db6:	f013 0f01 	tst.w	r3, #1
 8003dba:	d013      	beq.n	8003de4 <DFU_Detach+0x58>
    hdfu->dev_state = DFU_STATE_IDLE;
 8003dbc:	2202      	movs	r2, #2
 8003dbe:	f885 241c 	strb.w	r2, [r5, #1052]	@ 0x41c
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	f885 3414 	strb.w	r3, [r5, #1044]	@ 0x414
    hdfu->dev_status[1] = 0U;
 8003dc8:	f885 3415 	strb.w	r3, [r5, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 8003dcc:	f885 3416 	strb.w	r3, [r5, #1046]	@ 0x416
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 8003dd0:	f885 3417 	strb.w	r3, [r5, #1047]	@ 0x417
    hdfu->dev_status[4] = hdfu->dev_state;
 8003dd4:	f885 2418 	strb.w	r2, [r5, #1048]	@ 0x418
    hdfu->dev_status[5] = 0U; /*iString*/
 8003dd8:	f885 3419 	strb.w	r3, [r5, #1049]	@ 0x419
    hdfu->wblock_num = 0U;
 8003ddc:	f8c5 3400 	str.w	r3, [r5, #1024]	@ 0x400
    hdfu->wlength = 0U;
 8003de0:	f8c5 3404 	str.w	r3, [r5, #1028]	@ 0x404
  if ((pDfuFunc->bmAttributes & DFU_DETACH_MASK) != 0U)
 8003de4:	7883      	ldrb	r3, [r0, #2]
 8003de6:	f013 0f08 	tst.w	r3, #8
 8003dea:	d006      	beq.n	8003dfa <DFU_Detach+0x6e>
    (void)USBD_Stop(pdev);
 8003dec:	4620      	mov	r0, r4
 8003dee:	f000 f965 	bl	80040bc <USBD_Stop>
    (void)USBD_Start(pdev);
 8003df2:	4620      	mov	r0, r4
 8003df4:	f000 f95e 	bl	80040b4 <USBD_Start>
}
 8003df8:	bd70      	pop	{r4, r5, r6, pc}
    USBD_Delay((uint32_t)req->wValue);
 8003dfa:	8870      	ldrh	r0, [r6, #2]
 8003dfc:	f7fc ffa6 	bl	8000d4c <HAL_Delay>
 8003e00:	e7fa      	b.n	8003df8 <DFU_Detach+0x6c>

08003e02 <USBD_DFU_Setup>:
{
 8003e02:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e04:	b083      	sub	sp, #12
 8003e06:	460e      	mov	r6, r1
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8003e08:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8003e0c:	33b0      	adds	r3, #176	@ 0xb0
 8003e0e:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
  uint16_t status_info = 0U;
 8003e12:	2300      	movs	r3, #0
 8003e14:	f8ad 3006 	strh.w	r3, [sp, #6]
  if (hdfu == NULL)
 8003e18:	2900      	cmp	r1, #0
 8003e1a:	f000 8098 	beq.w	8003f4e <USBD_DFU_Setup+0x14c>
 8003e1e:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003e20:	7834      	ldrb	r4, [r6, #0]
 8003e22:	f014 0460 	ands.w	r4, r4, #96	@ 0x60
 8003e26:	d02e      	beq.n	8003e86 <USBD_DFU_Setup+0x84>
 8003e28:	2c20      	cmp	r4, #32
 8003e2a:	f040 8089 	bne.w	8003f40 <USBD_DFU_Setup+0x13e>
      switch (req->bRequest)
 8003e2e:	7874      	ldrb	r4, [r6, #1]
 8003e30:	2c06      	cmp	r4, #6
 8003e32:	d823      	bhi.n	8003e7c <USBD_DFU_Setup+0x7a>
 8003e34:	e8df f004 	tbb	[pc, r4]
 8003e38:	0e09041e 	.word	0x0e09041e
 8003e3c:	1612      	.short	0x1612
 8003e3e:	1a          	.byte	0x1a
 8003e3f:	00          	.byte	0x00
          DFU_Download(pdev, req);
 8003e40:	4631      	mov	r1, r6
 8003e42:	f7ff ff64 	bl	8003d0e <DFU_Download>
  USBD_StatusTypeDef ret = USBD_OK;
 8003e46:	2400      	movs	r4, #0
          break;
 8003e48:	e07e      	b.n	8003f48 <USBD_DFU_Setup+0x146>
          DFU_Upload(pdev, req);
 8003e4a:	4631      	mov	r1, r6
 8003e4c:	f7ff fe48 	bl	8003ae0 <DFU_Upload>
  USBD_StatusTypeDef ret = USBD_OK;
 8003e50:	2400      	movs	r4, #0
          break;
 8003e52:	e079      	b.n	8003f48 <USBD_DFU_Setup+0x146>
          DFU_GetStatus(pdev);
 8003e54:	f7ff fed9 	bl	8003c0a <DFU_GetStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 8003e58:	2400      	movs	r4, #0
          break;
 8003e5a:	e075      	b.n	8003f48 <USBD_DFU_Setup+0x146>
          DFU_ClearStatus(pdev);
 8003e5c:	f7ff fcea 	bl	8003834 <DFU_ClearStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 8003e60:	2400      	movs	r4, #0
          break;
 8003e62:	e071      	b.n	8003f48 <USBD_DFU_Setup+0x146>
          DFU_GetState(pdev);
 8003e64:	f7ff ff46 	bl	8003cf4 <DFU_GetState>
  USBD_StatusTypeDef ret = USBD_OK;
 8003e68:	2400      	movs	r4, #0
          break;
 8003e6a:	e06d      	b.n	8003f48 <USBD_DFU_Setup+0x146>
          DFU_Abort(pdev);
 8003e6c:	f7ff fd0f 	bl	800388e <DFU_Abort>
  USBD_StatusTypeDef ret = USBD_OK;
 8003e70:	2400      	movs	r4, #0
          break;
 8003e72:	e069      	b.n	8003f48 <USBD_DFU_Setup+0x146>
          DFU_Detach(pdev, req);
 8003e74:	4631      	mov	r1, r6
 8003e76:	f7ff ff89 	bl	8003d8c <DFU_Detach>
          break;
 8003e7a:	e065      	b.n	8003f48 <USBD_DFU_Setup+0x146>
          USBD_CtlError(pdev, req);
 8003e7c:	4631      	mov	r1, r6
 8003e7e:	f000 fb05 	bl	800448c <USBD_CtlError>
          ret = USBD_FAIL;
 8003e82:	2403      	movs	r4, #3
          break;
 8003e84:	e060      	b.n	8003f48 <USBD_DFU_Setup+0x146>
      switch (req->bRequest)
 8003e86:	7877      	ldrb	r7, [r6, #1]
 8003e88:	2f0b      	cmp	r7, #11
 8003e8a:	d854      	bhi.n	8003f36 <USBD_DFU_Setup+0x134>
 8003e8c:	e8df f007 	tbb	[pc, r7]
 8003e90:	53535c06 	.word	0x53535c06
 8003e94:	53175353 	.word	0x53175353
 8003e98:	3f2f5353 	.word	0x3f2f5353
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003e9c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	2b03      	cmp	r3, #3
 8003ea4:	d004      	beq.n	8003eb0 <USBD_DFU_Setup+0xae>
            USBD_CtlError(pdev, req);
 8003ea6:	4631      	mov	r1, r6
 8003ea8:	f000 faf0 	bl	800448c <USBD_CtlError>
            ret = USBD_FAIL;
 8003eac:	2403      	movs	r4, #3
 8003eae:	e04b      	b.n	8003f48 <USBD_DFU_Setup+0x146>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8003eb0:	2202      	movs	r2, #2
 8003eb2:	f10d 0106 	add.w	r1, sp, #6
 8003eb6:	f000 fe7a 	bl	8004bae <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8003eba:	463c      	mov	r4, r7
 8003ebc:	e044      	b.n	8003f48 <USBD_DFU_Setup+0x146>
          if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 8003ebe:	8873      	ldrh	r3, [r6, #2]
 8003ec0:	0a1b      	lsrs	r3, r3, #8
 8003ec2:	2b21      	cmp	r3, #33	@ 0x21
 8003ec4:	d140      	bne.n	8003f48 <USBD_DFU_Setup+0x146>
            pbuf = (uint8_t *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 8003ec6:	f8d0 02d0 	ldr.w	r0, [r0, #720]	@ 0x2d0
 8003eca:	f7ff fd1b 	bl	8003904 <USBD_DFU_GetDfuFuncDesc>
            if (pbuf != NULL)
 8003ece:	4601      	mov	r1, r0
 8003ed0:	b138      	cbz	r0, 8003ee2 <USBD_DFU_Setup+0xe0>
              len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 8003ed2:	88f2      	ldrh	r2, [r6, #6]
              (void)USBD_CtlSendData(pdev, pbuf, len);
 8003ed4:	2a09      	cmp	r2, #9
 8003ed6:	bf28      	it	cs
 8003ed8:	2209      	movcs	r2, #9
 8003eda:	4628      	mov	r0, r5
 8003edc:	f000 fe67 	bl	8004bae <USBD_CtlSendData>
 8003ee0:	e032      	b.n	8003f48 <USBD_DFU_Setup+0x146>
              USBD_CtlError(pdev, req);
 8003ee2:	4631      	mov	r1, r6
 8003ee4:	4628      	mov	r0, r5
 8003ee6:	f000 fad1 	bl	800448c <USBD_CtlError>
              ret = USBD_FAIL;
 8003eea:	2403      	movs	r4, #3
 8003eec:	e02c      	b.n	8003f48 <USBD_DFU_Setup+0x146>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003eee:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	2b03      	cmp	r3, #3
 8003ef6:	d004      	beq.n	8003f02 <USBD_DFU_Setup+0x100>
            USBD_CtlError(pdev, req);
 8003ef8:	4631      	mov	r1, r6
 8003efa:	f000 fac7 	bl	800448c <USBD_CtlError>
            ret = USBD_FAIL;
 8003efe:	2403      	movs	r4, #3
 8003f00:	e022      	b.n	8003f48 <USBD_DFU_Setup+0x146>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hdfu->alt_setting, 1U);
 8003f02:	2201      	movs	r2, #1
 8003f04:	f501 6182 	add.w	r1, r1, #1040	@ 0x410
 8003f08:	f000 fe51 	bl	8004bae <USBD_CtlSendData>
 8003f0c:	e01c      	b.n	8003f48 <USBD_DFU_Setup+0x146>
          if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 8003f0e:	78b4      	ldrb	r4, [r6, #2]
 8003f10:	b964      	cbnz	r4, 8003f2c <USBD_DFU_Setup+0x12a>
            if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003f12:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	2b03      	cmp	r3, #3
 8003f1a:	d102      	bne.n	8003f22 <USBD_DFU_Setup+0x120>
              hdfu->alt_setting = (uint8_t)(req->wValue);
 8003f1c:	f8c1 4410 	str.w	r4, [r1, #1040]	@ 0x410
 8003f20:	e012      	b.n	8003f48 <USBD_DFU_Setup+0x146>
              USBD_CtlError(pdev, req);
 8003f22:	4631      	mov	r1, r6
 8003f24:	f000 fab2 	bl	800448c <USBD_CtlError>
              ret = USBD_FAIL;
 8003f28:	2403      	movs	r4, #3
 8003f2a:	e00d      	b.n	8003f48 <USBD_DFU_Setup+0x146>
            USBD_CtlError(pdev, req);
 8003f2c:	4631      	mov	r1, r6
 8003f2e:	f000 faad 	bl	800448c <USBD_CtlError>
            ret = USBD_FAIL;
 8003f32:	2403      	movs	r4, #3
 8003f34:	e008      	b.n	8003f48 <USBD_DFU_Setup+0x146>
          USBD_CtlError(pdev, req);
 8003f36:	4631      	mov	r1, r6
 8003f38:	f000 faa8 	bl	800448c <USBD_CtlError>
          ret = USBD_FAIL;
 8003f3c:	2403      	movs	r4, #3
          break;
 8003f3e:	e003      	b.n	8003f48 <USBD_DFU_Setup+0x146>
      USBD_CtlError(pdev, req);
 8003f40:	4631      	mov	r1, r6
 8003f42:	f000 faa3 	bl	800448c <USBD_CtlError>
      ret = USBD_FAIL;
 8003f46:	2403      	movs	r4, #3
}
 8003f48:	4620      	mov	r0, r4
 8003f4a:	b003      	add	sp, #12
 8003f4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (uint8_t)USBD_FAIL;
 8003f4e:	2403      	movs	r4, #3
 8003f50:	e7fa      	b.n	8003f48 <USBD_DFU_Setup+0x146>

08003f52 <USBD_DFU_DeInit>:
{
 8003f52:	b538      	push	{r3, r4, r5, lr}
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8003f54:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8003f58:	33b0      	adds	r3, #176	@ 0xb0
 8003f5a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003f5e:	b323      	cbz	r3, 8003faa <USBD_DFU_DeInit+0x58>
 8003f60:	4604      	mov	r4, r0
  hdfu->wblock_num = 0U;
 8003f62:	2500      	movs	r5, #0
 8003f64:	f8c3 5400 	str.w	r5, [r3, #1024]	@ 0x400
  hdfu->wlength = 0U;
 8003f68:	f8c3 5404 	str.w	r5, [r3, #1028]	@ 0x404
  hdfu->dev_state = DFU_STATE_IDLE;
 8003f6c:	2202      	movs	r2, #2
 8003f6e:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 8003f72:	f883 5414 	strb.w	r5, [r3, #1044]	@ 0x414
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 8003f76:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
  ((USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8003f7a:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8003f7e:	33b0      	adds	r3, #176	@ 0xb0
 8003f80:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	4798      	blx	r3
  USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8003f8a:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8003f8e:	33b0      	adds	r3, #176	@ 0xb0
 8003f90:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8003f94:	f001 f828 	bl	8004fe8 <USBD_static_free>
  pdev->pClassDataCmsit[pdev->classId] = NULL;
 8003f98:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8003f9c:	33b0      	adds	r3, #176	@ 0xb0
 8003f9e:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
  pdev->pClassData = NULL;
 8003fa2:	f8c4 52bc 	str.w	r5, [r4, #700]	@ 0x2bc
  return (uint8_t)USBD_OK;
 8003fa6:	4628      	mov	r0, r5
}
 8003fa8:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_EMEM;
 8003faa:	2002      	movs	r0, #2
 8003fac:	e7fc      	b.n	8003fa8 <USBD_DFU_DeInit+0x56>
	...

08003fb0 <USBD_DFU_Init>:
{
 8003fb0:	b510      	push	{r4, lr}
 8003fb2:	4604      	mov	r4, r0
  hdfu = (USBD_DFU_HandleTypeDef *)USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 8003fb4:	f44f 6084 	mov.w	r0, #1056	@ 0x420
 8003fb8:	f001 f812 	bl	8004fe0 <USBD_static_malloc>
  if (hdfu == NULL)
 8003fbc:	b358      	cbz	r0, 8004016 <USBD_DFU_Init+0x66>
  pdev->pClassDataCmsit[pdev->classId] = (void *)hdfu;
 8003fbe:	f8d4 22d4 	ldr.w	r2, [r4, #724]	@ 0x2d4
 8003fc2:	32b0      	adds	r2, #176	@ 0xb0
 8003fc4:	f844 0022 	str.w	r0, [r4, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8003fc8:	f8c4 02bc 	str.w	r0, [r4, #700]	@ 0x2bc
  hdfu->alt_setting = 0U;
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f8c0 2410 	str.w	r2, [r0, #1040]	@ 0x410
  hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 8003fd2:	4916      	ldr	r1, [pc, #88]	@ (800402c <USBD_DFU_Init+0x7c>)
 8003fd4:	f8c0 1408 	str.w	r1, [r0, #1032]	@ 0x408
  hdfu->wblock_num = 0U;
 8003fd8:	f8c0 2400 	str.w	r2, [r0, #1024]	@ 0x400
  hdfu->wlength = 0U;
 8003fdc:	f8c0 2404 	str.w	r2, [r0, #1028]	@ 0x404
  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 8003fe0:	f880 241d 	strb.w	r2, [r0, #1053]	@ 0x41d
  hdfu->dev_state = DFU_STATE_IDLE;
 8003fe4:	2102      	movs	r1, #2
 8003fe6:	f880 141c 	strb.w	r1, [r0, #1052]	@ 0x41c
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 8003fea:	f880 2414 	strb.w	r2, [r0, #1044]	@ 0x414
  hdfu->dev_status[1] = 0U;
 8003fee:	f880 2415 	strb.w	r2, [r0, #1045]	@ 0x415
  hdfu->dev_status[2] = 0U;
 8003ff2:	f880 2416 	strb.w	r2, [r0, #1046]	@ 0x416
  hdfu->dev_status[3] = 0U;
 8003ff6:	f880 2417 	strb.w	r2, [r0, #1047]	@ 0x417
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 8003ffa:	f880 1418 	strb.w	r1, [r0, #1048]	@ 0x418
  hdfu->dev_status[5] = 0U;
 8003ffe:	f880 2419 	strb.w	r2, [r0, #1049]	@ 0x419
  if (((USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId])->Init() != USBD_OK)
 8004002:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8004006:	33b0      	adds	r3, #176	@ 0xb0
 8004008:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800400c:	6863      	ldr	r3, [r4, #4]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	4798      	blx	r3
 8004012:	b940      	cbnz	r0, 8004026 <USBD_DFU_Init+0x76>
}
 8004014:	bd10      	pop	{r4, pc}
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004016:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 800401a:	33b0      	adds	r3, #176	@ 0xb0
 800401c:	2200      	movs	r2, #0
 800401e:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004022:	2002      	movs	r0, #2
 8004024:	e7f6      	b.n	8004014 <USBD_DFU_Init+0x64>
    return (uint8_t)USBD_FAIL;
 8004026:	2003      	movs	r0, #3
 8004028:	e7f4      	b.n	8004014 <USBD_DFU_Init+0x64>
 800402a:	bf00      	nop
 800402c:	08010000 	.word	0x08010000

08004030 <USBD_DFU_RegisterMedia>:
  if (fops == NULL)
 8004030:	b139      	cbz	r1, 8004042 <USBD_DFU_RegisterMedia+0x12>
  pdev->pUserData[pdev->classId] = fops;
 8004032:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8004036:	33b0      	adds	r3, #176	@ 0xb0
 8004038:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800403c:	6041      	str	r1, [r0, #4]
  return (uint8_t)USBD_OK;
 800403e:	2000      	movs	r0, #0
 8004040:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8004042:	2003      	movs	r0, #3
}
 8004044:	4770      	bx	lr

08004046 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004046:	b198      	cbz	r0, 8004070 <USBD_Init+0x2a>
{
 8004048:	b508      	push	{r3, lr}
 800404a:	4603      	mov	r3, r0
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800404c:	2000      	movs	r0, #0
 800404e:	f8c3 02b8 	str.w	r0, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8004052:	f8c3 02c4 	str.w	r0, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8004056:	f8c3 02d0 	str.w	r0, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800405a:	b109      	cbz	r1, 8004060 <USBD_Init+0x1a>
  {
    pdev->pDesc = pdesc;
 800405c:	f8c3 12b4 	str.w	r1, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004060:	2101      	movs	r1, #1
 8004062:	f883 129c 	strb.w	r1, [r3, #668]	@ 0x29c
  pdev->id = id;
 8004066:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004068:	4618      	mov	r0, r3
 800406a:	f000 ff6f 	bl	8004f4c <USBD_LL_Init>

  return ret;
}
 800406e:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8004070:	2003      	movs	r0, #3
}
 8004072:	4770      	bx	lr

08004074 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004074:	b510      	push	{r4, lr}
 8004076:	b082      	sub	sp, #8
  uint16_t len = 0U;
 8004078:	2300      	movs	r3, #0
 800407a:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 800407e:	b1b9      	cbz	r1, 80040b0 <USBD_RegisterClass+0x3c>
 8004080:	4604      	mov	r4, r0
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8004082:	f8c0 12b8 	str.w	r1, [r0, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8004086:	f8d0 22d4 	ldr.w	r2, [r0, #724]	@ 0x2d4
 800408a:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 800408c:	b143      	cbz	r3, 80040a0 <USBD_RegisterClass+0x2c>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800408e:	32ae      	adds	r2, #174	@ 0xae
 8004090:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 8004094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004096:	f10d 0006 	add.w	r0, sp, #6
 800409a:	4798      	blx	r3
 800409c:	f8c4 02d0 	str.w	r0, [r4, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80040a0:	f8d4 32d8 	ldr.w	r3, [r4, #728]	@ 0x2d8
 80040a4:	3301      	adds	r3, #1
 80040a6:	f8c4 32d8 	str.w	r3, [r4, #728]	@ 0x2d8

  return USBD_OK;
 80040aa:	2000      	movs	r0, #0
}
 80040ac:	b002      	add	sp, #8
 80040ae:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 80040b0:	2003      	movs	r0, #3
 80040b2:	e7fb      	b.n	80040ac <USBD_RegisterClass+0x38>

080040b4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80040b4:	b508      	push	{r3, lr}
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80040b6:	f000 ffa2 	bl	8004ffe <USBD_LL_Start>
}
 80040ba:	bd08      	pop	{r3, pc}

080040bc <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 80040bc:	b510      	push	{r4, lr}
 80040be:	4604      	mov	r4, r0
  /* Disconnect USB Device */
  (void)USBD_LL_Stop(pdev);
 80040c0:	f000 ffa5 	bl	800500e <USBD_LL_Stop>
  }

  /* Reset the class ID */
  pdev->classId = 0U;
#else
  if (pdev->pClass[0] != NULL)
 80040c4:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 80040c8:	b11b      	cbz	r3, 80040d2 <USBD_Stop+0x16>
  {
    (void)pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config);
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	7921      	ldrb	r1, [r4, #4]
 80040ce:	4620      	mov	r0, r4
 80040d0:	4798      	blx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return USBD_OK;
}
 80040d2:	2000      	movs	r0, #0
 80040d4:	bd10      	pop	{r4, pc}

080040d6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80040d6:	b508      	push	{r3, lr}
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80040d8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 80040dc:	b113      	cbz	r3, 80040e4 <USBD_SetClassConfig+0xe>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4798      	blx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 80040e2:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_OK;
 80040e4:	2000      	movs	r0, #0
 80040e6:	e7fc      	b.n	80040e2 <USBD_SetClassConfig+0xc>

080040e8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80040e8:	b508      	push	{r3, lr}
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80040ea:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	4798      	blx	r3
 80040f2:	b900      	cbnz	r0, 80040f6 <USBD_ClrClassConfig+0xe>
    ret = USBD_FAIL;
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 80040f4:	bd08      	pop	{r3, pc}
    ret = USBD_FAIL;
 80040f6:	2003      	movs	r0, #3
 80040f8:	e7fc      	b.n	80040f4 <USBD_ClrClassConfig+0xc>

080040fa <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80040fa:	b538      	push	{r3, r4, r5, lr}
 80040fc:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80040fe:	f200 25aa 	addw	r5, r0, #682	@ 0x2aa
 8004102:	4628      	mov	r0, r5
 8004104:	f000 f9ae 	bl	8004464 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004108:	2301      	movs	r3, #1
 800410a:	f8c4 3294 	str.w	r3, [r4, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800410e:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	@ 0x2b0
 8004112:	f8c4 3298 	str.w	r3, [r4, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004116:	f894 12aa 	ldrb.w	r1, [r4, #682]	@ 0x2aa
 800411a:	f001 031f 	and.w	r3, r1, #31
 800411e:	2b01      	cmp	r3, #1
 8004120:	d007      	beq.n	8004132 <USBD_LL_SetupStage+0x38>
 8004122:	2b02      	cmp	r3, #2
 8004124:	d00a      	beq.n	800413c <USBD_LL_SetupStage+0x42>
 8004126:	b973      	cbnz	r3, 8004146 <USBD_LL_SetupStage+0x4c>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004128:	4629      	mov	r1, r5
 800412a:	4620      	mov	r0, r4
 800412c:	f000 fb86 	bl	800483c <USBD_StdDevReq>
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return ret;
}
 8004130:	bd38      	pop	{r3, r4, r5, pc}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004132:	4629      	mov	r1, r5
 8004134:	4620      	mov	r0, r4
 8004136:	f000 fbbc 	bl	80048b2 <USBD_StdItfReq>
      break;
 800413a:	e7f9      	b.n	8004130 <USBD_LL_SetupStage+0x36>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800413c:	4629      	mov	r1, r5
 800413e:	4620      	mov	r0, r4
 8004140:	f000 fbf9 	bl	8004936 <USBD_StdEPReq>
      break;
 8004144:	e7f4      	b.n	8004130 <USBD_LL_SetupStage+0x36>
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004146:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 800414a:	4620      	mov	r0, r4
 800414c:	f000 ff72 	bl	8005034 <USBD_LL_StallEP>
      break;
 8004150:	e7ee      	b.n	8004130 <USBD_LL_SetupStage+0x36>

08004152 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004152:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004154:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret = USBD_OK;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004156:	2301      	movs	r3, #1
 8004158:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800415c:	2300      	movs	r3, #0
 800415e:	f8c0 3294 	str.w	r3, [r0, #660]	@ 0x294
  pdev->dev_config = 0U;
 8004162:	6043      	str	r3, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 8004164:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8004168:	f880 32a0 	strb.w	r3, [r0, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800416c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8004170:	b1e3      	cbz	r3, 80041ac <USBD_LL_Reset+0x5a>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	b1e3      	cbz	r3, 80041b0 <USBD_LL_Reset+0x5e>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8004176:	2100      	movs	r1, #0
 8004178:	4798      	blx	r3
 800417a:	4607      	mov	r7, r0
 800417c:	b9d0      	cbnz	r0, 80041b4 <USBD_LL_Reset+0x62>
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800417e:	2340      	movs	r3, #64	@ 0x40
 8004180:	2200      	movs	r2, #0
 8004182:	4611      	mov	r1, r2
 8004184:	4620      	mov	r0, r4
 8004186:	f000 ff4a 	bl	800501e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800418a:	2601      	movs	r6, #1
 800418c:	f884 6163 	strb.w	r6, [r4, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004190:	2540      	movs	r5, #64	@ 0x40
 8004192:	f8a4 5160 	strh.w	r5, [r4, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004196:	462b      	mov	r3, r5
 8004198:	2200      	movs	r2, #0
 800419a:	2180      	movs	r1, #128	@ 0x80
 800419c:	4620      	mov	r0, r4
 800419e:	f000 ff3e 	bl	800501e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80041a2:	f884 6023 	strb.w	r6, [r4, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80041a6:	8425      	strh	r5, [r4, #32]

  return ret;
}
 80041a8:	4638      	mov	r0, r7
 80041aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  USBD_StatusTypeDef ret = USBD_OK;
 80041ac:	2700      	movs	r7, #0
 80041ae:	e7e6      	b.n	800417e <USBD_LL_Reset+0x2c>
 80041b0:	2700      	movs	r7, #0
 80041b2:	e7e4      	b.n	800417e <USBD_LL_Reset+0x2c>
        ret = USBD_FAIL;
 80041b4:	2703      	movs	r7, #3
 80041b6:	e7e2      	b.n	800417e <USBD_LL_Reset+0x2c>

080041b8 <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80041b8:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 80041ba:	2000      	movs	r0, #0
 80041bc:	4770      	bx	lr

080041be <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80041be:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	2b04      	cmp	r3, #4
 80041c6:	d004      	beq.n	80041d2 <USBD_LL_Suspend+0x14>
  {
    pdev->dev_old_state = pdev->dev_state;
 80041c8:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	f880 329d 	strb.w	r3, [r0, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80041d2:	2304      	movs	r3, #4
 80041d4:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c

  return USBD_OK;
}
 80041d8:	2000      	movs	r0, #0
 80041da:	4770      	bx	lr

080041dc <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80041dc:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	2b04      	cmp	r3, #4
 80041e4:	d001      	beq.n	80041ea <USBD_LL_Resume+0xe>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 80041e6:	2000      	movs	r0, #0
 80041e8:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 80041ea:	f890 329d 	ldrb.w	r3, [r0, #669]	@ 0x29d
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
 80041f4:	e7f7      	b.n	80041e6 <USBD_LL_Resume+0xa>

080041f6 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80041f6:	b508      	push	{r3, lr}
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80041f8:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	2b03      	cmp	r3, #3
 8004200:	d001      	beq.n	8004206 <USBD_LL_SOF+0x10>
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
}
 8004202:	2000      	movs	r0, #0
 8004204:	bd08      	pop	{r3, pc}
    if (pdev->pClass[0] != NULL)
 8004206:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800420a:	2b00      	cmp	r3, #0
 800420c:	d0f9      	beq.n	8004202 <USBD_LL_SOF+0xc>
      if (pdev->pClass[0]->SOF != NULL)
 800420e:	69db      	ldr	r3, [r3, #28]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d0f6      	beq.n	8004202 <USBD_LL_SOF+0xc>
        (void)pdev->pClass[0]->SOF(pdev);
 8004214:	4798      	blx	r3
 8004216:	e7f4      	b.n	8004202 <USBD_LL_SOF+0xc>

08004218 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8004218:	b508      	push	{r3, lr}
  if (pdev->pClass[pdev->classId] == NULL)
 800421a:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800421e:	33ae      	adds	r3, #174	@ 0xae
 8004220:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 8004224:	b15a      	cbz	r2, 800423e <USBD_LL_IsoINIncomplete+0x26>
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004226:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800422a:	b2db      	uxtb	r3, r3
 800422c:	2b03      	cmp	r3, #3
 800422e:	d001      	beq.n	8004234 <USBD_LL_IsoINIncomplete+0x1c>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 8004230:	2000      	movs	r0, #0
}
 8004232:	bd08      	pop	{r3, pc}
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8004234:	6a13      	ldr	r3, [r2, #32]
 8004236:	b123      	cbz	r3, 8004242 <USBD_LL_IsoINIncomplete+0x2a>
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8004238:	4798      	blx	r3
  return USBD_OK;
 800423a:	2000      	movs	r0, #0
 800423c:	e7f9      	b.n	8004232 <USBD_LL_IsoINIncomplete+0x1a>
    return USBD_FAIL;
 800423e:	2003      	movs	r0, #3
 8004240:	e7f7      	b.n	8004232 <USBD_LL_IsoINIncomplete+0x1a>
  return USBD_OK;
 8004242:	2000      	movs	r0, #0
 8004244:	e7f5      	b.n	8004232 <USBD_LL_IsoINIncomplete+0x1a>

08004246 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8004246:	b508      	push	{r3, lr}
  if (pdev->pClass[pdev->classId] == NULL)
 8004248:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800424c:	33ae      	adds	r3, #174	@ 0xae
 800424e:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 8004252:	b15a      	cbz	r2, 800426c <USBD_LL_IsoOUTIncomplete+0x26>
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004254:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8004258:	b2db      	uxtb	r3, r3
 800425a:	2b03      	cmp	r3, #3
 800425c:	d001      	beq.n	8004262 <USBD_LL_IsoOUTIncomplete+0x1c>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 800425e:	2000      	movs	r0, #0
}
 8004260:	bd08      	pop	{r3, pc}
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8004262:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 8004264:	b123      	cbz	r3, 8004270 <USBD_LL_IsoOUTIncomplete+0x2a>
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8004266:	4798      	blx	r3
  return USBD_OK;
 8004268:	2000      	movs	r0, #0
 800426a:	e7f9      	b.n	8004260 <USBD_LL_IsoOUTIncomplete+0x1a>
    return USBD_FAIL;
 800426c:	2003      	movs	r0, #3
 800426e:	e7f7      	b.n	8004260 <USBD_LL_IsoOUTIncomplete+0x1a>
  return USBD_OK;
 8004270:	2000      	movs	r0, #0
 8004272:	e7f5      	b.n	8004260 <USBD_LL_IsoOUTIncomplete+0x1a>

08004274 <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 8004274:	2000      	movs	r0, #0
 8004276:	4770      	bx	lr

08004278 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8004278:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_OK;

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800427a:	2301      	movs	r3, #1
 800427c:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8004280:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8004284:	b123      	cbz	r3, 8004290 <USBD_LL_DevDisconnected+0x18>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	7901      	ldrb	r1, [r0, #4]
 800428a:	4798      	blx	r3
 800428c:	b910      	cbnz	r0, 8004294 <USBD_LL_DevDisconnected+0x1c>
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 800428e:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef   ret = USBD_OK;
 8004290:	2000      	movs	r0, #0
 8004292:	e7fc      	b.n	800428e <USBD_LL_DevDisconnected+0x16>
      ret = USBD_FAIL;
 8004294:	2003      	movs	r0, #3
 8004296:	e7fa      	b.n	800428e <USBD_LL_DevDisconnected+0x16>

08004298 <USBD_CoreFindIF>:
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 8004298:	2000      	movs	r0, #0
 800429a:	4770      	bx	lr

0800429c <USBD_CoreFindEP>:
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 800429c:	2000      	movs	r0, #0
 800429e:	4770      	bx	lr

080042a0 <USBD_LL_DataOutStage>:
{
 80042a0:	b538      	push	{r3, r4, r5, lr}
 80042a2:	4604      	mov	r4, r0
  if (epnum == 0U)
 80042a4:	460d      	mov	r5, r1
 80042a6:	2900      	cmp	r1, #0
 80042a8:	d145      	bne.n	8004336 <USBD_LL_DataOutStage+0x96>
    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80042aa:	f8d0 3294 	ldr.w	r3, [r0, #660]	@ 0x294
 80042ae:	2b03      	cmp	r3, #3
 80042b0:	d001      	beq.n	80042b6 <USBD_LL_DataOutStage+0x16>
  return USBD_OK;
 80042b2:	4608      	mov	r0, r1
}
 80042b4:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 80042b6:	f8d0 3158 	ldr.w	r3, [r0, #344]	@ 0x158
 80042ba:	f8b0 2160 	ldrh.w	r2, [r0, #352]	@ 0x160
 80042be:	4293      	cmp	r3, r2
 80042c0:	d809      	bhi.n	80042d6 <USBD_LL_DataOutStage+0x36>
        switch (pdev->request.bmRequest & 0x1FU)
 80042c2:	f890 32aa 	ldrb.w	r3, [r0, #682]	@ 0x2aa
 80042c6:	f003 031f 	and.w	r3, r3, #31
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d012      	beq.n	80042f4 <USBD_LL_DataOutStage+0x54>
 80042ce:	2b02      	cmp	r3, #2
 80042d0:	d01f      	beq.n	8004312 <USBD_LL_DataOutStage+0x72>
 80042d2:	4608      	mov	r0, r1
 80042d4:	e013      	b.n	80042fe <USBD_LL_DataOutStage+0x5e>
        pep->rem_length -= pep->maxpacket;
 80042d6:	1a9b      	subs	r3, r3, r2
 80042d8:	f8c0 3158 	str.w	r3, [r0, #344]	@ 0x158
        pep->pbuffer += pep->maxpacket;
 80042dc:	f8d0 1164 	ldr.w	r1, [r0, #356]	@ 0x164
 80042e0:	4411      	add	r1, r2
 80042e2:	f8c0 1164 	str.w	r1, [r0, #356]	@ 0x164
        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 80042e6:	429a      	cmp	r2, r3
 80042e8:	bf38      	it	cc
 80042ea:	461a      	movcc	r2, r3
 80042ec:	f000 fc86 	bl	8004bfc <USBD_CtlContinueRx>
  return USBD_OK;
 80042f0:	4628      	mov	r0, r5
 80042f2:	e7df      	b.n	80042b4 <USBD_LL_DataOutStage+0x14>
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80042f4:	f890 12ae 	ldrb.w	r1, [r0, #686]	@ 0x2ae
 80042f8:	f7ff ffce 	bl	8004298 <USBD_CoreFindIF>
        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80042fc:	b920      	cbnz	r0, 8004308 <USBD_LL_DataOutStage+0x68>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80042fe:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8004302:	b2db      	uxtb	r3, r3
 8004304:	2b03      	cmp	r3, #3
 8004306:	d009      	beq.n	800431c <USBD_LL_DataOutStage+0x7c>
        (void)USBD_CtlSendStatus(pdev);
 8004308:	4620      	mov	r0, r4
 800430a:	f000 fc7f 	bl	8004c0c <USBD_CtlSendStatus>
  return USBD_OK;
 800430e:	4628      	mov	r0, r5
 8004310:	e7d0      	b.n	80042b4 <USBD_LL_DataOutStage+0x14>
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8004312:	f890 12ae 	ldrb.w	r1, [r0, #686]	@ 0x2ae
 8004316:	f7ff ffc1 	bl	800429c <USBD_CoreFindEP>
            break;
 800431a:	e7ef      	b.n	80042fc <USBD_LL_DataOutStage+0x5c>
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800431c:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 8004320:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8004324:	691a      	ldr	r2, [r3, #16]
 8004326:	2a00      	cmp	r2, #0
 8004328:	d0ee      	beq.n	8004308 <USBD_LL_DataOutStage+0x68>
              pdev->classId = idx;
 800432a:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800432e:	691b      	ldr	r3, [r3, #16]
 8004330:	4620      	mov	r0, r4
 8004332:	4798      	blx	r3
 8004334:	e7e8      	b.n	8004308 <USBD_LL_DataOutStage+0x68>
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8004336:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 800433a:	f7ff ffaf 	bl	800429c <USBD_CoreFindEP>
    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800433e:	b990      	cbnz	r0, 8004366 <USBD_LL_DataOutStage+0xc6>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004340:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8004344:	b2db      	uxtb	r3, r3
 8004346:	2b03      	cmp	r3, #3
 8004348:	d1b4      	bne.n	80042b4 <USBD_LL_DataOutStage+0x14>
        if (pdev->pClass[idx]->DataOut != NULL)
 800434a:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 800434e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8004352:	699a      	ldr	r2, [r3, #24]
 8004354:	2a00      	cmp	r2, #0
 8004356:	d0ad      	beq.n	80042b4 <USBD_LL_DataOutStage+0x14>
          pdev->classId = idx;
 8004358:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	4629      	mov	r1, r5
 8004360:	4620      	mov	r0, r4
 8004362:	4798      	blx	r3
      if (ret != USBD_OK)
 8004364:	e7a6      	b.n	80042b4 <USBD_LL_DataOutStage+0x14>
  return USBD_OK;
 8004366:	2000      	movs	r0, #0
 8004368:	e7a4      	b.n	80042b4 <USBD_LL_DataOutStage+0x14>

0800436a <USBD_LL_DataInStage>:
{
 800436a:	b538      	push	{r3, r4, r5, lr}
 800436c:	4604      	mov	r4, r0
  if (epnum == 0U)
 800436e:	460d      	mov	r5, r1
 8004370:	2900      	cmp	r1, #0
 8004372:	d14c      	bne.n	800440e <USBD_LL_DataInStage+0xa4>
    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004374:	f8d0 3294 	ldr.w	r3, [r0, #660]	@ 0x294
 8004378:	2b02      	cmp	r3, #2
 800437a:	d007      	beq.n	800438c <USBD_LL_DataInStage+0x22>
    if (pdev->dev_test_mode != 0U)
 800437c:	f894 02a0 	ldrb.w	r0, [r4, #672]	@ 0x2a0
 8004380:	b118      	cbz	r0, 800438a <USBD_LL_DataInStage+0x20>
      pdev->dev_test_mode = 0U;
 8004382:	2300      	movs	r3, #0
 8004384:	f884 32a0 	strb.w	r3, [r4, #672]	@ 0x2a0
  return USBD_OK;
 8004388:	4628      	mov	r0, r5
}
 800438a:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 800438c:	6982      	ldr	r2, [r0, #24]
 800438e:	8c03      	ldrh	r3, [r0, #32]
 8004390:	429a      	cmp	r2, r3
 8004392:	d80e      	bhi.n	80043b2 <USBD_LL_DataInStage+0x48>
        if ((pep->maxpacket == pep->rem_length) &&
 8004394:	429a      	cmp	r2, r3
 8004396:	d01a      	beq.n	80043ce <USBD_LL_DataInStage+0x64>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004398:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 800439c:	b2db      	uxtb	r3, r3
 800439e:	2b03      	cmp	r3, #3
 80043a0:	d029      	beq.n	80043f6 <USBD_LL_DataInStage+0x8c>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80043a2:	2180      	movs	r1, #128	@ 0x80
 80043a4:	4620      	mov	r0, r4
 80043a6:	f000 fe45 	bl	8005034 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80043aa:	4620      	mov	r0, r4
 80043ac:	f000 fc39 	bl	8004c22 <USBD_CtlReceiveStatus>
 80043b0:	e7e4      	b.n	800437c <USBD_LL_DataInStage+0x12>
        pep->rem_length -= pep->maxpacket;
 80043b2:	1ad2      	subs	r2, r2, r3
 80043b4:	6182      	str	r2, [r0, #24]
        pep->pbuffer += pep->maxpacket;
 80043b6:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 80043b8:	4419      	add	r1, r3
 80043ba:	6241      	str	r1, [r0, #36]	@ 0x24
        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 80043bc:	f000 fc05 	bl	8004bca <USBD_CtlContinueSendData>
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80043c0:	2300      	movs	r3, #0
 80043c2:	461a      	mov	r2, r3
 80043c4:	4619      	mov	r1, r3
 80043c6:	4620      	mov	r0, r4
 80043c8:	f000 fe54 	bl	8005074 <USBD_LL_PrepareReceive>
 80043cc:	e7d6      	b.n	800437c <USBD_LL_DataInStage+0x12>
            (pep->total_length >= pep->maxpacket) &&
 80043ce:	6942      	ldr	r2, [r0, #20]
        if ((pep->maxpacket == pep->rem_length) &&
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d8e1      	bhi.n	8004398 <USBD_LL_DataInStage+0x2e>
            (pep->total_length < pdev->ep0_data_len))
 80043d4:	f8d0 3298 	ldr.w	r3, [r0, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80043d8:	429a      	cmp	r2, r3
 80043da:	d2dd      	bcs.n	8004398 <USBD_LL_DataInStage+0x2e>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80043dc:	2200      	movs	r2, #0
 80043de:	4611      	mov	r1, r2
 80043e0:	f000 fbf3 	bl	8004bca <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80043e4:	2100      	movs	r1, #0
 80043e6:	f8c4 1298 	str.w	r1, [r4, #664]	@ 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80043ea:	460b      	mov	r3, r1
 80043ec:	460a      	mov	r2, r1
 80043ee:	4620      	mov	r0, r4
 80043f0:	f000 fe40 	bl	8005074 <USBD_LL_PrepareReceive>
 80043f4:	e7c2      	b.n	800437c <USBD_LL_DataInStage+0x12>
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80043f6:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 80043fa:	68da      	ldr	r2, [r3, #12]
 80043fc:	2a00      	cmp	r2, #0
 80043fe:	d0d0      	beq.n	80043a2 <USBD_LL_DataInStage+0x38>
              pdev->classId = 0U;
 8004400:	2200      	movs	r2, #0
 8004402:	f8c4 22d4 	str.w	r2, [r4, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	4620      	mov	r0, r4
 800440a:	4798      	blx	r3
 800440c:	e7c9      	b.n	80043a2 <USBD_LL_DataInStage+0x38>
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800440e:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8004412:	f7ff ff43 	bl	800429c <USBD_CoreFindEP>
    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004416:	b990      	cbnz	r0, 800443e <USBD_LL_DataInStage+0xd4>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004418:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 800441c:	b2db      	uxtb	r3, r3
 800441e:	2b03      	cmp	r3, #3
 8004420:	d1b3      	bne.n	800438a <USBD_LL_DataInStage+0x20>
        if (pdev->pClass[idx]->DataIn != NULL)
 8004422:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 8004426:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800442a:	695a      	ldr	r2, [r3, #20]
 800442c:	2a00      	cmp	r2, #0
 800442e:	d0ac      	beq.n	800438a <USBD_LL_DataInStage+0x20>
          pdev->classId = idx;
 8004430:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8004434:	695b      	ldr	r3, [r3, #20]
 8004436:	4629      	mov	r1, r5
 8004438:	4620      	mov	r0, r4
 800443a:	4798      	blx	r3
          if (ret != USBD_OK)
 800443c:	e7a5      	b.n	800438a <USBD_LL_DataInStage+0x20>
  return USBD_OK;
 800443e:	2000      	movs	r0, #0
 8004440:	e7a3      	b.n	800438a <USBD_LL_DataInStage+0x20>

08004442 <USBD_GetNextDesc>:
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;

  *ptr += pnext->bLength;
 8004442:	880b      	ldrh	r3, [r1, #0]
 8004444:	7802      	ldrb	r2, [r0, #0]
 8004446:	4413      	add	r3, r2
 8004448:	800b      	strh	r3, [r1, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800444a:	7803      	ldrb	r3, [r0, #0]

  return (pnext);
}
 800444c:	4418      	add	r0, r3
 800444e:	4770      	bx	lr

08004450 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8004450:	4603      	mov	r3, r0
  uint8_t  len = 0U;
 8004452:	2000      	movs	r0, #0
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 8004454:	e002      	b.n	800445c <USBD_GetLen+0xc>
  {
    len++;
 8004456:	3001      	adds	r0, #1
 8004458:	b2c0      	uxtb	r0, r0
    pbuff++;
 800445a:	3301      	adds	r3, #1
  while (*pbuff != (uint8_t)'\0')
 800445c:	781a      	ldrb	r2, [r3, #0]
 800445e:	2a00      	cmp	r2, #0
 8004460:	d1f9      	bne.n	8004456 <USBD_GetLen+0x6>
  }

  return len;
}
 8004462:	4770      	bx	lr

08004464 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 8004464:	780b      	ldrb	r3, [r1, #0]
 8004466:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 8004468:	784b      	ldrb	r3, [r1, #1]
 800446a:	7043      	strb	r3, [r0, #1]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
 800446c:	788b      	ldrb	r3, [r1, #2]
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 800446e:	78ca      	ldrb	r2, [r1, #3]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8004470:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 8004474:	8043      	strh	r3, [r0, #2]
  _Byte1 = *(uint8_t *)_pbuff;
 8004476:	790b      	ldrb	r3, [r1, #4]
  _Byte2 = *(uint8_t *)_pbuff;
 8004478:	794a      	ldrb	r2, [r1, #5]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 800447a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 800447e:	8083      	strh	r3, [r0, #4]
  _Byte1 = *(uint8_t *)_pbuff;
 8004480:	798b      	ldrb	r3, [r1, #6]
  _Byte2 = *(uint8_t *)_pbuff;
 8004482:	79ca      	ldrb	r2, [r1, #7]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 8004484:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 8004488:	80c3      	strh	r3, [r0, #6]
}
 800448a:	4770      	bx	lr

0800448c <USBD_CtlError>:
{
 800448c:	b510      	push	{r4, lr}
 800448e:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8004490:	2180      	movs	r1, #128	@ 0x80
 8004492:	f000 fdcf 	bl	8005034 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8004496:	2100      	movs	r1, #0
 8004498:	4620      	mov	r0, r4
 800449a:	f000 fdcb 	bl	8005034 <USBD_LL_StallEP>
}
 800449e:	bd10      	pop	{r4, pc}

080044a0 <USBD_GetDescriptor>:
{
 80044a0:	b570      	push	{r4, r5, r6, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	4604      	mov	r4, r0
 80044a6:	460d      	mov	r5, r1
  uint16_t len = 0U;
 80044a8:	2300      	movs	r3, #0
 80044aa:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 80044ae:	884a      	ldrh	r2, [r1, #2]
 80044b0:	0a13      	lsrs	r3, r2, #8
 80044b2:	3b01      	subs	r3, #1
 80044b4:	2b06      	cmp	r3, #6
 80044b6:	f200 80c1 	bhi.w	800463c <USBD_GetDescriptor+0x19c>
 80044ba:	e8df f003 	tbb	[pc, r3]
 80044be:	1f04      	.short	0x1f04
 80044c0:	a3bfbf33 	.word	0xa3bfbf33
 80044c4:	b0          	.byte	0xb0
 80044c5:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80044c6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f10d 0106 	add.w	r1, sp, #6
 80044d0:	7c00      	ldrb	r0, [r0, #16]
 80044d2:	4798      	blx	r3
  if (req->wLength != 0U)
 80044d4:	88ea      	ldrh	r2, [r5, #6]
 80044d6:	2a00      	cmp	r2, #0
 80044d8:	f000 80b9 	beq.w	800464e <USBD_GetDescriptor+0x1ae>
    if (len != 0U)
 80044dc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	f000 80af 	beq.w	8004644 <USBD_GetDescriptor+0x1a4>
      len = MIN(len, req->wLength);
 80044e6:	429a      	cmp	r2, r3
 80044e8:	bf28      	it	cs
 80044ea:	461a      	movcs	r2, r3
 80044ec:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80044f0:	4601      	mov	r1, r0
 80044f2:	4620      	mov	r0, r4
 80044f4:	f000 fb5b 	bl	8004bae <USBD_CtlSendData>
}
 80044f8:	b002      	add	sp, #8
 80044fa:	bd70      	pop	{r4, r5, r6, pc}
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80044fc:	7c03      	ldrb	r3, [r0, #16]
 80044fe:	b943      	cbnz	r3, 8004512 <USBD_GetDescriptor+0x72>
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8004500:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8004504:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004506:	f10d 0006 	add.w	r0, sp, #6
 800450a:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800450c:	2302      	movs	r3, #2
 800450e:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8004510:	e7e0      	b.n	80044d4 <USBD_GetDescriptor+0x34>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8004512:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8004516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004518:	f10d 0006 	add.w	r0, sp, #6
 800451c:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800451e:	2302      	movs	r3, #2
 8004520:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8004522:	e7d7      	b.n	80044d4 <USBD_GetDescriptor+0x34>
      switch ((uint8_t)(req->wValue))
 8004524:	b2d2      	uxtb	r2, r2
 8004526:	2a05      	cmp	r2, #5
 8004528:	d869      	bhi.n	80045fe <USBD_GetDescriptor+0x15e>
 800452a:	e8df f002 	tbb	[pc, r2]
 800452e:	1003      	.short	0x1003
 8004530:	44372a1d 	.word	0x44372a1d
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8004534:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	b123      	cbz	r3, 8004546 <USBD_GetDescriptor+0xa6>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800453c:	f10d 0106 	add.w	r1, sp, #6
 8004540:	7c00      	ldrb	r0, [r0, #16]
 8004542:	4798      	blx	r3
  if (err != 0U)
 8004544:	e7c6      	b.n	80044d4 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8004546:	4629      	mov	r1, r5
 8004548:	f7ff ffa0 	bl	800448c <USBD_CtlError>
  if (err != 0U)
 800454c:	e7d4      	b.n	80044f8 <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800454e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	b123      	cbz	r3, 8004560 <USBD_GetDescriptor+0xc0>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8004556:	f10d 0106 	add.w	r1, sp, #6
 800455a:	7c00      	ldrb	r0, [r0, #16]
 800455c:	4798      	blx	r3
  if (err != 0U)
 800455e:	e7b9      	b.n	80044d4 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8004560:	4629      	mov	r1, r5
 8004562:	f7ff ff93 	bl	800448c <USBD_CtlError>
  if (err != 0U)
 8004566:	e7c7      	b.n	80044f8 <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8004568:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	b123      	cbz	r3, 800457a <USBD_GetDescriptor+0xda>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8004570:	f10d 0106 	add.w	r1, sp, #6
 8004574:	7c00      	ldrb	r0, [r0, #16]
 8004576:	4798      	blx	r3
  if (err != 0U)
 8004578:	e7ac      	b.n	80044d4 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 800457a:	4629      	mov	r1, r5
 800457c:	f7ff ff86 	bl	800448c <USBD_CtlError>
  if (err != 0U)
 8004580:	e7ba      	b.n	80044f8 <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8004582:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8004586:	691b      	ldr	r3, [r3, #16]
 8004588:	b123      	cbz	r3, 8004594 <USBD_GetDescriptor+0xf4>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800458a:	f10d 0106 	add.w	r1, sp, #6
 800458e:	7c00      	ldrb	r0, [r0, #16]
 8004590:	4798      	blx	r3
  if (err != 0U)
 8004592:	e79f      	b.n	80044d4 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8004594:	4629      	mov	r1, r5
 8004596:	f7ff ff79 	bl	800448c <USBD_CtlError>
  if (err != 0U)
 800459a:	e7ad      	b.n	80044f8 <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800459c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80045a0:	695b      	ldr	r3, [r3, #20]
 80045a2:	b123      	cbz	r3, 80045ae <USBD_GetDescriptor+0x10e>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80045a4:	f10d 0106 	add.w	r1, sp, #6
 80045a8:	7c00      	ldrb	r0, [r0, #16]
 80045aa:	4798      	blx	r3
  if (err != 0U)
 80045ac:	e792      	b.n	80044d4 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 80045ae:	4629      	mov	r1, r5
 80045b0:	f7ff ff6c 	bl	800448c <USBD_CtlError>
  if (err != 0U)
 80045b4:	e7a0      	b.n	80044f8 <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80045b6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80045ba:	699b      	ldr	r3, [r3, #24]
 80045bc:	b123      	cbz	r3, 80045c8 <USBD_GetDescriptor+0x128>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80045be:	f10d 0106 	add.w	r1, sp, #6
 80045c2:	7c00      	ldrb	r0, [r0, #16]
 80045c4:	4798      	blx	r3
  if (err != 0U)
 80045c6:	e785      	b.n	80044d4 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 80045c8:	4629      	mov	r1, r5
 80045ca:	f7ff ff5f 	bl	800448c <USBD_CtlError>
  if (err != 0U)
 80045ce:	e793      	b.n	80044f8 <USBD_GetDescriptor+0x58>
            if (pdev->pClass[idx]->GetUsrStrDescriptor != NULL)
 80045d0:	f106 03ae 	add.w	r3, r6, #174	@ 0xae
 80045d4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80045d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80045da:	b152      	cbz	r2, 80045f2 <USBD_GetDescriptor+0x152>
              pdev->classId = idx;
 80045dc:	f8c4 62d4 	str.w	r6, [r4, #724]	@ 0x2d4
              pbuf = pdev->pClass[idx]->GetUsrStrDescriptor(pdev, LOBYTE(req->wValue), &len);
 80045e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045e2:	f10d 0206 	add.w	r2, sp, #6
 80045e6:	78a9      	ldrb	r1, [r5, #2]
 80045e8:	4620      	mov	r0, r4
 80045ea:	4798      	blx	r3
              if (pbuf == NULL) /* This means that no class recognized the string index */
 80045ec:	2800      	cmp	r0, #0
 80045ee:	f47f af71 	bne.w	80044d4 <USBD_GetDescriptor+0x34>
          for (uint32_t idx = 0U; (idx < pdev->NumClasses); idx++)
 80045f2:	3601      	adds	r6, #1
 80045f4:	f8d4 32d8 	ldr.w	r3, [r4, #728]	@ 0x2d8
 80045f8:	42b3      	cmp	r3, r6
 80045fa:	d8e9      	bhi.n	80045d0 <USBD_GetDescriptor+0x130>
 80045fc:	e76a      	b.n	80044d4 <USBD_GetDescriptor+0x34>
      switch ((uint8_t)(req->wValue))
 80045fe:	2600      	movs	r6, #0
 8004600:	4630      	mov	r0, r6
 8004602:	e7f7      	b.n	80045f4 <USBD_GetDescriptor+0x154>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004604:	7c03      	ldrb	r3, [r0, #16]
 8004606:	b933      	cbnz	r3, 8004616 <USBD_GetDescriptor+0x176>
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8004608:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800460c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800460e:	f10d 0006 	add.w	r0, sp, #6
 8004612:	4798      	blx	r3
  if (err != 0U)
 8004614:	e75e      	b.n	80044d4 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 8004616:	4629      	mov	r1, r5
 8004618:	f7ff ff38 	bl	800448c <USBD_CtlError>
  if (err != 0U)
 800461c:	e76c      	b.n	80044f8 <USBD_GetDescriptor+0x58>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800461e:	7c03      	ldrb	r3, [r0, #16]
 8004620:	b943      	cbnz	r3, 8004634 <USBD_GetDescriptor+0x194>
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8004622:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8004626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004628:	f10d 0006 	add.w	r0, sp, #6
 800462c:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800462e:	2307      	movs	r3, #7
 8004630:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8004632:	e74f      	b.n	80044d4 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 8004634:	4629      	mov	r1, r5
 8004636:	f7ff ff29 	bl	800448c <USBD_CtlError>
  if (err != 0U)
 800463a:	e75d      	b.n	80044f8 <USBD_GetDescriptor+0x58>
      USBD_CtlError(pdev, req);
 800463c:	4629      	mov	r1, r5
 800463e:	f7ff ff25 	bl	800448c <USBD_CtlError>
    return;
 8004642:	e759      	b.n	80044f8 <USBD_GetDescriptor+0x58>
      USBD_CtlError(pdev, req);
 8004644:	4629      	mov	r1, r5
 8004646:	4620      	mov	r0, r4
 8004648:	f7ff ff20 	bl	800448c <USBD_CtlError>
 800464c:	e754      	b.n	80044f8 <USBD_GetDescriptor+0x58>
    (void)USBD_CtlSendStatus(pdev);
 800464e:	4620      	mov	r0, r4
 8004650:	f000 fadc 	bl	8004c0c <USBD_CtlSendStatus>
 8004654:	e750      	b.n	80044f8 <USBD_GetDescriptor+0x58>

08004656 <USBD_SetAddress>:
{
 8004656:	b538      	push	{r3, r4, r5, lr}
 8004658:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800465a:	888b      	ldrh	r3, [r1, #4]
 800465c:	b9fb      	cbnz	r3, 800469e <USBD_SetAddress+0x48>
 800465e:	88cb      	ldrh	r3, [r1, #6]
 8004660:	b9eb      	cbnz	r3, 800469e <USBD_SetAddress+0x48>
 8004662:	884b      	ldrh	r3, [r1, #2]
 8004664:	2b7f      	cmp	r3, #127	@ 0x7f
 8004666:	d81a      	bhi.n	800469e <USBD_SetAddress+0x48>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8004668:	f003 057f 	and.w	r5, r3, #127	@ 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800466c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8004670:	b2db      	uxtb	r3, r3
 8004672:	2b03      	cmp	r3, #3
 8004674:	d00c      	beq.n	8004690 <USBD_SetAddress+0x3a>
      pdev->dev_address = dev_addr;
 8004676:	f880 529e 	strb.w	r5, [r0, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800467a:	4629      	mov	r1, r5
 800467c:	f000 fcea 	bl	8005054 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8004680:	4620      	mov	r0, r4
 8004682:	f000 fac3 	bl	8004c0c <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8004686:	b135      	cbz	r5, 8004696 <USBD_SetAddress+0x40>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004688:	2302      	movs	r3, #2
 800468a:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 800468e:	e009      	b.n	80046a4 <USBD_SetAddress+0x4e>
      USBD_CtlError(pdev, req);
 8004690:	f7ff fefc 	bl	800448c <USBD_CtlError>
 8004694:	e006      	b.n	80046a4 <USBD_SetAddress+0x4e>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8004696:	2301      	movs	r3, #1
 8004698:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 800469c:	e002      	b.n	80046a4 <USBD_SetAddress+0x4e>
    USBD_CtlError(pdev, req);
 800469e:	4620      	mov	r0, r4
 80046a0:	f7ff fef4 	bl	800448c <USBD_CtlError>
}
 80046a4:	bd38      	pop	{r3, r4, r5, pc}
	...

080046a8 <USBD_SetConfig>:
{
 80046a8:	b570      	push	{r4, r5, r6, lr}
 80046aa:	4604      	mov	r4, r0
 80046ac:	460e      	mov	r6, r1
  cfgidx = (uint8_t)(req->wValue);
 80046ae:	788d      	ldrb	r5, [r1, #2]
 80046b0:	4b2f      	ldr	r3, [pc, #188]	@ (8004770 <USBD_SetConfig+0xc8>)
 80046b2:	701d      	strb	r5, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80046b4:	2d01      	cmp	r5, #1
 80046b6:	d810      	bhi.n	80046da <USBD_SetConfig+0x32>
  switch (pdev->dev_state)
 80046b8:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d00f      	beq.n	80046e2 <USBD_SetConfig+0x3a>
 80046c2:	2b03      	cmp	r3, #3
 80046c4:	d026      	beq.n	8004714 <USBD_SetConfig+0x6c>
      USBD_CtlError(pdev, req);
 80046c6:	f7ff fee1 	bl	800448c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80046ca:	4b29      	ldr	r3, [pc, #164]	@ (8004770 <USBD_SetConfig+0xc8>)
 80046cc:	7819      	ldrb	r1, [r3, #0]
 80046ce:	4620      	mov	r0, r4
 80046d0:	f7ff fd0a 	bl	80040e8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80046d4:	2503      	movs	r5, #3
}
 80046d6:	4628      	mov	r0, r5
 80046d8:	bd70      	pop	{r4, r5, r6, pc}
    USBD_CtlError(pdev, req);
 80046da:	f7ff fed7 	bl	800448c <USBD_CtlError>
    return USBD_FAIL;
 80046de:	2503      	movs	r5, #3
 80046e0:	e7f9      	b.n	80046d6 <USBD_SetConfig+0x2e>
      if (cfgidx != 0U)
 80046e2:	b1a5      	cbz	r5, 800470e <USBD_SetConfig+0x66>
        pdev->dev_config = cfgidx;
 80046e4:	6045      	str	r5, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80046e6:	4629      	mov	r1, r5
 80046e8:	f7ff fcf5 	bl	80040d6 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 80046ec:	4605      	mov	r5, r0
 80046ee:	b138      	cbz	r0, 8004700 <USBD_SetConfig+0x58>
          USBD_CtlError(pdev, req);
 80046f0:	4631      	mov	r1, r6
 80046f2:	4620      	mov	r0, r4
 80046f4:	f7ff feca 	bl	800448c <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80046f8:	2302      	movs	r3, #2
 80046fa:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 80046fe:	e7ea      	b.n	80046d6 <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 8004700:	4620      	mov	r0, r4
 8004702:	f000 fa83 	bl	8004c0c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8004706:	2303      	movs	r3, #3
 8004708:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 800470c:	e7e3      	b.n	80046d6 <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 800470e:	f000 fa7d 	bl	8004c0c <USBD_CtlSendStatus>
 8004712:	e7e0      	b.n	80046d6 <USBD_SetConfig+0x2e>
      if (cfgidx == 0U)
 8004714:	b1cd      	cbz	r5, 800474a <USBD_SetConfig+0xa2>
      else if (cfgidx != pdev->dev_config)
 8004716:	6841      	ldr	r1, [r0, #4]
 8004718:	428d      	cmp	r5, r1
 800471a:	d025      	beq.n	8004768 <USBD_SetConfig+0xc0>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800471c:	b2c9      	uxtb	r1, r1
 800471e:	f7ff fce3 	bl	80040e8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8004722:	4b13      	ldr	r3, [pc, #76]	@ (8004770 <USBD_SetConfig+0xc8>)
 8004724:	7819      	ldrb	r1, [r3, #0]
 8004726:	6061      	str	r1, [r4, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8004728:	4620      	mov	r0, r4
 800472a:	f7ff fcd4 	bl	80040d6 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800472e:	4605      	mov	r5, r0
 8004730:	b1b0      	cbz	r0, 8004760 <USBD_SetConfig+0xb8>
          USBD_CtlError(pdev, req);
 8004732:	4631      	mov	r1, r6
 8004734:	4620      	mov	r0, r4
 8004736:	f7ff fea9 	bl	800448c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800473a:	7921      	ldrb	r1, [r4, #4]
 800473c:	4620      	mov	r0, r4
 800473e:	f7ff fcd3 	bl	80040e8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8004742:	2302      	movs	r3, #2
 8004744:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8004748:	e7c5      	b.n	80046d6 <USBD_SetConfig+0x2e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800474a:	2302      	movs	r3, #2
 800474c:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8004750:	6045      	str	r5, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8004752:	4629      	mov	r1, r5
 8004754:	f7ff fcc8 	bl	80040e8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8004758:	4620      	mov	r0, r4
 800475a:	f000 fa57 	bl	8004c0c <USBD_CtlSendStatus>
 800475e:	e7ba      	b.n	80046d6 <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 8004760:	4620      	mov	r0, r4
 8004762:	f000 fa53 	bl	8004c0c <USBD_CtlSendStatus>
 8004766:	e7b6      	b.n	80046d6 <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 8004768:	f000 fa50 	bl	8004c0c <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 800476c:	2500      	movs	r5, #0
 800476e:	e7b2      	b.n	80046d6 <USBD_SetConfig+0x2e>
 8004770:	2000035f 	.word	0x2000035f

08004774 <USBD_GetConfig>:
{
 8004774:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 8004776:	88cb      	ldrh	r3, [r1, #6]
 8004778:	2b01      	cmp	r3, #1
 800477a:	d10b      	bne.n	8004794 <USBD_GetConfig+0x20>
    switch (pdev->dev_state)
 800477c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8004780:	b2db      	uxtb	r3, r3
 8004782:	2b02      	cmp	r3, #2
 8004784:	d909      	bls.n	800479a <USBD_GetConfig+0x26>
 8004786:	2b03      	cmp	r3, #3
 8004788:	d111      	bne.n	80047ae <USBD_GetConfig+0x3a>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800478a:	2201      	movs	r2, #1
 800478c:	1d01      	adds	r1, r0, #4
 800478e:	f000 fa0e 	bl	8004bae <USBD_CtlSendData>
        break;
 8004792:	e001      	b.n	8004798 <USBD_GetConfig+0x24>
    USBD_CtlError(pdev, req);
 8004794:	f7ff fe7a 	bl	800448c <USBD_CtlError>
}
 8004798:	bd08      	pop	{r3, pc}
    switch (pdev->dev_state)
 800479a:	b25b      	sxtb	r3, r3
 800479c:	b13b      	cbz	r3, 80047ae <USBD_GetConfig+0x3a>
        pdev->dev_default_config = 0U;
 800479e:	4601      	mov	r1, r0
 80047a0:	2300      	movs	r3, #0
 80047a2:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80047a6:	2201      	movs	r2, #1
 80047a8:	f000 fa01 	bl	8004bae <USBD_CtlSendData>
        break;
 80047ac:	e7f4      	b.n	8004798 <USBD_GetConfig+0x24>
        USBD_CtlError(pdev, req);
 80047ae:	f7ff fe6d 	bl	800448c <USBD_CtlError>
}
 80047b2:	e7f1      	b.n	8004798 <USBD_GetConfig+0x24>

080047b4 <USBD_GetStatus>:
{
 80047b4:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 80047b6:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80047ba:	3b01      	subs	r3, #1
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d812      	bhi.n	80047e6 <USBD_GetStatus+0x32>
      if (req->wLength != 0x2U)
 80047c0:	88cb      	ldrh	r3, [r1, #6]
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d10c      	bne.n	80047e0 <USBD_GetStatus+0x2c>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80047c6:	2301      	movs	r3, #1
 80047c8:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup != 0U)
 80047ca:	f8d0 32a4 	ldr.w	r3, [r0, #676]	@ 0x2a4
 80047ce:	b10b      	cbz	r3, 80047d4 <USBD_GetStatus+0x20>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80047d0:	2303      	movs	r3, #3
 80047d2:	60c3      	str	r3, [r0, #12]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80047d4:	2202      	movs	r2, #2
 80047d6:	f100 010c 	add.w	r1, r0, #12
 80047da:	f000 f9e8 	bl	8004bae <USBD_CtlSendData>
}
 80047de:	bd08      	pop	{r3, pc}
        USBD_CtlError(pdev, req);
 80047e0:	f7ff fe54 	bl	800448c <USBD_CtlError>
        break;
 80047e4:	e7fb      	b.n	80047de <USBD_GetStatus+0x2a>
      USBD_CtlError(pdev, req);
 80047e6:	f7ff fe51 	bl	800448c <USBD_CtlError>
}
 80047ea:	e7f8      	b.n	80047de <USBD_GetStatus+0x2a>

080047ec <USBD_SetFeature>:
{
 80047ec:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80047ee:	884b      	ldrh	r3, [r1, #2]
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d004      	beq.n	80047fe <USBD_SetFeature+0x12>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	d007      	beq.n	8004808 <USBD_SetFeature+0x1c>
    USBD_CtlError(pdev, req);
 80047f8:	f7ff fe48 	bl	800448c <USBD_CtlError>
}
 80047fc:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 80047fe:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8004802:	f000 fa03 	bl	8004c0c <USBD_CtlSendStatus>
 8004806:	e7f9      	b.n	80047fc <USBD_SetFeature+0x10>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8004808:	888b      	ldrh	r3, [r1, #4]
 800480a:	0a1b      	lsrs	r3, r3, #8
 800480c:	f880 32a0 	strb.w	r3, [r0, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8004810:	f000 f9fc 	bl	8004c0c <USBD_CtlSendStatus>
 8004814:	e7f2      	b.n	80047fc <USBD_SetFeature+0x10>

08004816 <USBD_ClrFeature>:
{
 8004816:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 8004818:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800481c:	3b01      	subs	r3, #1
 800481e:	2b02      	cmp	r3, #2
 8004820:	d809      	bhi.n	8004836 <USBD_ClrFeature+0x20>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004822:	884b      	ldrh	r3, [r1, #2]
 8004824:	2b01      	cmp	r3, #1
 8004826:	d000      	beq.n	800482a <USBD_ClrFeature+0x14>
}
 8004828:	bd08      	pop	{r3, pc}
        pdev->dev_remote_wakeup = 0U;
 800482a:	2300      	movs	r3, #0
 800482c:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8004830:	f000 f9ec 	bl	8004c0c <USBD_CtlSendStatus>
 8004834:	e7f8      	b.n	8004828 <USBD_ClrFeature+0x12>
      USBD_CtlError(pdev, req);
 8004836:	f7ff fe29 	bl	800448c <USBD_CtlError>
}
 800483a:	e7f5      	b.n	8004828 <USBD_ClrFeature+0x12>

0800483c <USBD_StdDevReq>:
{
 800483c:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800483e:	780c      	ldrb	r4, [r1, #0]
 8004840:	f004 0460 	and.w	r4, r4, #96	@ 0x60
 8004844:	2c20      	cmp	r4, #32
 8004846:	d006      	beq.n	8004856 <USBD_StdDevReq+0x1a>
 8004848:	2c40      	cmp	r4, #64	@ 0x40
 800484a:	d004      	beq.n	8004856 <USBD_StdDevReq+0x1a>
 800484c:	b16c      	cbz	r4, 800486a <USBD_StdDevReq+0x2e>
      USBD_CtlError(pdev, req);
 800484e:	f7ff fe1d 	bl	800448c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8004852:	2400      	movs	r4, #0
      break;
 8004854:	e007      	b.n	8004866 <USBD_StdDevReq+0x2a>
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8004856:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800485a:	33ae      	adds	r3, #174	@ 0xae
 800485c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	4798      	blx	r3
 8004864:	4604      	mov	r4, r0
}
 8004866:	4620      	mov	r0, r4
 8004868:	bd38      	pop	{r3, r4, r5, pc}
      switch (req->bRequest)
 800486a:	784d      	ldrb	r5, [r1, #1]
 800486c:	2d09      	cmp	r5, #9
 800486e:	d81d      	bhi.n	80048ac <USBD_StdDevReq+0x70>
 8004870:	e8df f005 	tbb	[pc, r5]
 8004874:	161c1912 	.word	0x161c1912
 8004878:	1c05081c 	.word	0x1c05081c
 800487c:	0b0f      	.short	0x0b0f
          USBD_GetDescriptor(pdev, req);
 800487e:	f7ff fe0f 	bl	80044a0 <USBD_GetDescriptor>
          break;
 8004882:	e7f0      	b.n	8004866 <USBD_StdDevReq+0x2a>
          USBD_SetAddress(pdev, req);
 8004884:	f7ff fee7 	bl	8004656 <USBD_SetAddress>
          break;
 8004888:	e7ed      	b.n	8004866 <USBD_StdDevReq+0x2a>
          ret = USBD_SetConfig(pdev, req);
 800488a:	f7ff ff0d 	bl	80046a8 <USBD_SetConfig>
 800488e:	4604      	mov	r4, r0
          break;
 8004890:	e7e9      	b.n	8004866 <USBD_StdDevReq+0x2a>
          USBD_GetConfig(pdev, req);
 8004892:	f7ff ff6f 	bl	8004774 <USBD_GetConfig>
          break;
 8004896:	e7e6      	b.n	8004866 <USBD_StdDevReq+0x2a>
          USBD_GetStatus(pdev, req);
 8004898:	f7ff ff8c 	bl	80047b4 <USBD_GetStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 800489c:	462c      	mov	r4, r5
          break;
 800489e:	e7e2      	b.n	8004866 <USBD_StdDevReq+0x2a>
          USBD_SetFeature(pdev, req);
 80048a0:	f7ff ffa4 	bl	80047ec <USBD_SetFeature>
          break;
 80048a4:	e7df      	b.n	8004866 <USBD_StdDevReq+0x2a>
          USBD_ClrFeature(pdev, req);
 80048a6:	f7ff ffb6 	bl	8004816 <USBD_ClrFeature>
          break;
 80048aa:	e7dc      	b.n	8004866 <USBD_StdDevReq+0x2a>
          USBD_CtlError(pdev, req);
 80048ac:	f7ff fdee 	bl	800448c <USBD_CtlError>
          break;
 80048b0:	e7d9      	b.n	8004866 <USBD_StdDevReq+0x2a>

080048b2 <USBD_StdItfReq>:
{
 80048b2:	b570      	push	{r4, r5, r6, lr}
 80048b4:	4605      	mov	r5, r0
 80048b6:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80048b8:	780b      	ldrb	r3, [r1, #0]
 80048ba:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80048be:	2b20      	cmp	r3, #32
 80048c0:	d007      	beq.n	80048d2 <USBD_StdItfReq+0x20>
 80048c2:	2b40      	cmp	r3, #64	@ 0x40
 80048c4:	d005      	beq.n	80048d2 <USBD_StdItfReq+0x20>
 80048c6:	b123      	cbz	r3, 80048d2 <USBD_StdItfReq+0x20>
      USBD_CtlError(pdev, req);
 80048c8:	f7ff fde0 	bl	800448c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80048cc:	2600      	movs	r6, #0
}
 80048ce:	4630      	mov	r0, r6
 80048d0:	bd70      	pop	{r4, r5, r6, pc}
      switch (pdev->dev_state)
 80048d2:	f895 329c 	ldrb.w	r3, [r5, #668]	@ 0x29c
 80048d6:	3b01      	subs	r3, #1
 80048d8:	2b02      	cmp	r3, #2
 80048da:	d826      	bhi.n	800492a <USBD_StdItfReq+0x78>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80048dc:	7921      	ldrb	r1, [r4, #4]
 80048de:	2901      	cmp	r1, #1
 80048e0:	d905      	bls.n	80048ee <USBD_StdItfReq+0x3c>
            USBD_CtlError(pdev, req);
 80048e2:	4621      	mov	r1, r4
 80048e4:	4628      	mov	r0, r5
 80048e6:	f7ff fdd1 	bl	800448c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80048ea:	2600      	movs	r6, #0
 80048ec:	e7ef      	b.n	80048ce <USBD_StdItfReq+0x1c>
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80048ee:	4628      	mov	r0, r5
 80048f0:	f7ff fcd2 	bl	8004298 <USBD_CoreFindIF>
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80048f4:	b968      	cbnz	r0, 8004912 <USBD_StdItfReq+0x60>
              if (pdev->pClass[idx]->Setup != NULL)
 80048f6:	f100 02ae 	add.w	r2, r0, #174	@ 0xae
 80048fa:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80048fe:	6891      	ldr	r1, [r2, #8]
 8004900:	b189      	cbz	r1, 8004926 <USBD_StdItfReq+0x74>
                pdev->classId = idx;
 8004902:	f8c5 02d4 	str.w	r0, [r5, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8004906:	6893      	ldr	r3, [r2, #8]
 8004908:	4621      	mov	r1, r4
 800490a:	4628      	mov	r0, r5
 800490c:	4798      	blx	r3
 800490e:	4606      	mov	r6, r0
 8004910:	e000      	b.n	8004914 <USBD_StdItfReq+0x62>
              ret = USBD_FAIL;
 8004912:	2603      	movs	r6, #3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8004914:	88e3      	ldrh	r3, [r4, #6]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d1d9      	bne.n	80048ce <USBD_StdItfReq+0x1c>
 800491a:	2e00      	cmp	r6, #0
 800491c:	d1d7      	bne.n	80048ce <USBD_StdItfReq+0x1c>
              (void)USBD_CtlSendStatus(pdev);
 800491e:	4628      	mov	r0, r5
 8004920:	f000 f974 	bl	8004c0c <USBD_CtlSendStatus>
 8004924:	e7d3      	b.n	80048ce <USBD_StdItfReq+0x1c>
                ret = USBD_FAIL;
 8004926:	2603      	movs	r6, #3
 8004928:	e7f4      	b.n	8004914 <USBD_StdItfReq+0x62>
          USBD_CtlError(pdev, req);
 800492a:	4621      	mov	r1, r4
 800492c:	4628      	mov	r0, r5
 800492e:	f7ff fdad 	bl	800448c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8004932:	2600      	movs	r6, #0
          break;
 8004934:	e7cb      	b.n	80048ce <USBD_StdItfReq+0x1c>

08004936 <USBD_StdEPReq>:
{
 8004936:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800493a:	4606      	mov	r6, r0
 800493c:	460d      	mov	r5, r1
  ep_addr = LOBYTE(req->wIndex);
 800493e:	888b      	ldrh	r3, [r1, #4]
 8004940:	b2df      	uxtb	r7, r3
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004942:	780c      	ldrb	r4, [r1, #0]
 8004944:	f004 0460 	and.w	r4, r4, #96	@ 0x60
 8004948:	2c20      	cmp	r4, #32
 800494a:	d008      	beq.n	800495e <USBD_StdEPReq+0x28>
 800494c:	2c40      	cmp	r4, #64	@ 0x40
 800494e:	d006      	beq.n	800495e <USBD_StdEPReq+0x28>
 8004950:	b1dc      	cbz	r4, 800498a <USBD_StdEPReq+0x54>
      USBD_CtlError(pdev, req);
 8004952:	f7ff fd9b 	bl	800448c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8004956:	2400      	movs	r4, #0
}
 8004958:	4620      	mov	r0, r4
 800495a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800495e:	4639      	mov	r1, r7
 8004960:	4630      	mov	r0, r6
 8004962:	f7ff fc9b 	bl	800429c <USBD_CoreFindEP>
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004966:	4604      	mov	r4, r0
 8004968:	2800      	cmp	r0, #0
 800496a:	f040 80f9 	bne.w	8004b60 <USBD_StdEPReq+0x22a>
        pdev->classId = idx;
 800496e:	f8c6 02d4 	str.w	r0, [r6, #724]	@ 0x2d4
        if (pdev->pClass[idx]->Setup != NULL)
 8004972:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 8004976:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d0eb      	beq.n	8004958 <USBD_StdEPReq+0x22>
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8004980:	4629      	mov	r1, r5
 8004982:	4630      	mov	r0, r6
 8004984:	4798      	blx	r3
 8004986:	4604      	mov	r4, r0
 8004988:	e7e6      	b.n	8004958 <USBD_StdEPReq+0x22>
      switch (req->bRequest)
 800498a:	f891 8001 	ldrb.w	r8, [r1, #1]
 800498e:	f1b8 0f01 	cmp.w	r8, #1
 8004992:	d031      	beq.n	80049f8 <USBD_StdEPReq+0xc2>
 8004994:	f1b8 0f03 	cmp.w	r8, #3
 8004998:	d005      	beq.n	80049a6 <USBD_StdEPReq+0x70>
 800499a:	f1b8 0f00 	cmp.w	r8, #0
 800499e:	d067      	beq.n	8004a70 <USBD_StdEPReq+0x13a>
          USBD_CtlError(pdev, req);
 80049a0:	f7ff fd74 	bl	800448c <USBD_CtlError>
          break;
 80049a4:	e7d8      	b.n	8004958 <USBD_StdEPReq+0x22>
          switch (pdev->dev_state)
 80049a6:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	d004      	beq.n	80049ba <USBD_StdEPReq+0x84>
 80049b0:	2b03      	cmp	r3, #3
 80049b2:	d012      	beq.n	80049da <USBD_StdEPReq+0xa4>
              USBD_CtlError(pdev, req);
 80049b4:	f7ff fd6a 	bl	800448c <USBD_CtlError>
              break;
 80049b8:	e7ce      	b.n	8004958 <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80049ba:	b10f      	cbz	r7, 80049c0 <USBD_StdEPReq+0x8a>
 80049bc:	2f80      	cmp	r7, #128	@ 0x80
 80049be:	d104      	bne.n	80049ca <USBD_StdEPReq+0x94>
                USBD_CtlError(pdev, req);
 80049c0:	4629      	mov	r1, r5
 80049c2:	4630      	mov	r0, r6
 80049c4:	f7ff fd62 	bl	800448c <USBD_CtlError>
 80049c8:	e7c6      	b.n	8004958 <USBD_StdEPReq+0x22>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80049ca:	4639      	mov	r1, r7
 80049cc:	f000 fb32 	bl	8005034 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80049d0:	2180      	movs	r1, #128	@ 0x80
 80049d2:	4630      	mov	r0, r6
 80049d4:	f000 fb2e 	bl	8005034 <USBD_LL_StallEP>
 80049d8:	e7be      	b.n	8004958 <USBD_StdEPReq+0x22>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80049da:	884b      	ldrh	r3, [r1, #2]
 80049dc:	b923      	cbnz	r3, 80049e8 <USBD_StdEPReq+0xb2>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80049de:	b11f      	cbz	r7, 80049e8 <USBD_StdEPReq+0xb2>
 80049e0:	2f80      	cmp	r7, #128	@ 0x80
 80049e2:	d001      	beq.n	80049e8 <USBD_StdEPReq+0xb2>
 80049e4:	88cb      	ldrh	r3, [r1, #6]
 80049e6:	b11b      	cbz	r3, 80049f0 <USBD_StdEPReq+0xba>
              (void)USBD_CtlSendStatus(pdev);
 80049e8:	4630      	mov	r0, r6
 80049ea:	f000 f90f 	bl	8004c0c <USBD_CtlSendStatus>
              break;
 80049ee:	e7b3      	b.n	8004958 <USBD_StdEPReq+0x22>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80049f0:	4639      	mov	r1, r7
 80049f2:	f000 fb1f 	bl	8005034 <USBD_LL_StallEP>
 80049f6:	e7f7      	b.n	80049e8 <USBD_StdEPReq+0xb2>
          switch (pdev->dev_state)
 80049f8:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	2b02      	cmp	r3, #2
 8004a00:	d004      	beq.n	8004a0c <USBD_StdEPReq+0xd6>
 8004a02:	2b03      	cmp	r3, #3
 8004a04:	d012      	beq.n	8004a2c <USBD_StdEPReq+0xf6>
              USBD_CtlError(pdev, req);
 8004a06:	f7ff fd41 	bl	800448c <USBD_CtlError>
              break;
 8004a0a:	e7a5      	b.n	8004958 <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004a0c:	b10f      	cbz	r7, 8004a12 <USBD_StdEPReq+0xdc>
 8004a0e:	2f80      	cmp	r7, #128	@ 0x80
 8004a10:	d104      	bne.n	8004a1c <USBD_StdEPReq+0xe6>
                USBD_CtlError(pdev, req);
 8004a12:	4629      	mov	r1, r5
 8004a14:	4630      	mov	r0, r6
 8004a16:	f7ff fd39 	bl	800448c <USBD_CtlError>
 8004a1a:	e79d      	b.n	8004958 <USBD_StdEPReq+0x22>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8004a1c:	4639      	mov	r1, r7
 8004a1e:	f000 fb09 	bl	8005034 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8004a22:	2180      	movs	r1, #128	@ 0x80
 8004a24:	4630      	mov	r0, r6
 8004a26:	f000 fb05 	bl	8005034 <USBD_LL_StallEP>
 8004a2a:	e795      	b.n	8004958 <USBD_StdEPReq+0x22>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004a2c:	884b      	ldrh	r3, [r1, #2]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d192      	bne.n	8004958 <USBD_StdEPReq+0x22>
                if ((ep_addr & 0x7FU) != 0x00U)
 8004a32:	f017 0f7f 	tst.w	r7, #127	@ 0x7f
 8004a36:	d117      	bne.n	8004a68 <USBD_StdEPReq+0x132>
                (void)USBD_CtlSendStatus(pdev);
 8004a38:	4630      	mov	r0, r6
 8004a3a:	f000 f8e7 	bl	8004c0c <USBD_CtlSendStatus>
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8004a3e:	4639      	mov	r1, r7
 8004a40:	4630      	mov	r0, r6
 8004a42:	f7ff fc2b 	bl	800429c <USBD_CoreFindEP>
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004a46:	2800      	cmp	r0, #0
 8004a48:	d186      	bne.n	8004958 <USBD_StdEPReq+0x22>
                  pdev->classId = idx;
 8004a4a:	f8c6 02d4 	str.w	r0, [r6, #724]	@ 0x2d4
                  if (pdev->pClass[idx]->Setup != NULL)
 8004a4e:	f100 02ae 	add.w	r2, r0, #174	@ 0xae
 8004a52:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8004a56:	6892      	ldr	r2, [r2, #8]
 8004a58:	2a00      	cmp	r2, #0
 8004a5a:	f000 8083 	beq.w	8004b64 <USBD_StdEPReq+0x22e>
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8004a5e:	4629      	mov	r1, r5
 8004a60:	4630      	mov	r0, r6
 8004a62:	4790      	blx	r2
 8004a64:	4604      	mov	r4, r0
 8004a66:	e777      	b.n	8004958 <USBD_StdEPReq+0x22>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8004a68:	4639      	mov	r1, r7
 8004a6a:	f000 faeb 	bl	8005044 <USBD_LL_ClearStallEP>
 8004a6e:	e7e3      	b.n	8004a38 <USBD_StdEPReq+0x102>
          switch (pdev->dev_state)
 8004a70:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8004a74:	b2d2      	uxtb	r2, r2
 8004a76:	2a02      	cmp	r2, #2
 8004a78:	d005      	beq.n	8004a86 <USBD_StdEPReq+0x150>
 8004a7a:	2a03      	cmp	r2, #3
 8004a7c:	d028      	beq.n	8004ad0 <USBD_StdEPReq+0x19a>
              USBD_CtlError(pdev, req);
 8004a7e:	f7ff fd05 	bl	800448c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8004a82:	4644      	mov	r4, r8
              break;
 8004a84:	e768      	b.n	8004958 <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004a86:	b10f      	cbz	r7, 8004a8c <USBD_StdEPReq+0x156>
 8004a88:	2f80      	cmp	r7, #128	@ 0x80
 8004a8a:	d114      	bne.n	8004ab6 <USBD_StdEPReq+0x180>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004a8c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004a90:	d115      	bne.n	8004abe <USBD_StdEPReq+0x188>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004a92:	f007 077f 	and.w	r7, r7, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004a96:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8004a9a:	00b9      	lsls	r1, r7, #2
 8004a9c:	f501 71a8 	add.w	r1, r1, #336	@ 0x150
 8004aa0:	4431      	add	r1, r6
 8004aa2:	3104      	adds	r1, #4
              pep->status = 0x0000U;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	f801 3f0e 	strb.w	r3, [r1, #14]!
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8004aaa:	2202      	movs	r2, #2
 8004aac:	4630      	mov	r0, r6
 8004aae:	f000 f87e 	bl	8004bae <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8004ab2:	4644      	mov	r4, r8
              break;
 8004ab4:	e750      	b.n	8004958 <USBD_StdEPReq+0x22>
                USBD_CtlError(pdev, req);
 8004ab6:	f7ff fce9 	bl	800448c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8004aba:	4644      	mov	r4, r8
                break;
 8004abc:	e74c      	b.n	8004958 <USBD_StdEPReq+0x22>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004abe:	f007 077f 	and.w	r7, r7, #127	@ 0x7f
 8004ac2:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8004ac6:	00b9      	lsls	r1, r7, #2
 8004ac8:	3110      	adds	r1, #16
 8004aca:	4431      	add	r1, r6
 8004acc:	3104      	adds	r1, #4
 8004ace:	e7e9      	b.n	8004aa4 <USBD_StdEPReq+0x16e>
              if ((ep_addr & 0x80U) == 0x80U)
 8004ad0:	b25b      	sxtb	r3, r3
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	db20      	blt.n	8004b18 <USBD_StdEPReq+0x1e2>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8004ad6:	f007 020f 	and.w	r2, r7, #15
 8004ada:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004ade:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004ae2:	f892 4163 	ldrb.w	r4, [r2, #355]	@ 0x163
 8004ae6:	b324      	cbz	r4, 8004b32 <USBD_StdEPReq+0x1fc>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	db25      	blt.n	8004b38 <USBD_StdEPReq+0x202>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004aec:	f007 037f 	and.w	r3, r7, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004af0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004af4:	009c      	lsls	r4, r3, #2
 8004af6:	f504 74a8 	add.w	r4, r4, #336	@ 0x150
 8004afa:	4434      	add	r4, r6
 8004afc:	3404      	adds	r4, #4
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8004afe:	b10f      	cbz	r7, 8004b04 <USBD_StdEPReq+0x1ce>
 8004b00:	2f80      	cmp	r7, #128	@ 0x80
 8004b02:	d122      	bne.n	8004b4a <USBD_StdEPReq+0x214>
                pep->status = 0x0000U;
 8004b04:	2300      	movs	r3, #0
 8004b06:	73a3      	strb	r3, [r4, #14]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8004b08:	2202      	movs	r2, #2
 8004b0a:	f104 010e 	add.w	r1, r4, #14
 8004b0e:	4630      	mov	r0, r6
 8004b10:	f000 f84d 	bl	8004bae <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8004b14:	4644      	mov	r4, r8
              break;
 8004b16:	e71f      	b.n	8004958 <USBD_StdEPReq+0x22>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004b18:	f007 020f 	and.w	r2, r7, #15
 8004b1c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004b20:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004b24:	f892 4023 	ldrb.w	r4, [r2, #35]	@ 0x23
 8004b28:	2c00      	cmp	r4, #0
 8004b2a:	d1dd      	bne.n	8004ae8 <USBD_StdEPReq+0x1b2>
                  USBD_CtlError(pdev, req);
 8004b2c:	f7ff fcae 	bl	800448c <USBD_CtlError>
                  break;
 8004b30:	e712      	b.n	8004958 <USBD_StdEPReq+0x22>
                  USBD_CtlError(pdev, req);
 8004b32:	f7ff fcab 	bl	800448c <USBD_CtlError>
                  break;
 8004b36:	e70f      	b.n	8004958 <USBD_StdEPReq+0x22>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004b38:	f007 037f 	and.w	r3, r7, #127	@ 0x7f
 8004b3c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004b40:	009c      	lsls	r4, r3, #2
 8004b42:	3410      	adds	r4, #16
 8004b44:	4434      	add	r4, r6
 8004b46:	3404      	adds	r4, #4
 8004b48:	e7d9      	b.n	8004afe <USBD_StdEPReq+0x1c8>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8004b4a:	4639      	mov	r1, r7
 8004b4c:	4630      	mov	r0, r6
 8004b4e:	f000 fa31 	bl	8004fb4 <USBD_LL_IsStallEP>
 8004b52:	b110      	cbz	r0, 8004b5a <USBD_StdEPReq+0x224>
                pep->status = 0x0001U;
 8004b54:	2301      	movs	r3, #1
 8004b56:	73a3      	strb	r3, [r4, #14]
 8004b58:	e7d6      	b.n	8004b08 <USBD_StdEPReq+0x1d2>
                pep->status = 0x0000U;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	73a3      	strb	r3, [r4, #14]
 8004b5e:	e7d3      	b.n	8004b08 <USBD_StdEPReq+0x1d2>
  USBD_StatusTypeDef ret = USBD_OK;
 8004b60:	2400      	movs	r4, #0
 8004b62:	e6f9      	b.n	8004958 <USBD_StdEPReq+0x22>
 8004b64:	4604      	mov	r4, r0
 8004b66:	e6f7      	b.n	8004958 <USBD_StdEPReq+0x22>

08004b68 <USBD_GetString>:
  if (desc == NULL)
 8004b68:	b300      	cbz	r0, 8004bac <USBD_GetString+0x44>
{
 8004b6a:	b570      	push	{r4, r5, r6, lr}
 8004b6c:	460d      	mov	r5, r1
 8004b6e:	4616      	mov	r6, r2
 8004b70:	4604      	mov	r4, r0
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8004b72:	f7ff fc6d 	bl	8004450 <USBD_GetLen>
 8004b76:	3001      	adds	r0, #1
 8004b78:	0043      	lsls	r3, r0, #1
 8004b7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b7e:	d806      	bhi.n	8004b8e <USBD_GetString+0x26>
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	8033      	strh	r3, [r6, #0]
  unicode[idx] = *(uint8_t *)len;
 8004b84:	702b      	strb	r3, [r5, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8004b86:	2303      	movs	r3, #3
 8004b88:	706b      	strb	r3, [r5, #1]
  idx++;
 8004b8a:	2302      	movs	r3, #2
  while (*pdesc != (uint8_t)'\0')
 8004b8c:	e00a      	b.n	8004ba4 <USBD_GetString+0x3c>
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8004b8e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004b92:	e7f6      	b.n	8004b82 <USBD_GetString+0x1a>
    unicode[idx] = *pdesc;
 8004b94:	54ea      	strb	r2, [r5, r3]
    pdesc++;
 8004b96:	3401      	adds	r4, #1
    idx++;
 8004b98:	1c5a      	adds	r2, r3, #1
 8004b9a:	b2d2      	uxtb	r2, r2
    unicode[idx] = 0U;
 8004b9c:	2100      	movs	r1, #0
 8004b9e:	54a9      	strb	r1, [r5, r2]
    idx++;
 8004ba0:	3302      	adds	r3, #2
 8004ba2:	b2db      	uxtb	r3, r3
  while (*pdesc != (uint8_t)'\0')
 8004ba4:	7822      	ldrb	r2, [r4, #0]
 8004ba6:	2a00      	cmp	r2, #0
 8004ba8:	d1f4      	bne.n	8004b94 <USBD_GetString+0x2c>
}
 8004baa:	bd70      	pop	{r4, r5, r6, pc}
 8004bac:	4770      	bx	lr

08004bae <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8004bae:	b508      	push	{r3, lr}
 8004bb0:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8004bb2:	2202      	movs	r2, #2
 8004bb4:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8004bb8:	6143      	str	r3, [r0, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 8004bba:	6241      	str	r1, [r0, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8004bbc:	6183      	str	r3, [r0, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004bbe:	460a      	mov	r2, r1
 8004bc0:	2100      	movs	r1, #0
 8004bc2:	f000 fa4f 	bl	8005064 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004bc6:	2000      	movs	r0, #0
 8004bc8:	bd08      	pop	{r3, pc}

08004bca <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8004bca:	b508      	push	{r3, lr}
 8004bcc:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004bce:	460a      	mov	r2, r1
 8004bd0:	2100      	movs	r1, #0
 8004bd2:	f000 fa47 	bl	8005064 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004bd6:	2000      	movs	r0, #0
 8004bd8:	bd08      	pop	{r3, pc}

08004bda <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8004bda:	b508      	push	{r3, lr}
 8004bdc:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8004bde:	2203      	movs	r2, #3
 8004be0:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8004be4:	f8c0 3154 	str.w	r3, [r0, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 8004be8:	f8c0 1164 	str.w	r1, [r0, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8004bec:	f8c0 3158 	str.w	r3, [r0, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004bf0:	460a      	mov	r2, r1
 8004bf2:	2100      	movs	r1, #0
 8004bf4:	f000 fa3e 	bl	8005074 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004bf8:	2000      	movs	r0, #0
 8004bfa:	bd08      	pop	{r3, pc}

08004bfc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8004bfc:	b508      	push	{r3, lr}
 8004bfe:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004c00:	460a      	mov	r2, r1
 8004c02:	2100      	movs	r1, #0
 8004c04:	f000 fa36 	bl	8005074 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004c08:	2000      	movs	r0, #0
 8004c0a:	bd08      	pop	{r3, pc}

08004c0c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8004c0c:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8004c0e:	2204      	movs	r2, #4
 8004c10:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8004c14:	2300      	movs	r3, #0
 8004c16:	461a      	mov	r2, r3
 8004c18:	4619      	mov	r1, r3
 8004c1a:	f000 fa23 	bl	8005064 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004c1e:	2000      	movs	r0, #0
 8004c20:	bd08      	pop	{r3, pc}

08004c22 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8004c22:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8004c24:	2205      	movs	r2, #5
 8004c26:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	4619      	mov	r1, r3
 8004c30:	f000 fa20 	bl	8005074 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004c34:	2000      	movs	r0, #0
 8004c36:	bd08      	pop	{r3, pc}

08004c38 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8004c38:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	490f      	ldr	r1, [pc, #60]	@ (8004c7c <MX_USB_DEVICE_Init+0x44>)
 8004c3e:	4810      	ldr	r0, [pc, #64]	@ (8004c80 <MX_USB_DEVICE_Init+0x48>)
 8004c40:	f7ff fa01 	bl	8004046 <USBD_Init>
 8004c44:	b970      	cbnz	r0, 8004c64 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_DFU) != USBD_OK)
 8004c46:	490f      	ldr	r1, [pc, #60]	@ (8004c84 <MX_USB_DEVICE_Init+0x4c>)
 8004c48:	480d      	ldr	r0, [pc, #52]	@ (8004c80 <MX_USB_DEVICE_Init+0x48>)
 8004c4a:	f7ff fa13 	bl	8004074 <USBD_RegisterClass>
 8004c4e:	b960      	cbnz	r0, 8004c6a <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceFS, &USBD_DFU_fops_FS) != USBD_OK)
 8004c50:	490d      	ldr	r1, [pc, #52]	@ (8004c88 <MX_USB_DEVICE_Init+0x50>)
 8004c52:	480b      	ldr	r0, [pc, #44]	@ (8004c80 <MX_USB_DEVICE_Init+0x48>)
 8004c54:	f7ff f9ec 	bl	8004030 <USBD_DFU_RegisterMedia>
 8004c58:	b950      	cbnz	r0, 8004c70 <MX_USB_DEVICE_Init+0x38>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8004c5a:	4809      	ldr	r0, [pc, #36]	@ (8004c80 <MX_USB_DEVICE_Init+0x48>)
 8004c5c:	f7ff fa2a 	bl	80040b4 <USBD_Start>
 8004c60:	b948      	cbnz	r0, 8004c76 <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8004c62:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004c64:	f7fb fd5e 	bl	8000724 <Error_Handler>
 8004c68:	e7ed      	b.n	8004c46 <MX_USB_DEVICE_Init+0xe>
    Error_Handler();
 8004c6a:	f7fb fd5b 	bl	8000724 <Error_Handler>
 8004c6e:	e7ef      	b.n	8004c50 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 8004c70:	f7fb fd58 	bl	8000724 <Error_Handler>
 8004c74:	e7f1      	b.n	8004c5a <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 8004c76:	f7fb fd55 	bl	8000724 <Error_Handler>
}
 8004c7a:	e7f2      	b.n	8004c62 <MX_USB_DEVICE_Init+0x2a>
 8004c7c:	200000a8 	.word	0x200000a8
 8004c80:	20000360 	.word	0x20000360
 8004c84:	20000038 	.word	0x20000038
 8004c88:	200000c4 	.word	0x200000c4

08004c8c <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8004c8c:	2312      	movs	r3, #18
 8004c8e:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8004c90:	4800      	ldr	r0, [pc, #0]	@ (8004c94 <USBD_FS_DeviceDescriptor+0x8>)
 8004c92:	4770      	bx	lr
 8004c94:	20000094 	.word	0x20000094

08004c98 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8004c98:	2304      	movs	r3, #4
 8004c9a:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8004c9c:	4800      	ldr	r0, [pc, #0]	@ (8004ca0 <USBD_FS_LangIDStrDescriptor+0x8>)
 8004c9e:	4770      	bx	lr
 8004ca0:	20000090 	.word	0x20000090

08004ca4 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d21e      	bcs.n	8004ce8 <IntToUnicode+0x44>
{
 8004caa:	b500      	push	{lr}
 8004cac:	e010      	b.n	8004cd0 <IntToUnicode+0x2c>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8004cae:	f10c 0c37 	add.w	ip, ip, #55	@ 0x37
 8004cb2:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
    }

    value = value << 4;
 8004cb6:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 8004cb8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004cbc:	f10c 0c01 	add.w	ip, ip, #1
 8004cc0:	f04f 0e00 	mov.w	lr, #0
 8004cc4:	f801 e00c 	strb.w	lr, [r1, ip]
  for (idx = 0; idx < len; idx++)
 8004cc8:	3301      	adds	r3, #1
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d209      	bcs.n	8004ce4 <IntToUnicode+0x40>
    if (((value >> 28)) < 0xA)
 8004cd0:	ea4f 7c10 	mov.w	ip, r0, lsr #28
 8004cd4:	f1b0 4f20 	cmp.w	r0, #2684354560	@ 0xa0000000
 8004cd8:	d2e9      	bcs.n	8004cae <IntToUnicode+0xa>
      pbuf[2 * idx] = (value >> 28) + '0';
 8004cda:	f10c 0c30 	add.w	ip, ip, #48	@ 0x30
 8004cde:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
 8004ce2:	e7e8      	b.n	8004cb6 <IntToUnicode+0x12>
  }
}
 8004ce4:	f85d fb04 	ldr.w	pc, [sp], #4
 8004ce8:	4770      	bx	lr
	...

08004cec <Get_SerialNum>:
{
 8004cec:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8004cee:	4b0b      	ldr	r3, [pc, #44]	@ (8004d1c <Get_SerialNum+0x30>)
 8004cf0:	f8d3 0a10 	ldr.w	r0, [r3, #2576]	@ 0xa10
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8004cf4:	f8d3 4a14 	ldr.w	r4, [r3, #2580]	@ 0xa14
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8004cf8:	f8d3 3a18 	ldr.w	r3, [r3, #2584]	@ 0xa18
  if (deviceserial0 != 0)
 8004cfc:	18c0      	adds	r0, r0, r3
 8004cfe:	d100      	bne.n	8004d02 <Get_SerialNum+0x16>
}
 8004d00:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8004d02:	4d07      	ldr	r5, [pc, #28]	@ (8004d20 <Get_SerialNum+0x34>)
 8004d04:	2208      	movs	r2, #8
 8004d06:	4629      	mov	r1, r5
 8004d08:	f7ff ffcc 	bl	8004ca4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8004d0c:	2204      	movs	r2, #4
 8004d0e:	f105 0110 	add.w	r1, r5, #16
 8004d12:	4620      	mov	r0, r4
 8004d14:	f7ff ffc6 	bl	8004ca4 <IntToUnicode>
}
 8004d18:	e7f2      	b.n	8004d00 <Get_SerialNum+0x14>
 8004d1a:	bf00      	nop
 8004d1c:	1fff7000 	.word	0x1fff7000
 8004d20:	20000076 	.word	0x20000076

08004d24 <USBD_FS_SerialStrDescriptor>:
{
 8004d24:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8004d26:	231a      	movs	r3, #26
 8004d28:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 8004d2a:	f7ff ffdf 	bl	8004cec <Get_SerialNum>
}
 8004d2e:	4801      	ldr	r0, [pc, #4]	@ (8004d34 <USBD_FS_SerialStrDescriptor+0x10>)
 8004d30:	bd08      	pop	{r3, pc}
 8004d32:	bf00      	nop
 8004d34:	20000074 	.word	0x20000074

08004d38 <USBD_FS_ProductStrDescriptor>:
{
 8004d38:	b508      	push	{r3, lr}
 8004d3a:	460a      	mov	r2, r1
  if(speed == 0)
 8004d3c:	b928      	cbnz	r0, 8004d4a <USBD_FS_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8004d3e:	4905      	ldr	r1, [pc, #20]	@ (8004d54 <USBD_FS_ProductStrDescriptor+0x1c>)
 8004d40:	4805      	ldr	r0, [pc, #20]	@ (8004d58 <USBD_FS_ProductStrDescriptor+0x20>)
 8004d42:	f7ff ff11 	bl	8004b68 <USBD_GetString>
}
 8004d46:	4803      	ldr	r0, [pc, #12]	@ (8004d54 <USBD_FS_ProductStrDescriptor+0x1c>)
 8004d48:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8004d4a:	4902      	ldr	r1, [pc, #8]	@ (8004d54 <USBD_FS_ProductStrDescriptor+0x1c>)
 8004d4c:	4802      	ldr	r0, [pc, #8]	@ (8004d58 <USBD_FS_ProductStrDescriptor+0x20>)
 8004d4e:	f7ff ff0b 	bl	8004b68 <USBD_GetString>
 8004d52:	e7f8      	b.n	8004d46 <USBD_FS_ProductStrDescriptor+0xe>
 8004d54:	2000063c 	.word	0x2000063c
 8004d58:	08005f0c 	.word	0x08005f0c

08004d5c <USBD_FS_ManufacturerStrDescriptor>:
{
 8004d5c:	b510      	push	{r4, lr}
 8004d5e:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8004d60:	4c03      	ldr	r4, [pc, #12]	@ (8004d70 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8004d62:	4621      	mov	r1, r4
 8004d64:	4803      	ldr	r0, [pc, #12]	@ (8004d74 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8004d66:	f7ff feff 	bl	8004b68 <USBD_GetString>
}
 8004d6a:	4620      	mov	r0, r4
 8004d6c:	bd10      	pop	{r4, pc}
 8004d6e:	bf00      	nop
 8004d70:	2000063c 	.word	0x2000063c
 8004d74:	08005f2c 	.word	0x08005f2c

08004d78 <USBD_FS_ConfigStrDescriptor>:
{
 8004d78:	b508      	push	{r3, lr}
 8004d7a:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 8004d7c:	b928      	cbnz	r0, 8004d8a <USBD_FS_ConfigStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8004d7e:	4905      	ldr	r1, [pc, #20]	@ (8004d94 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8004d80:	4805      	ldr	r0, [pc, #20]	@ (8004d98 <USBD_FS_ConfigStrDescriptor+0x20>)
 8004d82:	f7ff fef1 	bl	8004b68 <USBD_GetString>
}
 8004d86:	4803      	ldr	r0, [pc, #12]	@ (8004d94 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8004d88:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8004d8a:	4902      	ldr	r1, [pc, #8]	@ (8004d94 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8004d8c:	4802      	ldr	r0, [pc, #8]	@ (8004d98 <USBD_FS_ConfigStrDescriptor+0x20>)
 8004d8e:	f7ff feeb 	bl	8004b68 <USBD_GetString>
 8004d92:	e7f8      	b.n	8004d86 <USBD_FS_ConfigStrDescriptor+0xe>
 8004d94:	2000063c 	.word	0x2000063c
 8004d98:	08005f40 	.word	0x08005f40

08004d9c <USBD_FS_InterfaceStrDescriptor>:
{
 8004d9c:	b508      	push	{r3, lr}
 8004d9e:	460a      	mov	r2, r1
  if(speed == 0)
 8004da0:	b928      	cbnz	r0, 8004dae <USBD_FS_InterfaceStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8004da2:	4905      	ldr	r1, [pc, #20]	@ (8004db8 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8004da4:	4805      	ldr	r0, [pc, #20]	@ (8004dbc <USBD_FS_InterfaceStrDescriptor+0x20>)
 8004da6:	f7ff fedf 	bl	8004b68 <USBD_GetString>
}
 8004daa:	4803      	ldr	r0, [pc, #12]	@ (8004db8 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8004dac:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8004dae:	4902      	ldr	r1, [pc, #8]	@ (8004db8 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8004db0:	4802      	ldr	r0, [pc, #8]	@ (8004dbc <USBD_FS_InterfaceStrDescriptor+0x20>)
 8004db2:	f7ff fed9 	bl	8004b68 <USBD_GetString>
 8004db6:	e7f8      	b.n	8004daa <USBD_FS_InterfaceStrDescriptor+0xe>
 8004db8:	2000063c 	.word	0x2000063c
 8004dbc:	08005f4c 	.word	0x08005f4c

08004dc0 <MEM_If_Init_FS>:
uint16_t MEM_If_Init_FS(void)
{
  /* USER CODE BEGIN 0 */
  return (USBD_OK);
  /* USER CODE END 0 */
}
 8004dc0:	2000      	movs	r0, #0
 8004dc2:	4770      	bx	lr

08004dc4 <MEM_If_DeInit_FS>:
uint16_t MEM_If_DeInit_FS(void)
{
  /* USER CODE BEGIN 1 */
  return (USBD_OK);
  /* USER CODE END 1 */
}
 8004dc4:	2000      	movs	r0, #0
 8004dc6:	4770      	bx	lr

08004dc8 <MEM_If_Erase_FS>:
  /* USER CODE BEGIN 2 */
  UNUSED(Add);

  return (USBD_OK);
  /* USER CODE END 2 */
}
 8004dc8:	2000      	movs	r0, #0
 8004dca:	4770      	bx	lr

08004dcc <MEM_If_Write_FS>:
  UNUSED(dest);
  UNUSED(Len);

  return (USBD_OK);
  /* USER CODE END 3 */
}
 8004dcc:	2000      	movs	r0, #0
 8004dce:	4770      	bx	lr

08004dd0 <MEM_If_Read_FS>:
  UNUSED(dest);
  UNUSED(Len);

  return (uint8_t*)(USBD_OK);
  /* USER CODE END 4 */
}
 8004dd0:	2000      	movs	r0, #0
 8004dd2:	4770      	bx	lr

08004dd4 <MEM_If_GetStatus_FS>:

    break;
  }
  return (USBD_OK);
  /* USER CODE END 5 */
}
 8004dd4:	2000      	movs	r0, #0
 8004dd6:	4770      	bx	lr

08004dd8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8004dd8:	b570      	push	{r4, r5, r6, lr}
 8004dda:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ddc:	2300      	movs	r3, #0
 8004dde:	9303      	str	r3, [sp, #12]
 8004de0:	9304      	str	r3, [sp, #16]
 8004de2:	9305      	str	r3, [sp, #20]
 8004de4:	9306      	str	r3, [sp, #24]
 8004de6:	9307      	str	r3, [sp, #28]
  if(pcdHandle->Instance==USB_OTG_FS)
 8004de8:	6803      	ldr	r3, [r0, #0]
 8004dea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004dee:	d001      	beq.n	8004df4 <HAL_PCD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8004df0:	b008      	add	sp, #32
 8004df2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004df4:	2500      	movs	r5, #0
 8004df6:	9501      	str	r5, [sp, #4]
 8004df8:	4c1a      	ldr	r4, [pc, #104]	@ (8004e64 <HAL_PCD_MspInit+0x8c>)
 8004dfa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004dfc:	f043 0301 	orr.w	r3, r3, #1
 8004e00:	6323      	str	r3, [r4, #48]	@ 0x30
 8004e02:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004e04:	f003 0301 	and.w	r3, r3, #1
 8004e08:	9301      	str	r3, [sp, #4]
 8004e0a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8004e0c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004e10:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8004e12:	4e15      	ldr	r6, [pc, #84]	@ (8004e68 <HAL_PCD_MspInit+0x90>)
 8004e14:	a903      	add	r1, sp, #12
 8004e16:	4630      	mov	r0, r6
 8004e18:	f7fc f828 	bl	8000e6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8004e1c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8004e20:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e22:	2302      	movs	r3, #2
 8004e24:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e26:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e28:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8004e2a:	230a      	movs	r3, #10
 8004e2c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e2e:	a903      	add	r1, sp, #12
 8004e30:	4630      	mov	r0, r6
 8004e32:	f7fc f81b 	bl	8000e6c <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8004e36:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004e38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e3c:	6363      	str	r3, [r4, #52]	@ 0x34
 8004e3e:	9502      	str	r5, [sp, #8]
 8004e40:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8004e42:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004e46:	6463      	str	r3, [r4, #68]	@ 0x44
 8004e48:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8004e4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e4e:	9302      	str	r3, [sp, #8]
 8004e50:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8004e52:	462a      	mov	r2, r5
 8004e54:	4629      	mov	r1, r5
 8004e56:	2043      	movs	r0, #67	@ 0x43
 8004e58:	f7fb ffe0 	bl	8000e1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8004e5c:	2043      	movs	r0, #67	@ 0x43
 8004e5e:	f7fb ffed 	bl	8000e3c <HAL_NVIC_EnableIRQ>
}
 8004e62:	e7c5      	b.n	8004df0 <HAL_PCD_MspInit+0x18>
 8004e64:	40023800 	.word	0x40023800
 8004e68:	40020000 	.word	0x40020000

08004e6c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004e6c:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8004e6e:	f200 419c 	addw	r1, r0, #1180	@ 0x49c
 8004e72:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8004e76:	f7ff f940 	bl	80040fa <USBD_LL_SetupStage>
}
 8004e7a:	bd08      	pop	{r3, pc}

08004e7c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004e7c:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8004e7e:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8004e82:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8004e86:	f8d3 2260 	ldr.w	r2, [r3, #608]	@ 0x260
 8004e8a:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8004e8e:	f7ff fa07 	bl	80042a0 <USBD_LL_DataOutStage>
}
 8004e92:	bd08      	pop	{r3, pc}

08004e94 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004e94:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8004e96:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8004e9a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8004e9e:	6a1a      	ldr	r2, [r3, #32]
 8004ea0:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8004ea4:	f7ff fa61 	bl	800436a <USBD_LL_DataInStage>
}
 8004ea8:	bd08      	pop	{r3, pc}

08004eaa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004eaa:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8004eac:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8004eb0:	f7ff f9a1 	bl	80041f6 <USBD_LL_SOF>
}
 8004eb4:	bd08      	pop	{r3, pc}

08004eb6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004eb6:	b510      	push	{r4, lr}
 8004eb8:	4604      	mov	r4, r0
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8004eba:	79c1      	ldrb	r1, [r0, #7]
 8004ebc:	b111      	cbz	r1, 8004ec4 <HAL_PCD_ResetCallback+0xe>
  {
    speed = USBD_SPEED_HIGH;
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8004ebe:	2902      	cmp	r1, #2
 8004ec0:	d109      	bne.n	8004ed6 <HAL_PCD_ResetCallback+0x20>
  {
    speed = USBD_SPEED_FULL;
 8004ec2:	2101      	movs	r1, #1
  else
  {
    Error_Handler();
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8004ec4:	f8d4 04e0 	ldr.w	r0, [r4, #1248]	@ 0x4e0
 8004ec8:	f7ff f976 	bl	80041b8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8004ecc:	f8d4 04e0 	ldr.w	r0, [r4, #1248]	@ 0x4e0
 8004ed0:	f7ff f93f 	bl	8004152 <USBD_LL_Reset>
}
 8004ed4:	bd10      	pop	{r4, pc}
    Error_Handler();
 8004ed6:	f7fb fc25 	bl	8000724 <Error_Handler>
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8004eda:	2101      	movs	r1, #1
 8004edc:	e7f2      	b.n	8004ec4 <HAL_PCD_ResetCallback+0xe>
	...

08004ee0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004ee0:	b510      	push	{r4, lr}
 8004ee2:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8004ee4:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8004ee8:	f7ff f969 	bl	80041be <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8004eec:	6822      	ldr	r2, [r4, #0]
 8004eee:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	@ 0xe00
 8004ef2:	f043 0301 	orr.w	r3, r3, #1
 8004ef6:	f8c2 3e00 	str.w	r3, [r2, #3584]	@ 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8004efa:	7ae3      	ldrb	r3, [r4, #11]
 8004efc:	b123      	cbz	r3, 8004f08 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8004efe:	4a03      	ldr	r2, [pc, #12]	@ (8004f0c <HAL_PCD_SuspendCallback+0x2c>)
 8004f00:	6913      	ldr	r3, [r2, #16]
 8004f02:	f043 0306 	orr.w	r3, r3, #6
 8004f06:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8004f08:	bd10      	pop	{r4, pc}
 8004f0a:	bf00      	nop
 8004f0c:	e000ed00 	.word	0xe000ed00

08004f10 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004f10:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8004f12:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8004f16:	f7ff f961 	bl	80041dc <USBD_LL_Resume>
}
 8004f1a:	bd08      	pop	{r3, pc}

08004f1c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004f1c:	b508      	push	{r3, lr}
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8004f1e:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8004f22:	f7ff f990 	bl	8004246 <USBD_LL_IsoOUTIncomplete>
}
 8004f26:	bd08      	pop	{r3, pc}

08004f28 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004f28:	b508      	push	{r3, lr}
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8004f2a:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8004f2e:	f7ff f973 	bl	8004218 <USBD_LL_IsoINIncomplete>
}
 8004f32:	bd08      	pop	{r3, pc}

08004f34 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004f34:	b508      	push	{r3, lr}
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8004f36:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8004f3a:	f7ff f99b 	bl	8004274 <USBD_LL_DevConnected>
}
 8004f3e:	bd08      	pop	{r3, pc}

08004f40 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004f40:	b508      	push	{r3, lr}
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8004f42:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8004f46:	f7ff f997 	bl	8004278 <USBD_LL_DevDisconnected>
}
 8004f4a:	bd08      	pop	{r3, pc}

08004f4c <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8004f4c:	7802      	ldrb	r2, [r0, #0]
 8004f4e:	b10a      	cbz	r2, 8004f54 <USBD_LL_Init+0x8>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  }
  return USBD_OK;
}
 8004f50:	2000      	movs	r0, #0
 8004f52:	4770      	bx	lr
{
 8004f54:	b510      	push	{r4, lr}
 8004f56:	4603      	mov	r3, r0
  hpcd_USB_OTG_FS.pData = pdev;
 8004f58:	4815      	ldr	r0, [pc, #84]	@ (8004fb0 <USBD_LL_Init+0x64>)
 8004f5a:	f8c0 34e0 	str.w	r3, [r0, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8004f5e:	f8c3 02c8 	str.w	r0, [r3, #712]	@ 0x2c8
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8004f62:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004f66:	6003      	str	r3, [r0, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8004f68:	2304      	movs	r3, #4
 8004f6a:	7103      	strb	r3, [r0, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8004f6c:	2202      	movs	r2, #2
 8004f6e:	71c2      	strb	r2, [r0, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8004f70:	2300      	movs	r3, #0
 8004f72:	7183      	strb	r3, [r0, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8004f74:	7242      	strb	r2, [r0, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8004f76:	7283      	strb	r3, [r0, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8004f78:	72c3      	strb	r3, [r0, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8004f7a:	7303      	strb	r3, [r0, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8004f7c:	7383      	strb	r3, [r0, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8004f7e:	73c3      	strb	r3, [r0, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8004f80:	f7fc fcbe 	bl	8001900 <HAL_PCD_Init>
 8004f84:	b980      	cbnz	r0, 8004fa8 <USBD_LL_Init+0x5c>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8004f86:	4c0a      	ldr	r4, [pc, #40]	@ (8004fb0 <USBD_LL_Init+0x64>)
 8004f88:	2180      	movs	r1, #128	@ 0x80
 8004f8a:	4620      	mov	r0, r4
 8004f8c:	f7fd fa6b 	bl	8002466 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8004f90:	2240      	movs	r2, #64	@ 0x40
 8004f92:	2100      	movs	r1, #0
 8004f94:	4620      	mov	r0, r4
 8004f96:	f7fd fa40 	bl	800241a <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8004f9a:	2280      	movs	r2, #128	@ 0x80
 8004f9c:	2101      	movs	r1, #1
 8004f9e:	4620      	mov	r0, r4
 8004fa0:	f7fd fa3b 	bl	800241a <HAL_PCDEx_SetTxFiFo>
}
 8004fa4:	2000      	movs	r0, #0
 8004fa6:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8004fa8:	f7fb fbbc 	bl	8000724 <Error_Handler>
 8004fac:	e7eb      	b.n	8004f86 <USBD_LL_Init+0x3a>
 8004fae:	bf00      	nop
 8004fb0:	20000c60 	.word	0x20000c60

08004fb4 <USBD_LL_IsStallEP>:
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8004fb4:	f8d0 32c8 	ldr.w	r3, [r0, #712]	@ 0x2c8

  if((ep_addr & 0x80) == 0x80)
 8004fb8:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8004fbc:	d108      	bne.n	8004fd0 <USBD_LL_IsStallEP+0x1c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8004fbe:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8004fc2:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8004fc6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8004fca:	f893 0256 	ldrb.w	r0, [r3, #598]	@ 0x256
  }
}
 8004fce:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8004fd0:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8004fd4:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8004fd8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8004fdc:	7d98      	ldrb	r0, [r3, #22]
 8004fde:	4770      	bx	lr

08004fe0 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_DFU_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 8004fe0:	4800      	ldr	r0, [pc, #0]	@ (8004fe4 <USBD_static_malloc+0x4>)
 8004fe2:	4770      	bx	lr
 8004fe4:	2000083c 	.word	0x2000083c

08004fe8 <USBD_static_free>:
  * @retval None
  */
void USBD_static_free(void *p)
{

}
 8004fe8:	4770      	bx	lr

08004fea <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8004fea:	2803      	cmp	r0, #3
 8004fec:	d805      	bhi.n	8004ffa <USBD_Get_USB_Status+0x10>
 8004fee:	e8df f000 	tbb	[pc, r0]
 8004ff2:	0405      	.short	0x0405
 8004ff4:	0502      	.short	0x0502
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8004ff6:	2001      	movs	r0, #1
    break;
 8004ff8:	4770      	bx	lr
      usb_status = USBD_FAIL;
 8004ffa:	2003      	movs	r0, #3
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8004ffc:	4770      	bx	lr

08004ffe <USBD_LL_Start>:
{
 8004ffe:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8005000:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8005004:	f7fc fcfd 	bl	8001a02 <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005008:	f7ff ffef 	bl	8004fea <USBD_Get_USB_Status>
}
 800500c:	bd08      	pop	{r3, pc}

0800500e <USBD_LL_Stop>:
{
 800500e:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Stop(pdev->pData);
 8005010:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8005014:	f7fc fd17 	bl	8001a46 <HAL_PCD_Stop>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005018:	f7ff ffe7 	bl	8004fea <USBD_Get_USB_Status>
}
 800501c:	bd08      	pop	{r3, pc}

0800501e <USBD_LL_OpenEP>:
{
 800501e:	b508      	push	{r3, lr}
 8005020:	4694      	mov	ip, r2
 8005022:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8005024:	4663      	mov	r3, ip
 8005026:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800502a:	f7fc fdf0 	bl	8001c0e <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800502e:	f7ff ffdc 	bl	8004fea <USBD_Get_USB_Status>
}
 8005032:	bd08      	pop	{r3, pc}

08005034 <USBD_LL_StallEP>:
{
 8005034:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8005036:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800503a:	f7fc fe78 	bl	8001d2e <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800503e:	f7ff ffd4 	bl	8004fea <USBD_Get_USB_Status>
}
 8005042:	bd08      	pop	{r3, pc}

08005044 <USBD_LL_ClearStallEP>:
{
 8005044:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8005046:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800504a:	f7fc feb3 	bl	8001db4 <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800504e:	f7ff ffcc 	bl	8004fea <USBD_Get_USB_Status>
}
 8005052:	bd08      	pop	{r3, pc}

08005054 <USBD_LL_SetUSBAddress>:
{
 8005054:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8005056:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800505a:	f7fc fdc5 	bl	8001be8 <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800505e:	f7ff ffc4 	bl	8004fea <USBD_Get_USB_Status>
}
 8005062:	bd08      	pop	{r3, pc}

08005064 <USBD_LL_Transmit>:
{
 8005064:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8005066:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800506a:	f7fc fe3b 	bl	8001ce4 <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800506e:	f7ff ffbc 	bl	8004fea <USBD_Get_USB_Status>
}
 8005072:	bd08      	pop	{r3, pc}

08005074 <USBD_LL_PrepareReceive>:
{
 8005074:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8005076:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800507a:	f7fc fe0e 	bl	8001c9a <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800507e:	f7ff ffb4 	bl	8004fea <USBD_Get_USB_Status>
}
 8005082:	bd08      	pop	{r3, pc}

08005084 <std>:
 8005084:	2300      	movs	r3, #0
 8005086:	b510      	push	{r4, lr}
 8005088:	4604      	mov	r4, r0
 800508a:	e9c0 3300 	strd	r3, r3, [r0]
 800508e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005092:	6083      	str	r3, [r0, #8]
 8005094:	8181      	strh	r1, [r0, #12]
 8005096:	6643      	str	r3, [r0, #100]	@ 0x64
 8005098:	81c2      	strh	r2, [r0, #14]
 800509a:	6183      	str	r3, [r0, #24]
 800509c:	4619      	mov	r1, r3
 800509e:	2208      	movs	r2, #8
 80050a0:	305c      	adds	r0, #92	@ 0x5c
 80050a2:	f000 f906 	bl	80052b2 <memset>
 80050a6:	4b0d      	ldr	r3, [pc, #52]	@ (80050dc <std+0x58>)
 80050a8:	6263      	str	r3, [r4, #36]	@ 0x24
 80050aa:	4b0d      	ldr	r3, [pc, #52]	@ (80050e0 <std+0x5c>)
 80050ac:	62a3      	str	r3, [r4, #40]	@ 0x28
 80050ae:	4b0d      	ldr	r3, [pc, #52]	@ (80050e4 <std+0x60>)
 80050b0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80050b2:	4b0d      	ldr	r3, [pc, #52]	@ (80050e8 <std+0x64>)
 80050b4:	6323      	str	r3, [r4, #48]	@ 0x30
 80050b6:	4b0d      	ldr	r3, [pc, #52]	@ (80050ec <std+0x68>)
 80050b8:	6224      	str	r4, [r4, #32]
 80050ba:	429c      	cmp	r4, r3
 80050bc:	d006      	beq.n	80050cc <std+0x48>
 80050be:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80050c2:	4294      	cmp	r4, r2
 80050c4:	d002      	beq.n	80050cc <std+0x48>
 80050c6:	33d0      	adds	r3, #208	@ 0xd0
 80050c8:	429c      	cmp	r4, r3
 80050ca:	d105      	bne.n	80050d8 <std+0x54>
 80050cc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80050d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050d4:	f000 b966 	b.w	80053a4 <__retarget_lock_init_recursive>
 80050d8:	bd10      	pop	{r4, pc}
 80050da:	bf00      	nop
 80050dc:	0800522d 	.word	0x0800522d
 80050e0:	0800524f 	.word	0x0800524f
 80050e4:	08005287 	.word	0x08005287
 80050e8:	080052ab 	.word	0x080052ab
 80050ec:	20001144 	.word	0x20001144

080050f0 <stdio_exit_handler>:
 80050f0:	4a02      	ldr	r2, [pc, #8]	@ (80050fc <stdio_exit_handler+0xc>)
 80050f2:	4903      	ldr	r1, [pc, #12]	@ (8005100 <stdio_exit_handler+0x10>)
 80050f4:	4803      	ldr	r0, [pc, #12]	@ (8005104 <stdio_exit_handler+0x14>)
 80050f6:	f000 b869 	b.w	80051cc <_fwalk_sglue>
 80050fa:	bf00      	nop
 80050fc:	200000e0 	.word	0x200000e0
 8005100:	08005c41 	.word	0x08005c41
 8005104:	200000f0 	.word	0x200000f0

08005108 <cleanup_stdio>:
 8005108:	6841      	ldr	r1, [r0, #4]
 800510a:	4b0c      	ldr	r3, [pc, #48]	@ (800513c <cleanup_stdio+0x34>)
 800510c:	4299      	cmp	r1, r3
 800510e:	b510      	push	{r4, lr}
 8005110:	4604      	mov	r4, r0
 8005112:	d001      	beq.n	8005118 <cleanup_stdio+0x10>
 8005114:	f000 fd94 	bl	8005c40 <_fflush_r>
 8005118:	68a1      	ldr	r1, [r4, #8]
 800511a:	4b09      	ldr	r3, [pc, #36]	@ (8005140 <cleanup_stdio+0x38>)
 800511c:	4299      	cmp	r1, r3
 800511e:	d002      	beq.n	8005126 <cleanup_stdio+0x1e>
 8005120:	4620      	mov	r0, r4
 8005122:	f000 fd8d 	bl	8005c40 <_fflush_r>
 8005126:	68e1      	ldr	r1, [r4, #12]
 8005128:	4b06      	ldr	r3, [pc, #24]	@ (8005144 <cleanup_stdio+0x3c>)
 800512a:	4299      	cmp	r1, r3
 800512c:	d004      	beq.n	8005138 <cleanup_stdio+0x30>
 800512e:	4620      	mov	r0, r4
 8005130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005134:	f000 bd84 	b.w	8005c40 <_fflush_r>
 8005138:	bd10      	pop	{r4, pc}
 800513a:	bf00      	nop
 800513c:	20001144 	.word	0x20001144
 8005140:	200011ac 	.word	0x200011ac
 8005144:	20001214 	.word	0x20001214

08005148 <global_stdio_init.part.0>:
 8005148:	b510      	push	{r4, lr}
 800514a:	4b0b      	ldr	r3, [pc, #44]	@ (8005178 <global_stdio_init.part.0+0x30>)
 800514c:	4c0b      	ldr	r4, [pc, #44]	@ (800517c <global_stdio_init.part.0+0x34>)
 800514e:	4a0c      	ldr	r2, [pc, #48]	@ (8005180 <global_stdio_init.part.0+0x38>)
 8005150:	601a      	str	r2, [r3, #0]
 8005152:	4620      	mov	r0, r4
 8005154:	2200      	movs	r2, #0
 8005156:	2104      	movs	r1, #4
 8005158:	f7ff ff94 	bl	8005084 <std>
 800515c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005160:	2201      	movs	r2, #1
 8005162:	2109      	movs	r1, #9
 8005164:	f7ff ff8e 	bl	8005084 <std>
 8005168:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800516c:	2202      	movs	r2, #2
 800516e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005172:	2112      	movs	r1, #18
 8005174:	f7ff bf86 	b.w	8005084 <std>
 8005178:	2000127c 	.word	0x2000127c
 800517c:	20001144 	.word	0x20001144
 8005180:	080050f1 	.word	0x080050f1

08005184 <__sfp_lock_acquire>:
 8005184:	4801      	ldr	r0, [pc, #4]	@ (800518c <__sfp_lock_acquire+0x8>)
 8005186:	f000 b90e 	b.w	80053a6 <__retarget_lock_acquire_recursive>
 800518a:	bf00      	nop
 800518c:	20001285 	.word	0x20001285

08005190 <__sfp_lock_release>:
 8005190:	4801      	ldr	r0, [pc, #4]	@ (8005198 <__sfp_lock_release+0x8>)
 8005192:	f000 b909 	b.w	80053a8 <__retarget_lock_release_recursive>
 8005196:	bf00      	nop
 8005198:	20001285 	.word	0x20001285

0800519c <__sinit>:
 800519c:	b510      	push	{r4, lr}
 800519e:	4604      	mov	r4, r0
 80051a0:	f7ff fff0 	bl	8005184 <__sfp_lock_acquire>
 80051a4:	6a23      	ldr	r3, [r4, #32]
 80051a6:	b11b      	cbz	r3, 80051b0 <__sinit+0x14>
 80051a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051ac:	f7ff bff0 	b.w	8005190 <__sfp_lock_release>
 80051b0:	4b04      	ldr	r3, [pc, #16]	@ (80051c4 <__sinit+0x28>)
 80051b2:	6223      	str	r3, [r4, #32]
 80051b4:	4b04      	ldr	r3, [pc, #16]	@ (80051c8 <__sinit+0x2c>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d1f5      	bne.n	80051a8 <__sinit+0xc>
 80051bc:	f7ff ffc4 	bl	8005148 <global_stdio_init.part.0>
 80051c0:	e7f2      	b.n	80051a8 <__sinit+0xc>
 80051c2:	bf00      	nop
 80051c4:	08005109 	.word	0x08005109
 80051c8:	2000127c 	.word	0x2000127c

080051cc <_fwalk_sglue>:
 80051cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051d0:	4607      	mov	r7, r0
 80051d2:	4688      	mov	r8, r1
 80051d4:	4614      	mov	r4, r2
 80051d6:	2600      	movs	r6, #0
 80051d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80051dc:	f1b9 0901 	subs.w	r9, r9, #1
 80051e0:	d505      	bpl.n	80051ee <_fwalk_sglue+0x22>
 80051e2:	6824      	ldr	r4, [r4, #0]
 80051e4:	2c00      	cmp	r4, #0
 80051e6:	d1f7      	bne.n	80051d8 <_fwalk_sglue+0xc>
 80051e8:	4630      	mov	r0, r6
 80051ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051ee:	89ab      	ldrh	r3, [r5, #12]
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d907      	bls.n	8005204 <_fwalk_sglue+0x38>
 80051f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80051f8:	3301      	adds	r3, #1
 80051fa:	d003      	beq.n	8005204 <_fwalk_sglue+0x38>
 80051fc:	4629      	mov	r1, r5
 80051fe:	4638      	mov	r0, r7
 8005200:	47c0      	blx	r8
 8005202:	4306      	orrs	r6, r0
 8005204:	3568      	adds	r5, #104	@ 0x68
 8005206:	e7e9      	b.n	80051dc <_fwalk_sglue+0x10>

08005208 <iprintf>:
 8005208:	b40f      	push	{r0, r1, r2, r3}
 800520a:	b507      	push	{r0, r1, r2, lr}
 800520c:	4906      	ldr	r1, [pc, #24]	@ (8005228 <iprintf+0x20>)
 800520e:	ab04      	add	r3, sp, #16
 8005210:	6808      	ldr	r0, [r1, #0]
 8005212:	f853 2b04 	ldr.w	r2, [r3], #4
 8005216:	6881      	ldr	r1, [r0, #8]
 8005218:	9301      	str	r3, [sp, #4]
 800521a:	f000 f9e9 	bl	80055f0 <_vfiprintf_r>
 800521e:	b003      	add	sp, #12
 8005220:	f85d eb04 	ldr.w	lr, [sp], #4
 8005224:	b004      	add	sp, #16
 8005226:	4770      	bx	lr
 8005228:	200000ec 	.word	0x200000ec

0800522c <__sread>:
 800522c:	b510      	push	{r4, lr}
 800522e:	460c      	mov	r4, r1
 8005230:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005234:	f000 f868 	bl	8005308 <_read_r>
 8005238:	2800      	cmp	r0, #0
 800523a:	bfab      	itete	ge
 800523c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800523e:	89a3      	ldrhlt	r3, [r4, #12]
 8005240:	181b      	addge	r3, r3, r0
 8005242:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005246:	bfac      	ite	ge
 8005248:	6563      	strge	r3, [r4, #84]	@ 0x54
 800524a:	81a3      	strhlt	r3, [r4, #12]
 800524c:	bd10      	pop	{r4, pc}

0800524e <__swrite>:
 800524e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005252:	461f      	mov	r7, r3
 8005254:	898b      	ldrh	r3, [r1, #12]
 8005256:	05db      	lsls	r3, r3, #23
 8005258:	4605      	mov	r5, r0
 800525a:	460c      	mov	r4, r1
 800525c:	4616      	mov	r6, r2
 800525e:	d505      	bpl.n	800526c <__swrite+0x1e>
 8005260:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005264:	2302      	movs	r3, #2
 8005266:	2200      	movs	r2, #0
 8005268:	f000 f83c 	bl	80052e4 <_lseek_r>
 800526c:	89a3      	ldrh	r3, [r4, #12]
 800526e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005272:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005276:	81a3      	strh	r3, [r4, #12]
 8005278:	4632      	mov	r2, r6
 800527a:	463b      	mov	r3, r7
 800527c:	4628      	mov	r0, r5
 800527e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005282:	f000 b853 	b.w	800532c <_write_r>

08005286 <__sseek>:
 8005286:	b510      	push	{r4, lr}
 8005288:	460c      	mov	r4, r1
 800528a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800528e:	f000 f829 	bl	80052e4 <_lseek_r>
 8005292:	1c43      	adds	r3, r0, #1
 8005294:	89a3      	ldrh	r3, [r4, #12]
 8005296:	bf15      	itete	ne
 8005298:	6560      	strne	r0, [r4, #84]	@ 0x54
 800529a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800529e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80052a2:	81a3      	strheq	r3, [r4, #12]
 80052a4:	bf18      	it	ne
 80052a6:	81a3      	strhne	r3, [r4, #12]
 80052a8:	bd10      	pop	{r4, pc}

080052aa <__sclose>:
 80052aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052ae:	f000 b809 	b.w	80052c4 <_close_r>

080052b2 <memset>:
 80052b2:	4402      	add	r2, r0
 80052b4:	4603      	mov	r3, r0
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d100      	bne.n	80052bc <memset+0xa>
 80052ba:	4770      	bx	lr
 80052bc:	f803 1b01 	strb.w	r1, [r3], #1
 80052c0:	e7f9      	b.n	80052b6 <memset+0x4>
	...

080052c4 <_close_r>:
 80052c4:	b538      	push	{r3, r4, r5, lr}
 80052c6:	4d06      	ldr	r5, [pc, #24]	@ (80052e0 <_close_r+0x1c>)
 80052c8:	2300      	movs	r3, #0
 80052ca:	4604      	mov	r4, r0
 80052cc:	4608      	mov	r0, r1
 80052ce:	602b      	str	r3, [r5, #0]
 80052d0:	f7fb fc86 	bl	8000be0 <_close>
 80052d4:	1c43      	adds	r3, r0, #1
 80052d6:	d102      	bne.n	80052de <_close_r+0x1a>
 80052d8:	682b      	ldr	r3, [r5, #0]
 80052da:	b103      	cbz	r3, 80052de <_close_r+0x1a>
 80052dc:	6023      	str	r3, [r4, #0]
 80052de:	bd38      	pop	{r3, r4, r5, pc}
 80052e0:	20001280 	.word	0x20001280

080052e4 <_lseek_r>:
 80052e4:	b538      	push	{r3, r4, r5, lr}
 80052e6:	4d07      	ldr	r5, [pc, #28]	@ (8005304 <_lseek_r+0x20>)
 80052e8:	4604      	mov	r4, r0
 80052ea:	4608      	mov	r0, r1
 80052ec:	4611      	mov	r1, r2
 80052ee:	2200      	movs	r2, #0
 80052f0:	602a      	str	r2, [r5, #0]
 80052f2:	461a      	mov	r2, r3
 80052f4:	f7fb fc7e 	bl	8000bf4 <_lseek>
 80052f8:	1c43      	adds	r3, r0, #1
 80052fa:	d102      	bne.n	8005302 <_lseek_r+0x1e>
 80052fc:	682b      	ldr	r3, [r5, #0]
 80052fe:	b103      	cbz	r3, 8005302 <_lseek_r+0x1e>
 8005300:	6023      	str	r3, [r4, #0]
 8005302:	bd38      	pop	{r3, r4, r5, pc}
 8005304:	20001280 	.word	0x20001280

08005308 <_read_r>:
 8005308:	b538      	push	{r3, r4, r5, lr}
 800530a:	4d07      	ldr	r5, [pc, #28]	@ (8005328 <_read_r+0x20>)
 800530c:	4604      	mov	r4, r0
 800530e:	4608      	mov	r0, r1
 8005310:	4611      	mov	r1, r2
 8005312:	2200      	movs	r2, #0
 8005314:	602a      	str	r2, [r5, #0]
 8005316:	461a      	mov	r2, r3
 8005318:	f7fb fc44 	bl	8000ba4 <_read>
 800531c:	1c43      	adds	r3, r0, #1
 800531e:	d102      	bne.n	8005326 <_read_r+0x1e>
 8005320:	682b      	ldr	r3, [r5, #0]
 8005322:	b103      	cbz	r3, 8005326 <_read_r+0x1e>
 8005324:	6023      	str	r3, [r4, #0]
 8005326:	bd38      	pop	{r3, r4, r5, pc}
 8005328:	20001280 	.word	0x20001280

0800532c <_write_r>:
 800532c:	b538      	push	{r3, r4, r5, lr}
 800532e:	4d07      	ldr	r5, [pc, #28]	@ (800534c <_write_r+0x20>)
 8005330:	4604      	mov	r4, r0
 8005332:	4608      	mov	r0, r1
 8005334:	4611      	mov	r1, r2
 8005336:	2200      	movs	r2, #0
 8005338:	602a      	str	r2, [r5, #0]
 800533a:	461a      	mov	r2, r3
 800533c:	f7fb fc42 	bl	8000bc4 <_write>
 8005340:	1c43      	adds	r3, r0, #1
 8005342:	d102      	bne.n	800534a <_write_r+0x1e>
 8005344:	682b      	ldr	r3, [r5, #0]
 8005346:	b103      	cbz	r3, 800534a <_write_r+0x1e>
 8005348:	6023      	str	r3, [r4, #0]
 800534a:	bd38      	pop	{r3, r4, r5, pc}
 800534c:	20001280 	.word	0x20001280

08005350 <__errno>:
 8005350:	4b01      	ldr	r3, [pc, #4]	@ (8005358 <__errno+0x8>)
 8005352:	6818      	ldr	r0, [r3, #0]
 8005354:	4770      	bx	lr
 8005356:	bf00      	nop
 8005358:	200000ec 	.word	0x200000ec

0800535c <__libc_init_array>:
 800535c:	b570      	push	{r4, r5, r6, lr}
 800535e:	4d0d      	ldr	r5, [pc, #52]	@ (8005394 <__libc_init_array+0x38>)
 8005360:	4c0d      	ldr	r4, [pc, #52]	@ (8005398 <__libc_init_array+0x3c>)
 8005362:	1b64      	subs	r4, r4, r5
 8005364:	10a4      	asrs	r4, r4, #2
 8005366:	2600      	movs	r6, #0
 8005368:	42a6      	cmp	r6, r4
 800536a:	d109      	bne.n	8005380 <__libc_init_array+0x24>
 800536c:	4d0b      	ldr	r5, [pc, #44]	@ (800539c <__libc_init_array+0x40>)
 800536e:	4c0c      	ldr	r4, [pc, #48]	@ (80053a0 <__libc_init_array+0x44>)
 8005370:	f000 fdb6 	bl	8005ee0 <_init>
 8005374:	1b64      	subs	r4, r4, r5
 8005376:	10a4      	asrs	r4, r4, #2
 8005378:	2600      	movs	r6, #0
 800537a:	42a6      	cmp	r6, r4
 800537c:	d105      	bne.n	800538a <__libc_init_array+0x2e>
 800537e:	bd70      	pop	{r4, r5, r6, pc}
 8005380:	f855 3b04 	ldr.w	r3, [r5], #4
 8005384:	4798      	blx	r3
 8005386:	3601      	adds	r6, #1
 8005388:	e7ee      	b.n	8005368 <__libc_init_array+0xc>
 800538a:	f855 3b04 	ldr.w	r3, [r5], #4
 800538e:	4798      	blx	r3
 8005390:	3601      	adds	r6, #1
 8005392:	e7f2      	b.n	800537a <__libc_init_array+0x1e>
 8005394:	08006010 	.word	0x08006010
 8005398:	08006010 	.word	0x08006010
 800539c:	08006010 	.word	0x08006010
 80053a0:	08006014 	.word	0x08006014

080053a4 <__retarget_lock_init_recursive>:
 80053a4:	4770      	bx	lr

080053a6 <__retarget_lock_acquire_recursive>:
 80053a6:	4770      	bx	lr

080053a8 <__retarget_lock_release_recursive>:
 80053a8:	4770      	bx	lr
	...

080053ac <_free_r>:
 80053ac:	b538      	push	{r3, r4, r5, lr}
 80053ae:	4605      	mov	r5, r0
 80053b0:	2900      	cmp	r1, #0
 80053b2:	d041      	beq.n	8005438 <_free_r+0x8c>
 80053b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053b8:	1f0c      	subs	r4, r1, #4
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	bfb8      	it	lt
 80053be:	18e4      	addlt	r4, r4, r3
 80053c0:	f000 f8e0 	bl	8005584 <__malloc_lock>
 80053c4:	4a1d      	ldr	r2, [pc, #116]	@ (800543c <_free_r+0x90>)
 80053c6:	6813      	ldr	r3, [r2, #0]
 80053c8:	b933      	cbnz	r3, 80053d8 <_free_r+0x2c>
 80053ca:	6063      	str	r3, [r4, #4]
 80053cc:	6014      	str	r4, [r2, #0]
 80053ce:	4628      	mov	r0, r5
 80053d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80053d4:	f000 b8dc 	b.w	8005590 <__malloc_unlock>
 80053d8:	42a3      	cmp	r3, r4
 80053da:	d908      	bls.n	80053ee <_free_r+0x42>
 80053dc:	6820      	ldr	r0, [r4, #0]
 80053de:	1821      	adds	r1, r4, r0
 80053e0:	428b      	cmp	r3, r1
 80053e2:	bf01      	itttt	eq
 80053e4:	6819      	ldreq	r1, [r3, #0]
 80053e6:	685b      	ldreq	r3, [r3, #4]
 80053e8:	1809      	addeq	r1, r1, r0
 80053ea:	6021      	streq	r1, [r4, #0]
 80053ec:	e7ed      	b.n	80053ca <_free_r+0x1e>
 80053ee:	461a      	mov	r2, r3
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	b10b      	cbz	r3, 80053f8 <_free_r+0x4c>
 80053f4:	42a3      	cmp	r3, r4
 80053f6:	d9fa      	bls.n	80053ee <_free_r+0x42>
 80053f8:	6811      	ldr	r1, [r2, #0]
 80053fa:	1850      	adds	r0, r2, r1
 80053fc:	42a0      	cmp	r0, r4
 80053fe:	d10b      	bne.n	8005418 <_free_r+0x6c>
 8005400:	6820      	ldr	r0, [r4, #0]
 8005402:	4401      	add	r1, r0
 8005404:	1850      	adds	r0, r2, r1
 8005406:	4283      	cmp	r3, r0
 8005408:	6011      	str	r1, [r2, #0]
 800540a:	d1e0      	bne.n	80053ce <_free_r+0x22>
 800540c:	6818      	ldr	r0, [r3, #0]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	6053      	str	r3, [r2, #4]
 8005412:	4408      	add	r0, r1
 8005414:	6010      	str	r0, [r2, #0]
 8005416:	e7da      	b.n	80053ce <_free_r+0x22>
 8005418:	d902      	bls.n	8005420 <_free_r+0x74>
 800541a:	230c      	movs	r3, #12
 800541c:	602b      	str	r3, [r5, #0]
 800541e:	e7d6      	b.n	80053ce <_free_r+0x22>
 8005420:	6820      	ldr	r0, [r4, #0]
 8005422:	1821      	adds	r1, r4, r0
 8005424:	428b      	cmp	r3, r1
 8005426:	bf04      	itt	eq
 8005428:	6819      	ldreq	r1, [r3, #0]
 800542a:	685b      	ldreq	r3, [r3, #4]
 800542c:	6063      	str	r3, [r4, #4]
 800542e:	bf04      	itt	eq
 8005430:	1809      	addeq	r1, r1, r0
 8005432:	6021      	streq	r1, [r4, #0]
 8005434:	6054      	str	r4, [r2, #4]
 8005436:	e7ca      	b.n	80053ce <_free_r+0x22>
 8005438:	bd38      	pop	{r3, r4, r5, pc}
 800543a:	bf00      	nop
 800543c:	2000128c 	.word	0x2000128c

08005440 <sbrk_aligned>:
 8005440:	b570      	push	{r4, r5, r6, lr}
 8005442:	4e0f      	ldr	r6, [pc, #60]	@ (8005480 <sbrk_aligned+0x40>)
 8005444:	460c      	mov	r4, r1
 8005446:	6831      	ldr	r1, [r6, #0]
 8005448:	4605      	mov	r5, r0
 800544a:	b911      	cbnz	r1, 8005452 <sbrk_aligned+0x12>
 800544c:	f000 fcb4 	bl	8005db8 <_sbrk_r>
 8005450:	6030      	str	r0, [r6, #0]
 8005452:	4621      	mov	r1, r4
 8005454:	4628      	mov	r0, r5
 8005456:	f000 fcaf 	bl	8005db8 <_sbrk_r>
 800545a:	1c43      	adds	r3, r0, #1
 800545c:	d103      	bne.n	8005466 <sbrk_aligned+0x26>
 800545e:	f04f 34ff 	mov.w	r4, #4294967295
 8005462:	4620      	mov	r0, r4
 8005464:	bd70      	pop	{r4, r5, r6, pc}
 8005466:	1cc4      	adds	r4, r0, #3
 8005468:	f024 0403 	bic.w	r4, r4, #3
 800546c:	42a0      	cmp	r0, r4
 800546e:	d0f8      	beq.n	8005462 <sbrk_aligned+0x22>
 8005470:	1a21      	subs	r1, r4, r0
 8005472:	4628      	mov	r0, r5
 8005474:	f000 fca0 	bl	8005db8 <_sbrk_r>
 8005478:	3001      	adds	r0, #1
 800547a:	d1f2      	bne.n	8005462 <sbrk_aligned+0x22>
 800547c:	e7ef      	b.n	800545e <sbrk_aligned+0x1e>
 800547e:	bf00      	nop
 8005480:	20001288 	.word	0x20001288

08005484 <_malloc_r>:
 8005484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005488:	1ccd      	adds	r5, r1, #3
 800548a:	f025 0503 	bic.w	r5, r5, #3
 800548e:	3508      	adds	r5, #8
 8005490:	2d0c      	cmp	r5, #12
 8005492:	bf38      	it	cc
 8005494:	250c      	movcc	r5, #12
 8005496:	2d00      	cmp	r5, #0
 8005498:	4606      	mov	r6, r0
 800549a:	db01      	blt.n	80054a0 <_malloc_r+0x1c>
 800549c:	42a9      	cmp	r1, r5
 800549e:	d904      	bls.n	80054aa <_malloc_r+0x26>
 80054a0:	230c      	movs	r3, #12
 80054a2:	6033      	str	r3, [r6, #0]
 80054a4:	2000      	movs	r0, #0
 80054a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005580 <_malloc_r+0xfc>
 80054ae:	f000 f869 	bl	8005584 <__malloc_lock>
 80054b2:	f8d8 3000 	ldr.w	r3, [r8]
 80054b6:	461c      	mov	r4, r3
 80054b8:	bb44      	cbnz	r4, 800550c <_malloc_r+0x88>
 80054ba:	4629      	mov	r1, r5
 80054bc:	4630      	mov	r0, r6
 80054be:	f7ff ffbf 	bl	8005440 <sbrk_aligned>
 80054c2:	1c43      	adds	r3, r0, #1
 80054c4:	4604      	mov	r4, r0
 80054c6:	d158      	bne.n	800557a <_malloc_r+0xf6>
 80054c8:	f8d8 4000 	ldr.w	r4, [r8]
 80054cc:	4627      	mov	r7, r4
 80054ce:	2f00      	cmp	r7, #0
 80054d0:	d143      	bne.n	800555a <_malloc_r+0xd6>
 80054d2:	2c00      	cmp	r4, #0
 80054d4:	d04b      	beq.n	800556e <_malloc_r+0xea>
 80054d6:	6823      	ldr	r3, [r4, #0]
 80054d8:	4639      	mov	r1, r7
 80054da:	4630      	mov	r0, r6
 80054dc:	eb04 0903 	add.w	r9, r4, r3
 80054e0:	f000 fc6a 	bl	8005db8 <_sbrk_r>
 80054e4:	4581      	cmp	r9, r0
 80054e6:	d142      	bne.n	800556e <_malloc_r+0xea>
 80054e8:	6821      	ldr	r1, [r4, #0]
 80054ea:	1a6d      	subs	r5, r5, r1
 80054ec:	4629      	mov	r1, r5
 80054ee:	4630      	mov	r0, r6
 80054f0:	f7ff ffa6 	bl	8005440 <sbrk_aligned>
 80054f4:	3001      	adds	r0, #1
 80054f6:	d03a      	beq.n	800556e <_malloc_r+0xea>
 80054f8:	6823      	ldr	r3, [r4, #0]
 80054fa:	442b      	add	r3, r5
 80054fc:	6023      	str	r3, [r4, #0]
 80054fe:	f8d8 3000 	ldr.w	r3, [r8]
 8005502:	685a      	ldr	r2, [r3, #4]
 8005504:	bb62      	cbnz	r2, 8005560 <_malloc_r+0xdc>
 8005506:	f8c8 7000 	str.w	r7, [r8]
 800550a:	e00f      	b.n	800552c <_malloc_r+0xa8>
 800550c:	6822      	ldr	r2, [r4, #0]
 800550e:	1b52      	subs	r2, r2, r5
 8005510:	d420      	bmi.n	8005554 <_malloc_r+0xd0>
 8005512:	2a0b      	cmp	r2, #11
 8005514:	d917      	bls.n	8005546 <_malloc_r+0xc2>
 8005516:	1961      	adds	r1, r4, r5
 8005518:	42a3      	cmp	r3, r4
 800551a:	6025      	str	r5, [r4, #0]
 800551c:	bf18      	it	ne
 800551e:	6059      	strne	r1, [r3, #4]
 8005520:	6863      	ldr	r3, [r4, #4]
 8005522:	bf08      	it	eq
 8005524:	f8c8 1000 	streq.w	r1, [r8]
 8005528:	5162      	str	r2, [r4, r5]
 800552a:	604b      	str	r3, [r1, #4]
 800552c:	4630      	mov	r0, r6
 800552e:	f000 f82f 	bl	8005590 <__malloc_unlock>
 8005532:	f104 000b 	add.w	r0, r4, #11
 8005536:	1d23      	adds	r3, r4, #4
 8005538:	f020 0007 	bic.w	r0, r0, #7
 800553c:	1ac2      	subs	r2, r0, r3
 800553e:	bf1c      	itt	ne
 8005540:	1a1b      	subne	r3, r3, r0
 8005542:	50a3      	strne	r3, [r4, r2]
 8005544:	e7af      	b.n	80054a6 <_malloc_r+0x22>
 8005546:	6862      	ldr	r2, [r4, #4]
 8005548:	42a3      	cmp	r3, r4
 800554a:	bf0c      	ite	eq
 800554c:	f8c8 2000 	streq.w	r2, [r8]
 8005550:	605a      	strne	r2, [r3, #4]
 8005552:	e7eb      	b.n	800552c <_malloc_r+0xa8>
 8005554:	4623      	mov	r3, r4
 8005556:	6864      	ldr	r4, [r4, #4]
 8005558:	e7ae      	b.n	80054b8 <_malloc_r+0x34>
 800555a:	463c      	mov	r4, r7
 800555c:	687f      	ldr	r7, [r7, #4]
 800555e:	e7b6      	b.n	80054ce <_malloc_r+0x4a>
 8005560:	461a      	mov	r2, r3
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	42a3      	cmp	r3, r4
 8005566:	d1fb      	bne.n	8005560 <_malloc_r+0xdc>
 8005568:	2300      	movs	r3, #0
 800556a:	6053      	str	r3, [r2, #4]
 800556c:	e7de      	b.n	800552c <_malloc_r+0xa8>
 800556e:	230c      	movs	r3, #12
 8005570:	6033      	str	r3, [r6, #0]
 8005572:	4630      	mov	r0, r6
 8005574:	f000 f80c 	bl	8005590 <__malloc_unlock>
 8005578:	e794      	b.n	80054a4 <_malloc_r+0x20>
 800557a:	6005      	str	r5, [r0, #0]
 800557c:	e7d6      	b.n	800552c <_malloc_r+0xa8>
 800557e:	bf00      	nop
 8005580:	2000128c 	.word	0x2000128c

08005584 <__malloc_lock>:
 8005584:	4801      	ldr	r0, [pc, #4]	@ (800558c <__malloc_lock+0x8>)
 8005586:	f7ff bf0e 	b.w	80053a6 <__retarget_lock_acquire_recursive>
 800558a:	bf00      	nop
 800558c:	20001284 	.word	0x20001284

08005590 <__malloc_unlock>:
 8005590:	4801      	ldr	r0, [pc, #4]	@ (8005598 <__malloc_unlock+0x8>)
 8005592:	f7ff bf09 	b.w	80053a8 <__retarget_lock_release_recursive>
 8005596:	bf00      	nop
 8005598:	20001284 	.word	0x20001284

0800559c <__sfputc_r>:
 800559c:	6893      	ldr	r3, [r2, #8]
 800559e:	3b01      	subs	r3, #1
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	b410      	push	{r4}
 80055a4:	6093      	str	r3, [r2, #8]
 80055a6:	da08      	bge.n	80055ba <__sfputc_r+0x1e>
 80055a8:	6994      	ldr	r4, [r2, #24]
 80055aa:	42a3      	cmp	r3, r4
 80055ac:	db01      	blt.n	80055b2 <__sfputc_r+0x16>
 80055ae:	290a      	cmp	r1, #10
 80055b0:	d103      	bne.n	80055ba <__sfputc_r+0x1e>
 80055b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80055b6:	f000 bb6b 	b.w	8005c90 <__swbuf_r>
 80055ba:	6813      	ldr	r3, [r2, #0]
 80055bc:	1c58      	adds	r0, r3, #1
 80055be:	6010      	str	r0, [r2, #0]
 80055c0:	7019      	strb	r1, [r3, #0]
 80055c2:	4608      	mov	r0, r1
 80055c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80055c8:	4770      	bx	lr

080055ca <__sfputs_r>:
 80055ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055cc:	4606      	mov	r6, r0
 80055ce:	460f      	mov	r7, r1
 80055d0:	4614      	mov	r4, r2
 80055d2:	18d5      	adds	r5, r2, r3
 80055d4:	42ac      	cmp	r4, r5
 80055d6:	d101      	bne.n	80055dc <__sfputs_r+0x12>
 80055d8:	2000      	movs	r0, #0
 80055da:	e007      	b.n	80055ec <__sfputs_r+0x22>
 80055dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055e0:	463a      	mov	r2, r7
 80055e2:	4630      	mov	r0, r6
 80055e4:	f7ff ffda 	bl	800559c <__sfputc_r>
 80055e8:	1c43      	adds	r3, r0, #1
 80055ea:	d1f3      	bne.n	80055d4 <__sfputs_r+0xa>
 80055ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080055f0 <_vfiprintf_r>:
 80055f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055f4:	460d      	mov	r5, r1
 80055f6:	b09d      	sub	sp, #116	@ 0x74
 80055f8:	4614      	mov	r4, r2
 80055fa:	4698      	mov	r8, r3
 80055fc:	4606      	mov	r6, r0
 80055fe:	b118      	cbz	r0, 8005608 <_vfiprintf_r+0x18>
 8005600:	6a03      	ldr	r3, [r0, #32]
 8005602:	b90b      	cbnz	r3, 8005608 <_vfiprintf_r+0x18>
 8005604:	f7ff fdca 	bl	800519c <__sinit>
 8005608:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800560a:	07d9      	lsls	r1, r3, #31
 800560c:	d405      	bmi.n	800561a <_vfiprintf_r+0x2a>
 800560e:	89ab      	ldrh	r3, [r5, #12]
 8005610:	059a      	lsls	r2, r3, #22
 8005612:	d402      	bmi.n	800561a <_vfiprintf_r+0x2a>
 8005614:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005616:	f7ff fec6 	bl	80053a6 <__retarget_lock_acquire_recursive>
 800561a:	89ab      	ldrh	r3, [r5, #12]
 800561c:	071b      	lsls	r3, r3, #28
 800561e:	d501      	bpl.n	8005624 <_vfiprintf_r+0x34>
 8005620:	692b      	ldr	r3, [r5, #16]
 8005622:	b99b      	cbnz	r3, 800564c <_vfiprintf_r+0x5c>
 8005624:	4629      	mov	r1, r5
 8005626:	4630      	mov	r0, r6
 8005628:	f000 fb70 	bl	8005d0c <__swsetup_r>
 800562c:	b170      	cbz	r0, 800564c <_vfiprintf_r+0x5c>
 800562e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005630:	07dc      	lsls	r4, r3, #31
 8005632:	d504      	bpl.n	800563e <_vfiprintf_r+0x4e>
 8005634:	f04f 30ff 	mov.w	r0, #4294967295
 8005638:	b01d      	add	sp, #116	@ 0x74
 800563a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800563e:	89ab      	ldrh	r3, [r5, #12]
 8005640:	0598      	lsls	r0, r3, #22
 8005642:	d4f7      	bmi.n	8005634 <_vfiprintf_r+0x44>
 8005644:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005646:	f7ff feaf 	bl	80053a8 <__retarget_lock_release_recursive>
 800564a:	e7f3      	b.n	8005634 <_vfiprintf_r+0x44>
 800564c:	2300      	movs	r3, #0
 800564e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005650:	2320      	movs	r3, #32
 8005652:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005656:	f8cd 800c 	str.w	r8, [sp, #12]
 800565a:	2330      	movs	r3, #48	@ 0x30
 800565c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800580c <_vfiprintf_r+0x21c>
 8005660:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005664:	f04f 0901 	mov.w	r9, #1
 8005668:	4623      	mov	r3, r4
 800566a:	469a      	mov	sl, r3
 800566c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005670:	b10a      	cbz	r2, 8005676 <_vfiprintf_r+0x86>
 8005672:	2a25      	cmp	r2, #37	@ 0x25
 8005674:	d1f9      	bne.n	800566a <_vfiprintf_r+0x7a>
 8005676:	ebba 0b04 	subs.w	fp, sl, r4
 800567a:	d00b      	beq.n	8005694 <_vfiprintf_r+0xa4>
 800567c:	465b      	mov	r3, fp
 800567e:	4622      	mov	r2, r4
 8005680:	4629      	mov	r1, r5
 8005682:	4630      	mov	r0, r6
 8005684:	f7ff ffa1 	bl	80055ca <__sfputs_r>
 8005688:	3001      	adds	r0, #1
 800568a:	f000 80a7 	beq.w	80057dc <_vfiprintf_r+0x1ec>
 800568e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005690:	445a      	add	r2, fp
 8005692:	9209      	str	r2, [sp, #36]	@ 0x24
 8005694:	f89a 3000 	ldrb.w	r3, [sl]
 8005698:	2b00      	cmp	r3, #0
 800569a:	f000 809f 	beq.w	80057dc <_vfiprintf_r+0x1ec>
 800569e:	2300      	movs	r3, #0
 80056a0:	f04f 32ff 	mov.w	r2, #4294967295
 80056a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80056a8:	f10a 0a01 	add.w	sl, sl, #1
 80056ac:	9304      	str	r3, [sp, #16]
 80056ae:	9307      	str	r3, [sp, #28]
 80056b0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80056b4:	931a      	str	r3, [sp, #104]	@ 0x68
 80056b6:	4654      	mov	r4, sl
 80056b8:	2205      	movs	r2, #5
 80056ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056be:	4853      	ldr	r0, [pc, #332]	@ (800580c <_vfiprintf_r+0x21c>)
 80056c0:	f7fa fd86 	bl	80001d0 <memchr>
 80056c4:	9a04      	ldr	r2, [sp, #16]
 80056c6:	b9d8      	cbnz	r0, 8005700 <_vfiprintf_r+0x110>
 80056c8:	06d1      	lsls	r1, r2, #27
 80056ca:	bf44      	itt	mi
 80056cc:	2320      	movmi	r3, #32
 80056ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80056d2:	0713      	lsls	r3, r2, #28
 80056d4:	bf44      	itt	mi
 80056d6:	232b      	movmi	r3, #43	@ 0x2b
 80056d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80056dc:	f89a 3000 	ldrb.w	r3, [sl]
 80056e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80056e2:	d015      	beq.n	8005710 <_vfiprintf_r+0x120>
 80056e4:	9a07      	ldr	r2, [sp, #28]
 80056e6:	4654      	mov	r4, sl
 80056e8:	2000      	movs	r0, #0
 80056ea:	f04f 0c0a 	mov.w	ip, #10
 80056ee:	4621      	mov	r1, r4
 80056f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80056f4:	3b30      	subs	r3, #48	@ 0x30
 80056f6:	2b09      	cmp	r3, #9
 80056f8:	d94b      	bls.n	8005792 <_vfiprintf_r+0x1a2>
 80056fa:	b1b0      	cbz	r0, 800572a <_vfiprintf_r+0x13a>
 80056fc:	9207      	str	r2, [sp, #28]
 80056fe:	e014      	b.n	800572a <_vfiprintf_r+0x13a>
 8005700:	eba0 0308 	sub.w	r3, r0, r8
 8005704:	fa09 f303 	lsl.w	r3, r9, r3
 8005708:	4313      	orrs	r3, r2
 800570a:	9304      	str	r3, [sp, #16]
 800570c:	46a2      	mov	sl, r4
 800570e:	e7d2      	b.n	80056b6 <_vfiprintf_r+0xc6>
 8005710:	9b03      	ldr	r3, [sp, #12]
 8005712:	1d19      	adds	r1, r3, #4
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	9103      	str	r1, [sp, #12]
 8005718:	2b00      	cmp	r3, #0
 800571a:	bfbb      	ittet	lt
 800571c:	425b      	neglt	r3, r3
 800571e:	f042 0202 	orrlt.w	r2, r2, #2
 8005722:	9307      	strge	r3, [sp, #28]
 8005724:	9307      	strlt	r3, [sp, #28]
 8005726:	bfb8      	it	lt
 8005728:	9204      	strlt	r2, [sp, #16]
 800572a:	7823      	ldrb	r3, [r4, #0]
 800572c:	2b2e      	cmp	r3, #46	@ 0x2e
 800572e:	d10a      	bne.n	8005746 <_vfiprintf_r+0x156>
 8005730:	7863      	ldrb	r3, [r4, #1]
 8005732:	2b2a      	cmp	r3, #42	@ 0x2a
 8005734:	d132      	bne.n	800579c <_vfiprintf_r+0x1ac>
 8005736:	9b03      	ldr	r3, [sp, #12]
 8005738:	1d1a      	adds	r2, r3, #4
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	9203      	str	r2, [sp, #12]
 800573e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005742:	3402      	adds	r4, #2
 8005744:	9305      	str	r3, [sp, #20]
 8005746:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800581c <_vfiprintf_r+0x22c>
 800574a:	7821      	ldrb	r1, [r4, #0]
 800574c:	2203      	movs	r2, #3
 800574e:	4650      	mov	r0, sl
 8005750:	f7fa fd3e 	bl	80001d0 <memchr>
 8005754:	b138      	cbz	r0, 8005766 <_vfiprintf_r+0x176>
 8005756:	9b04      	ldr	r3, [sp, #16]
 8005758:	eba0 000a 	sub.w	r0, r0, sl
 800575c:	2240      	movs	r2, #64	@ 0x40
 800575e:	4082      	lsls	r2, r0
 8005760:	4313      	orrs	r3, r2
 8005762:	3401      	adds	r4, #1
 8005764:	9304      	str	r3, [sp, #16]
 8005766:	f814 1b01 	ldrb.w	r1, [r4], #1
 800576a:	4829      	ldr	r0, [pc, #164]	@ (8005810 <_vfiprintf_r+0x220>)
 800576c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005770:	2206      	movs	r2, #6
 8005772:	f7fa fd2d 	bl	80001d0 <memchr>
 8005776:	2800      	cmp	r0, #0
 8005778:	d03f      	beq.n	80057fa <_vfiprintf_r+0x20a>
 800577a:	4b26      	ldr	r3, [pc, #152]	@ (8005814 <_vfiprintf_r+0x224>)
 800577c:	bb1b      	cbnz	r3, 80057c6 <_vfiprintf_r+0x1d6>
 800577e:	9b03      	ldr	r3, [sp, #12]
 8005780:	3307      	adds	r3, #7
 8005782:	f023 0307 	bic.w	r3, r3, #7
 8005786:	3308      	adds	r3, #8
 8005788:	9303      	str	r3, [sp, #12]
 800578a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800578c:	443b      	add	r3, r7
 800578e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005790:	e76a      	b.n	8005668 <_vfiprintf_r+0x78>
 8005792:	fb0c 3202 	mla	r2, ip, r2, r3
 8005796:	460c      	mov	r4, r1
 8005798:	2001      	movs	r0, #1
 800579a:	e7a8      	b.n	80056ee <_vfiprintf_r+0xfe>
 800579c:	2300      	movs	r3, #0
 800579e:	3401      	adds	r4, #1
 80057a0:	9305      	str	r3, [sp, #20]
 80057a2:	4619      	mov	r1, r3
 80057a4:	f04f 0c0a 	mov.w	ip, #10
 80057a8:	4620      	mov	r0, r4
 80057aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80057ae:	3a30      	subs	r2, #48	@ 0x30
 80057b0:	2a09      	cmp	r2, #9
 80057b2:	d903      	bls.n	80057bc <_vfiprintf_r+0x1cc>
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d0c6      	beq.n	8005746 <_vfiprintf_r+0x156>
 80057b8:	9105      	str	r1, [sp, #20]
 80057ba:	e7c4      	b.n	8005746 <_vfiprintf_r+0x156>
 80057bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80057c0:	4604      	mov	r4, r0
 80057c2:	2301      	movs	r3, #1
 80057c4:	e7f0      	b.n	80057a8 <_vfiprintf_r+0x1b8>
 80057c6:	ab03      	add	r3, sp, #12
 80057c8:	9300      	str	r3, [sp, #0]
 80057ca:	462a      	mov	r2, r5
 80057cc:	4b12      	ldr	r3, [pc, #72]	@ (8005818 <_vfiprintf_r+0x228>)
 80057ce:	a904      	add	r1, sp, #16
 80057d0:	4630      	mov	r0, r6
 80057d2:	f3af 8000 	nop.w
 80057d6:	4607      	mov	r7, r0
 80057d8:	1c78      	adds	r0, r7, #1
 80057da:	d1d6      	bne.n	800578a <_vfiprintf_r+0x19a>
 80057dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80057de:	07d9      	lsls	r1, r3, #31
 80057e0:	d405      	bmi.n	80057ee <_vfiprintf_r+0x1fe>
 80057e2:	89ab      	ldrh	r3, [r5, #12]
 80057e4:	059a      	lsls	r2, r3, #22
 80057e6:	d402      	bmi.n	80057ee <_vfiprintf_r+0x1fe>
 80057e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80057ea:	f7ff fddd 	bl	80053a8 <__retarget_lock_release_recursive>
 80057ee:	89ab      	ldrh	r3, [r5, #12]
 80057f0:	065b      	lsls	r3, r3, #25
 80057f2:	f53f af1f 	bmi.w	8005634 <_vfiprintf_r+0x44>
 80057f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80057f8:	e71e      	b.n	8005638 <_vfiprintf_r+0x48>
 80057fa:	ab03      	add	r3, sp, #12
 80057fc:	9300      	str	r3, [sp, #0]
 80057fe:	462a      	mov	r2, r5
 8005800:	4b05      	ldr	r3, [pc, #20]	@ (8005818 <_vfiprintf_r+0x228>)
 8005802:	a904      	add	r1, sp, #16
 8005804:	4630      	mov	r0, r6
 8005806:	f000 f879 	bl	80058fc <_printf_i>
 800580a:	e7e4      	b.n	80057d6 <_vfiprintf_r+0x1e6>
 800580c:	08005fd4 	.word	0x08005fd4
 8005810:	08005fde 	.word	0x08005fde
 8005814:	00000000 	.word	0x00000000
 8005818:	080055cb 	.word	0x080055cb
 800581c:	08005fda 	.word	0x08005fda

08005820 <_printf_common>:
 8005820:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005824:	4616      	mov	r6, r2
 8005826:	4698      	mov	r8, r3
 8005828:	688a      	ldr	r2, [r1, #8]
 800582a:	690b      	ldr	r3, [r1, #16]
 800582c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005830:	4293      	cmp	r3, r2
 8005832:	bfb8      	it	lt
 8005834:	4613      	movlt	r3, r2
 8005836:	6033      	str	r3, [r6, #0]
 8005838:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800583c:	4607      	mov	r7, r0
 800583e:	460c      	mov	r4, r1
 8005840:	b10a      	cbz	r2, 8005846 <_printf_common+0x26>
 8005842:	3301      	adds	r3, #1
 8005844:	6033      	str	r3, [r6, #0]
 8005846:	6823      	ldr	r3, [r4, #0]
 8005848:	0699      	lsls	r1, r3, #26
 800584a:	bf42      	ittt	mi
 800584c:	6833      	ldrmi	r3, [r6, #0]
 800584e:	3302      	addmi	r3, #2
 8005850:	6033      	strmi	r3, [r6, #0]
 8005852:	6825      	ldr	r5, [r4, #0]
 8005854:	f015 0506 	ands.w	r5, r5, #6
 8005858:	d106      	bne.n	8005868 <_printf_common+0x48>
 800585a:	f104 0a19 	add.w	sl, r4, #25
 800585e:	68e3      	ldr	r3, [r4, #12]
 8005860:	6832      	ldr	r2, [r6, #0]
 8005862:	1a9b      	subs	r3, r3, r2
 8005864:	42ab      	cmp	r3, r5
 8005866:	dc26      	bgt.n	80058b6 <_printf_common+0x96>
 8005868:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800586c:	6822      	ldr	r2, [r4, #0]
 800586e:	3b00      	subs	r3, #0
 8005870:	bf18      	it	ne
 8005872:	2301      	movne	r3, #1
 8005874:	0692      	lsls	r2, r2, #26
 8005876:	d42b      	bmi.n	80058d0 <_printf_common+0xb0>
 8005878:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800587c:	4641      	mov	r1, r8
 800587e:	4638      	mov	r0, r7
 8005880:	47c8      	blx	r9
 8005882:	3001      	adds	r0, #1
 8005884:	d01e      	beq.n	80058c4 <_printf_common+0xa4>
 8005886:	6823      	ldr	r3, [r4, #0]
 8005888:	6922      	ldr	r2, [r4, #16]
 800588a:	f003 0306 	and.w	r3, r3, #6
 800588e:	2b04      	cmp	r3, #4
 8005890:	bf02      	ittt	eq
 8005892:	68e5      	ldreq	r5, [r4, #12]
 8005894:	6833      	ldreq	r3, [r6, #0]
 8005896:	1aed      	subeq	r5, r5, r3
 8005898:	68a3      	ldr	r3, [r4, #8]
 800589a:	bf0c      	ite	eq
 800589c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058a0:	2500      	movne	r5, #0
 80058a2:	4293      	cmp	r3, r2
 80058a4:	bfc4      	itt	gt
 80058a6:	1a9b      	subgt	r3, r3, r2
 80058a8:	18ed      	addgt	r5, r5, r3
 80058aa:	2600      	movs	r6, #0
 80058ac:	341a      	adds	r4, #26
 80058ae:	42b5      	cmp	r5, r6
 80058b0:	d11a      	bne.n	80058e8 <_printf_common+0xc8>
 80058b2:	2000      	movs	r0, #0
 80058b4:	e008      	b.n	80058c8 <_printf_common+0xa8>
 80058b6:	2301      	movs	r3, #1
 80058b8:	4652      	mov	r2, sl
 80058ba:	4641      	mov	r1, r8
 80058bc:	4638      	mov	r0, r7
 80058be:	47c8      	blx	r9
 80058c0:	3001      	adds	r0, #1
 80058c2:	d103      	bne.n	80058cc <_printf_common+0xac>
 80058c4:	f04f 30ff 	mov.w	r0, #4294967295
 80058c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058cc:	3501      	adds	r5, #1
 80058ce:	e7c6      	b.n	800585e <_printf_common+0x3e>
 80058d0:	18e1      	adds	r1, r4, r3
 80058d2:	1c5a      	adds	r2, r3, #1
 80058d4:	2030      	movs	r0, #48	@ 0x30
 80058d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80058da:	4422      	add	r2, r4
 80058dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80058e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80058e4:	3302      	adds	r3, #2
 80058e6:	e7c7      	b.n	8005878 <_printf_common+0x58>
 80058e8:	2301      	movs	r3, #1
 80058ea:	4622      	mov	r2, r4
 80058ec:	4641      	mov	r1, r8
 80058ee:	4638      	mov	r0, r7
 80058f0:	47c8      	blx	r9
 80058f2:	3001      	adds	r0, #1
 80058f4:	d0e6      	beq.n	80058c4 <_printf_common+0xa4>
 80058f6:	3601      	adds	r6, #1
 80058f8:	e7d9      	b.n	80058ae <_printf_common+0x8e>
	...

080058fc <_printf_i>:
 80058fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005900:	7e0f      	ldrb	r7, [r1, #24]
 8005902:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005904:	2f78      	cmp	r7, #120	@ 0x78
 8005906:	4691      	mov	r9, r2
 8005908:	4680      	mov	r8, r0
 800590a:	460c      	mov	r4, r1
 800590c:	469a      	mov	sl, r3
 800590e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005912:	d807      	bhi.n	8005924 <_printf_i+0x28>
 8005914:	2f62      	cmp	r7, #98	@ 0x62
 8005916:	d80a      	bhi.n	800592e <_printf_i+0x32>
 8005918:	2f00      	cmp	r7, #0
 800591a:	f000 80d1 	beq.w	8005ac0 <_printf_i+0x1c4>
 800591e:	2f58      	cmp	r7, #88	@ 0x58
 8005920:	f000 80b8 	beq.w	8005a94 <_printf_i+0x198>
 8005924:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005928:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800592c:	e03a      	b.n	80059a4 <_printf_i+0xa8>
 800592e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005932:	2b15      	cmp	r3, #21
 8005934:	d8f6      	bhi.n	8005924 <_printf_i+0x28>
 8005936:	a101      	add	r1, pc, #4	@ (adr r1, 800593c <_printf_i+0x40>)
 8005938:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800593c:	08005995 	.word	0x08005995
 8005940:	080059a9 	.word	0x080059a9
 8005944:	08005925 	.word	0x08005925
 8005948:	08005925 	.word	0x08005925
 800594c:	08005925 	.word	0x08005925
 8005950:	08005925 	.word	0x08005925
 8005954:	080059a9 	.word	0x080059a9
 8005958:	08005925 	.word	0x08005925
 800595c:	08005925 	.word	0x08005925
 8005960:	08005925 	.word	0x08005925
 8005964:	08005925 	.word	0x08005925
 8005968:	08005aa7 	.word	0x08005aa7
 800596c:	080059d3 	.word	0x080059d3
 8005970:	08005a61 	.word	0x08005a61
 8005974:	08005925 	.word	0x08005925
 8005978:	08005925 	.word	0x08005925
 800597c:	08005ac9 	.word	0x08005ac9
 8005980:	08005925 	.word	0x08005925
 8005984:	080059d3 	.word	0x080059d3
 8005988:	08005925 	.word	0x08005925
 800598c:	08005925 	.word	0x08005925
 8005990:	08005a69 	.word	0x08005a69
 8005994:	6833      	ldr	r3, [r6, #0]
 8005996:	1d1a      	adds	r2, r3, #4
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	6032      	str	r2, [r6, #0]
 800599c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80059a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80059a4:	2301      	movs	r3, #1
 80059a6:	e09c      	b.n	8005ae2 <_printf_i+0x1e6>
 80059a8:	6833      	ldr	r3, [r6, #0]
 80059aa:	6820      	ldr	r0, [r4, #0]
 80059ac:	1d19      	adds	r1, r3, #4
 80059ae:	6031      	str	r1, [r6, #0]
 80059b0:	0606      	lsls	r6, r0, #24
 80059b2:	d501      	bpl.n	80059b8 <_printf_i+0xbc>
 80059b4:	681d      	ldr	r5, [r3, #0]
 80059b6:	e003      	b.n	80059c0 <_printf_i+0xc4>
 80059b8:	0645      	lsls	r5, r0, #25
 80059ba:	d5fb      	bpl.n	80059b4 <_printf_i+0xb8>
 80059bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80059c0:	2d00      	cmp	r5, #0
 80059c2:	da03      	bge.n	80059cc <_printf_i+0xd0>
 80059c4:	232d      	movs	r3, #45	@ 0x2d
 80059c6:	426d      	negs	r5, r5
 80059c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80059cc:	4858      	ldr	r0, [pc, #352]	@ (8005b30 <_printf_i+0x234>)
 80059ce:	230a      	movs	r3, #10
 80059d0:	e011      	b.n	80059f6 <_printf_i+0xfa>
 80059d2:	6821      	ldr	r1, [r4, #0]
 80059d4:	6833      	ldr	r3, [r6, #0]
 80059d6:	0608      	lsls	r0, r1, #24
 80059d8:	f853 5b04 	ldr.w	r5, [r3], #4
 80059dc:	d402      	bmi.n	80059e4 <_printf_i+0xe8>
 80059de:	0649      	lsls	r1, r1, #25
 80059e0:	bf48      	it	mi
 80059e2:	b2ad      	uxthmi	r5, r5
 80059e4:	2f6f      	cmp	r7, #111	@ 0x6f
 80059e6:	4852      	ldr	r0, [pc, #328]	@ (8005b30 <_printf_i+0x234>)
 80059e8:	6033      	str	r3, [r6, #0]
 80059ea:	bf14      	ite	ne
 80059ec:	230a      	movne	r3, #10
 80059ee:	2308      	moveq	r3, #8
 80059f0:	2100      	movs	r1, #0
 80059f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80059f6:	6866      	ldr	r6, [r4, #4]
 80059f8:	60a6      	str	r6, [r4, #8]
 80059fa:	2e00      	cmp	r6, #0
 80059fc:	db05      	blt.n	8005a0a <_printf_i+0x10e>
 80059fe:	6821      	ldr	r1, [r4, #0]
 8005a00:	432e      	orrs	r6, r5
 8005a02:	f021 0104 	bic.w	r1, r1, #4
 8005a06:	6021      	str	r1, [r4, #0]
 8005a08:	d04b      	beq.n	8005aa2 <_printf_i+0x1a6>
 8005a0a:	4616      	mov	r6, r2
 8005a0c:	fbb5 f1f3 	udiv	r1, r5, r3
 8005a10:	fb03 5711 	mls	r7, r3, r1, r5
 8005a14:	5dc7      	ldrb	r7, [r0, r7]
 8005a16:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005a1a:	462f      	mov	r7, r5
 8005a1c:	42bb      	cmp	r3, r7
 8005a1e:	460d      	mov	r5, r1
 8005a20:	d9f4      	bls.n	8005a0c <_printf_i+0x110>
 8005a22:	2b08      	cmp	r3, #8
 8005a24:	d10b      	bne.n	8005a3e <_printf_i+0x142>
 8005a26:	6823      	ldr	r3, [r4, #0]
 8005a28:	07df      	lsls	r7, r3, #31
 8005a2a:	d508      	bpl.n	8005a3e <_printf_i+0x142>
 8005a2c:	6923      	ldr	r3, [r4, #16]
 8005a2e:	6861      	ldr	r1, [r4, #4]
 8005a30:	4299      	cmp	r1, r3
 8005a32:	bfde      	ittt	le
 8005a34:	2330      	movle	r3, #48	@ 0x30
 8005a36:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005a3a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005a3e:	1b92      	subs	r2, r2, r6
 8005a40:	6122      	str	r2, [r4, #16]
 8005a42:	f8cd a000 	str.w	sl, [sp]
 8005a46:	464b      	mov	r3, r9
 8005a48:	aa03      	add	r2, sp, #12
 8005a4a:	4621      	mov	r1, r4
 8005a4c:	4640      	mov	r0, r8
 8005a4e:	f7ff fee7 	bl	8005820 <_printf_common>
 8005a52:	3001      	adds	r0, #1
 8005a54:	d14a      	bne.n	8005aec <_printf_i+0x1f0>
 8005a56:	f04f 30ff 	mov.w	r0, #4294967295
 8005a5a:	b004      	add	sp, #16
 8005a5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a60:	6823      	ldr	r3, [r4, #0]
 8005a62:	f043 0320 	orr.w	r3, r3, #32
 8005a66:	6023      	str	r3, [r4, #0]
 8005a68:	4832      	ldr	r0, [pc, #200]	@ (8005b34 <_printf_i+0x238>)
 8005a6a:	2778      	movs	r7, #120	@ 0x78
 8005a6c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005a70:	6823      	ldr	r3, [r4, #0]
 8005a72:	6831      	ldr	r1, [r6, #0]
 8005a74:	061f      	lsls	r7, r3, #24
 8005a76:	f851 5b04 	ldr.w	r5, [r1], #4
 8005a7a:	d402      	bmi.n	8005a82 <_printf_i+0x186>
 8005a7c:	065f      	lsls	r7, r3, #25
 8005a7e:	bf48      	it	mi
 8005a80:	b2ad      	uxthmi	r5, r5
 8005a82:	6031      	str	r1, [r6, #0]
 8005a84:	07d9      	lsls	r1, r3, #31
 8005a86:	bf44      	itt	mi
 8005a88:	f043 0320 	orrmi.w	r3, r3, #32
 8005a8c:	6023      	strmi	r3, [r4, #0]
 8005a8e:	b11d      	cbz	r5, 8005a98 <_printf_i+0x19c>
 8005a90:	2310      	movs	r3, #16
 8005a92:	e7ad      	b.n	80059f0 <_printf_i+0xf4>
 8005a94:	4826      	ldr	r0, [pc, #152]	@ (8005b30 <_printf_i+0x234>)
 8005a96:	e7e9      	b.n	8005a6c <_printf_i+0x170>
 8005a98:	6823      	ldr	r3, [r4, #0]
 8005a9a:	f023 0320 	bic.w	r3, r3, #32
 8005a9e:	6023      	str	r3, [r4, #0]
 8005aa0:	e7f6      	b.n	8005a90 <_printf_i+0x194>
 8005aa2:	4616      	mov	r6, r2
 8005aa4:	e7bd      	b.n	8005a22 <_printf_i+0x126>
 8005aa6:	6833      	ldr	r3, [r6, #0]
 8005aa8:	6825      	ldr	r5, [r4, #0]
 8005aaa:	6961      	ldr	r1, [r4, #20]
 8005aac:	1d18      	adds	r0, r3, #4
 8005aae:	6030      	str	r0, [r6, #0]
 8005ab0:	062e      	lsls	r6, r5, #24
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	d501      	bpl.n	8005aba <_printf_i+0x1be>
 8005ab6:	6019      	str	r1, [r3, #0]
 8005ab8:	e002      	b.n	8005ac0 <_printf_i+0x1c4>
 8005aba:	0668      	lsls	r0, r5, #25
 8005abc:	d5fb      	bpl.n	8005ab6 <_printf_i+0x1ba>
 8005abe:	8019      	strh	r1, [r3, #0]
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	6123      	str	r3, [r4, #16]
 8005ac4:	4616      	mov	r6, r2
 8005ac6:	e7bc      	b.n	8005a42 <_printf_i+0x146>
 8005ac8:	6833      	ldr	r3, [r6, #0]
 8005aca:	1d1a      	adds	r2, r3, #4
 8005acc:	6032      	str	r2, [r6, #0]
 8005ace:	681e      	ldr	r6, [r3, #0]
 8005ad0:	6862      	ldr	r2, [r4, #4]
 8005ad2:	2100      	movs	r1, #0
 8005ad4:	4630      	mov	r0, r6
 8005ad6:	f7fa fb7b 	bl	80001d0 <memchr>
 8005ada:	b108      	cbz	r0, 8005ae0 <_printf_i+0x1e4>
 8005adc:	1b80      	subs	r0, r0, r6
 8005ade:	6060      	str	r0, [r4, #4]
 8005ae0:	6863      	ldr	r3, [r4, #4]
 8005ae2:	6123      	str	r3, [r4, #16]
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005aea:	e7aa      	b.n	8005a42 <_printf_i+0x146>
 8005aec:	6923      	ldr	r3, [r4, #16]
 8005aee:	4632      	mov	r2, r6
 8005af0:	4649      	mov	r1, r9
 8005af2:	4640      	mov	r0, r8
 8005af4:	47d0      	blx	sl
 8005af6:	3001      	adds	r0, #1
 8005af8:	d0ad      	beq.n	8005a56 <_printf_i+0x15a>
 8005afa:	6823      	ldr	r3, [r4, #0]
 8005afc:	079b      	lsls	r3, r3, #30
 8005afe:	d413      	bmi.n	8005b28 <_printf_i+0x22c>
 8005b00:	68e0      	ldr	r0, [r4, #12]
 8005b02:	9b03      	ldr	r3, [sp, #12]
 8005b04:	4298      	cmp	r0, r3
 8005b06:	bfb8      	it	lt
 8005b08:	4618      	movlt	r0, r3
 8005b0a:	e7a6      	b.n	8005a5a <_printf_i+0x15e>
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	4632      	mov	r2, r6
 8005b10:	4649      	mov	r1, r9
 8005b12:	4640      	mov	r0, r8
 8005b14:	47d0      	blx	sl
 8005b16:	3001      	adds	r0, #1
 8005b18:	d09d      	beq.n	8005a56 <_printf_i+0x15a>
 8005b1a:	3501      	adds	r5, #1
 8005b1c:	68e3      	ldr	r3, [r4, #12]
 8005b1e:	9903      	ldr	r1, [sp, #12]
 8005b20:	1a5b      	subs	r3, r3, r1
 8005b22:	42ab      	cmp	r3, r5
 8005b24:	dcf2      	bgt.n	8005b0c <_printf_i+0x210>
 8005b26:	e7eb      	b.n	8005b00 <_printf_i+0x204>
 8005b28:	2500      	movs	r5, #0
 8005b2a:	f104 0619 	add.w	r6, r4, #25
 8005b2e:	e7f5      	b.n	8005b1c <_printf_i+0x220>
 8005b30:	08005fe5 	.word	0x08005fe5
 8005b34:	08005ff6 	.word	0x08005ff6

08005b38 <__sflush_r>:
 8005b38:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b40:	0716      	lsls	r6, r2, #28
 8005b42:	4605      	mov	r5, r0
 8005b44:	460c      	mov	r4, r1
 8005b46:	d454      	bmi.n	8005bf2 <__sflush_r+0xba>
 8005b48:	684b      	ldr	r3, [r1, #4]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	dc02      	bgt.n	8005b54 <__sflush_r+0x1c>
 8005b4e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	dd48      	ble.n	8005be6 <__sflush_r+0xae>
 8005b54:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005b56:	2e00      	cmp	r6, #0
 8005b58:	d045      	beq.n	8005be6 <__sflush_r+0xae>
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005b60:	682f      	ldr	r7, [r5, #0]
 8005b62:	6a21      	ldr	r1, [r4, #32]
 8005b64:	602b      	str	r3, [r5, #0]
 8005b66:	d030      	beq.n	8005bca <__sflush_r+0x92>
 8005b68:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005b6a:	89a3      	ldrh	r3, [r4, #12]
 8005b6c:	0759      	lsls	r1, r3, #29
 8005b6e:	d505      	bpl.n	8005b7c <__sflush_r+0x44>
 8005b70:	6863      	ldr	r3, [r4, #4]
 8005b72:	1ad2      	subs	r2, r2, r3
 8005b74:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005b76:	b10b      	cbz	r3, 8005b7c <__sflush_r+0x44>
 8005b78:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005b7a:	1ad2      	subs	r2, r2, r3
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005b80:	6a21      	ldr	r1, [r4, #32]
 8005b82:	4628      	mov	r0, r5
 8005b84:	47b0      	blx	r6
 8005b86:	1c43      	adds	r3, r0, #1
 8005b88:	89a3      	ldrh	r3, [r4, #12]
 8005b8a:	d106      	bne.n	8005b9a <__sflush_r+0x62>
 8005b8c:	6829      	ldr	r1, [r5, #0]
 8005b8e:	291d      	cmp	r1, #29
 8005b90:	d82b      	bhi.n	8005bea <__sflush_r+0xb2>
 8005b92:	4a2a      	ldr	r2, [pc, #168]	@ (8005c3c <__sflush_r+0x104>)
 8005b94:	40ca      	lsrs	r2, r1
 8005b96:	07d6      	lsls	r6, r2, #31
 8005b98:	d527      	bpl.n	8005bea <__sflush_r+0xb2>
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	6062      	str	r2, [r4, #4]
 8005b9e:	04d9      	lsls	r1, r3, #19
 8005ba0:	6922      	ldr	r2, [r4, #16]
 8005ba2:	6022      	str	r2, [r4, #0]
 8005ba4:	d504      	bpl.n	8005bb0 <__sflush_r+0x78>
 8005ba6:	1c42      	adds	r2, r0, #1
 8005ba8:	d101      	bne.n	8005bae <__sflush_r+0x76>
 8005baa:	682b      	ldr	r3, [r5, #0]
 8005bac:	b903      	cbnz	r3, 8005bb0 <__sflush_r+0x78>
 8005bae:	6560      	str	r0, [r4, #84]	@ 0x54
 8005bb0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005bb2:	602f      	str	r7, [r5, #0]
 8005bb4:	b1b9      	cbz	r1, 8005be6 <__sflush_r+0xae>
 8005bb6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005bba:	4299      	cmp	r1, r3
 8005bbc:	d002      	beq.n	8005bc4 <__sflush_r+0x8c>
 8005bbe:	4628      	mov	r0, r5
 8005bc0:	f7ff fbf4 	bl	80053ac <_free_r>
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	6363      	str	r3, [r4, #52]	@ 0x34
 8005bc8:	e00d      	b.n	8005be6 <__sflush_r+0xae>
 8005bca:	2301      	movs	r3, #1
 8005bcc:	4628      	mov	r0, r5
 8005bce:	47b0      	blx	r6
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	1c50      	adds	r0, r2, #1
 8005bd4:	d1c9      	bne.n	8005b6a <__sflush_r+0x32>
 8005bd6:	682b      	ldr	r3, [r5, #0]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d0c6      	beq.n	8005b6a <__sflush_r+0x32>
 8005bdc:	2b1d      	cmp	r3, #29
 8005bde:	d001      	beq.n	8005be4 <__sflush_r+0xac>
 8005be0:	2b16      	cmp	r3, #22
 8005be2:	d11e      	bne.n	8005c22 <__sflush_r+0xea>
 8005be4:	602f      	str	r7, [r5, #0]
 8005be6:	2000      	movs	r0, #0
 8005be8:	e022      	b.n	8005c30 <__sflush_r+0xf8>
 8005bea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005bee:	b21b      	sxth	r3, r3
 8005bf0:	e01b      	b.n	8005c2a <__sflush_r+0xf2>
 8005bf2:	690f      	ldr	r7, [r1, #16]
 8005bf4:	2f00      	cmp	r7, #0
 8005bf6:	d0f6      	beq.n	8005be6 <__sflush_r+0xae>
 8005bf8:	0793      	lsls	r3, r2, #30
 8005bfa:	680e      	ldr	r6, [r1, #0]
 8005bfc:	bf08      	it	eq
 8005bfe:	694b      	ldreq	r3, [r1, #20]
 8005c00:	600f      	str	r7, [r1, #0]
 8005c02:	bf18      	it	ne
 8005c04:	2300      	movne	r3, #0
 8005c06:	eba6 0807 	sub.w	r8, r6, r7
 8005c0a:	608b      	str	r3, [r1, #8]
 8005c0c:	f1b8 0f00 	cmp.w	r8, #0
 8005c10:	dde9      	ble.n	8005be6 <__sflush_r+0xae>
 8005c12:	6a21      	ldr	r1, [r4, #32]
 8005c14:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005c16:	4643      	mov	r3, r8
 8005c18:	463a      	mov	r2, r7
 8005c1a:	4628      	mov	r0, r5
 8005c1c:	47b0      	blx	r6
 8005c1e:	2800      	cmp	r0, #0
 8005c20:	dc08      	bgt.n	8005c34 <__sflush_r+0xfc>
 8005c22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c2a:	81a3      	strh	r3, [r4, #12]
 8005c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c34:	4407      	add	r7, r0
 8005c36:	eba8 0800 	sub.w	r8, r8, r0
 8005c3a:	e7e7      	b.n	8005c0c <__sflush_r+0xd4>
 8005c3c:	20400001 	.word	0x20400001

08005c40 <_fflush_r>:
 8005c40:	b538      	push	{r3, r4, r5, lr}
 8005c42:	690b      	ldr	r3, [r1, #16]
 8005c44:	4605      	mov	r5, r0
 8005c46:	460c      	mov	r4, r1
 8005c48:	b913      	cbnz	r3, 8005c50 <_fflush_r+0x10>
 8005c4a:	2500      	movs	r5, #0
 8005c4c:	4628      	mov	r0, r5
 8005c4e:	bd38      	pop	{r3, r4, r5, pc}
 8005c50:	b118      	cbz	r0, 8005c5a <_fflush_r+0x1a>
 8005c52:	6a03      	ldr	r3, [r0, #32]
 8005c54:	b90b      	cbnz	r3, 8005c5a <_fflush_r+0x1a>
 8005c56:	f7ff faa1 	bl	800519c <__sinit>
 8005c5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d0f3      	beq.n	8005c4a <_fflush_r+0xa>
 8005c62:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005c64:	07d0      	lsls	r0, r2, #31
 8005c66:	d404      	bmi.n	8005c72 <_fflush_r+0x32>
 8005c68:	0599      	lsls	r1, r3, #22
 8005c6a:	d402      	bmi.n	8005c72 <_fflush_r+0x32>
 8005c6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005c6e:	f7ff fb9a 	bl	80053a6 <__retarget_lock_acquire_recursive>
 8005c72:	4628      	mov	r0, r5
 8005c74:	4621      	mov	r1, r4
 8005c76:	f7ff ff5f 	bl	8005b38 <__sflush_r>
 8005c7a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005c7c:	07da      	lsls	r2, r3, #31
 8005c7e:	4605      	mov	r5, r0
 8005c80:	d4e4      	bmi.n	8005c4c <_fflush_r+0xc>
 8005c82:	89a3      	ldrh	r3, [r4, #12]
 8005c84:	059b      	lsls	r3, r3, #22
 8005c86:	d4e1      	bmi.n	8005c4c <_fflush_r+0xc>
 8005c88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005c8a:	f7ff fb8d 	bl	80053a8 <__retarget_lock_release_recursive>
 8005c8e:	e7dd      	b.n	8005c4c <_fflush_r+0xc>

08005c90 <__swbuf_r>:
 8005c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c92:	460e      	mov	r6, r1
 8005c94:	4614      	mov	r4, r2
 8005c96:	4605      	mov	r5, r0
 8005c98:	b118      	cbz	r0, 8005ca2 <__swbuf_r+0x12>
 8005c9a:	6a03      	ldr	r3, [r0, #32]
 8005c9c:	b90b      	cbnz	r3, 8005ca2 <__swbuf_r+0x12>
 8005c9e:	f7ff fa7d 	bl	800519c <__sinit>
 8005ca2:	69a3      	ldr	r3, [r4, #24]
 8005ca4:	60a3      	str	r3, [r4, #8]
 8005ca6:	89a3      	ldrh	r3, [r4, #12]
 8005ca8:	071a      	lsls	r2, r3, #28
 8005caa:	d501      	bpl.n	8005cb0 <__swbuf_r+0x20>
 8005cac:	6923      	ldr	r3, [r4, #16]
 8005cae:	b943      	cbnz	r3, 8005cc2 <__swbuf_r+0x32>
 8005cb0:	4621      	mov	r1, r4
 8005cb2:	4628      	mov	r0, r5
 8005cb4:	f000 f82a 	bl	8005d0c <__swsetup_r>
 8005cb8:	b118      	cbz	r0, 8005cc2 <__swbuf_r+0x32>
 8005cba:	f04f 37ff 	mov.w	r7, #4294967295
 8005cbe:	4638      	mov	r0, r7
 8005cc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cc2:	6823      	ldr	r3, [r4, #0]
 8005cc4:	6922      	ldr	r2, [r4, #16]
 8005cc6:	1a98      	subs	r0, r3, r2
 8005cc8:	6963      	ldr	r3, [r4, #20]
 8005cca:	b2f6      	uxtb	r6, r6
 8005ccc:	4283      	cmp	r3, r0
 8005cce:	4637      	mov	r7, r6
 8005cd0:	dc05      	bgt.n	8005cde <__swbuf_r+0x4e>
 8005cd2:	4621      	mov	r1, r4
 8005cd4:	4628      	mov	r0, r5
 8005cd6:	f7ff ffb3 	bl	8005c40 <_fflush_r>
 8005cda:	2800      	cmp	r0, #0
 8005cdc:	d1ed      	bne.n	8005cba <__swbuf_r+0x2a>
 8005cde:	68a3      	ldr	r3, [r4, #8]
 8005ce0:	3b01      	subs	r3, #1
 8005ce2:	60a3      	str	r3, [r4, #8]
 8005ce4:	6823      	ldr	r3, [r4, #0]
 8005ce6:	1c5a      	adds	r2, r3, #1
 8005ce8:	6022      	str	r2, [r4, #0]
 8005cea:	701e      	strb	r6, [r3, #0]
 8005cec:	6962      	ldr	r2, [r4, #20]
 8005cee:	1c43      	adds	r3, r0, #1
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d004      	beq.n	8005cfe <__swbuf_r+0x6e>
 8005cf4:	89a3      	ldrh	r3, [r4, #12]
 8005cf6:	07db      	lsls	r3, r3, #31
 8005cf8:	d5e1      	bpl.n	8005cbe <__swbuf_r+0x2e>
 8005cfa:	2e0a      	cmp	r6, #10
 8005cfc:	d1df      	bne.n	8005cbe <__swbuf_r+0x2e>
 8005cfe:	4621      	mov	r1, r4
 8005d00:	4628      	mov	r0, r5
 8005d02:	f7ff ff9d 	bl	8005c40 <_fflush_r>
 8005d06:	2800      	cmp	r0, #0
 8005d08:	d0d9      	beq.n	8005cbe <__swbuf_r+0x2e>
 8005d0a:	e7d6      	b.n	8005cba <__swbuf_r+0x2a>

08005d0c <__swsetup_r>:
 8005d0c:	b538      	push	{r3, r4, r5, lr}
 8005d0e:	4b29      	ldr	r3, [pc, #164]	@ (8005db4 <__swsetup_r+0xa8>)
 8005d10:	4605      	mov	r5, r0
 8005d12:	6818      	ldr	r0, [r3, #0]
 8005d14:	460c      	mov	r4, r1
 8005d16:	b118      	cbz	r0, 8005d20 <__swsetup_r+0x14>
 8005d18:	6a03      	ldr	r3, [r0, #32]
 8005d1a:	b90b      	cbnz	r3, 8005d20 <__swsetup_r+0x14>
 8005d1c:	f7ff fa3e 	bl	800519c <__sinit>
 8005d20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d24:	0719      	lsls	r1, r3, #28
 8005d26:	d422      	bmi.n	8005d6e <__swsetup_r+0x62>
 8005d28:	06da      	lsls	r2, r3, #27
 8005d2a:	d407      	bmi.n	8005d3c <__swsetup_r+0x30>
 8005d2c:	2209      	movs	r2, #9
 8005d2e:	602a      	str	r2, [r5, #0]
 8005d30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d34:	81a3      	strh	r3, [r4, #12]
 8005d36:	f04f 30ff 	mov.w	r0, #4294967295
 8005d3a:	e033      	b.n	8005da4 <__swsetup_r+0x98>
 8005d3c:	0758      	lsls	r0, r3, #29
 8005d3e:	d512      	bpl.n	8005d66 <__swsetup_r+0x5a>
 8005d40:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005d42:	b141      	cbz	r1, 8005d56 <__swsetup_r+0x4a>
 8005d44:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005d48:	4299      	cmp	r1, r3
 8005d4a:	d002      	beq.n	8005d52 <__swsetup_r+0x46>
 8005d4c:	4628      	mov	r0, r5
 8005d4e:	f7ff fb2d 	bl	80053ac <_free_r>
 8005d52:	2300      	movs	r3, #0
 8005d54:	6363      	str	r3, [r4, #52]	@ 0x34
 8005d56:	89a3      	ldrh	r3, [r4, #12]
 8005d58:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005d5c:	81a3      	strh	r3, [r4, #12]
 8005d5e:	2300      	movs	r3, #0
 8005d60:	6063      	str	r3, [r4, #4]
 8005d62:	6923      	ldr	r3, [r4, #16]
 8005d64:	6023      	str	r3, [r4, #0]
 8005d66:	89a3      	ldrh	r3, [r4, #12]
 8005d68:	f043 0308 	orr.w	r3, r3, #8
 8005d6c:	81a3      	strh	r3, [r4, #12]
 8005d6e:	6923      	ldr	r3, [r4, #16]
 8005d70:	b94b      	cbnz	r3, 8005d86 <__swsetup_r+0x7a>
 8005d72:	89a3      	ldrh	r3, [r4, #12]
 8005d74:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005d78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d7c:	d003      	beq.n	8005d86 <__swsetup_r+0x7a>
 8005d7e:	4621      	mov	r1, r4
 8005d80:	4628      	mov	r0, r5
 8005d82:	f000 f84f 	bl	8005e24 <__smakebuf_r>
 8005d86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d8a:	f013 0201 	ands.w	r2, r3, #1
 8005d8e:	d00a      	beq.n	8005da6 <__swsetup_r+0x9a>
 8005d90:	2200      	movs	r2, #0
 8005d92:	60a2      	str	r2, [r4, #8]
 8005d94:	6962      	ldr	r2, [r4, #20]
 8005d96:	4252      	negs	r2, r2
 8005d98:	61a2      	str	r2, [r4, #24]
 8005d9a:	6922      	ldr	r2, [r4, #16]
 8005d9c:	b942      	cbnz	r2, 8005db0 <__swsetup_r+0xa4>
 8005d9e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005da2:	d1c5      	bne.n	8005d30 <__swsetup_r+0x24>
 8005da4:	bd38      	pop	{r3, r4, r5, pc}
 8005da6:	0799      	lsls	r1, r3, #30
 8005da8:	bf58      	it	pl
 8005daa:	6962      	ldrpl	r2, [r4, #20]
 8005dac:	60a2      	str	r2, [r4, #8]
 8005dae:	e7f4      	b.n	8005d9a <__swsetup_r+0x8e>
 8005db0:	2000      	movs	r0, #0
 8005db2:	e7f7      	b.n	8005da4 <__swsetup_r+0x98>
 8005db4:	200000ec 	.word	0x200000ec

08005db8 <_sbrk_r>:
 8005db8:	b538      	push	{r3, r4, r5, lr}
 8005dba:	4d06      	ldr	r5, [pc, #24]	@ (8005dd4 <_sbrk_r+0x1c>)
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	4604      	mov	r4, r0
 8005dc0:	4608      	mov	r0, r1
 8005dc2:	602b      	str	r3, [r5, #0]
 8005dc4:	f7fa ff18 	bl	8000bf8 <_sbrk>
 8005dc8:	1c43      	adds	r3, r0, #1
 8005dca:	d102      	bne.n	8005dd2 <_sbrk_r+0x1a>
 8005dcc:	682b      	ldr	r3, [r5, #0]
 8005dce:	b103      	cbz	r3, 8005dd2 <_sbrk_r+0x1a>
 8005dd0:	6023      	str	r3, [r4, #0]
 8005dd2:	bd38      	pop	{r3, r4, r5, pc}
 8005dd4:	20001280 	.word	0x20001280

08005dd8 <__swhatbuf_r>:
 8005dd8:	b570      	push	{r4, r5, r6, lr}
 8005dda:	460c      	mov	r4, r1
 8005ddc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005de0:	2900      	cmp	r1, #0
 8005de2:	b096      	sub	sp, #88	@ 0x58
 8005de4:	4615      	mov	r5, r2
 8005de6:	461e      	mov	r6, r3
 8005de8:	da0d      	bge.n	8005e06 <__swhatbuf_r+0x2e>
 8005dea:	89a3      	ldrh	r3, [r4, #12]
 8005dec:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005df0:	f04f 0100 	mov.w	r1, #0
 8005df4:	bf14      	ite	ne
 8005df6:	2340      	movne	r3, #64	@ 0x40
 8005df8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005dfc:	2000      	movs	r0, #0
 8005dfe:	6031      	str	r1, [r6, #0]
 8005e00:	602b      	str	r3, [r5, #0]
 8005e02:	b016      	add	sp, #88	@ 0x58
 8005e04:	bd70      	pop	{r4, r5, r6, pc}
 8005e06:	466a      	mov	r2, sp
 8005e08:	f000 f848 	bl	8005e9c <_fstat_r>
 8005e0c:	2800      	cmp	r0, #0
 8005e0e:	dbec      	blt.n	8005dea <__swhatbuf_r+0x12>
 8005e10:	9901      	ldr	r1, [sp, #4]
 8005e12:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005e16:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005e1a:	4259      	negs	r1, r3
 8005e1c:	4159      	adcs	r1, r3
 8005e1e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005e22:	e7eb      	b.n	8005dfc <__swhatbuf_r+0x24>

08005e24 <__smakebuf_r>:
 8005e24:	898b      	ldrh	r3, [r1, #12]
 8005e26:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e28:	079d      	lsls	r5, r3, #30
 8005e2a:	4606      	mov	r6, r0
 8005e2c:	460c      	mov	r4, r1
 8005e2e:	d507      	bpl.n	8005e40 <__smakebuf_r+0x1c>
 8005e30:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005e34:	6023      	str	r3, [r4, #0]
 8005e36:	6123      	str	r3, [r4, #16]
 8005e38:	2301      	movs	r3, #1
 8005e3a:	6163      	str	r3, [r4, #20]
 8005e3c:	b003      	add	sp, #12
 8005e3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e40:	ab01      	add	r3, sp, #4
 8005e42:	466a      	mov	r2, sp
 8005e44:	f7ff ffc8 	bl	8005dd8 <__swhatbuf_r>
 8005e48:	9f00      	ldr	r7, [sp, #0]
 8005e4a:	4605      	mov	r5, r0
 8005e4c:	4639      	mov	r1, r7
 8005e4e:	4630      	mov	r0, r6
 8005e50:	f7ff fb18 	bl	8005484 <_malloc_r>
 8005e54:	b948      	cbnz	r0, 8005e6a <__smakebuf_r+0x46>
 8005e56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e5a:	059a      	lsls	r2, r3, #22
 8005e5c:	d4ee      	bmi.n	8005e3c <__smakebuf_r+0x18>
 8005e5e:	f023 0303 	bic.w	r3, r3, #3
 8005e62:	f043 0302 	orr.w	r3, r3, #2
 8005e66:	81a3      	strh	r3, [r4, #12]
 8005e68:	e7e2      	b.n	8005e30 <__smakebuf_r+0xc>
 8005e6a:	89a3      	ldrh	r3, [r4, #12]
 8005e6c:	6020      	str	r0, [r4, #0]
 8005e6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e72:	81a3      	strh	r3, [r4, #12]
 8005e74:	9b01      	ldr	r3, [sp, #4]
 8005e76:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005e7a:	b15b      	cbz	r3, 8005e94 <__smakebuf_r+0x70>
 8005e7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e80:	4630      	mov	r0, r6
 8005e82:	f000 f81d 	bl	8005ec0 <_isatty_r>
 8005e86:	b128      	cbz	r0, 8005e94 <__smakebuf_r+0x70>
 8005e88:	89a3      	ldrh	r3, [r4, #12]
 8005e8a:	f023 0303 	bic.w	r3, r3, #3
 8005e8e:	f043 0301 	orr.w	r3, r3, #1
 8005e92:	81a3      	strh	r3, [r4, #12]
 8005e94:	89a3      	ldrh	r3, [r4, #12]
 8005e96:	431d      	orrs	r5, r3
 8005e98:	81a5      	strh	r5, [r4, #12]
 8005e9a:	e7cf      	b.n	8005e3c <__smakebuf_r+0x18>

08005e9c <_fstat_r>:
 8005e9c:	b538      	push	{r3, r4, r5, lr}
 8005e9e:	4d07      	ldr	r5, [pc, #28]	@ (8005ebc <_fstat_r+0x20>)
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	4604      	mov	r4, r0
 8005ea4:	4608      	mov	r0, r1
 8005ea6:	4611      	mov	r1, r2
 8005ea8:	602b      	str	r3, [r5, #0]
 8005eaa:	f7fa fe9c 	bl	8000be6 <_fstat>
 8005eae:	1c43      	adds	r3, r0, #1
 8005eb0:	d102      	bne.n	8005eb8 <_fstat_r+0x1c>
 8005eb2:	682b      	ldr	r3, [r5, #0]
 8005eb4:	b103      	cbz	r3, 8005eb8 <_fstat_r+0x1c>
 8005eb6:	6023      	str	r3, [r4, #0]
 8005eb8:	bd38      	pop	{r3, r4, r5, pc}
 8005eba:	bf00      	nop
 8005ebc:	20001280 	.word	0x20001280

08005ec0 <_isatty_r>:
 8005ec0:	b538      	push	{r3, r4, r5, lr}
 8005ec2:	4d06      	ldr	r5, [pc, #24]	@ (8005edc <_isatty_r+0x1c>)
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	4604      	mov	r4, r0
 8005ec8:	4608      	mov	r0, r1
 8005eca:	602b      	str	r3, [r5, #0]
 8005ecc:	f7fa fe90 	bl	8000bf0 <_isatty>
 8005ed0:	1c43      	adds	r3, r0, #1
 8005ed2:	d102      	bne.n	8005eda <_isatty_r+0x1a>
 8005ed4:	682b      	ldr	r3, [r5, #0]
 8005ed6:	b103      	cbz	r3, 8005eda <_isatty_r+0x1a>
 8005ed8:	6023      	str	r3, [r4, #0]
 8005eda:	bd38      	pop	{r3, r4, r5, pc}
 8005edc:	20001280 	.word	0x20001280

08005ee0 <_init>:
 8005ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ee2:	bf00      	nop
 8005ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ee6:	bc08      	pop	{r3}
 8005ee8:	469e      	mov	lr, r3
 8005eea:	4770      	bx	lr

08005eec <_fini>:
 8005eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eee:	bf00      	nop
 8005ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ef2:	bc08      	pop	{r3}
 8005ef4:	469e      	mov	lr, r3
 8005ef6:	4770      	bx	lr
