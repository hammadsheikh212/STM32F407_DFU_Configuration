
DFU_Application_Proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08010000  08010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f7c  08010188  08010188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08018104  08018104  00009104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018164  08018164  0000a0fc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08018164  08018164  00009164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801816c  0801816c  0000a0fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801816c  0801816c  0000916c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08018170  08018170  00009170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000fc  20000000  08018174  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a0fc  2**0
                  CONTENTS
 10 .bss          00001cf8  200000fc  200000fc  0000a0fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001df4  20001df4  0000a0fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a0fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014392  00000000  00000000  0000a12c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000036ce  00000000  00000000  0001e4be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011e8  00000000  00000000  00021b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000da3  00000000  00000000  00022d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024001  00000000  00000000  00023b1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001886e  00000000  00000000  00047b1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca9f8  00000000  00000000  0006038a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012ad82  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004a34  00000000  00000000  0012adc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  0012f7fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08010188 <__do_global_dtors_aux>:
 8010188:	b510      	push	{r4, lr}
 801018a:	4c05      	ldr	r4, [pc, #20]	@ (80101a0 <__do_global_dtors_aux+0x18>)
 801018c:	7823      	ldrb	r3, [r4, #0]
 801018e:	b933      	cbnz	r3, 801019e <__do_global_dtors_aux+0x16>
 8010190:	4b04      	ldr	r3, [pc, #16]	@ (80101a4 <__do_global_dtors_aux+0x1c>)
 8010192:	b113      	cbz	r3, 801019a <__do_global_dtors_aux+0x12>
 8010194:	4804      	ldr	r0, [pc, #16]	@ (80101a8 <__do_global_dtors_aux+0x20>)
 8010196:	f3af 8000 	nop.w
 801019a:	2301      	movs	r3, #1
 801019c:	7023      	strb	r3, [r4, #0]
 801019e:	bd10      	pop	{r4, pc}
 80101a0:	200000fc 	.word	0x200000fc
 80101a4:	00000000 	.word	0x00000000
 80101a8:	080180ec 	.word	0x080180ec

080101ac <frame_dummy>:
 80101ac:	b508      	push	{r3, lr}
 80101ae:	4b03      	ldr	r3, [pc, #12]	@ (80101bc <frame_dummy+0x10>)
 80101b0:	b11b      	cbz	r3, 80101ba <frame_dummy+0xe>
 80101b2:	4903      	ldr	r1, [pc, #12]	@ (80101c0 <frame_dummy+0x14>)
 80101b4:	4803      	ldr	r0, [pc, #12]	@ (80101c4 <frame_dummy+0x18>)
 80101b6:	f3af 8000 	nop.w
 80101ba:	bd08      	pop	{r3, pc}
 80101bc:	00000000 	.word	0x00000000
 80101c0:	20000100 	.word	0x20000100
 80101c4:	080180ec 	.word	0x080180ec

080101c8 <__aeabi_uldivmod>:
 80101c8:	b953      	cbnz	r3, 80101e0 <__aeabi_uldivmod+0x18>
 80101ca:	b94a      	cbnz	r2, 80101e0 <__aeabi_uldivmod+0x18>
 80101cc:	2900      	cmp	r1, #0
 80101ce:	bf08      	it	eq
 80101d0:	2800      	cmpeq	r0, #0
 80101d2:	bf1c      	itt	ne
 80101d4:	f04f 31ff 	movne.w	r1, #4294967295
 80101d8:	f04f 30ff 	movne.w	r0, #4294967295
 80101dc:	f000 b988 	b.w	80104f0 <__aeabi_idiv0>
 80101e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80101e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80101e8:	f000 f806 	bl	80101f8 <__udivmoddi4>
 80101ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80101f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80101f4:	b004      	add	sp, #16
 80101f6:	4770      	bx	lr

080101f8 <__udivmoddi4>:
 80101f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80101fc:	9d08      	ldr	r5, [sp, #32]
 80101fe:	468e      	mov	lr, r1
 8010200:	4604      	mov	r4, r0
 8010202:	4688      	mov	r8, r1
 8010204:	2b00      	cmp	r3, #0
 8010206:	d14a      	bne.n	801029e <__udivmoddi4+0xa6>
 8010208:	428a      	cmp	r2, r1
 801020a:	4617      	mov	r7, r2
 801020c:	d962      	bls.n	80102d4 <__udivmoddi4+0xdc>
 801020e:	fab2 f682 	clz	r6, r2
 8010212:	b14e      	cbz	r6, 8010228 <__udivmoddi4+0x30>
 8010214:	f1c6 0320 	rsb	r3, r6, #32
 8010218:	fa01 f806 	lsl.w	r8, r1, r6
 801021c:	fa20 f303 	lsr.w	r3, r0, r3
 8010220:	40b7      	lsls	r7, r6
 8010222:	ea43 0808 	orr.w	r8, r3, r8
 8010226:	40b4      	lsls	r4, r6
 8010228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 801022c:	fa1f fc87 	uxth.w	ip, r7
 8010230:	fbb8 f1fe 	udiv	r1, r8, lr
 8010234:	0c23      	lsrs	r3, r4, #16
 8010236:	fb0e 8811 	mls	r8, lr, r1, r8
 801023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 801023e:	fb01 f20c 	mul.w	r2, r1, ip
 8010242:	429a      	cmp	r2, r3
 8010244:	d909      	bls.n	801025a <__udivmoddi4+0x62>
 8010246:	18fb      	adds	r3, r7, r3
 8010248:	f101 30ff 	add.w	r0, r1, #4294967295
 801024c:	f080 80ea 	bcs.w	8010424 <__udivmoddi4+0x22c>
 8010250:	429a      	cmp	r2, r3
 8010252:	f240 80e7 	bls.w	8010424 <__udivmoddi4+0x22c>
 8010256:	3902      	subs	r1, #2
 8010258:	443b      	add	r3, r7
 801025a:	1a9a      	subs	r2, r3, r2
 801025c:	b2a3      	uxth	r3, r4
 801025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8010262:	fb0e 2210 	mls	r2, lr, r0, r2
 8010266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801026a:	fb00 fc0c 	mul.w	ip, r0, ip
 801026e:	459c      	cmp	ip, r3
 8010270:	d909      	bls.n	8010286 <__udivmoddi4+0x8e>
 8010272:	18fb      	adds	r3, r7, r3
 8010274:	f100 32ff 	add.w	r2, r0, #4294967295
 8010278:	f080 80d6 	bcs.w	8010428 <__udivmoddi4+0x230>
 801027c:	459c      	cmp	ip, r3
 801027e:	f240 80d3 	bls.w	8010428 <__udivmoddi4+0x230>
 8010282:	443b      	add	r3, r7
 8010284:	3802      	subs	r0, #2
 8010286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 801028a:	eba3 030c 	sub.w	r3, r3, ip
 801028e:	2100      	movs	r1, #0
 8010290:	b11d      	cbz	r5, 801029a <__udivmoddi4+0xa2>
 8010292:	40f3      	lsrs	r3, r6
 8010294:	2200      	movs	r2, #0
 8010296:	e9c5 3200 	strd	r3, r2, [r5]
 801029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801029e:	428b      	cmp	r3, r1
 80102a0:	d905      	bls.n	80102ae <__udivmoddi4+0xb6>
 80102a2:	b10d      	cbz	r5, 80102a8 <__udivmoddi4+0xb0>
 80102a4:	e9c5 0100 	strd	r0, r1, [r5]
 80102a8:	2100      	movs	r1, #0
 80102aa:	4608      	mov	r0, r1
 80102ac:	e7f5      	b.n	801029a <__udivmoddi4+0xa2>
 80102ae:	fab3 f183 	clz	r1, r3
 80102b2:	2900      	cmp	r1, #0
 80102b4:	d146      	bne.n	8010344 <__udivmoddi4+0x14c>
 80102b6:	4573      	cmp	r3, lr
 80102b8:	d302      	bcc.n	80102c0 <__udivmoddi4+0xc8>
 80102ba:	4282      	cmp	r2, r0
 80102bc:	f200 8105 	bhi.w	80104ca <__udivmoddi4+0x2d2>
 80102c0:	1a84      	subs	r4, r0, r2
 80102c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80102c6:	2001      	movs	r0, #1
 80102c8:	4690      	mov	r8, r2
 80102ca:	2d00      	cmp	r5, #0
 80102cc:	d0e5      	beq.n	801029a <__udivmoddi4+0xa2>
 80102ce:	e9c5 4800 	strd	r4, r8, [r5]
 80102d2:	e7e2      	b.n	801029a <__udivmoddi4+0xa2>
 80102d4:	2a00      	cmp	r2, #0
 80102d6:	f000 8090 	beq.w	80103fa <__udivmoddi4+0x202>
 80102da:	fab2 f682 	clz	r6, r2
 80102de:	2e00      	cmp	r6, #0
 80102e0:	f040 80a4 	bne.w	801042c <__udivmoddi4+0x234>
 80102e4:	1a8a      	subs	r2, r1, r2
 80102e6:	0c03      	lsrs	r3, r0, #16
 80102e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80102ec:	b280      	uxth	r0, r0
 80102ee:	b2bc      	uxth	r4, r7
 80102f0:	2101      	movs	r1, #1
 80102f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80102f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80102fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80102fe:	fb04 f20c 	mul.w	r2, r4, ip
 8010302:	429a      	cmp	r2, r3
 8010304:	d907      	bls.n	8010316 <__udivmoddi4+0x11e>
 8010306:	18fb      	adds	r3, r7, r3
 8010308:	f10c 38ff 	add.w	r8, ip, #4294967295
 801030c:	d202      	bcs.n	8010314 <__udivmoddi4+0x11c>
 801030e:	429a      	cmp	r2, r3
 8010310:	f200 80e0 	bhi.w	80104d4 <__udivmoddi4+0x2dc>
 8010314:	46c4      	mov	ip, r8
 8010316:	1a9b      	subs	r3, r3, r2
 8010318:	fbb3 f2fe 	udiv	r2, r3, lr
 801031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8010320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8010324:	fb02 f404 	mul.w	r4, r2, r4
 8010328:	429c      	cmp	r4, r3
 801032a:	d907      	bls.n	801033c <__udivmoddi4+0x144>
 801032c:	18fb      	adds	r3, r7, r3
 801032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8010332:	d202      	bcs.n	801033a <__udivmoddi4+0x142>
 8010334:	429c      	cmp	r4, r3
 8010336:	f200 80ca 	bhi.w	80104ce <__udivmoddi4+0x2d6>
 801033a:	4602      	mov	r2, r0
 801033c:	1b1b      	subs	r3, r3, r4
 801033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8010342:	e7a5      	b.n	8010290 <__udivmoddi4+0x98>
 8010344:	f1c1 0620 	rsb	r6, r1, #32
 8010348:	408b      	lsls	r3, r1
 801034a:	fa22 f706 	lsr.w	r7, r2, r6
 801034e:	431f      	orrs	r7, r3
 8010350:	fa0e f401 	lsl.w	r4, lr, r1
 8010354:	fa20 f306 	lsr.w	r3, r0, r6
 8010358:	fa2e fe06 	lsr.w	lr, lr, r6
 801035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8010360:	4323      	orrs	r3, r4
 8010362:	fa00 f801 	lsl.w	r8, r0, r1
 8010366:	fa1f fc87 	uxth.w	ip, r7
 801036a:	fbbe f0f9 	udiv	r0, lr, r9
 801036e:	0c1c      	lsrs	r4, r3, #16
 8010370:	fb09 ee10 	mls	lr, r9, r0, lr
 8010374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8010378:	fb00 fe0c 	mul.w	lr, r0, ip
 801037c:	45a6      	cmp	lr, r4
 801037e:	fa02 f201 	lsl.w	r2, r2, r1
 8010382:	d909      	bls.n	8010398 <__udivmoddi4+0x1a0>
 8010384:	193c      	adds	r4, r7, r4
 8010386:	f100 3aff 	add.w	sl, r0, #4294967295
 801038a:	f080 809c 	bcs.w	80104c6 <__udivmoddi4+0x2ce>
 801038e:	45a6      	cmp	lr, r4
 8010390:	f240 8099 	bls.w	80104c6 <__udivmoddi4+0x2ce>
 8010394:	3802      	subs	r0, #2
 8010396:	443c      	add	r4, r7
 8010398:	eba4 040e 	sub.w	r4, r4, lr
 801039c:	fa1f fe83 	uxth.w	lr, r3
 80103a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80103a4:	fb09 4413 	mls	r4, r9, r3, r4
 80103a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80103ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80103b0:	45a4      	cmp	ip, r4
 80103b2:	d908      	bls.n	80103c6 <__udivmoddi4+0x1ce>
 80103b4:	193c      	adds	r4, r7, r4
 80103b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80103ba:	f080 8082 	bcs.w	80104c2 <__udivmoddi4+0x2ca>
 80103be:	45a4      	cmp	ip, r4
 80103c0:	d97f      	bls.n	80104c2 <__udivmoddi4+0x2ca>
 80103c2:	3b02      	subs	r3, #2
 80103c4:	443c      	add	r4, r7
 80103c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80103ca:	eba4 040c 	sub.w	r4, r4, ip
 80103ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80103d2:	4564      	cmp	r4, ip
 80103d4:	4673      	mov	r3, lr
 80103d6:	46e1      	mov	r9, ip
 80103d8:	d362      	bcc.n	80104a0 <__udivmoddi4+0x2a8>
 80103da:	d05f      	beq.n	801049c <__udivmoddi4+0x2a4>
 80103dc:	b15d      	cbz	r5, 80103f6 <__udivmoddi4+0x1fe>
 80103de:	ebb8 0203 	subs.w	r2, r8, r3
 80103e2:	eb64 0409 	sbc.w	r4, r4, r9
 80103e6:	fa04 f606 	lsl.w	r6, r4, r6
 80103ea:	fa22 f301 	lsr.w	r3, r2, r1
 80103ee:	431e      	orrs	r6, r3
 80103f0:	40cc      	lsrs	r4, r1
 80103f2:	e9c5 6400 	strd	r6, r4, [r5]
 80103f6:	2100      	movs	r1, #0
 80103f8:	e74f      	b.n	801029a <__udivmoddi4+0xa2>
 80103fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80103fe:	0c01      	lsrs	r1, r0, #16
 8010400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8010404:	b280      	uxth	r0, r0
 8010406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 801040a:	463b      	mov	r3, r7
 801040c:	4638      	mov	r0, r7
 801040e:	463c      	mov	r4, r7
 8010410:	46b8      	mov	r8, r7
 8010412:	46be      	mov	lr, r7
 8010414:	2620      	movs	r6, #32
 8010416:	fbb1 f1f7 	udiv	r1, r1, r7
 801041a:	eba2 0208 	sub.w	r2, r2, r8
 801041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8010422:	e766      	b.n	80102f2 <__udivmoddi4+0xfa>
 8010424:	4601      	mov	r1, r0
 8010426:	e718      	b.n	801025a <__udivmoddi4+0x62>
 8010428:	4610      	mov	r0, r2
 801042a:	e72c      	b.n	8010286 <__udivmoddi4+0x8e>
 801042c:	f1c6 0220 	rsb	r2, r6, #32
 8010430:	fa2e f302 	lsr.w	r3, lr, r2
 8010434:	40b7      	lsls	r7, r6
 8010436:	40b1      	lsls	r1, r6
 8010438:	fa20 f202 	lsr.w	r2, r0, r2
 801043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8010440:	430a      	orrs	r2, r1
 8010442:	fbb3 f8fe 	udiv	r8, r3, lr
 8010446:	b2bc      	uxth	r4, r7
 8010448:	fb0e 3318 	mls	r3, lr, r8, r3
 801044c:	0c11      	lsrs	r1, r2, #16
 801044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8010452:	fb08 f904 	mul.w	r9, r8, r4
 8010456:	40b0      	lsls	r0, r6
 8010458:	4589      	cmp	r9, r1
 801045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 801045e:	b280      	uxth	r0, r0
 8010460:	d93e      	bls.n	80104e0 <__udivmoddi4+0x2e8>
 8010462:	1879      	adds	r1, r7, r1
 8010464:	f108 3cff 	add.w	ip, r8, #4294967295
 8010468:	d201      	bcs.n	801046e <__udivmoddi4+0x276>
 801046a:	4589      	cmp	r9, r1
 801046c:	d81f      	bhi.n	80104ae <__udivmoddi4+0x2b6>
 801046e:	eba1 0109 	sub.w	r1, r1, r9
 8010472:	fbb1 f9fe 	udiv	r9, r1, lr
 8010476:	fb09 f804 	mul.w	r8, r9, r4
 801047a:	fb0e 1119 	mls	r1, lr, r9, r1
 801047e:	b292      	uxth	r2, r2
 8010480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8010484:	4542      	cmp	r2, r8
 8010486:	d229      	bcs.n	80104dc <__udivmoddi4+0x2e4>
 8010488:	18ba      	adds	r2, r7, r2
 801048a:	f109 31ff 	add.w	r1, r9, #4294967295
 801048e:	d2c4      	bcs.n	801041a <__udivmoddi4+0x222>
 8010490:	4542      	cmp	r2, r8
 8010492:	d2c2      	bcs.n	801041a <__udivmoddi4+0x222>
 8010494:	f1a9 0102 	sub.w	r1, r9, #2
 8010498:	443a      	add	r2, r7
 801049a:	e7be      	b.n	801041a <__udivmoddi4+0x222>
 801049c:	45f0      	cmp	r8, lr
 801049e:	d29d      	bcs.n	80103dc <__udivmoddi4+0x1e4>
 80104a0:	ebbe 0302 	subs.w	r3, lr, r2
 80104a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80104a8:	3801      	subs	r0, #1
 80104aa:	46e1      	mov	r9, ip
 80104ac:	e796      	b.n	80103dc <__udivmoddi4+0x1e4>
 80104ae:	eba7 0909 	sub.w	r9, r7, r9
 80104b2:	4449      	add	r1, r9
 80104b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80104b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80104bc:	fb09 f804 	mul.w	r8, r9, r4
 80104c0:	e7db      	b.n	801047a <__udivmoddi4+0x282>
 80104c2:	4673      	mov	r3, lr
 80104c4:	e77f      	b.n	80103c6 <__udivmoddi4+0x1ce>
 80104c6:	4650      	mov	r0, sl
 80104c8:	e766      	b.n	8010398 <__udivmoddi4+0x1a0>
 80104ca:	4608      	mov	r0, r1
 80104cc:	e6fd      	b.n	80102ca <__udivmoddi4+0xd2>
 80104ce:	443b      	add	r3, r7
 80104d0:	3a02      	subs	r2, #2
 80104d2:	e733      	b.n	801033c <__udivmoddi4+0x144>
 80104d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80104d8:	443b      	add	r3, r7
 80104da:	e71c      	b.n	8010316 <__udivmoddi4+0x11e>
 80104dc:	4649      	mov	r1, r9
 80104de:	e79c      	b.n	801041a <__udivmoddi4+0x222>
 80104e0:	eba1 0109 	sub.w	r1, r1, r9
 80104e4:	46c4      	mov	ip, r8
 80104e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80104ea:	fb09 f804 	mul.w	r8, r9, r4
 80104ee:	e7c4      	b.n	801047a <__udivmoddi4+0x282>

080104f0 <__aeabi_idiv0>:
 80104f0:	4770      	bx	lr
 80104f2:	bf00      	nop

080104f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80104f4:	b580      	push	{r7, lr}
 80104f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80104f8:	f000 fbce 	bl	8010c98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80104fc:	f000 f818 	bl	8010530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8010500:	f000 f914 	bl	801072c <MX_GPIO_Init>
  MX_I2C1_Init();
 8010504:	f000 f87e 	bl	8010604 <MX_I2C1_Init>
  MX_I2S3_Init();
 8010508:	f000 f8aa 	bl	8010660 <MX_I2S3_Init>
  MX_SPI1_Init();
 801050c:	f000 f8d8 	bl	80106c0 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8010510:	f007 f8be 	bl	8017690 <MX_USB_DEVICE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_13);
 8010514:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8010518:	4804      	ldr	r0, [pc, #16]	@ (801052c <main+0x38>)
 801051a:	f000 ff1a 	bl	8011352 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 801051e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8010522:	f000 fc2b 	bl	8010d7c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_13);
 8010526:	bf00      	nop
 8010528:	e7f4      	b.n	8010514 <main+0x20>
 801052a:	bf00      	nop
 801052c:	40020c00 	.word	0x40020c00

08010530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8010530:	b580      	push	{r7, lr}
 8010532:	b094      	sub	sp, #80	@ 0x50
 8010534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8010536:	f107 0320 	add.w	r3, r7, #32
 801053a:	2230      	movs	r2, #48	@ 0x30
 801053c:	2100      	movs	r1, #0
 801053e:	4618      	mov	r0, r3
 8010540:	f007 fda8 	bl	8018094 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8010544:	f107 030c 	add.w	r3, r7, #12
 8010548:	2200      	movs	r2, #0
 801054a:	601a      	str	r2, [r3, #0]
 801054c:	605a      	str	r2, [r3, #4]
 801054e:	609a      	str	r2, [r3, #8]
 8010550:	60da      	str	r2, [r3, #12]
 8010552:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8010554:	2300      	movs	r3, #0
 8010556:	60bb      	str	r3, [r7, #8]
 8010558:	4b28      	ldr	r3, [pc, #160]	@ (80105fc <SystemClock_Config+0xcc>)
 801055a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801055c:	4a27      	ldr	r2, [pc, #156]	@ (80105fc <SystemClock_Config+0xcc>)
 801055e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010562:	6413      	str	r3, [r2, #64]	@ 0x40
 8010564:	4b25      	ldr	r3, [pc, #148]	@ (80105fc <SystemClock_Config+0xcc>)
 8010566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010568:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801056c:	60bb      	str	r3, [r7, #8]
 801056e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8010570:	2300      	movs	r3, #0
 8010572:	607b      	str	r3, [r7, #4]
 8010574:	4b22      	ldr	r3, [pc, #136]	@ (8010600 <SystemClock_Config+0xd0>)
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	4a21      	ldr	r2, [pc, #132]	@ (8010600 <SystemClock_Config+0xd0>)
 801057a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 801057e:	6013      	str	r3, [r2, #0]
 8010580:	4b1f      	ldr	r3, [pc, #124]	@ (8010600 <SystemClock_Config+0xd0>)
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010588:	607b      	str	r3, [r7, #4]
 801058a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 801058c:	2301      	movs	r3, #1
 801058e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8010590:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8010594:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8010596:	2302      	movs	r3, #2
 8010598:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 801059a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 801059e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80105a0:	2308      	movs	r3, #8
 80105a2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80105a4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80105a8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80105aa:	2302      	movs	r3, #2
 80105ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80105ae:	2307      	movs	r3, #7
 80105b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80105b2:	f107 0320 	add.w	r3, r7, #32
 80105b6:	4618      	mov	r0, r3
 80105b8:	f002 ff1c 	bl	80133f4 <HAL_RCC_OscConfig>
 80105bc:	4603      	mov	r3, r0
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d001      	beq.n	80105c6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80105c2:	f000 f9b1 	bl	8010928 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80105c6:	230f      	movs	r3, #15
 80105c8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80105ca:	2302      	movs	r3, #2
 80105cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80105ce:	2300      	movs	r3, #0
 80105d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80105d2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80105d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80105d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80105dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80105de:	f107 030c 	add.w	r3, r7, #12
 80105e2:	2105      	movs	r1, #5
 80105e4:	4618      	mov	r0, r3
 80105e6:	f003 f97d 	bl	80138e4 <HAL_RCC_ClockConfig>
 80105ea:	4603      	mov	r3, r0
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d001      	beq.n	80105f4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80105f0:	f000 f99a 	bl	8010928 <Error_Handler>
  }
}
 80105f4:	bf00      	nop
 80105f6:	3750      	adds	r7, #80	@ 0x50
 80105f8:	46bd      	mov	sp, r7
 80105fa:	bd80      	pop	{r7, pc}
 80105fc:	40023800 	.word	0x40023800
 8010600:	40007000 	.word	0x40007000

08010604 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8010604:	b580      	push	{r7, lr}
 8010606:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8010608:	4b12      	ldr	r3, [pc, #72]	@ (8010654 <MX_I2C1_Init+0x50>)
 801060a:	4a13      	ldr	r2, [pc, #76]	@ (8010658 <MX_I2C1_Init+0x54>)
 801060c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 801060e:	4b11      	ldr	r3, [pc, #68]	@ (8010654 <MX_I2C1_Init+0x50>)
 8010610:	4a12      	ldr	r2, [pc, #72]	@ (801065c <MX_I2C1_Init+0x58>)
 8010612:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8010614:	4b0f      	ldr	r3, [pc, #60]	@ (8010654 <MX_I2C1_Init+0x50>)
 8010616:	2200      	movs	r2, #0
 8010618:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 801061a:	4b0e      	ldr	r3, [pc, #56]	@ (8010654 <MX_I2C1_Init+0x50>)
 801061c:	2200      	movs	r2, #0
 801061e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8010620:	4b0c      	ldr	r3, [pc, #48]	@ (8010654 <MX_I2C1_Init+0x50>)
 8010622:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8010626:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8010628:	4b0a      	ldr	r3, [pc, #40]	@ (8010654 <MX_I2C1_Init+0x50>)
 801062a:	2200      	movs	r2, #0
 801062c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 801062e:	4b09      	ldr	r3, [pc, #36]	@ (8010654 <MX_I2C1_Init+0x50>)
 8010630:	2200      	movs	r2, #0
 8010632:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8010634:	4b07      	ldr	r3, [pc, #28]	@ (8010654 <MX_I2C1_Init+0x50>)
 8010636:	2200      	movs	r2, #0
 8010638:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 801063a:	4b06      	ldr	r3, [pc, #24]	@ (8010654 <MX_I2C1_Init+0x50>)
 801063c:	2200      	movs	r2, #0
 801063e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8010640:	4804      	ldr	r0, [pc, #16]	@ (8010654 <MX_I2C1_Init+0x50>)
 8010642:	f000 fea1 	bl	8011388 <HAL_I2C_Init>
 8010646:	4603      	mov	r3, r0
 8010648:	2b00      	cmp	r3, #0
 801064a:	d001      	beq.n	8010650 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 801064c:	f000 f96c 	bl	8010928 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8010650:	bf00      	nop
 8010652:	bd80      	pop	{r7, pc}
 8010654:	20000118 	.word	0x20000118
 8010658:	40005400 	.word	0x40005400
 801065c:	000186a0 	.word	0x000186a0

08010660 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8010660:	b580      	push	{r7, lr}
 8010662:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8010664:	4b13      	ldr	r3, [pc, #76]	@ (80106b4 <MX_I2S3_Init+0x54>)
 8010666:	4a14      	ldr	r2, [pc, #80]	@ (80106b8 <MX_I2S3_Init+0x58>)
 8010668:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 801066a:	4b12      	ldr	r3, [pc, #72]	@ (80106b4 <MX_I2S3_Init+0x54>)
 801066c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010670:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8010672:	4b10      	ldr	r3, [pc, #64]	@ (80106b4 <MX_I2S3_Init+0x54>)
 8010674:	2200      	movs	r2, #0
 8010676:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8010678:	4b0e      	ldr	r3, [pc, #56]	@ (80106b4 <MX_I2S3_Init+0x54>)
 801067a:	2200      	movs	r2, #0
 801067c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 801067e:	4b0d      	ldr	r3, [pc, #52]	@ (80106b4 <MX_I2S3_Init+0x54>)
 8010680:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010684:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8010686:	4b0b      	ldr	r3, [pc, #44]	@ (80106b4 <MX_I2S3_Init+0x54>)
 8010688:	4a0c      	ldr	r2, [pc, #48]	@ (80106bc <MX_I2S3_Init+0x5c>)
 801068a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 801068c:	4b09      	ldr	r3, [pc, #36]	@ (80106b4 <MX_I2S3_Init+0x54>)
 801068e:	2200      	movs	r2, #0
 8010690:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8010692:	4b08      	ldr	r3, [pc, #32]	@ (80106b4 <MX_I2S3_Init+0x54>)
 8010694:	2200      	movs	r2, #0
 8010696:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8010698:	4b06      	ldr	r3, [pc, #24]	@ (80106b4 <MX_I2S3_Init+0x54>)
 801069a:	2200      	movs	r2, #0
 801069c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 801069e:	4805      	ldr	r0, [pc, #20]	@ (80106b4 <MX_I2S3_Init+0x54>)
 80106a0:	f000 ffb6 	bl	8011610 <HAL_I2S_Init>
 80106a4:	4603      	mov	r3, r0
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d001      	beq.n	80106ae <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80106aa:	f000 f93d 	bl	8010928 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80106ae:	bf00      	nop
 80106b0:	bd80      	pop	{r7, pc}
 80106b2:	bf00      	nop
 80106b4:	2000016c 	.word	0x2000016c
 80106b8:	40003c00 	.word	0x40003c00
 80106bc:	00017700 	.word	0x00017700

080106c0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80106c0:	b580      	push	{r7, lr}
 80106c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80106c4:	4b17      	ldr	r3, [pc, #92]	@ (8010724 <MX_SPI1_Init+0x64>)
 80106c6:	4a18      	ldr	r2, [pc, #96]	@ (8010728 <MX_SPI1_Init+0x68>)
 80106c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80106ca:	4b16      	ldr	r3, [pc, #88]	@ (8010724 <MX_SPI1_Init+0x64>)
 80106cc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80106d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80106d2:	4b14      	ldr	r3, [pc, #80]	@ (8010724 <MX_SPI1_Init+0x64>)
 80106d4:	2200      	movs	r2, #0
 80106d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80106d8:	4b12      	ldr	r3, [pc, #72]	@ (8010724 <MX_SPI1_Init+0x64>)
 80106da:	2200      	movs	r2, #0
 80106dc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80106de:	4b11      	ldr	r3, [pc, #68]	@ (8010724 <MX_SPI1_Init+0x64>)
 80106e0:	2200      	movs	r2, #0
 80106e2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80106e4:	4b0f      	ldr	r3, [pc, #60]	@ (8010724 <MX_SPI1_Init+0x64>)
 80106e6:	2200      	movs	r2, #0
 80106e8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80106ea:	4b0e      	ldr	r3, [pc, #56]	@ (8010724 <MX_SPI1_Init+0x64>)
 80106ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80106f0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80106f2:	4b0c      	ldr	r3, [pc, #48]	@ (8010724 <MX_SPI1_Init+0x64>)
 80106f4:	2200      	movs	r2, #0
 80106f6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80106f8:	4b0a      	ldr	r3, [pc, #40]	@ (8010724 <MX_SPI1_Init+0x64>)
 80106fa:	2200      	movs	r2, #0
 80106fc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80106fe:	4b09      	ldr	r3, [pc, #36]	@ (8010724 <MX_SPI1_Init+0x64>)
 8010700:	2200      	movs	r2, #0
 8010702:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8010704:	4b07      	ldr	r3, [pc, #28]	@ (8010724 <MX_SPI1_Init+0x64>)
 8010706:	2200      	movs	r2, #0
 8010708:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 801070a:	4b06      	ldr	r3, [pc, #24]	@ (8010724 <MX_SPI1_Init+0x64>)
 801070c:	220a      	movs	r2, #10
 801070e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8010710:	4804      	ldr	r0, [pc, #16]	@ (8010724 <MX_SPI1_Init+0x64>)
 8010712:	f003 fc35 	bl	8013f80 <HAL_SPI_Init>
 8010716:	4603      	mov	r3, r0
 8010718:	2b00      	cmp	r3, #0
 801071a:	d001      	beq.n	8010720 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 801071c:	f000 f904 	bl	8010928 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8010720:	bf00      	nop
 8010722:	bd80      	pop	{r7, pc}
 8010724:	200001b4 	.word	0x200001b4
 8010728:	40013000 	.word	0x40013000

0801072c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 801072c:	b580      	push	{r7, lr}
 801072e:	b08c      	sub	sp, #48	@ 0x30
 8010730:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010732:	f107 031c 	add.w	r3, r7, #28
 8010736:	2200      	movs	r2, #0
 8010738:	601a      	str	r2, [r3, #0]
 801073a:	605a      	str	r2, [r3, #4]
 801073c:	609a      	str	r2, [r3, #8]
 801073e:	60da      	str	r2, [r3, #12]
 8010740:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8010742:	2300      	movs	r3, #0
 8010744:	61bb      	str	r3, [r7, #24]
 8010746:	4b72      	ldr	r3, [pc, #456]	@ (8010910 <MX_GPIO_Init+0x1e4>)
 8010748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801074a:	4a71      	ldr	r2, [pc, #452]	@ (8010910 <MX_GPIO_Init+0x1e4>)
 801074c:	f043 0310 	orr.w	r3, r3, #16
 8010750:	6313      	str	r3, [r2, #48]	@ 0x30
 8010752:	4b6f      	ldr	r3, [pc, #444]	@ (8010910 <MX_GPIO_Init+0x1e4>)
 8010754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010756:	f003 0310 	and.w	r3, r3, #16
 801075a:	61bb      	str	r3, [r7, #24]
 801075c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 801075e:	2300      	movs	r3, #0
 8010760:	617b      	str	r3, [r7, #20]
 8010762:	4b6b      	ldr	r3, [pc, #428]	@ (8010910 <MX_GPIO_Init+0x1e4>)
 8010764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010766:	4a6a      	ldr	r2, [pc, #424]	@ (8010910 <MX_GPIO_Init+0x1e4>)
 8010768:	f043 0304 	orr.w	r3, r3, #4
 801076c:	6313      	str	r3, [r2, #48]	@ 0x30
 801076e:	4b68      	ldr	r3, [pc, #416]	@ (8010910 <MX_GPIO_Init+0x1e4>)
 8010770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010772:	f003 0304 	and.w	r3, r3, #4
 8010776:	617b      	str	r3, [r7, #20]
 8010778:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 801077a:	2300      	movs	r3, #0
 801077c:	613b      	str	r3, [r7, #16]
 801077e:	4b64      	ldr	r3, [pc, #400]	@ (8010910 <MX_GPIO_Init+0x1e4>)
 8010780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010782:	4a63      	ldr	r2, [pc, #396]	@ (8010910 <MX_GPIO_Init+0x1e4>)
 8010784:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010788:	6313      	str	r3, [r2, #48]	@ 0x30
 801078a:	4b61      	ldr	r3, [pc, #388]	@ (8010910 <MX_GPIO_Init+0x1e4>)
 801078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801078e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010792:	613b      	str	r3, [r7, #16]
 8010794:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8010796:	2300      	movs	r3, #0
 8010798:	60fb      	str	r3, [r7, #12]
 801079a:	4b5d      	ldr	r3, [pc, #372]	@ (8010910 <MX_GPIO_Init+0x1e4>)
 801079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801079e:	4a5c      	ldr	r2, [pc, #368]	@ (8010910 <MX_GPIO_Init+0x1e4>)
 80107a0:	f043 0301 	orr.w	r3, r3, #1
 80107a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80107a6:	4b5a      	ldr	r3, [pc, #360]	@ (8010910 <MX_GPIO_Init+0x1e4>)
 80107a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80107aa:	f003 0301 	and.w	r3, r3, #1
 80107ae:	60fb      	str	r3, [r7, #12]
 80107b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80107b2:	2300      	movs	r3, #0
 80107b4:	60bb      	str	r3, [r7, #8]
 80107b6:	4b56      	ldr	r3, [pc, #344]	@ (8010910 <MX_GPIO_Init+0x1e4>)
 80107b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80107ba:	4a55      	ldr	r2, [pc, #340]	@ (8010910 <MX_GPIO_Init+0x1e4>)
 80107bc:	f043 0302 	orr.w	r3, r3, #2
 80107c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80107c2:	4b53      	ldr	r3, [pc, #332]	@ (8010910 <MX_GPIO_Init+0x1e4>)
 80107c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80107c6:	f003 0302 	and.w	r3, r3, #2
 80107ca:	60bb      	str	r3, [r7, #8]
 80107cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80107ce:	2300      	movs	r3, #0
 80107d0:	607b      	str	r3, [r7, #4]
 80107d2:	4b4f      	ldr	r3, [pc, #316]	@ (8010910 <MX_GPIO_Init+0x1e4>)
 80107d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80107d6:	4a4e      	ldr	r2, [pc, #312]	@ (8010910 <MX_GPIO_Init+0x1e4>)
 80107d8:	f043 0308 	orr.w	r3, r3, #8
 80107dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80107de:	4b4c      	ldr	r3, [pc, #304]	@ (8010910 <MX_GPIO_Init+0x1e4>)
 80107e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80107e2:	f003 0308 	and.w	r3, r3, #8
 80107e6:	607b      	str	r3, [r7, #4]
 80107e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80107ea:	2200      	movs	r2, #0
 80107ec:	2108      	movs	r1, #8
 80107ee:	4849      	ldr	r0, [pc, #292]	@ (8010914 <MX_GPIO_Init+0x1e8>)
 80107f0:	f000 fd96 	bl	8011320 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80107f4:	2201      	movs	r2, #1
 80107f6:	2101      	movs	r1, #1
 80107f8:	4847      	ldr	r0, [pc, #284]	@ (8010918 <MX_GPIO_Init+0x1ec>)
 80107fa:	f000 fd91 	bl	8011320 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|GPIO_PIN_13|LD5_Pin|LD6_Pin
 80107fe:	2200      	movs	r2, #0
 8010800:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8010804:	4845      	ldr	r0, [pc, #276]	@ (801091c <MX_GPIO_Init+0x1f0>)
 8010806:	f000 fd8b 	bl	8011320 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 801080a:	2308      	movs	r3, #8
 801080c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801080e:	2301      	movs	r3, #1
 8010810:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010812:	2300      	movs	r3, #0
 8010814:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010816:	2300      	movs	r3, #0
 8010818:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 801081a:	f107 031c 	add.w	r3, r7, #28
 801081e:	4619      	mov	r1, r3
 8010820:	483c      	ldr	r0, [pc, #240]	@ (8010914 <MX_GPIO_Init+0x1e8>)
 8010822:	f000 fbe1 	bl	8010fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8010826:	2301      	movs	r3, #1
 8010828:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801082a:	2301      	movs	r3, #1
 801082c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801082e:	2300      	movs	r3, #0
 8010830:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010832:	2300      	movs	r3, #0
 8010834:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8010836:	f107 031c 	add.w	r3, r7, #28
 801083a:	4619      	mov	r1, r3
 801083c:	4836      	ldr	r0, [pc, #216]	@ (8010918 <MX_GPIO_Init+0x1ec>)
 801083e:	f000 fbd3 	bl	8010fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8010842:	2308      	movs	r3, #8
 8010844:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010846:	2302      	movs	r3, #2
 8010848:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801084a:	2300      	movs	r3, #0
 801084c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801084e:	2300      	movs	r3, #0
 8010850:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8010852:	2305      	movs	r3, #5
 8010854:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8010856:	f107 031c 	add.w	r3, r7, #28
 801085a:	4619      	mov	r1, r3
 801085c:	482e      	ldr	r0, [pc, #184]	@ (8010918 <MX_GPIO_Init+0x1ec>)
 801085e:	f000 fbc3 	bl	8010fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8010862:	2301      	movs	r3, #1
 8010864:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8010866:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 801086a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801086c:	2300      	movs	r3, #0
 801086e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8010870:	f107 031c 	add.w	r3, r7, #28
 8010874:	4619      	mov	r1, r3
 8010876:	482a      	ldr	r0, [pc, #168]	@ (8010920 <MX_GPIO_Init+0x1f4>)
 8010878:	f000 fbb6 	bl	8010fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 801087c:	2304      	movs	r3, #4
 801087e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010880:	2300      	movs	r3, #0
 8010882:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010884:	2300      	movs	r3, #0
 8010886:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8010888:	f107 031c 	add.w	r3, r7, #28
 801088c:	4619      	mov	r1, r3
 801088e:	4825      	ldr	r0, [pc, #148]	@ (8010924 <MX_GPIO_Init+0x1f8>)
 8010890:	f000 fbaa 	bl	8010fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8010894:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010898:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801089a:	2302      	movs	r3, #2
 801089c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801089e:	2300      	movs	r3, #0
 80108a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80108a2:	2300      	movs	r3, #0
 80108a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80108a6:	2305      	movs	r3, #5
 80108a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80108aa:	f107 031c 	add.w	r3, r7, #28
 80108ae:	4619      	mov	r1, r3
 80108b0:	481c      	ldr	r0, [pc, #112]	@ (8010924 <MX_GPIO_Init+0x1f8>)
 80108b2:	f000 fb99 	bl	8010fe8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin PD13 LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|GPIO_PIN_13|LD5_Pin|LD6_Pin
 80108b6:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80108ba:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80108bc:	2301      	movs	r3, #1
 80108be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80108c0:	2300      	movs	r3, #0
 80108c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80108c4:	2300      	movs	r3, #0
 80108c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80108c8:	f107 031c 	add.w	r3, r7, #28
 80108cc:	4619      	mov	r1, r3
 80108ce:	4813      	ldr	r0, [pc, #76]	@ (801091c <MX_GPIO_Init+0x1f0>)
 80108d0:	f000 fb8a 	bl	8010fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80108d4:	2320      	movs	r3, #32
 80108d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80108d8:	2300      	movs	r3, #0
 80108da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80108dc:	2300      	movs	r3, #0
 80108de:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80108e0:	f107 031c 	add.w	r3, r7, #28
 80108e4:	4619      	mov	r1, r3
 80108e6:	480d      	ldr	r0, [pc, #52]	@ (801091c <MX_GPIO_Init+0x1f0>)
 80108e8:	f000 fb7e 	bl	8010fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80108ec:	2302      	movs	r3, #2
 80108ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80108f0:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80108f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80108f6:	2300      	movs	r3, #0
 80108f8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80108fa:	f107 031c 	add.w	r3, r7, #28
 80108fe:	4619      	mov	r1, r3
 8010900:	4804      	ldr	r0, [pc, #16]	@ (8010914 <MX_GPIO_Init+0x1e8>)
 8010902:	f000 fb71 	bl	8010fe8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8010906:	bf00      	nop
 8010908:	3730      	adds	r7, #48	@ 0x30
 801090a:	46bd      	mov	sp, r7
 801090c:	bd80      	pop	{r7, pc}
 801090e:	bf00      	nop
 8010910:	40023800 	.word	0x40023800
 8010914:	40021000 	.word	0x40021000
 8010918:	40020800 	.word	0x40020800
 801091c:	40020c00 	.word	0x40020c00
 8010920:	40020000 	.word	0x40020000
 8010924:	40020400 	.word	0x40020400

08010928 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8010928:	b480      	push	{r7}
 801092a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 801092c:	b672      	cpsid	i
}
 801092e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8010930:	bf00      	nop
 8010932:	e7fd      	b.n	8010930 <Error_Handler+0x8>

08010934 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8010934:	b580      	push	{r7, lr}
 8010936:	b082      	sub	sp, #8
 8010938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801093a:	2300      	movs	r3, #0
 801093c:	607b      	str	r3, [r7, #4]
 801093e:	4b10      	ldr	r3, [pc, #64]	@ (8010980 <HAL_MspInit+0x4c>)
 8010940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010942:	4a0f      	ldr	r2, [pc, #60]	@ (8010980 <HAL_MspInit+0x4c>)
 8010944:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8010948:	6453      	str	r3, [r2, #68]	@ 0x44
 801094a:	4b0d      	ldr	r3, [pc, #52]	@ (8010980 <HAL_MspInit+0x4c>)
 801094c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801094e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010952:	607b      	str	r3, [r7, #4]
 8010954:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8010956:	2300      	movs	r3, #0
 8010958:	603b      	str	r3, [r7, #0]
 801095a:	4b09      	ldr	r3, [pc, #36]	@ (8010980 <HAL_MspInit+0x4c>)
 801095c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801095e:	4a08      	ldr	r2, [pc, #32]	@ (8010980 <HAL_MspInit+0x4c>)
 8010960:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010964:	6413      	str	r3, [r2, #64]	@ 0x40
 8010966:	4b06      	ldr	r3, [pc, #24]	@ (8010980 <HAL_MspInit+0x4c>)
 8010968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801096a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801096e:	603b      	str	r3, [r7, #0]
 8010970:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8010972:	2007      	movs	r0, #7
 8010974:	f000 faf6 	bl	8010f64 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8010978:	bf00      	nop
 801097a:	3708      	adds	r7, #8
 801097c:	46bd      	mov	sp, r7
 801097e:	bd80      	pop	{r7, pc}
 8010980:	40023800 	.word	0x40023800

08010984 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8010984:	b580      	push	{r7, lr}
 8010986:	b08a      	sub	sp, #40	@ 0x28
 8010988:	af00      	add	r7, sp, #0
 801098a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801098c:	f107 0314 	add.w	r3, r7, #20
 8010990:	2200      	movs	r2, #0
 8010992:	601a      	str	r2, [r3, #0]
 8010994:	605a      	str	r2, [r3, #4]
 8010996:	609a      	str	r2, [r3, #8]
 8010998:	60da      	str	r2, [r3, #12]
 801099a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	4a19      	ldr	r2, [pc, #100]	@ (8010a08 <HAL_I2C_MspInit+0x84>)
 80109a2:	4293      	cmp	r3, r2
 80109a4:	d12c      	bne.n	8010a00 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80109a6:	2300      	movs	r3, #0
 80109a8:	613b      	str	r3, [r7, #16]
 80109aa:	4b18      	ldr	r3, [pc, #96]	@ (8010a0c <HAL_I2C_MspInit+0x88>)
 80109ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80109ae:	4a17      	ldr	r2, [pc, #92]	@ (8010a0c <HAL_I2C_MspInit+0x88>)
 80109b0:	f043 0302 	orr.w	r3, r3, #2
 80109b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80109b6:	4b15      	ldr	r3, [pc, #84]	@ (8010a0c <HAL_I2C_MspInit+0x88>)
 80109b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80109ba:	f003 0302 	and.w	r3, r3, #2
 80109be:	613b      	str	r3, [r7, #16]
 80109c0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80109c2:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80109c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80109c8:	2312      	movs	r3, #18
 80109ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80109cc:	2301      	movs	r3, #1
 80109ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80109d0:	2300      	movs	r3, #0
 80109d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80109d4:	2304      	movs	r3, #4
 80109d6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80109d8:	f107 0314 	add.w	r3, r7, #20
 80109dc:	4619      	mov	r1, r3
 80109de:	480c      	ldr	r0, [pc, #48]	@ (8010a10 <HAL_I2C_MspInit+0x8c>)
 80109e0:	f000 fb02 	bl	8010fe8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80109e4:	2300      	movs	r3, #0
 80109e6:	60fb      	str	r3, [r7, #12]
 80109e8:	4b08      	ldr	r3, [pc, #32]	@ (8010a0c <HAL_I2C_MspInit+0x88>)
 80109ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80109ec:	4a07      	ldr	r2, [pc, #28]	@ (8010a0c <HAL_I2C_MspInit+0x88>)
 80109ee:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80109f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80109f4:	4b05      	ldr	r3, [pc, #20]	@ (8010a0c <HAL_I2C_MspInit+0x88>)
 80109f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80109f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80109fc:	60fb      	str	r3, [r7, #12]
 80109fe:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8010a00:	bf00      	nop
 8010a02:	3728      	adds	r7, #40	@ 0x28
 8010a04:	46bd      	mov	sp, r7
 8010a06:	bd80      	pop	{r7, pc}
 8010a08:	40005400 	.word	0x40005400
 8010a0c:	40023800 	.word	0x40023800
 8010a10:	40020400 	.word	0x40020400

08010a14 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8010a14:	b580      	push	{r7, lr}
 8010a16:	b08e      	sub	sp, #56	@ 0x38
 8010a18:	af00      	add	r7, sp, #0
 8010a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010a1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010a20:	2200      	movs	r2, #0
 8010a22:	601a      	str	r2, [r3, #0]
 8010a24:	605a      	str	r2, [r3, #4]
 8010a26:	609a      	str	r2, [r3, #8]
 8010a28:	60da      	str	r2, [r3, #12]
 8010a2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8010a2c:	f107 0314 	add.w	r3, r7, #20
 8010a30:	2200      	movs	r2, #0
 8010a32:	601a      	str	r2, [r3, #0]
 8010a34:	605a      	str	r2, [r3, #4]
 8010a36:	609a      	str	r2, [r3, #8]
 8010a38:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	681b      	ldr	r3, [r3, #0]
 8010a3e:	4a31      	ldr	r2, [pc, #196]	@ (8010b04 <HAL_I2S_MspInit+0xf0>)
 8010a40:	4293      	cmp	r3, r2
 8010a42:	d15a      	bne.n	8010afa <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8010a44:	2301      	movs	r3, #1
 8010a46:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8010a48:	23c0      	movs	r3, #192	@ 0xc0
 8010a4a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8010a4c:	2302      	movs	r3, #2
 8010a4e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8010a50:	f107 0314 	add.w	r3, r7, #20
 8010a54:	4618      	mov	r0, r3
 8010a56:	f003 f951 	bl	8013cfc <HAL_RCCEx_PeriphCLKConfig>
 8010a5a:	4603      	mov	r3, r0
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d001      	beq.n	8010a64 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8010a60:	f7ff ff62 	bl	8010928 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8010a64:	2300      	movs	r3, #0
 8010a66:	613b      	str	r3, [r7, #16]
 8010a68:	4b27      	ldr	r3, [pc, #156]	@ (8010b08 <HAL_I2S_MspInit+0xf4>)
 8010a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010a6c:	4a26      	ldr	r2, [pc, #152]	@ (8010b08 <HAL_I2S_MspInit+0xf4>)
 8010a6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010a72:	6413      	str	r3, [r2, #64]	@ 0x40
 8010a74:	4b24      	ldr	r3, [pc, #144]	@ (8010b08 <HAL_I2S_MspInit+0xf4>)
 8010a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010a78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010a7c:	613b      	str	r3, [r7, #16]
 8010a7e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010a80:	2300      	movs	r3, #0
 8010a82:	60fb      	str	r3, [r7, #12]
 8010a84:	4b20      	ldr	r3, [pc, #128]	@ (8010b08 <HAL_I2S_MspInit+0xf4>)
 8010a86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010a88:	4a1f      	ldr	r2, [pc, #124]	@ (8010b08 <HAL_I2S_MspInit+0xf4>)
 8010a8a:	f043 0301 	orr.w	r3, r3, #1
 8010a8e:	6313      	str	r3, [r2, #48]	@ 0x30
 8010a90:	4b1d      	ldr	r3, [pc, #116]	@ (8010b08 <HAL_I2S_MspInit+0xf4>)
 8010a92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010a94:	f003 0301 	and.w	r3, r3, #1
 8010a98:	60fb      	str	r3, [r7, #12]
 8010a9a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8010a9c:	2300      	movs	r3, #0
 8010a9e:	60bb      	str	r3, [r7, #8]
 8010aa0:	4b19      	ldr	r3, [pc, #100]	@ (8010b08 <HAL_I2S_MspInit+0xf4>)
 8010aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010aa4:	4a18      	ldr	r2, [pc, #96]	@ (8010b08 <HAL_I2S_MspInit+0xf4>)
 8010aa6:	f043 0304 	orr.w	r3, r3, #4
 8010aaa:	6313      	str	r3, [r2, #48]	@ 0x30
 8010aac:	4b16      	ldr	r3, [pc, #88]	@ (8010b08 <HAL_I2S_MspInit+0xf4>)
 8010aae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010ab0:	f003 0304 	and.w	r3, r3, #4
 8010ab4:	60bb      	str	r3, [r7, #8]
 8010ab6:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8010ab8:	2310      	movs	r3, #16
 8010aba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010abc:	2302      	movs	r3, #2
 8010abe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010ac0:	2300      	movs	r3, #0
 8010ac2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010ac4:	2300      	movs	r3, #0
 8010ac6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8010ac8:	2306      	movs	r3, #6
 8010aca:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8010acc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010ad0:	4619      	mov	r1, r3
 8010ad2:	480e      	ldr	r0, [pc, #56]	@ (8010b0c <HAL_I2S_MspInit+0xf8>)
 8010ad4:	f000 fa88 	bl	8010fe8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8010ad8:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8010adc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010ade:	2302      	movs	r3, #2
 8010ae0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010ae2:	2300      	movs	r3, #0
 8010ae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010ae6:	2300      	movs	r3, #0
 8010ae8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8010aea:	2306      	movs	r3, #6
 8010aec:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8010aee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010af2:	4619      	mov	r1, r3
 8010af4:	4806      	ldr	r0, [pc, #24]	@ (8010b10 <HAL_I2S_MspInit+0xfc>)
 8010af6:	f000 fa77 	bl	8010fe8 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8010afa:	bf00      	nop
 8010afc:	3738      	adds	r7, #56	@ 0x38
 8010afe:	46bd      	mov	sp, r7
 8010b00:	bd80      	pop	{r7, pc}
 8010b02:	bf00      	nop
 8010b04:	40003c00 	.word	0x40003c00
 8010b08:	40023800 	.word	0x40023800
 8010b0c:	40020000 	.word	0x40020000
 8010b10:	40020800 	.word	0x40020800

08010b14 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8010b14:	b580      	push	{r7, lr}
 8010b16:	b08a      	sub	sp, #40	@ 0x28
 8010b18:	af00      	add	r7, sp, #0
 8010b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010b1c:	f107 0314 	add.w	r3, r7, #20
 8010b20:	2200      	movs	r2, #0
 8010b22:	601a      	str	r2, [r3, #0]
 8010b24:	605a      	str	r2, [r3, #4]
 8010b26:	609a      	str	r2, [r3, #8]
 8010b28:	60da      	str	r2, [r3, #12]
 8010b2a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	681b      	ldr	r3, [r3, #0]
 8010b30:	4a19      	ldr	r2, [pc, #100]	@ (8010b98 <HAL_SPI_MspInit+0x84>)
 8010b32:	4293      	cmp	r3, r2
 8010b34:	d12b      	bne.n	8010b8e <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8010b36:	2300      	movs	r3, #0
 8010b38:	613b      	str	r3, [r7, #16]
 8010b3a:	4b18      	ldr	r3, [pc, #96]	@ (8010b9c <HAL_SPI_MspInit+0x88>)
 8010b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010b3e:	4a17      	ldr	r2, [pc, #92]	@ (8010b9c <HAL_SPI_MspInit+0x88>)
 8010b40:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8010b44:	6453      	str	r3, [r2, #68]	@ 0x44
 8010b46:	4b15      	ldr	r3, [pc, #84]	@ (8010b9c <HAL_SPI_MspInit+0x88>)
 8010b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010b4a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8010b4e:	613b      	str	r3, [r7, #16]
 8010b50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010b52:	2300      	movs	r3, #0
 8010b54:	60fb      	str	r3, [r7, #12]
 8010b56:	4b11      	ldr	r3, [pc, #68]	@ (8010b9c <HAL_SPI_MspInit+0x88>)
 8010b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010b5a:	4a10      	ldr	r2, [pc, #64]	@ (8010b9c <HAL_SPI_MspInit+0x88>)
 8010b5c:	f043 0301 	orr.w	r3, r3, #1
 8010b60:	6313      	str	r3, [r2, #48]	@ 0x30
 8010b62:	4b0e      	ldr	r3, [pc, #56]	@ (8010b9c <HAL_SPI_MspInit+0x88>)
 8010b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010b66:	f003 0301 	and.w	r3, r3, #1
 8010b6a:	60fb      	str	r3, [r7, #12]
 8010b6c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8010b6e:	23e0      	movs	r3, #224	@ 0xe0
 8010b70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010b72:	2302      	movs	r3, #2
 8010b74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010b76:	2300      	movs	r3, #0
 8010b78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010b7a:	2300      	movs	r3, #0
 8010b7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8010b7e:	2305      	movs	r3, #5
 8010b80:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010b82:	f107 0314 	add.w	r3, r7, #20
 8010b86:	4619      	mov	r1, r3
 8010b88:	4805      	ldr	r0, [pc, #20]	@ (8010ba0 <HAL_SPI_MspInit+0x8c>)
 8010b8a:	f000 fa2d 	bl	8010fe8 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8010b8e:	bf00      	nop
 8010b90:	3728      	adds	r7, #40	@ 0x28
 8010b92:	46bd      	mov	sp, r7
 8010b94:	bd80      	pop	{r7, pc}
 8010b96:	bf00      	nop
 8010b98:	40013000 	.word	0x40013000
 8010b9c:	40023800 	.word	0x40023800
 8010ba0:	40020000 	.word	0x40020000

08010ba4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8010ba4:	b480      	push	{r7}
 8010ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8010ba8:	bf00      	nop
 8010baa:	e7fd      	b.n	8010ba8 <NMI_Handler+0x4>

08010bac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8010bac:	b480      	push	{r7}
 8010bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8010bb0:	bf00      	nop
 8010bb2:	e7fd      	b.n	8010bb0 <HardFault_Handler+0x4>

08010bb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8010bb4:	b480      	push	{r7}
 8010bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8010bb8:	bf00      	nop
 8010bba:	e7fd      	b.n	8010bb8 <MemManage_Handler+0x4>

08010bbc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8010bbc:	b480      	push	{r7}
 8010bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8010bc0:	bf00      	nop
 8010bc2:	e7fd      	b.n	8010bc0 <BusFault_Handler+0x4>

08010bc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8010bc4:	b480      	push	{r7}
 8010bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8010bc8:	bf00      	nop
 8010bca:	e7fd      	b.n	8010bc8 <UsageFault_Handler+0x4>

08010bcc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8010bcc:	b480      	push	{r7}
 8010bce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8010bd0:	bf00      	nop
 8010bd2:	46bd      	mov	sp, r7
 8010bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bd8:	4770      	bx	lr

08010bda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8010bda:	b480      	push	{r7}
 8010bdc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8010bde:	bf00      	nop
 8010be0:	46bd      	mov	sp, r7
 8010be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010be6:	4770      	bx	lr

08010be8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8010be8:	b480      	push	{r7}
 8010bea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8010bec:	bf00      	nop
 8010bee:	46bd      	mov	sp, r7
 8010bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bf4:	4770      	bx	lr

08010bf6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8010bf6:	b580      	push	{r7, lr}
 8010bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8010bfa:	f000 f89f 	bl	8010d3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8010bfe:	bf00      	nop
 8010c00:	bd80      	pop	{r7, pc}
	...

08010c04 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8010c04:	b580      	push	{r7, lr}
 8010c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8010c08:	4802      	ldr	r0, [pc, #8]	@ (8010c14 <OTG_FS_IRQHandler+0x10>)
 8010c0a:	f001 fae5 	bl	80121d8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8010c0e:	bf00      	nop
 8010c10:	bd80      	pop	{r7, pc}
 8010c12:	bf00      	nop
 8010c14:	200016f0 	.word	0x200016f0

08010c18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8010c18:	b480      	push	{r7}
 8010c1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8010c1c:	4b07      	ldr	r3, [pc, #28]	@ (8010c3c <SystemInit+0x24>)
 8010c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010c22:	4a06      	ldr	r2, [pc, #24]	@ (8010c3c <SystemInit+0x24>)
 8010c24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8010c28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8010c2c:	4b03      	ldr	r3, [pc, #12]	@ (8010c3c <SystemInit+0x24>)
 8010c2e:	4a04      	ldr	r2, [pc, #16]	@ (8010c40 <SystemInit+0x28>)
 8010c30:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8010c32:	bf00      	nop
 8010c34:	46bd      	mov	sp, r7
 8010c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c3a:	4770      	bx	lr
 8010c3c:	e000ed00 	.word	0xe000ed00
 8010c40:	08010000 	.word	0x08010000

08010c44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8010c44:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8010c7c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8010c48:	f7ff ffe6 	bl	8010c18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8010c4c:	480c      	ldr	r0, [pc, #48]	@ (8010c80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8010c4e:	490d      	ldr	r1, [pc, #52]	@ (8010c84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8010c50:	4a0d      	ldr	r2, [pc, #52]	@ (8010c88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8010c52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8010c54:	e002      	b.n	8010c5c <LoopCopyDataInit>

08010c56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8010c56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8010c58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8010c5a:	3304      	adds	r3, #4

08010c5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8010c5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8010c5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8010c60:	d3f9      	bcc.n	8010c56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8010c62:	4a0a      	ldr	r2, [pc, #40]	@ (8010c8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8010c64:	4c0a      	ldr	r4, [pc, #40]	@ (8010c90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8010c66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8010c68:	e001      	b.n	8010c6e <LoopFillZerobss>

08010c6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8010c6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8010c6c:	3204      	adds	r2, #4

08010c6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8010c6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8010c70:	d3fb      	bcc.n	8010c6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8010c72:	f007 fa17 	bl	80180a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8010c76:	f7ff fc3d 	bl	80104f4 <main>
  bx  lr    
 8010c7a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8010c7c:	2001fffc 	.word	0x2001fffc
  ldr r0, =_sdata
 8010c80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8010c84:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8010c88:	08018174 	.word	0x08018174
  ldr r2, =_sbss
 8010c8c:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8010c90:	20001df4 	.word	0x20001df4

08010c94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8010c94:	e7fe      	b.n	8010c94 <ADC_IRQHandler>
	...

08010c98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8010c98:	b580      	push	{r7, lr}
 8010c9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8010c9c:	4b0e      	ldr	r3, [pc, #56]	@ (8010cd8 <HAL_Init+0x40>)
 8010c9e:	681b      	ldr	r3, [r3, #0]
 8010ca0:	4a0d      	ldr	r2, [pc, #52]	@ (8010cd8 <HAL_Init+0x40>)
 8010ca2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8010ca6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8010ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8010cd8 <HAL_Init+0x40>)
 8010caa:	681b      	ldr	r3, [r3, #0]
 8010cac:	4a0a      	ldr	r2, [pc, #40]	@ (8010cd8 <HAL_Init+0x40>)
 8010cae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8010cb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8010cb4:	4b08      	ldr	r3, [pc, #32]	@ (8010cd8 <HAL_Init+0x40>)
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	4a07      	ldr	r2, [pc, #28]	@ (8010cd8 <HAL_Init+0x40>)
 8010cba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010cbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8010cc0:	2003      	movs	r0, #3
 8010cc2:	f000 f94f 	bl	8010f64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8010cc6:	2000      	movs	r0, #0
 8010cc8:	f000 f808 	bl	8010cdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8010ccc:	f7ff fe32 	bl	8010934 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8010cd0:	2300      	movs	r3, #0
}
 8010cd2:	4618      	mov	r0, r3
 8010cd4:	bd80      	pop	{r7, pc}
 8010cd6:	bf00      	nop
 8010cd8:	40023c00 	.word	0x40023c00

08010cdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8010cdc:	b580      	push	{r7, lr}
 8010cde:	b082      	sub	sp, #8
 8010ce0:	af00      	add	r7, sp, #0
 8010ce2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8010ce4:	4b12      	ldr	r3, [pc, #72]	@ (8010d30 <HAL_InitTick+0x54>)
 8010ce6:	681a      	ldr	r2, [r3, #0]
 8010ce8:	4b12      	ldr	r3, [pc, #72]	@ (8010d34 <HAL_InitTick+0x58>)
 8010cea:	781b      	ldrb	r3, [r3, #0]
 8010cec:	4619      	mov	r1, r3
 8010cee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010cf2:	fbb3 f3f1 	udiv	r3, r3, r1
 8010cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8010cfa:	4618      	mov	r0, r3
 8010cfc:	f000 f967 	bl	8010fce <HAL_SYSTICK_Config>
 8010d00:	4603      	mov	r3, r0
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d001      	beq.n	8010d0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8010d06:	2301      	movs	r3, #1
 8010d08:	e00e      	b.n	8010d28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	2b0f      	cmp	r3, #15
 8010d0e:	d80a      	bhi.n	8010d26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8010d10:	2200      	movs	r2, #0
 8010d12:	6879      	ldr	r1, [r7, #4]
 8010d14:	f04f 30ff 	mov.w	r0, #4294967295
 8010d18:	f000 f92f 	bl	8010f7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8010d1c:	4a06      	ldr	r2, [pc, #24]	@ (8010d38 <HAL_InitTick+0x5c>)
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8010d22:	2300      	movs	r3, #0
 8010d24:	e000      	b.n	8010d28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8010d26:	2301      	movs	r3, #1
}
 8010d28:	4618      	mov	r0, r3
 8010d2a:	3708      	adds	r7, #8
 8010d2c:	46bd      	mov	sp, r7
 8010d2e:	bd80      	pop	{r7, pc}
 8010d30:	20000000 	.word	0x20000000
 8010d34:	20000008 	.word	0x20000008
 8010d38:	20000004 	.word	0x20000004

08010d3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8010d3c:	b480      	push	{r7}
 8010d3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8010d40:	4b06      	ldr	r3, [pc, #24]	@ (8010d5c <HAL_IncTick+0x20>)
 8010d42:	781b      	ldrb	r3, [r3, #0]
 8010d44:	461a      	mov	r2, r3
 8010d46:	4b06      	ldr	r3, [pc, #24]	@ (8010d60 <HAL_IncTick+0x24>)
 8010d48:	681b      	ldr	r3, [r3, #0]
 8010d4a:	4413      	add	r3, r2
 8010d4c:	4a04      	ldr	r2, [pc, #16]	@ (8010d60 <HAL_IncTick+0x24>)
 8010d4e:	6013      	str	r3, [r2, #0]
}
 8010d50:	bf00      	nop
 8010d52:	46bd      	mov	sp, r7
 8010d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d58:	4770      	bx	lr
 8010d5a:	bf00      	nop
 8010d5c:	20000008 	.word	0x20000008
 8010d60:	2000020c 	.word	0x2000020c

08010d64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8010d64:	b480      	push	{r7}
 8010d66:	af00      	add	r7, sp, #0
  return uwTick;
 8010d68:	4b03      	ldr	r3, [pc, #12]	@ (8010d78 <HAL_GetTick+0x14>)
 8010d6a:	681b      	ldr	r3, [r3, #0]
}
 8010d6c:	4618      	mov	r0, r3
 8010d6e:	46bd      	mov	sp, r7
 8010d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d74:	4770      	bx	lr
 8010d76:	bf00      	nop
 8010d78:	2000020c 	.word	0x2000020c

08010d7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8010d7c:	b580      	push	{r7, lr}
 8010d7e:	b084      	sub	sp, #16
 8010d80:	af00      	add	r7, sp, #0
 8010d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8010d84:	f7ff ffee 	bl	8010d64 <HAL_GetTick>
 8010d88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8010d8e:	68fb      	ldr	r3, [r7, #12]
 8010d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d94:	d005      	beq.n	8010da2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8010d96:	4b0a      	ldr	r3, [pc, #40]	@ (8010dc0 <HAL_Delay+0x44>)
 8010d98:	781b      	ldrb	r3, [r3, #0]
 8010d9a:	461a      	mov	r2, r3
 8010d9c:	68fb      	ldr	r3, [r7, #12]
 8010d9e:	4413      	add	r3, r2
 8010da0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8010da2:	bf00      	nop
 8010da4:	f7ff ffde 	bl	8010d64 <HAL_GetTick>
 8010da8:	4602      	mov	r2, r0
 8010daa:	68bb      	ldr	r3, [r7, #8]
 8010dac:	1ad3      	subs	r3, r2, r3
 8010dae:	68fa      	ldr	r2, [r7, #12]
 8010db0:	429a      	cmp	r2, r3
 8010db2:	d8f7      	bhi.n	8010da4 <HAL_Delay+0x28>
  {
  }
}
 8010db4:	bf00      	nop
 8010db6:	bf00      	nop
 8010db8:	3710      	adds	r7, #16
 8010dba:	46bd      	mov	sp, r7
 8010dbc:	bd80      	pop	{r7, pc}
 8010dbe:	bf00      	nop
 8010dc0:	20000008 	.word	0x20000008

08010dc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8010dc4:	b480      	push	{r7}
 8010dc6:	b085      	sub	sp, #20
 8010dc8:	af00      	add	r7, sp, #0
 8010dca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	f003 0307 	and.w	r3, r3, #7
 8010dd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8010dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8010e08 <__NVIC_SetPriorityGrouping+0x44>)
 8010dd6:	68db      	ldr	r3, [r3, #12]
 8010dd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8010dda:	68ba      	ldr	r2, [r7, #8]
 8010ddc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8010de0:	4013      	ands	r3, r2
 8010de2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8010de4:	68fb      	ldr	r3, [r7, #12]
 8010de6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8010de8:	68bb      	ldr	r3, [r7, #8]
 8010dea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8010dec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8010df0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8010df4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8010df6:	4a04      	ldr	r2, [pc, #16]	@ (8010e08 <__NVIC_SetPriorityGrouping+0x44>)
 8010df8:	68bb      	ldr	r3, [r7, #8]
 8010dfa:	60d3      	str	r3, [r2, #12]
}
 8010dfc:	bf00      	nop
 8010dfe:	3714      	adds	r7, #20
 8010e00:	46bd      	mov	sp, r7
 8010e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e06:	4770      	bx	lr
 8010e08:	e000ed00 	.word	0xe000ed00

08010e0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8010e0c:	b480      	push	{r7}
 8010e0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8010e10:	4b04      	ldr	r3, [pc, #16]	@ (8010e24 <__NVIC_GetPriorityGrouping+0x18>)
 8010e12:	68db      	ldr	r3, [r3, #12]
 8010e14:	0a1b      	lsrs	r3, r3, #8
 8010e16:	f003 0307 	and.w	r3, r3, #7
}
 8010e1a:	4618      	mov	r0, r3
 8010e1c:	46bd      	mov	sp, r7
 8010e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e22:	4770      	bx	lr
 8010e24:	e000ed00 	.word	0xe000ed00

08010e28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8010e28:	b480      	push	{r7}
 8010e2a:	b083      	sub	sp, #12
 8010e2c:	af00      	add	r7, sp, #0
 8010e2e:	4603      	mov	r3, r0
 8010e30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	db0b      	blt.n	8010e52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010e3a:	79fb      	ldrb	r3, [r7, #7]
 8010e3c:	f003 021f 	and.w	r2, r3, #31
 8010e40:	4907      	ldr	r1, [pc, #28]	@ (8010e60 <__NVIC_EnableIRQ+0x38>)
 8010e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010e46:	095b      	lsrs	r3, r3, #5
 8010e48:	2001      	movs	r0, #1
 8010e4a:	fa00 f202 	lsl.w	r2, r0, r2
 8010e4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8010e52:	bf00      	nop
 8010e54:	370c      	adds	r7, #12
 8010e56:	46bd      	mov	sp, r7
 8010e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e5c:	4770      	bx	lr
 8010e5e:	bf00      	nop
 8010e60:	e000e100 	.word	0xe000e100

08010e64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8010e64:	b480      	push	{r7}
 8010e66:	b083      	sub	sp, #12
 8010e68:	af00      	add	r7, sp, #0
 8010e6a:	4603      	mov	r3, r0
 8010e6c:	6039      	str	r1, [r7, #0]
 8010e6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	db0a      	blt.n	8010e8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010e78:	683b      	ldr	r3, [r7, #0]
 8010e7a:	b2da      	uxtb	r2, r3
 8010e7c:	490c      	ldr	r1, [pc, #48]	@ (8010eb0 <__NVIC_SetPriority+0x4c>)
 8010e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010e82:	0112      	lsls	r2, r2, #4
 8010e84:	b2d2      	uxtb	r2, r2
 8010e86:	440b      	add	r3, r1
 8010e88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8010e8c:	e00a      	b.n	8010ea4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010e8e:	683b      	ldr	r3, [r7, #0]
 8010e90:	b2da      	uxtb	r2, r3
 8010e92:	4908      	ldr	r1, [pc, #32]	@ (8010eb4 <__NVIC_SetPriority+0x50>)
 8010e94:	79fb      	ldrb	r3, [r7, #7]
 8010e96:	f003 030f 	and.w	r3, r3, #15
 8010e9a:	3b04      	subs	r3, #4
 8010e9c:	0112      	lsls	r2, r2, #4
 8010e9e:	b2d2      	uxtb	r2, r2
 8010ea0:	440b      	add	r3, r1
 8010ea2:	761a      	strb	r2, [r3, #24]
}
 8010ea4:	bf00      	nop
 8010ea6:	370c      	adds	r7, #12
 8010ea8:	46bd      	mov	sp, r7
 8010eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eae:	4770      	bx	lr
 8010eb0:	e000e100 	.word	0xe000e100
 8010eb4:	e000ed00 	.word	0xe000ed00

08010eb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8010eb8:	b480      	push	{r7}
 8010eba:	b089      	sub	sp, #36	@ 0x24
 8010ebc:	af00      	add	r7, sp, #0
 8010ebe:	60f8      	str	r0, [r7, #12]
 8010ec0:	60b9      	str	r1, [r7, #8]
 8010ec2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8010ec4:	68fb      	ldr	r3, [r7, #12]
 8010ec6:	f003 0307 	and.w	r3, r3, #7
 8010eca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8010ecc:	69fb      	ldr	r3, [r7, #28]
 8010ece:	f1c3 0307 	rsb	r3, r3, #7
 8010ed2:	2b04      	cmp	r3, #4
 8010ed4:	bf28      	it	cs
 8010ed6:	2304      	movcs	r3, #4
 8010ed8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8010eda:	69fb      	ldr	r3, [r7, #28]
 8010edc:	3304      	adds	r3, #4
 8010ede:	2b06      	cmp	r3, #6
 8010ee0:	d902      	bls.n	8010ee8 <NVIC_EncodePriority+0x30>
 8010ee2:	69fb      	ldr	r3, [r7, #28]
 8010ee4:	3b03      	subs	r3, #3
 8010ee6:	e000      	b.n	8010eea <NVIC_EncodePriority+0x32>
 8010ee8:	2300      	movs	r3, #0
 8010eea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010eec:	f04f 32ff 	mov.w	r2, #4294967295
 8010ef0:	69bb      	ldr	r3, [r7, #24]
 8010ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8010ef6:	43da      	mvns	r2, r3
 8010ef8:	68bb      	ldr	r3, [r7, #8]
 8010efa:	401a      	ands	r2, r3
 8010efc:	697b      	ldr	r3, [r7, #20]
 8010efe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8010f00:	f04f 31ff 	mov.w	r1, #4294967295
 8010f04:	697b      	ldr	r3, [r7, #20]
 8010f06:	fa01 f303 	lsl.w	r3, r1, r3
 8010f0a:	43d9      	mvns	r1, r3
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010f10:	4313      	orrs	r3, r2
         );
}
 8010f12:	4618      	mov	r0, r3
 8010f14:	3724      	adds	r7, #36	@ 0x24
 8010f16:	46bd      	mov	sp, r7
 8010f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f1c:	4770      	bx	lr
	...

08010f20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8010f20:	b580      	push	{r7, lr}
 8010f22:	b082      	sub	sp, #8
 8010f24:	af00      	add	r7, sp, #0
 8010f26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	3b01      	subs	r3, #1
 8010f2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010f30:	d301      	bcc.n	8010f36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8010f32:	2301      	movs	r3, #1
 8010f34:	e00f      	b.n	8010f56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8010f36:	4a0a      	ldr	r2, [pc, #40]	@ (8010f60 <SysTick_Config+0x40>)
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	3b01      	subs	r3, #1
 8010f3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8010f3e:	210f      	movs	r1, #15
 8010f40:	f04f 30ff 	mov.w	r0, #4294967295
 8010f44:	f7ff ff8e 	bl	8010e64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8010f48:	4b05      	ldr	r3, [pc, #20]	@ (8010f60 <SysTick_Config+0x40>)
 8010f4a:	2200      	movs	r2, #0
 8010f4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8010f4e:	4b04      	ldr	r3, [pc, #16]	@ (8010f60 <SysTick_Config+0x40>)
 8010f50:	2207      	movs	r2, #7
 8010f52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8010f54:	2300      	movs	r3, #0
}
 8010f56:	4618      	mov	r0, r3
 8010f58:	3708      	adds	r7, #8
 8010f5a:	46bd      	mov	sp, r7
 8010f5c:	bd80      	pop	{r7, pc}
 8010f5e:	bf00      	nop
 8010f60:	e000e010 	.word	0xe000e010

08010f64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8010f64:	b580      	push	{r7, lr}
 8010f66:	b082      	sub	sp, #8
 8010f68:	af00      	add	r7, sp, #0
 8010f6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8010f6c:	6878      	ldr	r0, [r7, #4]
 8010f6e:	f7ff ff29 	bl	8010dc4 <__NVIC_SetPriorityGrouping>
}
 8010f72:	bf00      	nop
 8010f74:	3708      	adds	r7, #8
 8010f76:	46bd      	mov	sp, r7
 8010f78:	bd80      	pop	{r7, pc}

08010f7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8010f7a:	b580      	push	{r7, lr}
 8010f7c:	b086      	sub	sp, #24
 8010f7e:	af00      	add	r7, sp, #0
 8010f80:	4603      	mov	r3, r0
 8010f82:	60b9      	str	r1, [r7, #8]
 8010f84:	607a      	str	r2, [r7, #4]
 8010f86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8010f88:	2300      	movs	r3, #0
 8010f8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8010f8c:	f7ff ff3e 	bl	8010e0c <__NVIC_GetPriorityGrouping>
 8010f90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8010f92:	687a      	ldr	r2, [r7, #4]
 8010f94:	68b9      	ldr	r1, [r7, #8]
 8010f96:	6978      	ldr	r0, [r7, #20]
 8010f98:	f7ff ff8e 	bl	8010eb8 <NVIC_EncodePriority>
 8010f9c:	4602      	mov	r2, r0
 8010f9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010fa2:	4611      	mov	r1, r2
 8010fa4:	4618      	mov	r0, r3
 8010fa6:	f7ff ff5d 	bl	8010e64 <__NVIC_SetPriority>
}
 8010faa:	bf00      	nop
 8010fac:	3718      	adds	r7, #24
 8010fae:	46bd      	mov	sp, r7
 8010fb0:	bd80      	pop	{r7, pc}

08010fb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8010fb2:	b580      	push	{r7, lr}
 8010fb4:	b082      	sub	sp, #8
 8010fb6:	af00      	add	r7, sp, #0
 8010fb8:	4603      	mov	r3, r0
 8010fba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8010fbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010fc0:	4618      	mov	r0, r3
 8010fc2:	f7ff ff31 	bl	8010e28 <__NVIC_EnableIRQ>
}
 8010fc6:	bf00      	nop
 8010fc8:	3708      	adds	r7, #8
 8010fca:	46bd      	mov	sp, r7
 8010fcc:	bd80      	pop	{r7, pc}

08010fce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8010fce:	b580      	push	{r7, lr}
 8010fd0:	b082      	sub	sp, #8
 8010fd2:	af00      	add	r7, sp, #0
 8010fd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8010fd6:	6878      	ldr	r0, [r7, #4]
 8010fd8:	f7ff ffa2 	bl	8010f20 <SysTick_Config>
 8010fdc:	4603      	mov	r3, r0
}
 8010fde:	4618      	mov	r0, r3
 8010fe0:	3708      	adds	r7, #8
 8010fe2:	46bd      	mov	sp, r7
 8010fe4:	bd80      	pop	{r7, pc}
	...

08010fe8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8010fe8:	b480      	push	{r7}
 8010fea:	b089      	sub	sp, #36	@ 0x24
 8010fec:	af00      	add	r7, sp, #0
 8010fee:	6078      	str	r0, [r7, #4]
 8010ff0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8010ff2:	2300      	movs	r3, #0
 8010ff4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8010ff6:	2300      	movs	r3, #0
 8010ff8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8010ffa:	2300      	movs	r3, #0
 8010ffc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8010ffe:	2300      	movs	r3, #0
 8011000:	61fb      	str	r3, [r7, #28]
 8011002:	e16b      	b.n	80112dc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8011004:	2201      	movs	r2, #1
 8011006:	69fb      	ldr	r3, [r7, #28]
 8011008:	fa02 f303 	lsl.w	r3, r2, r3
 801100c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 801100e:	683b      	ldr	r3, [r7, #0]
 8011010:	681b      	ldr	r3, [r3, #0]
 8011012:	697a      	ldr	r2, [r7, #20]
 8011014:	4013      	ands	r3, r2
 8011016:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8011018:	693a      	ldr	r2, [r7, #16]
 801101a:	697b      	ldr	r3, [r7, #20]
 801101c:	429a      	cmp	r2, r3
 801101e:	f040 815a 	bne.w	80112d6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8011022:	683b      	ldr	r3, [r7, #0]
 8011024:	685b      	ldr	r3, [r3, #4]
 8011026:	f003 0303 	and.w	r3, r3, #3
 801102a:	2b01      	cmp	r3, #1
 801102c:	d005      	beq.n	801103a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801102e:	683b      	ldr	r3, [r7, #0]
 8011030:	685b      	ldr	r3, [r3, #4]
 8011032:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8011036:	2b02      	cmp	r3, #2
 8011038:	d130      	bne.n	801109c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	689b      	ldr	r3, [r3, #8]
 801103e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8011040:	69fb      	ldr	r3, [r7, #28]
 8011042:	005b      	lsls	r3, r3, #1
 8011044:	2203      	movs	r2, #3
 8011046:	fa02 f303 	lsl.w	r3, r2, r3
 801104a:	43db      	mvns	r3, r3
 801104c:	69ba      	ldr	r2, [r7, #24]
 801104e:	4013      	ands	r3, r2
 8011050:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8011052:	683b      	ldr	r3, [r7, #0]
 8011054:	68da      	ldr	r2, [r3, #12]
 8011056:	69fb      	ldr	r3, [r7, #28]
 8011058:	005b      	lsls	r3, r3, #1
 801105a:	fa02 f303 	lsl.w	r3, r2, r3
 801105e:	69ba      	ldr	r2, [r7, #24]
 8011060:	4313      	orrs	r3, r2
 8011062:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	69ba      	ldr	r2, [r7, #24]
 8011068:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	685b      	ldr	r3, [r3, #4]
 801106e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8011070:	2201      	movs	r2, #1
 8011072:	69fb      	ldr	r3, [r7, #28]
 8011074:	fa02 f303 	lsl.w	r3, r2, r3
 8011078:	43db      	mvns	r3, r3
 801107a:	69ba      	ldr	r2, [r7, #24]
 801107c:	4013      	ands	r3, r2
 801107e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8011080:	683b      	ldr	r3, [r7, #0]
 8011082:	685b      	ldr	r3, [r3, #4]
 8011084:	091b      	lsrs	r3, r3, #4
 8011086:	f003 0201 	and.w	r2, r3, #1
 801108a:	69fb      	ldr	r3, [r7, #28]
 801108c:	fa02 f303 	lsl.w	r3, r2, r3
 8011090:	69ba      	ldr	r2, [r7, #24]
 8011092:	4313      	orrs	r3, r2
 8011094:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	69ba      	ldr	r2, [r7, #24]
 801109a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801109c:	683b      	ldr	r3, [r7, #0]
 801109e:	685b      	ldr	r3, [r3, #4]
 80110a0:	f003 0303 	and.w	r3, r3, #3
 80110a4:	2b03      	cmp	r3, #3
 80110a6:	d017      	beq.n	80110d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	68db      	ldr	r3, [r3, #12]
 80110ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80110ae:	69fb      	ldr	r3, [r7, #28]
 80110b0:	005b      	lsls	r3, r3, #1
 80110b2:	2203      	movs	r2, #3
 80110b4:	fa02 f303 	lsl.w	r3, r2, r3
 80110b8:	43db      	mvns	r3, r3
 80110ba:	69ba      	ldr	r2, [r7, #24]
 80110bc:	4013      	ands	r3, r2
 80110be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80110c0:	683b      	ldr	r3, [r7, #0]
 80110c2:	689a      	ldr	r2, [r3, #8]
 80110c4:	69fb      	ldr	r3, [r7, #28]
 80110c6:	005b      	lsls	r3, r3, #1
 80110c8:	fa02 f303 	lsl.w	r3, r2, r3
 80110cc:	69ba      	ldr	r2, [r7, #24]
 80110ce:	4313      	orrs	r3, r2
 80110d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	69ba      	ldr	r2, [r7, #24]
 80110d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80110d8:	683b      	ldr	r3, [r7, #0]
 80110da:	685b      	ldr	r3, [r3, #4]
 80110dc:	f003 0303 	and.w	r3, r3, #3
 80110e0:	2b02      	cmp	r3, #2
 80110e2:	d123      	bne.n	801112c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80110e4:	69fb      	ldr	r3, [r7, #28]
 80110e6:	08da      	lsrs	r2, r3, #3
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	3208      	adds	r2, #8
 80110ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80110f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80110f2:	69fb      	ldr	r3, [r7, #28]
 80110f4:	f003 0307 	and.w	r3, r3, #7
 80110f8:	009b      	lsls	r3, r3, #2
 80110fa:	220f      	movs	r2, #15
 80110fc:	fa02 f303 	lsl.w	r3, r2, r3
 8011100:	43db      	mvns	r3, r3
 8011102:	69ba      	ldr	r2, [r7, #24]
 8011104:	4013      	ands	r3, r2
 8011106:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8011108:	683b      	ldr	r3, [r7, #0]
 801110a:	691a      	ldr	r2, [r3, #16]
 801110c:	69fb      	ldr	r3, [r7, #28]
 801110e:	f003 0307 	and.w	r3, r3, #7
 8011112:	009b      	lsls	r3, r3, #2
 8011114:	fa02 f303 	lsl.w	r3, r2, r3
 8011118:	69ba      	ldr	r2, [r7, #24]
 801111a:	4313      	orrs	r3, r2
 801111c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 801111e:	69fb      	ldr	r3, [r7, #28]
 8011120:	08da      	lsrs	r2, r3, #3
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	3208      	adds	r2, #8
 8011126:	69b9      	ldr	r1, [r7, #24]
 8011128:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	681b      	ldr	r3, [r3, #0]
 8011130:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8011132:	69fb      	ldr	r3, [r7, #28]
 8011134:	005b      	lsls	r3, r3, #1
 8011136:	2203      	movs	r2, #3
 8011138:	fa02 f303 	lsl.w	r3, r2, r3
 801113c:	43db      	mvns	r3, r3
 801113e:	69ba      	ldr	r2, [r7, #24]
 8011140:	4013      	ands	r3, r2
 8011142:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8011144:	683b      	ldr	r3, [r7, #0]
 8011146:	685b      	ldr	r3, [r3, #4]
 8011148:	f003 0203 	and.w	r2, r3, #3
 801114c:	69fb      	ldr	r3, [r7, #28]
 801114e:	005b      	lsls	r3, r3, #1
 8011150:	fa02 f303 	lsl.w	r3, r2, r3
 8011154:	69ba      	ldr	r2, [r7, #24]
 8011156:	4313      	orrs	r3, r2
 8011158:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	69ba      	ldr	r2, [r7, #24]
 801115e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8011160:	683b      	ldr	r3, [r7, #0]
 8011162:	685b      	ldr	r3, [r3, #4]
 8011164:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8011168:	2b00      	cmp	r3, #0
 801116a:	f000 80b4 	beq.w	80112d6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801116e:	2300      	movs	r3, #0
 8011170:	60fb      	str	r3, [r7, #12]
 8011172:	4b60      	ldr	r3, [pc, #384]	@ (80112f4 <HAL_GPIO_Init+0x30c>)
 8011174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011176:	4a5f      	ldr	r2, [pc, #380]	@ (80112f4 <HAL_GPIO_Init+0x30c>)
 8011178:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 801117c:	6453      	str	r3, [r2, #68]	@ 0x44
 801117e:	4b5d      	ldr	r3, [pc, #372]	@ (80112f4 <HAL_GPIO_Init+0x30c>)
 8011180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011182:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011186:	60fb      	str	r3, [r7, #12]
 8011188:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 801118a:	4a5b      	ldr	r2, [pc, #364]	@ (80112f8 <HAL_GPIO_Init+0x310>)
 801118c:	69fb      	ldr	r3, [r7, #28]
 801118e:	089b      	lsrs	r3, r3, #2
 8011190:	3302      	adds	r3, #2
 8011192:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011196:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8011198:	69fb      	ldr	r3, [r7, #28]
 801119a:	f003 0303 	and.w	r3, r3, #3
 801119e:	009b      	lsls	r3, r3, #2
 80111a0:	220f      	movs	r2, #15
 80111a2:	fa02 f303 	lsl.w	r3, r2, r3
 80111a6:	43db      	mvns	r3, r3
 80111a8:	69ba      	ldr	r2, [r7, #24]
 80111aa:	4013      	ands	r3, r2
 80111ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	4a52      	ldr	r2, [pc, #328]	@ (80112fc <HAL_GPIO_Init+0x314>)
 80111b2:	4293      	cmp	r3, r2
 80111b4:	d02b      	beq.n	801120e <HAL_GPIO_Init+0x226>
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	4a51      	ldr	r2, [pc, #324]	@ (8011300 <HAL_GPIO_Init+0x318>)
 80111ba:	4293      	cmp	r3, r2
 80111bc:	d025      	beq.n	801120a <HAL_GPIO_Init+0x222>
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	4a50      	ldr	r2, [pc, #320]	@ (8011304 <HAL_GPIO_Init+0x31c>)
 80111c2:	4293      	cmp	r3, r2
 80111c4:	d01f      	beq.n	8011206 <HAL_GPIO_Init+0x21e>
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	4a4f      	ldr	r2, [pc, #316]	@ (8011308 <HAL_GPIO_Init+0x320>)
 80111ca:	4293      	cmp	r3, r2
 80111cc:	d019      	beq.n	8011202 <HAL_GPIO_Init+0x21a>
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	4a4e      	ldr	r2, [pc, #312]	@ (801130c <HAL_GPIO_Init+0x324>)
 80111d2:	4293      	cmp	r3, r2
 80111d4:	d013      	beq.n	80111fe <HAL_GPIO_Init+0x216>
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	4a4d      	ldr	r2, [pc, #308]	@ (8011310 <HAL_GPIO_Init+0x328>)
 80111da:	4293      	cmp	r3, r2
 80111dc:	d00d      	beq.n	80111fa <HAL_GPIO_Init+0x212>
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	4a4c      	ldr	r2, [pc, #304]	@ (8011314 <HAL_GPIO_Init+0x32c>)
 80111e2:	4293      	cmp	r3, r2
 80111e4:	d007      	beq.n	80111f6 <HAL_GPIO_Init+0x20e>
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	4a4b      	ldr	r2, [pc, #300]	@ (8011318 <HAL_GPIO_Init+0x330>)
 80111ea:	4293      	cmp	r3, r2
 80111ec:	d101      	bne.n	80111f2 <HAL_GPIO_Init+0x20a>
 80111ee:	2307      	movs	r3, #7
 80111f0:	e00e      	b.n	8011210 <HAL_GPIO_Init+0x228>
 80111f2:	2308      	movs	r3, #8
 80111f4:	e00c      	b.n	8011210 <HAL_GPIO_Init+0x228>
 80111f6:	2306      	movs	r3, #6
 80111f8:	e00a      	b.n	8011210 <HAL_GPIO_Init+0x228>
 80111fa:	2305      	movs	r3, #5
 80111fc:	e008      	b.n	8011210 <HAL_GPIO_Init+0x228>
 80111fe:	2304      	movs	r3, #4
 8011200:	e006      	b.n	8011210 <HAL_GPIO_Init+0x228>
 8011202:	2303      	movs	r3, #3
 8011204:	e004      	b.n	8011210 <HAL_GPIO_Init+0x228>
 8011206:	2302      	movs	r3, #2
 8011208:	e002      	b.n	8011210 <HAL_GPIO_Init+0x228>
 801120a:	2301      	movs	r3, #1
 801120c:	e000      	b.n	8011210 <HAL_GPIO_Init+0x228>
 801120e:	2300      	movs	r3, #0
 8011210:	69fa      	ldr	r2, [r7, #28]
 8011212:	f002 0203 	and.w	r2, r2, #3
 8011216:	0092      	lsls	r2, r2, #2
 8011218:	4093      	lsls	r3, r2
 801121a:	69ba      	ldr	r2, [r7, #24]
 801121c:	4313      	orrs	r3, r2
 801121e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8011220:	4935      	ldr	r1, [pc, #212]	@ (80112f8 <HAL_GPIO_Init+0x310>)
 8011222:	69fb      	ldr	r3, [r7, #28]
 8011224:	089b      	lsrs	r3, r3, #2
 8011226:	3302      	adds	r3, #2
 8011228:	69ba      	ldr	r2, [r7, #24]
 801122a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 801122e:	4b3b      	ldr	r3, [pc, #236]	@ (801131c <HAL_GPIO_Init+0x334>)
 8011230:	689b      	ldr	r3, [r3, #8]
 8011232:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8011234:	693b      	ldr	r3, [r7, #16]
 8011236:	43db      	mvns	r3, r3
 8011238:	69ba      	ldr	r2, [r7, #24]
 801123a:	4013      	ands	r3, r2
 801123c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801123e:	683b      	ldr	r3, [r7, #0]
 8011240:	685b      	ldr	r3, [r3, #4]
 8011242:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8011246:	2b00      	cmp	r3, #0
 8011248:	d003      	beq.n	8011252 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 801124a:	69ba      	ldr	r2, [r7, #24]
 801124c:	693b      	ldr	r3, [r7, #16]
 801124e:	4313      	orrs	r3, r2
 8011250:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8011252:	4a32      	ldr	r2, [pc, #200]	@ (801131c <HAL_GPIO_Init+0x334>)
 8011254:	69bb      	ldr	r3, [r7, #24]
 8011256:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8011258:	4b30      	ldr	r3, [pc, #192]	@ (801131c <HAL_GPIO_Init+0x334>)
 801125a:	68db      	ldr	r3, [r3, #12]
 801125c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801125e:	693b      	ldr	r3, [r7, #16]
 8011260:	43db      	mvns	r3, r3
 8011262:	69ba      	ldr	r2, [r7, #24]
 8011264:	4013      	ands	r3, r2
 8011266:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8011268:	683b      	ldr	r3, [r7, #0]
 801126a:	685b      	ldr	r3, [r3, #4]
 801126c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8011270:	2b00      	cmp	r3, #0
 8011272:	d003      	beq.n	801127c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8011274:	69ba      	ldr	r2, [r7, #24]
 8011276:	693b      	ldr	r3, [r7, #16]
 8011278:	4313      	orrs	r3, r2
 801127a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 801127c:	4a27      	ldr	r2, [pc, #156]	@ (801131c <HAL_GPIO_Init+0x334>)
 801127e:	69bb      	ldr	r3, [r7, #24]
 8011280:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8011282:	4b26      	ldr	r3, [pc, #152]	@ (801131c <HAL_GPIO_Init+0x334>)
 8011284:	685b      	ldr	r3, [r3, #4]
 8011286:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8011288:	693b      	ldr	r3, [r7, #16]
 801128a:	43db      	mvns	r3, r3
 801128c:	69ba      	ldr	r2, [r7, #24]
 801128e:	4013      	ands	r3, r2
 8011290:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8011292:	683b      	ldr	r3, [r7, #0]
 8011294:	685b      	ldr	r3, [r3, #4]
 8011296:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801129a:	2b00      	cmp	r3, #0
 801129c:	d003      	beq.n	80112a6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 801129e:	69ba      	ldr	r2, [r7, #24]
 80112a0:	693b      	ldr	r3, [r7, #16]
 80112a2:	4313      	orrs	r3, r2
 80112a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80112a6:	4a1d      	ldr	r2, [pc, #116]	@ (801131c <HAL_GPIO_Init+0x334>)
 80112a8:	69bb      	ldr	r3, [r7, #24]
 80112aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80112ac:	4b1b      	ldr	r3, [pc, #108]	@ (801131c <HAL_GPIO_Init+0x334>)
 80112ae:	681b      	ldr	r3, [r3, #0]
 80112b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80112b2:	693b      	ldr	r3, [r7, #16]
 80112b4:	43db      	mvns	r3, r3
 80112b6:	69ba      	ldr	r2, [r7, #24]
 80112b8:	4013      	ands	r3, r2
 80112ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80112bc:	683b      	ldr	r3, [r7, #0]
 80112be:	685b      	ldr	r3, [r3, #4]
 80112c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	d003      	beq.n	80112d0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80112c8:	69ba      	ldr	r2, [r7, #24]
 80112ca:	693b      	ldr	r3, [r7, #16]
 80112cc:	4313      	orrs	r3, r2
 80112ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80112d0:	4a12      	ldr	r2, [pc, #72]	@ (801131c <HAL_GPIO_Init+0x334>)
 80112d2:	69bb      	ldr	r3, [r7, #24]
 80112d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80112d6:	69fb      	ldr	r3, [r7, #28]
 80112d8:	3301      	adds	r3, #1
 80112da:	61fb      	str	r3, [r7, #28]
 80112dc:	69fb      	ldr	r3, [r7, #28]
 80112de:	2b0f      	cmp	r3, #15
 80112e0:	f67f ae90 	bls.w	8011004 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80112e4:	bf00      	nop
 80112e6:	bf00      	nop
 80112e8:	3724      	adds	r7, #36	@ 0x24
 80112ea:	46bd      	mov	sp, r7
 80112ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112f0:	4770      	bx	lr
 80112f2:	bf00      	nop
 80112f4:	40023800 	.word	0x40023800
 80112f8:	40013800 	.word	0x40013800
 80112fc:	40020000 	.word	0x40020000
 8011300:	40020400 	.word	0x40020400
 8011304:	40020800 	.word	0x40020800
 8011308:	40020c00 	.word	0x40020c00
 801130c:	40021000 	.word	0x40021000
 8011310:	40021400 	.word	0x40021400
 8011314:	40021800 	.word	0x40021800
 8011318:	40021c00 	.word	0x40021c00
 801131c:	40013c00 	.word	0x40013c00

08011320 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8011320:	b480      	push	{r7}
 8011322:	b083      	sub	sp, #12
 8011324:	af00      	add	r7, sp, #0
 8011326:	6078      	str	r0, [r7, #4]
 8011328:	460b      	mov	r3, r1
 801132a:	807b      	strh	r3, [r7, #2]
 801132c:	4613      	mov	r3, r2
 801132e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8011330:	787b      	ldrb	r3, [r7, #1]
 8011332:	2b00      	cmp	r3, #0
 8011334:	d003      	beq.n	801133e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8011336:	887a      	ldrh	r2, [r7, #2]
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 801133c:	e003      	b.n	8011346 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 801133e:	887b      	ldrh	r3, [r7, #2]
 8011340:	041a      	lsls	r2, r3, #16
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	619a      	str	r2, [r3, #24]
}
 8011346:	bf00      	nop
 8011348:	370c      	adds	r7, #12
 801134a:	46bd      	mov	sp, r7
 801134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011350:	4770      	bx	lr

08011352 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8011352:	b480      	push	{r7}
 8011354:	b085      	sub	sp, #20
 8011356:	af00      	add	r7, sp, #0
 8011358:	6078      	str	r0, [r7, #4]
 801135a:	460b      	mov	r3, r1
 801135c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	695b      	ldr	r3, [r3, #20]
 8011362:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8011364:	887a      	ldrh	r2, [r7, #2]
 8011366:	68fb      	ldr	r3, [r7, #12]
 8011368:	4013      	ands	r3, r2
 801136a:	041a      	lsls	r2, r3, #16
 801136c:	68fb      	ldr	r3, [r7, #12]
 801136e:	43d9      	mvns	r1, r3
 8011370:	887b      	ldrh	r3, [r7, #2]
 8011372:	400b      	ands	r3, r1
 8011374:	431a      	orrs	r2, r3
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	619a      	str	r2, [r3, #24]
}
 801137a:	bf00      	nop
 801137c:	3714      	adds	r7, #20
 801137e:	46bd      	mov	sp, r7
 8011380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011384:	4770      	bx	lr
	...

08011388 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8011388:	b580      	push	{r7, lr}
 801138a:	b084      	sub	sp, #16
 801138c:	af00      	add	r7, sp, #0
 801138e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	2b00      	cmp	r3, #0
 8011394:	d101      	bne.n	801139a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8011396:	2301      	movs	r3, #1
 8011398:	e12b      	b.n	80115f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80113a0:	b2db      	uxtb	r3, r3
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d106      	bne.n	80113b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	2200      	movs	r2, #0
 80113aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80113ae:	6878      	ldr	r0, [r7, #4]
 80113b0:	f7ff fae8 	bl	8010984 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	2224      	movs	r2, #36	@ 0x24
 80113b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	681b      	ldr	r3, [r3, #0]
 80113c0:	681a      	ldr	r2, [r3, #0]
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	681b      	ldr	r3, [r3, #0]
 80113c6:	f022 0201 	bic.w	r2, r2, #1
 80113ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	681b      	ldr	r3, [r3, #0]
 80113d0:	681a      	ldr	r2, [r3, #0]
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80113da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	681a      	ldr	r2, [r3, #0]
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80113ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80113ec:	f002 fc72 	bl	8013cd4 <HAL_RCC_GetPCLK1Freq>
 80113f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	685b      	ldr	r3, [r3, #4]
 80113f6:	4a81      	ldr	r2, [pc, #516]	@ (80115fc <HAL_I2C_Init+0x274>)
 80113f8:	4293      	cmp	r3, r2
 80113fa:	d807      	bhi.n	801140c <HAL_I2C_Init+0x84>
 80113fc:	68fb      	ldr	r3, [r7, #12]
 80113fe:	4a80      	ldr	r2, [pc, #512]	@ (8011600 <HAL_I2C_Init+0x278>)
 8011400:	4293      	cmp	r3, r2
 8011402:	bf94      	ite	ls
 8011404:	2301      	movls	r3, #1
 8011406:	2300      	movhi	r3, #0
 8011408:	b2db      	uxtb	r3, r3
 801140a:	e006      	b.n	801141a <HAL_I2C_Init+0x92>
 801140c:	68fb      	ldr	r3, [r7, #12]
 801140e:	4a7d      	ldr	r2, [pc, #500]	@ (8011604 <HAL_I2C_Init+0x27c>)
 8011410:	4293      	cmp	r3, r2
 8011412:	bf94      	ite	ls
 8011414:	2301      	movls	r3, #1
 8011416:	2300      	movhi	r3, #0
 8011418:	b2db      	uxtb	r3, r3
 801141a:	2b00      	cmp	r3, #0
 801141c:	d001      	beq.n	8011422 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 801141e:	2301      	movs	r3, #1
 8011420:	e0e7      	b.n	80115f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8011422:	68fb      	ldr	r3, [r7, #12]
 8011424:	4a78      	ldr	r2, [pc, #480]	@ (8011608 <HAL_I2C_Init+0x280>)
 8011426:	fba2 2303 	umull	r2, r3, r2, r3
 801142a:	0c9b      	lsrs	r3, r3, #18
 801142c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	685b      	ldr	r3, [r3, #4]
 8011434:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	68ba      	ldr	r2, [r7, #8]
 801143e:	430a      	orrs	r2, r1
 8011440:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	6a1b      	ldr	r3, [r3, #32]
 8011448:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	685b      	ldr	r3, [r3, #4]
 8011450:	4a6a      	ldr	r2, [pc, #424]	@ (80115fc <HAL_I2C_Init+0x274>)
 8011452:	4293      	cmp	r3, r2
 8011454:	d802      	bhi.n	801145c <HAL_I2C_Init+0xd4>
 8011456:	68bb      	ldr	r3, [r7, #8]
 8011458:	3301      	adds	r3, #1
 801145a:	e009      	b.n	8011470 <HAL_I2C_Init+0xe8>
 801145c:	68bb      	ldr	r3, [r7, #8]
 801145e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8011462:	fb02 f303 	mul.w	r3, r2, r3
 8011466:	4a69      	ldr	r2, [pc, #420]	@ (801160c <HAL_I2C_Init+0x284>)
 8011468:	fba2 2303 	umull	r2, r3, r2, r3
 801146c:	099b      	lsrs	r3, r3, #6
 801146e:	3301      	adds	r3, #1
 8011470:	687a      	ldr	r2, [r7, #4]
 8011472:	6812      	ldr	r2, [r2, #0]
 8011474:	430b      	orrs	r3, r1
 8011476:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	69db      	ldr	r3, [r3, #28]
 801147e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8011482:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	685b      	ldr	r3, [r3, #4]
 801148a:	495c      	ldr	r1, [pc, #368]	@ (80115fc <HAL_I2C_Init+0x274>)
 801148c:	428b      	cmp	r3, r1
 801148e:	d819      	bhi.n	80114c4 <HAL_I2C_Init+0x13c>
 8011490:	68fb      	ldr	r3, [r7, #12]
 8011492:	1e59      	subs	r1, r3, #1
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	685b      	ldr	r3, [r3, #4]
 8011498:	005b      	lsls	r3, r3, #1
 801149a:	fbb1 f3f3 	udiv	r3, r1, r3
 801149e:	1c59      	adds	r1, r3, #1
 80114a0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80114a4:	400b      	ands	r3, r1
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d00a      	beq.n	80114c0 <HAL_I2C_Init+0x138>
 80114aa:	68fb      	ldr	r3, [r7, #12]
 80114ac:	1e59      	subs	r1, r3, #1
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	685b      	ldr	r3, [r3, #4]
 80114b2:	005b      	lsls	r3, r3, #1
 80114b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80114b8:	3301      	adds	r3, #1
 80114ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80114be:	e051      	b.n	8011564 <HAL_I2C_Init+0x1dc>
 80114c0:	2304      	movs	r3, #4
 80114c2:	e04f      	b.n	8011564 <HAL_I2C_Init+0x1dc>
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	689b      	ldr	r3, [r3, #8]
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d111      	bne.n	80114f0 <HAL_I2C_Init+0x168>
 80114cc:	68fb      	ldr	r3, [r7, #12]
 80114ce:	1e58      	subs	r0, r3, #1
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	6859      	ldr	r1, [r3, #4]
 80114d4:	460b      	mov	r3, r1
 80114d6:	005b      	lsls	r3, r3, #1
 80114d8:	440b      	add	r3, r1
 80114da:	fbb0 f3f3 	udiv	r3, r0, r3
 80114de:	3301      	adds	r3, #1
 80114e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	bf0c      	ite	eq
 80114e8:	2301      	moveq	r3, #1
 80114ea:	2300      	movne	r3, #0
 80114ec:	b2db      	uxtb	r3, r3
 80114ee:	e012      	b.n	8011516 <HAL_I2C_Init+0x18e>
 80114f0:	68fb      	ldr	r3, [r7, #12]
 80114f2:	1e58      	subs	r0, r3, #1
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	6859      	ldr	r1, [r3, #4]
 80114f8:	460b      	mov	r3, r1
 80114fa:	009b      	lsls	r3, r3, #2
 80114fc:	440b      	add	r3, r1
 80114fe:	0099      	lsls	r1, r3, #2
 8011500:	440b      	add	r3, r1
 8011502:	fbb0 f3f3 	udiv	r3, r0, r3
 8011506:	3301      	adds	r3, #1
 8011508:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801150c:	2b00      	cmp	r3, #0
 801150e:	bf0c      	ite	eq
 8011510:	2301      	moveq	r3, #1
 8011512:	2300      	movne	r3, #0
 8011514:	b2db      	uxtb	r3, r3
 8011516:	2b00      	cmp	r3, #0
 8011518:	d001      	beq.n	801151e <HAL_I2C_Init+0x196>
 801151a:	2301      	movs	r3, #1
 801151c:	e022      	b.n	8011564 <HAL_I2C_Init+0x1dc>
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	689b      	ldr	r3, [r3, #8]
 8011522:	2b00      	cmp	r3, #0
 8011524:	d10e      	bne.n	8011544 <HAL_I2C_Init+0x1bc>
 8011526:	68fb      	ldr	r3, [r7, #12]
 8011528:	1e58      	subs	r0, r3, #1
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	6859      	ldr	r1, [r3, #4]
 801152e:	460b      	mov	r3, r1
 8011530:	005b      	lsls	r3, r3, #1
 8011532:	440b      	add	r3, r1
 8011534:	fbb0 f3f3 	udiv	r3, r0, r3
 8011538:	3301      	adds	r3, #1
 801153a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801153e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011542:	e00f      	b.n	8011564 <HAL_I2C_Init+0x1dc>
 8011544:	68fb      	ldr	r3, [r7, #12]
 8011546:	1e58      	subs	r0, r3, #1
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	6859      	ldr	r1, [r3, #4]
 801154c:	460b      	mov	r3, r1
 801154e:	009b      	lsls	r3, r3, #2
 8011550:	440b      	add	r3, r1
 8011552:	0099      	lsls	r1, r3, #2
 8011554:	440b      	add	r3, r1
 8011556:	fbb0 f3f3 	udiv	r3, r0, r3
 801155a:	3301      	adds	r3, #1
 801155c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011560:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8011564:	6879      	ldr	r1, [r7, #4]
 8011566:	6809      	ldr	r1, [r1, #0]
 8011568:	4313      	orrs	r3, r2
 801156a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	681b      	ldr	r3, [r3, #0]
 8011570:	681b      	ldr	r3, [r3, #0]
 8011572:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	69da      	ldr	r2, [r3, #28]
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	6a1b      	ldr	r3, [r3, #32]
 801157e:	431a      	orrs	r2, r3
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	681b      	ldr	r3, [r3, #0]
 8011584:	430a      	orrs	r2, r1
 8011586:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	681b      	ldr	r3, [r3, #0]
 801158c:	689b      	ldr	r3, [r3, #8]
 801158e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8011592:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8011596:	687a      	ldr	r2, [r7, #4]
 8011598:	6911      	ldr	r1, [r2, #16]
 801159a:	687a      	ldr	r2, [r7, #4]
 801159c:	68d2      	ldr	r2, [r2, #12]
 801159e:	4311      	orrs	r1, r2
 80115a0:	687a      	ldr	r2, [r7, #4]
 80115a2:	6812      	ldr	r2, [r2, #0]
 80115a4:	430b      	orrs	r3, r1
 80115a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	681b      	ldr	r3, [r3, #0]
 80115ac:	68db      	ldr	r3, [r3, #12]
 80115ae:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	695a      	ldr	r2, [r3, #20]
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	699b      	ldr	r3, [r3, #24]
 80115ba:	431a      	orrs	r2, r3
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	681b      	ldr	r3, [r3, #0]
 80115c0:	430a      	orrs	r2, r1
 80115c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	681b      	ldr	r3, [r3, #0]
 80115c8:	681a      	ldr	r2, [r3, #0]
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	681b      	ldr	r3, [r3, #0]
 80115ce:	f042 0201 	orr.w	r2, r2, #1
 80115d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	2200      	movs	r2, #0
 80115d8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	2220      	movs	r2, #32
 80115de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	2200      	movs	r2, #0
 80115e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	2200      	movs	r2, #0
 80115ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80115f0:	2300      	movs	r3, #0
}
 80115f2:	4618      	mov	r0, r3
 80115f4:	3710      	adds	r7, #16
 80115f6:	46bd      	mov	sp, r7
 80115f8:	bd80      	pop	{r7, pc}
 80115fa:	bf00      	nop
 80115fc:	000186a0 	.word	0x000186a0
 8011600:	001e847f 	.word	0x001e847f
 8011604:	003d08ff 	.word	0x003d08ff
 8011608:	431bde83 	.word	0x431bde83
 801160c:	10624dd3 	.word	0x10624dd3

08011610 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8011610:	b580      	push	{r7, lr}
 8011612:	b088      	sub	sp, #32
 8011614:	af00      	add	r7, sp, #0
 8011616:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	2b00      	cmp	r3, #0
 801161c:	d101      	bne.n	8011622 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 801161e:	2301      	movs	r3, #1
 8011620:	e128      	b.n	8011874 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8011628:	b2db      	uxtb	r3, r3
 801162a:	2b00      	cmp	r3, #0
 801162c:	d109      	bne.n	8011642 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	2200      	movs	r2, #0
 8011632:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	4a90      	ldr	r2, [pc, #576]	@ (801187c <HAL_I2S_Init+0x26c>)
 801163a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 801163c:	6878      	ldr	r0, [r7, #4]
 801163e:	f7ff f9e9 	bl	8010a14 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	2202      	movs	r2, #2
 8011646:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	681b      	ldr	r3, [r3, #0]
 801164e:	69db      	ldr	r3, [r3, #28]
 8011650:	687a      	ldr	r2, [r7, #4]
 8011652:	6812      	ldr	r2, [r2, #0]
 8011654:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8011658:	f023 030f 	bic.w	r3, r3, #15
 801165c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	681b      	ldr	r3, [r3, #0]
 8011662:	2202      	movs	r2, #2
 8011664:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	695b      	ldr	r3, [r3, #20]
 801166a:	2b02      	cmp	r3, #2
 801166c:	d060      	beq.n	8011730 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	68db      	ldr	r3, [r3, #12]
 8011672:	2b00      	cmp	r3, #0
 8011674:	d102      	bne.n	801167c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8011676:	2310      	movs	r3, #16
 8011678:	617b      	str	r3, [r7, #20]
 801167a:	e001      	b.n	8011680 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 801167c:	2320      	movs	r3, #32
 801167e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	689b      	ldr	r3, [r3, #8]
 8011684:	2b20      	cmp	r3, #32
 8011686:	d802      	bhi.n	801168e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8011688:	697b      	ldr	r3, [r7, #20]
 801168a:	005b      	lsls	r3, r3, #1
 801168c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 801168e:	2001      	movs	r0, #1
 8011690:	f002 fc16 	bl	8013ec0 <HAL_RCCEx_GetPeriphCLKFreq>
 8011694:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	691b      	ldr	r3, [r3, #16]
 801169a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801169e:	d125      	bne.n	80116ec <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	68db      	ldr	r3, [r3, #12]
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d010      	beq.n	80116ca <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80116a8:	697b      	ldr	r3, [r7, #20]
 80116aa:	009b      	lsls	r3, r3, #2
 80116ac:	68fa      	ldr	r2, [r7, #12]
 80116ae:	fbb2 f2f3 	udiv	r2, r2, r3
 80116b2:	4613      	mov	r3, r2
 80116b4:	009b      	lsls	r3, r3, #2
 80116b6:	4413      	add	r3, r2
 80116b8:	005b      	lsls	r3, r3, #1
 80116ba:	461a      	mov	r2, r3
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	695b      	ldr	r3, [r3, #20]
 80116c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80116c4:	3305      	adds	r3, #5
 80116c6:	613b      	str	r3, [r7, #16]
 80116c8:	e01f      	b.n	801170a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80116ca:	697b      	ldr	r3, [r7, #20]
 80116cc:	00db      	lsls	r3, r3, #3
 80116ce:	68fa      	ldr	r2, [r7, #12]
 80116d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80116d4:	4613      	mov	r3, r2
 80116d6:	009b      	lsls	r3, r3, #2
 80116d8:	4413      	add	r3, r2
 80116da:	005b      	lsls	r3, r3, #1
 80116dc:	461a      	mov	r2, r3
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	695b      	ldr	r3, [r3, #20]
 80116e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80116e6:	3305      	adds	r3, #5
 80116e8:	613b      	str	r3, [r7, #16]
 80116ea:	e00e      	b.n	801170a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80116ec:	68fa      	ldr	r2, [r7, #12]
 80116ee:	697b      	ldr	r3, [r7, #20]
 80116f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80116f4:	4613      	mov	r3, r2
 80116f6:	009b      	lsls	r3, r3, #2
 80116f8:	4413      	add	r3, r2
 80116fa:	005b      	lsls	r3, r3, #1
 80116fc:	461a      	mov	r2, r3
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	695b      	ldr	r3, [r3, #20]
 8011702:	fbb2 f3f3 	udiv	r3, r2, r3
 8011706:	3305      	adds	r3, #5
 8011708:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 801170a:	693b      	ldr	r3, [r7, #16]
 801170c:	4a5c      	ldr	r2, [pc, #368]	@ (8011880 <HAL_I2S_Init+0x270>)
 801170e:	fba2 2303 	umull	r2, r3, r2, r3
 8011712:	08db      	lsrs	r3, r3, #3
 8011714:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8011716:	693b      	ldr	r3, [r7, #16]
 8011718:	f003 0301 	and.w	r3, r3, #1
 801171c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 801171e:	693a      	ldr	r2, [r7, #16]
 8011720:	69bb      	ldr	r3, [r7, #24]
 8011722:	1ad3      	subs	r3, r2, r3
 8011724:	085b      	lsrs	r3, r3, #1
 8011726:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8011728:	69bb      	ldr	r3, [r7, #24]
 801172a:	021b      	lsls	r3, r3, #8
 801172c:	61bb      	str	r3, [r7, #24]
 801172e:	e003      	b.n	8011738 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8011730:	2302      	movs	r3, #2
 8011732:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8011734:	2300      	movs	r3, #0
 8011736:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8011738:	69fb      	ldr	r3, [r7, #28]
 801173a:	2b01      	cmp	r3, #1
 801173c:	d902      	bls.n	8011744 <HAL_I2S_Init+0x134>
 801173e:	69fb      	ldr	r3, [r7, #28]
 8011740:	2bff      	cmp	r3, #255	@ 0xff
 8011742:	d907      	bls.n	8011754 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011748:	f043 0210 	orr.w	r2, r3, #16
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8011750:	2301      	movs	r3, #1
 8011752:	e08f      	b.n	8011874 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	691a      	ldr	r2, [r3, #16]
 8011758:	69bb      	ldr	r3, [r7, #24]
 801175a:	ea42 0103 	orr.w	r1, r2, r3
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	69fa      	ldr	r2, [r7, #28]
 8011764:	430a      	orrs	r2, r1
 8011766:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	681b      	ldr	r3, [r3, #0]
 801176c:	69db      	ldr	r3, [r3, #28]
 801176e:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8011772:	f023 030f 	bic.w	r3, r3, #15
 8011776:	687a      	ldr	r2, [r7, #4]
 8011778:	6851      	ldr	r1, [r2, #4]
 801177a:	687a      	ldr	r2, [r7, #4]
 801177c:	6892      	ldr	r2, [r2, #8]
 801177e:	4311      	orrs	r1, r2
 8011780:	687a      	ldr	r2, [r7, #4]
 8011782:	68d2      	ldr	r2, [r2, #12]
 8011784:	4311      	orrs	r1, r2
 8011786:	687a      	ldr	r2, [r7, #4]
 8011788:	6992      	ldr	r2, [r2, #24]
 801178a:	430a      	orrs	r2, r1
 801178c:	431a      	orrs	r2, r3
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	681b      	ldr	r3, [r3, #0]
 8011792:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8011796:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	6a1b      	ldr	r3, [r3, #32]
 801179c:	2b01      	cmp	r3, #1
 801179e:	d161      	bne.n	8011864 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	4a38      	ldr	r2, [pc, #224]	@ (8011884 <HAL_I2S_Init+0x274>)
 80117a4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	681b      	ldr	r3, [r3, #0]
 80117aa:	4a37      	ldr	r2, [pc, #220]	@ (8011888 <HAL_I2S_Init+0x278>)
 80117ac:	4293      	cmp	r3, r2
 80117ae:	d101      	bne.n	80117b4 <HAL_I2S_Init+0x1a4>
 80117b0:	4b36      	ldr	r3, [pc, #216]	@ (801188c <HAL_I2S_Init+0x27c>)
 80117b2:	e001      	b.n	80117b8 <HAL_I2S_Init+0x1a8>
 80117b4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80117b8:	69db      	ldr	r3, [r3, #28]
 80117ba:	687a      	ldr	r2, [r7, #4]
 80117bc:	6812      	ldr	r2, [r2, #0]
 80117be:	4932      	ldr	r1, [pc, #200]	@ (8011888 <HAL_I2S_Init+0x278>)
 80117c0:	428a      	cmp	r2, r1
 80117c2:	d101      	bne.n	80117c8 <HAL_I2S_Init+0x1b8>
 80117c4:	4a31      	ldr	r2, [pc, #196]	@ (801188c <HAL_I2S_Init+0x27c>)
 80117c6:	e001      	b.n	80117cc <HAL_I2S_Init+0x1bc>
 80117c8:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80117cc:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80117d0:	f023 030f 	bic.w	r3, r3, #15
 80117d4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	681b      	ldr	r3, [r3, #0]
 80117da:	4a2b      	ldr	r2, [pc, #172]	@ (8011888 <HAL_I2S_Init+0x278>)
 80117dc:	4293      	cmp	r3, r2
 80117de:	d101      	bne.n	80117e4 <HAL_I2S_Init+0x1d4>
 80117e0:	4b2a      	ldr	r3, [pc, #168]	@ (801188c <HAL_I2S_Init+0x27c>)
 80117e2:	e001      	b.n	80117e8 <HAL_I2S_Init+0x1d8>
 80117e4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80117e8:	2202      	movs	r2, #2
 80117ea:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	681b      	ldr	r3, [r3, #0]
 80117f0:	4a25      	ldr	r2, [pc, #148]	@ (8011888 <HAL_I2S_Init+0x278>)
 80117f2:	4293      	cmp	r3, r2
 80117f4:	d101      	bne.n	80117fa <HAL_I2S_Init+0x1ea>
 80117f6:	4b25      	ldr	r3, [pc, #148]	@ (801188c <HAL_I2S_Init+0x27c>)
 80117f8:	e001      	b.n	80117fe <HAL_I2S_Init+0x1ee>
 80117fa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80117fe:	69db      	ldr	r3, [r3, #28]
 8011800:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	685b      	ldr	r3, [r3, #4]
 8011806:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801180a:	d003      	beq.n	8011814 <HAL_I2S_Init+0x204>
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	685b      	ldr	r3, [r3, #4]
 8011810:	2b00      	cmp	r3, #0
 8011812:	d103      	bne.n	801181c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8011814:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8011818:	613b      	str	r3, [r7, #16]
 801181a:	e001      	b.n	8011820 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 801181c:	2300      	movs	r3, #0
 801181e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8011820:	693b      	ldr	r3, [r7, #16]
 8011822:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	689b      	ldr	r3, [r3, #8]
 8011828:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 801182a:	4313      	orrs	r3, r2
 801182c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	68db      	ldr	r3, [r3, #12]
 8011832:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8011834:	4313      	orrs	r3, r2
 8011836:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	699b      	ldr	r3, [r3, #24]
 801183c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 801183e:	4313      	orrs	r3, r2
 8011840:	b29a      	uxth	r2, r3
 8011842:	897b      	ldrh	r3, [r7, #10]
 8011844:	4313      	orrs	r3, r2
 8011846:	b29b      	uxth	r3, r3
 8011848:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 801184c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	681b      	ldr	r3, [r3, #0]
 8011852:	4a0d      	ldr	r2, [pc, #52]	@ (8011888 <HAL_I2S_Init+0x278>)
 8011854:	4293      	cmp	r3, r2
 8011856:	d101      	bne.n	801185c <HAL_I2S_Init+0x24c>
 8011858:	4b0c      	ldr	r3, [pc, #48]	@ (801188c <HAL_I2S_Init+0x27c>)
 801185a:	e001      	b.n	8011860 <HAL_I2S_Init+0x250>
 801185c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8011860:	897a      	ldrh	r2, [r7, #10]
 8011862:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	2200      	movs	r2, #0
 8011868:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	2201      	movs	r2, #1
 801186e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8011872:	2300      	movs	r3, #0
}
 8011874:	4618      	mov	r0, r3
 8011876:	3720      	adds	r7, #32
 8011878:	46bd      	mov	sp, r7
 801187a:	bd80      	pop	{r7, pc}
 801187c:	08011987 	.word	0x08011987
 8011880:	cccccccd 	.word	0xcccccccd
 8011884:	08011a9d 	.word	0x08011a9d
 8011888:	40003800 	.word	0x40003800
 801188c:	40003400 	.word	0x40003400

08011890 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8011890:	b480      	push	{r7}
 8011892:	b083      	sub	sp, #12
 8011894:	af00      	add	r7, sp, #0
 8011896:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8011898:	bf00      	nop
 801189a:	370c      	adds	r7, #12
 801189c:	46bd      	mov	sp, r7
 801189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118a2:	4770      	bx	lr

080118a4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80118a4:	b480      	push	{r7}
 80118a6:	b083      	sub	sp, #12
 80118a8:	af00      	add	r7, sp, #0
 80118aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80118ac:	bf00      	nop
 80118ae:	370c      	adds	r7, #12
 80118b0:	46bd      	mov	sp, r7
 80118b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118b6:	4770      	bx	lr

080118b8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80118b8:	b480      	push	{r7}
 80118ba:	b083      	sub	sp, #12
 80118bc:	af00      	add	r7, sp, #0
 80118be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80118c0:	bf00      	nop
 80118c2:	370c      	adds	r7, #12
 80118c4:	46bd      	mov	sp, r7
 80118c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ca:	4770      	bx	lr

080118cc <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80118cc:	b580      	push	{r7, lr}
 80118ce:	b082      	sub	sp, #8
 80118d0:	af00      	add	r7, sp, #0
 80118d2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80118d8:	881a      	ldrh	r2, [r3, #0]
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	681b      	ldr	r3, [r3, #0]
 80118de:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80118e4:	1c9a      	adds	r2, r3, #2
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80118ee:	b29b      	uxth	r3, r3
 80118f0:	3b01      	subs	r3, #1
 80118f2:	b29a      	uxth	r2, r3
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80118fc:	b29b      	uxth	r3, r3
 80118fe:	2b00      	cmp	r3, #0
 8011900:	d10e      	bne.n	8011920 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	681b      	ldr	r3, [r3, #0]
 8011906:	685a      	ldr	r2, [r3, #4]
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	681b      	ldr	r3, [r3, #0]
 801190c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8011910:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	2201      	movs	r2, #1
 8011916:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 801191a:	6878      	ldr	r0, [r7, #4]
 801191c:	f7ff ffb8 	bl	8011890 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8011920:	bf00      	nop
 8011922:	3708      	adds	r7, #8
 8011924:	46bd      	mov	sp, r7
 8011926:	bd80      	pop	{r7, pc}

08011928 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8011928:	b580      	push	{r7, lr}
 801192a:	b082      	sub	sp, #8
 801192c:	af00      	add	r7, sp, #0
 801192e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	681b      	ldr	r3, [r3, #0]
 8011934:	68da      	ldr	r2, [r3, #12]
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801193a:	b292      	uxth	r2, r2
 801193c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011942:	1c9a      	adds	r2, r3, #2
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801194c:	b29b      	uxth	r3, r3
 801194e:	3b01      	subs	r3, #1
 8011950:	b29a      	uxth	r2, r3
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801195a:	b29b      	uxth	r3, r3
 801195c:	2b00      	cmp	r3, #0
 801195e:	d10e      	bne.n	801197e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	681b      	ldr	r3, [r3, #0]
 8011964:	685a      	ldr	r2, [r3, #4]
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	681b      	ldr	r3, [r3, #0]
 801196a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801196e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	2201      	movs	r2, #1
 8011974:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8011978:	6878      	ldr	r0, [r7, #4]
 801197a:	f7ff ff93 	bl	80118a4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 801197e:	bf00      	nop
 8011980:	3708      	adds	r7, #8
 8011982:	46bd      	mov	sp, r7
 8011984:	bd80      	pop	{r7, pc}

08011986 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8011986:	b580      	push	{r7, lr}
 8011988:	b086      	sub	sp, #24
 801198a:	af00      	add	r7, sp, #0
 801198c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	681b      	ldr	r3, [r3, #0]
 8011992:	689b      	ldr	r3, [r3, #8]
 8011994:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801199c:	b2db      	uxtb	r3, r3
 801199e:	2b04      	cmp	r3, #4
 80119a0:	d13a      	bne.n	8011a18 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80119a2:	697b      	ldr	r3, [r7, #20]
 80119a4:	f003 0301 	and.w	r3, r3, #1
 80119a8:	2b01      	cmp	r3, #1
 80119aa:	d109      	bne.n	80119c0 <I2S_IRQHandler+0x3a>
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	681b      	ldr	r3, [r3, #0]
 80119b0:	685b      	ldr	r3, [r3, #4]
 80119b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80119b6:	2b40      	cmp	r3, #64	@ 0x40
 80119b8:	d102      	bne.n	80119c0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80119ba:	6878      	ldr	r0, [r7, #4]
 80119bc:	f7ff ffb4 	bl	8011928 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80119c0:	697b      	ldr	r3, [r7, #20]
 80119c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80119c6:	2b40      	cmp	r3, #64	@ 0x40
 80119c8:	d126      	bne.n	8011a18 <I2S_IRQHandler+0x92>
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	681b      	ldr	r3, [r3, #0]
 80119ce:	685b      	ldr	r3, [r3, #4]
 80119d0:	f003 0320 	and.w	r3, r3, #32
 80119d4:	2b20      	cmp	r3, #32
 80119d6:	d11f      	bne.n	8011a18 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	681b      	ldr	r3, [r3, #0]
 80119dc:	685a      	ldr	r2, [r3, #4]
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	681b      	ldr	r3, [r3, #0]
 80119e2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80119e6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80119e8:	2300      	movs	r3, #0
 80119ea:	613b      	str	r3, [r7, #16]
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	681b      	ldr	r3, [r3, #0]
 80119f0:	68db      	ldr	r3, [r3, #12]
 80119f2:	613b      	str	r3, [r7, #16]
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	681b      	ldr	r3, [r3, #0]
 80119f8:	689b      	ldr	r3, [r3, #8]
 80119fa:	613b      	str	r3, [r7, #16]
 80119fc:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	2201      	movs	r2, #1
 8011a02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011a0a:	f043 0202 	orr.w	r2, r3, #2
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8011a12:	6878      	ldr	r0, [r7, #4]
 8011a14:	f7ff ff50 	bl	80118b8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8011a1e:	b2db      	uxtb	r3, r3
 8011a20:	2b03      	cmp	r3, #3
 8011a22:	d136      	bne.n	8011a92 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8011a24:	697b      	ldr	r3, [r7, #20]
 8011a26:	f003 0302 	and.w	r3, r3, #2
 8011a2a:	2b02      	cmp	r3, #2
 8011a2c:	d109      	bne.n	8011a42 <I2S_IRQHandler+0xbc>
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	681b      	ldr	r3, [r3, #0]
 8011a32:	685b      	ldr	r3, [r3, #4]
 8011a34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011a38:	2b80      	cmp	r3, #128	@ 0x80
 8011a3a:	d102      	bne.n	8011a42 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8011a3c:	6878      	ldr	r0, [r7, #4]
 8011a3e:	f7ff ff45 	bl	80118cc <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8011a42:	697b      	ldr	r3, [r7, #20]
 8011a44:	f003 0308 	and.w	r3, r3, #8
 8011a48:	2b08      	cmp	r3, #8
 8011a4a:	d122      	bne.n	8011a92 <I2S_IRQHandler+0x10c>
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	681b      	ldr	r3, [r3, #0]
 8011a50:	685b      	ldr	r3, [r3, #4]
 8011a52:	f003 0320 	and.w	r3, r3, #32
 8011a56:	2b20      	cmp	r3, #32
 8011a58:	d11b      	bne.n	8011a92 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	681b      	ldr	r3, [r3, #0]
 8011a5e:	685a      	ldr	r2, [r3, #4]
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	681b      	ldr	r3, [r3, #0]
 8011a64:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8011a68:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8011a6a:	2300      	movs	r3, #0
 8011a6c:	60fb      	str	r3, [r7, #12]
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	681b      	ldr	r3, [r3, #0]
 8011a72:	689b      	ldr	r3, [r3, #8]
 8011a74:	60fb      	str	r3, [r7, #12]
 8011a76:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	2201      	movs	r2, #1
 8011a7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011a84:	f043 0204 	orr.w	r2, r3, #4
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8011a8c:	6878      	ldr	r0, [r7, #4]
 8011a8e:	f7ff ff13 	bl	80118b8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8011a92:	bf00      	nop
 8011a94:	3718      	adds	r7, #24
 8011a96:	46bd      	mov	sp, r7
 8011a98:	bd80      	pop	{r7, pc}
	...

08011a9c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8011a9c:	b580      	push	{r7, lr}
 8011a9e:	b088      	sub	sp, #32
 8011aa0:	af00      	add	r7, sp, #0
 8011aa2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	681b      	ldr	r3, [r3, #0]
 8011aa8:	689b      	ldr	r3, [r3, #8]
 8011aaa:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	681b      	ldr	r3, [r3, #0]
 8011ab0:	4a92      	ldr	r2, [pc, #584]	@ (8011cfc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8011ab2:	4293      	cmp	r3, r2
 8011ab4:	d101      	bne.n	8011aba <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8011ab6:	4b92      	ldr	r3, [pc, #584]	@ (8011d00 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8011ab8:	e001      	b.n	8011abe <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8011aba:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8011abe:	689b      	ldr	r3, [r3, #8]
 8011ac0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	681b      	ldr	r3, [r3, #0]
 8011ac6:	685b      	ldr	r3, [r3, #4]
 8011ac8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	681b      	ldr	r3, [r3, #0]
 8011ace:	4a8b      	ldr	r2, [pc, #556]	@ (8011cfc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8011ad0:	4293      	cmp	r3, r2
 8011ad2:	d101      	bne.n	8011ad8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8011ad4:	4b8a      	ldr	r3, [pc, #552]	@ (8011d00 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8011ad6:	e001      	b.n	8011adc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8011ad8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8011adc:	685b      	ldr	r3, [r3, #4]
 8011ade:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	685b      	ldr	r3, [r3, #4]
 8011ae4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011ae8:	d004      	beq.n	8011af4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	685b      	ldr	r3, [r3, #4]
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	f040 8099 	bne.w	8011c26 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8011af4:	69fb      	ldr	r3, [r7, #28]
 8011af6:	f003 0302 	and.w	r3, r3, #2
 8011afa:	2b02      	cmp	r3, #2
 8011afc:	d107      	bne.n	8011b0e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8011afe:	697b      	ldr	r3, [r7, #20]
 8011b00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d002      	beq.n	8011b0e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8011b08:	6878      	ldr	r0, [r7, #4]
 8011b0a:	f000 f925 	bl	8011d58 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8011b0e:	69bb      	ldr	r3, [r7, #24]
 8011b10:	f003 0301 	and.w	r3, r3, #1
 8011b14:	2b01      	cmp	r3, #1
 8011b16:	d107      	bne.n	8011b28 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8011b18:	693b      	ldr	r3, [r7, #16]
 8011b1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	d002      	beq.n	8011b28 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8011b22:	6878      	ldr	r0, [r7, #4]
 8011b24:	f000 f9c8 	bl	8011eb8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8011b28:	69bb      	ldr	r3, [r7, #24]
 8011b2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011b2e:	2b40      	cmp	r3, #64	@ 0x40
 8011b30:	d13a      	bne.n	8011ba8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8011b32:	693b      	ldr	r3, [r7, #16]
 8011b34:	f003 0320 	and.w	r3, r3, #32
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d035      	beq.n	8011ba8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	681b      	ldr	r3, [r3, #0]
 8011b40:	4a6e      	ldr	r2, [pc, #440]	@ (8011cfc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8011b42:	4293      	cmp	r3, r2
 8011b44:	d101      	bne.n	8011b4a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8011b46:	4b6e      	ldr	r3, [pc, #440]	@ (8011d00 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8011b48:	e001      	b.n	8011b4e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8011b4a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8011b4e:	685a      	ldr	r2, [r3, #4]
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	681b      	ldr	r3, [r3, #0]
 8011b54:	4969      	ldr	r1, [pc, #420]	@ (8011cfc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8011b56:	428b      	cmp	r3, r1
 8011b58:	d101      	bne.n	8011b5e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8011b5a:	4b69      	ldr	r3, [pc, #420]	@ (8011d00 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8011b5c:	e001      	b.n	8011b62 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8011b5e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8011b62:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8011b66:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	681b      	ldr	r3, [r3, #0]
 8011b6c:	685a      	ldr	r2, [r3, #4]
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	681b      	ldr	r3, [r3, #0]
 8011b72:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8011b76:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8011b78:	2300      	movs	r3, #0
 8011b7a:	60fb      	str	r3, [r7, #12]
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	681b      	ldr	r3, [r3, #0]
 8011b80:	68db      	ldr	r3, [r3, #12]
 8011b82:	60fb      	str	r3, [r7, #12]
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	681b      	ldr	r3, [r3, #0]
 8011b88:	689b      	ldr	r3, [r3, #8]
 8011b8a:	60fb      	str	r3, [r7, #12]
 8011b8c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	2201      	movs	r2, #1
 8011b92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011b9a:	f043 0202 	orr.w	r2, r3, #2
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8011ba2:	6878      	ldr	r0, [r7, #4]
 8011ba4:	f7ff fe88 	bl	80118b8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8011ba8:	69fb      	ldr	r3, [r7, #28]
 8011baa:	f003 0308 	and.w	r3, r3, #8
 8011bae:	2b08      	cmp	r3, #8
 8011bb0:	f040 80c3 	bne.w	8011d3a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8011bb4:	697b      	ldr	r3, [r7, #20]
 8011bb6:	f003 0320 	and.w	r3, r3, #32
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	f000 80bd 	beq.w	8011d3a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	681b      	ldr	r3, [r3, #0]
 8011bc4:	685a      	ldr	r2, [r3, #4]
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	681b      	ldr	r3, [r3, #0]
 8011bca:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8011bce:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	681b      	ldr	r3, [r3, #0]
 8011bd4:	4a49      	ldr	r2, [pc, #292]	@ (8011cfc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8011bd6:	4293      	cmp	r3, r2
 8011bd8:	d101      	bne.n	8011bde <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8011bda:	4b49      	ldr	r3, [pc, #292]	@ (8011d00 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8011bdc:	e001      	b.n	8011be2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8011bde:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8011be2:	685a      	ldr	r2, [r3, #4]
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	681b      	ldr	r3, [r3, #0]
 8011be8:	4944      	ldr	r1, [pc, #272]	@ (8011cfc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8011bea:	428b      	cmp	r3, r1
 8011bec:	d101      	bne.n	8011bf2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8011bee:	4b44      	ldr	r3, [pc, #272]	@ (8011d00 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8011bf0:	e001      	b.n	8011bf6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8011bf2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8011bf6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8011bfa:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8011bfc:	2300      	movs	r3, #0
 8011bfe:	60bb      	str	r3, [r7, #8]
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	681b      	ldr	r3, [r3, #0]
 8011c04:	689b      	ldr	r3, [r3, #8]
 8011c06:	60bb      	str	r3, [r7, #8]
 8011c08:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	2201      	movs	r2, #1
 8011c0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011c16:	f043 0204 	orr.w	r2, r3, #4
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8011c1e:	6878      	ldr	r0, [r7, #4]
 8011c20:	f7ff fe4a 	bl	80118b8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8011c24:	e089      	b.n	8011d3a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8011c26:	69bb      	ldr	r3, [r7, #24]
 8011c28:	f003 0302 	and.w	r3, r3, #2
 8011c2c:	2b02      	cmp	r3, #2
 8011c2e:	d107      	bne.n	8011c40 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8011c30:	693b      	ldr	r3, [r7, #16]
 8011c32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d002      	beq.n	8011c40 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8011c3a:	6878      	ldr	r0, [r7, #4]
 8011c3c:	f000 f8be 	bl	8011dbc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8011c40:	69fb      	ldr	r3, [r7, #28]
 8011c42:	f003 0301 	and.w	r3, r3, #1
 8011c46:	2b01      	cmp	r3, #1
 8011c48:	d107      	bne.n	8011c5a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8011c4a:	697b      	ldr	r3, [r7, #20]
 8011c4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d002      	beq.n	8011c5a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8011c54:	6878      	ldr	r0, [r7, #4]
 8011c56:	f000 f8fd 	bl	8011e54 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8011c5a:	69fb      	ldr	r3, [r7, #28]
 8011c5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011c60:	2b40      	cmp	r3, #64	@ 0x40
 8011c62:	d12f      	bne.n	8011cc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8011c64:	697b      	ldr	r3, [r7, #20]
 8011c66:	f003 0320 	and.w	r3, r3, #32
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	d02a      	beq.n	8011cc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	681b      	ldr	r3, [r3, #0]
 8011c72:	685a      	ldr	r2, [r3, #4]
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	681b      	ldr	r3, [r3, #0]
 8011c78:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8011c7c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	681b      	ldr	r3, [r3, #0]
 8011c82:	4a1e      	ldr	r2, [pc, #120]	@ (8011cfc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8011c84:	4293      	cmp	r3, r2
 8011c86:	d101      	bne.n	8011c8c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8011c88:	4b1d      	ldr	r3, [pc, #116]	@ (8011d00 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8011c8a:	e001      	b.n	8011c90 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8011c8c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8011c90:	685a      	ldr	r2, [r3, #4]
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	681b      	ldr	r3, [r3, #0]
 8011c96:	4919      	ldr	r1, [pc, #100]	@ (8011cfc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8011c98:	428b      	cmp	r3, r1
 8011c9a:	d101      	bne.n	8011ca0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8011c9c:	4b18      	ldr	r3, [pc, #96]	@ (8011d00 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8011c9e:	e001      	b.n	8011ca4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8011ca0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8011ca4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8011ca8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	2201      	movs	r2, #1
 8011cae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011cb6:	f043 0202 	orr.w	r2, r3, #2
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8011cbe:	6878      	ldr	r0, [r7, #4]
 8011cc0:	f7ff fdfa 	bl	80118b8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8011cc4:	69bb      	ldr	r3, [r7, #24]
 8011cc6:	f003 0308 	and.w	r3, r3, #8
 8011cca:	2b08      	cmp	r3, #8
 8011ccc:	d136      	bne.n	8011d3c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8011cce:	693b      	ldr	r3, [r7, #16]
 8011cd0:	f003 0320 	and.w	r3, r3, #32
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	d031      	beq.n	8011d3c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	681b      	ldr	r3, [r3, #0]
 8011cdc:	4a07      	ldr	r2, [pc, #28]	@ (8011cfc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8011cde:	4293      	cmp	r3, r2
 8011ce0:	d101      	bne.n	8011ce6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8011ce2:	4b07      	ldr	r3, [pc, #28]	@ (8011d00 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8011ce4:	e001      	b.n	8011cea <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8011ce6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8011cea:	685a      	ldr	r2, [r3, #4]
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	681b      	ldr	r3, [r3, #0]
 8011cf0:	4902      	ldr	r1, [pc, #8]	@ (8011cfc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8011cf2:	428b      	cmp	r3, r1
 8011cf4:	d106      	bne.n	8011d04 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8011cf6:	4b02      	ldr	r3, [pc, #8]	@ (8011d00 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8011cf8:	e006      	b.n	8011d08 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8011cfa:	bf00      	nop
 8011cfc:	40003800 	.word	0x40003800
 8011d00:	40003400 	.word	0x40003400
 8011d04:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8011d08:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8011d0c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	681b      	ldr	r3, [r3, #0]
 8011d12:	685a      	ldr	r2, [r3, #4]
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	681b      	ldr	r3, [r3, #0]
 8011d18:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8011d1c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	2201      	movs	r2, #1
 8011d22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011d2a:	f043 0204 	orr.w	r2, r3, #4
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8011d32:	6878      	ldr	r0, [r7, #4]
 8011d34:	f7ff fdc0 	bl	80118b8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8011d38:	e000      	b.n	8011d3c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8011d3a:	bf00      	nop
}
 8011d3c:	bf00      	nop
 8011d3e:	3720      	adds	r7, #32
 8011d40:	46bd      	mov	sp, r7
 8011d42:	bd80      	pop	{r7, pc}

08011d44 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8011d44:	b480      	push	{r7}
 8011d46:	b083      	sub	sp, #12
 8011d48:	af00      	add	r7, sp, #0
 8011d4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8011d4c:	bf00      	nop
 8011d4e:	370c      	adds	r7, #12
 8011d50:	46bd      	mov	sp, r7
 8011d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d56:	4770      	bx	lr

08011d58 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8011d58:	b580      	push	{r7, lr}
 8011d5a:	b082      	sub	sp, #8
 8011d5c:	af00      	add	r7, sp, #0
 8011d5e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011d64:	1c99      	adds	r1, r3, #2
 8011d66:	687a      	ldr	r2, [r7, #4]
 8011d68:	6251      	str	r1, [r2, #36]	@ 0x24
 8011d6a:	881a      	ldrh	r2, [r3, #0]
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	681b      	ldr	r3, [r3, #0]
 8011d70:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011d76:	b29b      	uxth	r3, r3
 8011d78:	3b01      	subs	r3, #1
 8011d7a:	b29a      	uxth	r2, r3
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011d84:	b29b      	uxth	r3, r3
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	d113      	bne.n	8011db2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	681b      	ldr	r3, [r3, #0]
 8011d8e:	685a      	ldr	r2, [r3, #4]
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	681b      	ldr	r3, [r3, #0]
 8011d94:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8011d98:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011d9e:	b29b      	uxth	r3, r3
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d106      	bne.n	8011db2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	2201      	movs	r2, #1
 8011da8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8011dac:	6878      	ldr	r0, [r7, #4]
 8011dae:	f7ff ffc9 	bl	8011d44 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8011db2:	bf00      	nop
 8011db4:	3708      	adds	r7, #8
 8011db6:	46bd      	mov	sp, r7
 8011db8:	bd80      	pop	{r7, pc}
	...

08011dbc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8011dbc:	b580      	push	{r7, lr}
 8011dbe:	b082      	sub	sp, #8
 8011dc0:	af00      	add	r7, sp, #0
 8011dc2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011dc8:	1c99      	adds	r1, r3, #2
 8011dca:	687a      	ldr	r2, [r7, #4]
 8011dcc:	6251      	str	r1, [r2, #36]	@ 0x24
 8011dce:	8819      	ldrh	r1, [r3, #0]
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	681b      	ldr	r3, [r3, #0]
 8011dd4:	4a1d      	ldr	r2, [pc, #116]	@ (8011e4c <I2SEx_TxISR_I2SExt+0x90>)
 8011dd6:	4293      	cmp	r3, r2
 8011dd8:	d101      	bne.n	8011dde <I2SEx_TxISR_I2SExt+0x22>
 8011dda:	4b1d      	ldr	r3, [pc, #116]	@ (8011e50 <I2SEx_TxISR_I2SExt+0x94>)
 8011ddc:	e001      	b.n	8011de2 <I2SEx_TxISR_I2SExt+0x26>
 8011dde:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8011de2:	460a      	mov	r2, r1
 8011de4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011dea:	b29b      	uxth	r3, r3
 8011dec:	3b01      	subs	r3, #1
 8011dee:	b29a      	uxth	r2, r3
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011df8:	b29b      	uxth	r3, r3
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	d121      	bne.n	8011e42 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	681b      	ldr	r3, [r3, #0]
 8011e02:	4a12      	ldr	r2, [pc, #72]	@ (8011e4c <I2SEx_TxISR_I2SExt+0x90>)
 8011e04:	4293      	cmp	r3, r2
 8011e06:	d101      	bne.n	8011e0c <I2SEx_TxISR_I2SExt+0x50>
 8011e08:	4b11      	ldr	r3, [pc, #68]	@ (8011e50 <I2SEx_TxISR_I2SExt+0x94>)
 8011e0a:	e001      	b.n	8011e10 <I2SEx_TxISR_I2SExt+0x54>
 8011e0c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8011e10:	685a      	ldr	r2, [r3, #4]
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	681b      	ldr	r3, [r3, #0]
 8011e16:	490d      	ldr	r1, [pc, #52]	@ (8011e4c <I2SEx_TxISR_I2SExt+0x90>)
 8011e18:	428b      	cmp	r3, r1
 8011e1a:	d101      	bne.n	8011e20 <I2SEx_TxISR_I2SExt+0x64>
 8011e1c:	4b0c      	ldr	r3, [pc, #48]	@ (8011e50 <I2SEx_TxISR_I2SExt+0x94>)
 8011e1e:	e001      	b.n	8011e24 <I2SEx_TxISR_I2SExt+0x68>
 8011e20:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8011e24:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8011e28:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011e2e:	b29b      	uxth	r3, r3
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	d106      	bne.n	8011e42 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	2201      	movs	r2, #1
 8011e38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8011e3c:	6878      	ldr	r0, [r7, #4]
 8011e3e:	f7ff ff81 	bl	8011d44 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8011e42:	bf00      	nop
 8011e44:	3708      	adds	r7, #8
 8011e46:	46bd      	mov	sp, r7
 8011e48:	bd80      	pop	{r7, pc}
 8011e4a:	bf00      	nop
 8011e4c:	40003800 	.word	0x40003800
 8011e50:	40003400 	.word	0x40003400

08011e54 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8011e54:	b580      	push	{r7, lr}
 8011e56:	b082      	sub	sp, #8
 8011e58:	af00      	add	r7, sp, #0
 8011e5a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	681b      	ldr	r3, [r3, #0]
 8011e60:	68d8      	ldr	r0, [r3, #12]
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011e66:	1c99      	adds	r1, r3, #2
 8011e68:	687a      	ldr	r2, [r7, #4]
 8011e6a:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8011e6c:	b282      	uxth	r2, r0
 8011e6e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011e74:	b29b      	uxth	r3, r3
 8011e76:	3b01      	subs	r3, #1
 8011e78:	b29a      	uxth	r2, r3
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011e82:	b29b      	uxth	r3, r3
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d113      	bne.n	8011eb0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	681b      	ldr	r3, [r3, #0]
 8011e8c:	685a      	ldr	r2, [r3, #4]
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	681b      	ldr	r3, [r3, #0]
 8011e92:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8011e96:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011e9c:	b29b      	uxth	r3, r3
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	d106      	bne.n	8011eb0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	2201      	movs	r2, #1
 8011ea6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8011eaa:	6878      	ldr	r0, [r7, #4]
 8011eac:	f7ff ff4a 	bl	8011d44 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8011eb0:	bf00      	nop
 8011eb2:	3708      	adds	r7, #8
 8011eb4:	46bd      	mov	sp, r7
 8011eb6:	bd80      	pop	{r7, pc}

08011eb8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8011eb8:	b580      	push	{r7, lr}
 8011eba:	b082      	sub	sp, #8
 8011ebc:	af00      	add	r7, sp, #0
 8011ebe:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	681b      	ldr	r3, [r3, #0]
 8011ec4:	4a20      	ldr	r2, [pc, #128]	@ (8011f48 <I2SEx_RxISR_I2SExt+0x90>)
 8011ec6:	4293      	cmp	r3, r2
 8011ec8:	d101      	bne.n	8011ece <I2SEx_RxISR_I2SExt+0x16>
 8011eca:	4b20      	ldr	r3, [pc, #128]	@ (8011f4c <I2SEx_RxISR_I2SExt+0x94>)
 8011ecc:	e001      	b.n	8011ed2 <I2SEx_RxISR_I2SExt+0x1a>
 8011ece:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8011ed2:	68d8      	ldr	r0, [r3, #12]
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011ed8:	1c99      	adds	r1, r3, #2
 8011eda:	687a      	ldr	r2, [r7, #4]
 8011edc:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8011ede:	b282      	uxth	r2, r0
 8011ee0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011ee6:	b29b      	uxth	r3, r3
 8011ee8:	3b01      	subs	r3, #1
 8011eea:	b29a      	uxth	r2, r3
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011ef4:	b29b      	uxth	r3, r3
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d121      	bne.n	8011f3e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	681b      	ldr	r3, [r3, #0]
 8011efe:	4a12      	ldr	r2, [pc, #72]	@ (8011f48 <I2SEx_RxISR_I2SExt+0x90>)
 8011f00:	4293      	cmp	r3, r2
 8011f02:	d101      	bne.n	8011f08 <I2SEx_RxISR_I2SExt+0x50>
 8011f04:	4b11      	ldr	r3, [pc, #68]	@ (8011f4c <I2SEx_RxISR_I2SExt+0x94>)
 8011f06:	e001      	b.n	8011f0c <I2SEx_RxISR_I2SExt+0x54>
 8011f08:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8011f0c:	685a      	ldr	r2, [r3, #4]
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	681b      	ldr	r3, [r3, #0]
 8011f12:	490d      	ldr	r1, [pc, #52]	@ (8011f48 <I2SEx_RxISR_I2SExt+0x90>)
 8011f14:	428b      	cmp	r3, r1
 8011f16:	d101      	bne.n	8011f1c <I2SEx_RxISR_I2SExt+0x64>
 8011f18:	4b0c      	ldr	r3, [pc, #48]	@ (8011f4c <I2SEx_RxISR_I2SExt+0x94>)
 8011f1a:	e001      	b.n	8011f20 <I2SEx_RxISR_I2SExt+0x68>
 8011f1c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8011f20:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8011f24:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011f2a:	b29b      	uxth	r3, r3
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	d106      	bne.n	8011f3e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	2201      	movs	r2, #1
 8011f34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8011f38:	6878      	ldr	r0, [r7, #4]
 8011f3a:	f7ff ff03 	bl	8011d44 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8011f3e:	bf00      	nop
 8011f40:	3708      	adds	r7, #8
 8011f42:	46bd      	mov	sp, r7
 8011f44:	bd80      	pop	{r7, pc}
 8011f46:	bf00      	nop
 8011f48:	40003800 	.word	0x40003800
 8011f4c:	40003400 	.word	0x40003400

08011f50 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8011f50:	b580      	push	{r7, lr}
 8011f52:	b086      	sub	sp, #24
 8011f54:	af02      	add	r7, sp, #8
 8011f56:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	d101      	bne.n	8011f62 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8011f5e:	2301      	movs	r3, #1
 8011f60:	e101      	b.n	8012166 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	681b      	ldr	r3, [r3, #0]
 8011f66:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8011f6e:	b2db      	uxtb	r3, r3
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d106      	bne.n	8011f82 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	2200      	movs	r2, #0
 8011f78:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8011f7c:	6878      	ldr	r0, [r7, #4]
 8011f7e:	f005 fd67 	bl	8017a50 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	2203      	movs	r2, #3
 8011f86:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8011f8a:	68bb      	ldr	r3, [r7, #8]
 8011f8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8011f90:	d102      	bne.n	8011f98 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	2200      	movs	r2, #0
 8011f96:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	681b      	ldr	r3, [r3, #0]
 8011f9c:	4618      	mov	r0, r3
 8011f9e:	f002 f990 	bl	80142c2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	6818      	ldr	r0, [r3, #0]
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	7c1a      	ldrb	r2, [r3, #16]
 8011faa:	f88d 2000 	strb.w	r2, [sp]
 8011fae:	3304      	adds	r3, #4
 8011fb0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011fb2:	f002 f86e 	bl	8014092 <USB_CoreInit>
 8011fb6:	4603      	mov	r3, r0
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d005      	beq.n	8011fc8 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	2202      	movs	r2, #2
 8011fc0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8011fc4:	2301      	movs	r3, #1
 8011fc6:	e0ce      	b.n	8012166 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	681b      	ldr	r3, [r3, #0]
 8011fcc:	2100      	movs	r1, #0
 8011fce:	4618      	mov	r0, r3
 8011fd0:	f002 f988 	bl	80142e4 <USB_SetCurrentMode>
 8011fd4:	4603      	mov	r3, r0
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d005      	beq.n	8011fe6 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	2202      	movs	r2, #2
 8011fde:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8011fe2:	2301      	movs	r3, #1
 8011fe4:	e0bf      	b.n	8012166 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8011fe6:	2300      	movs	r3, #0
 8011fe8:	73fb      	strb	r3, [r7, #15]
 8011fea:	e04a      	b.n	8012082 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8011fec:	7bfa      	ldrb	r2, [r7, #15]
 8011fee:	6879      	ldr	r1, [r7, #4]
 8011ff0:	4613      	mov	r3, r2
 8011ff2:	00db      	lsls	r3, r3, #3
 8011ff4:	4413      	add	r3, r2
 8011ff6:	009b      	lsls	r3, r3, #2
 8011ff8:	440b      	add	r3, r1
 8011ffa:	3315      	adds	r3, #21
 8011ffc:	2201      	movs	r2, #1
 8011ffe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8012000:	7bfa      	ldrb	r2, [r7, #15]
 8012002:	6879      	ldr	r1, [r7, #4]
 8012004:	4613      	mov	r3, r2
 8012006:	00db      	lsls	r3, r3, #3
 8012008:	4413      	add	r3, r2
 801200a:	009b      	lsls	r3, r3, #2
 801200c:	440b      	add	r3, r1
 801200e:	3314      	adds	r3, #20
 8012010:	7bfa      	ldrb	r2, [r7, #15]
 8012012:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8012014:	7bfa      	ldrb	r2, [r7, #15]
 8012016:	7bfb      	ldrb	r3, [r7, #15]
 8012018:	b298      	uxth	r0, r3
 801201a:	6879      	ldr	r1, [r7, #4]
 801201c:	4613      	mov	r3, r2
 801201e:	00db      	lsls	r3, r3, #3
 8012020:	4413      	add	r3, r2
 8012022:	009b      	lsls	r3, r3, #2
 8012024:	440b      	add	r3, r1
 8012026:	332e      	adds	r3, #46	@ 0x2e
 8012028:	4602      	mov	r2, r0
 801202a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 801202c:	7bfa      	ldrb	r2, [r7, #15]
 801202e:	6879      	ldr	r1, [r7, #4]
 8012030:	4613      	mov	r3, r2
 8012032:	00db      	lsls	r3, r3, #3
 8012034:	4413      	add	r3, r2
 8012036:	009b      	lsls	r3, r3, #2
 8012038:	440b      	add	r3, r1
 801203a:	3318      	adds	r3, #24
 801203c:	2200      	movs	r2, #0
 801203e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8012040:	7bfa      	ldrb	r2, [r7, #15]
 8012042:	6879      	ldr	r1, [r7, #4]
 8012044:	4613      	mov	r3, r2
 8012046:	00db      	lsls	r3, r3, #3
 8012048:	4413      	add	r3, r2
 801204a:	009b      	lsls	r3, r3, #2
 801204c:	440b      	add	r3, r1
 801204e:	331c      	adds	r3, #28
 8012050:	2200      	movs	r2, #0
 8012052:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8012054:	7bfa      	ldrb	r2, [r7, #15]
 8012056:	6879      	ldr	r1, [r7, #4]
 8012058:	4613      	mov	r3, r2
 801205a:	00db      	lsls	r3, r3, #3
 801205c:	4413      	add	r3, r2
 801205e:	009b      	lsls	r3, r3, #2
 8012060:	440b      	add	r3, r1
 8012062:	3320      	adds	r3, #32
 8012064:	2200      	movs	r2, #0
 8012066:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8012068:	7bfa      	ldrb	r2, [r7, #15]
 801206a:	6879      	ldr	r1, [r7, #4]
 801206c:	4613      	mov	r3, r2
 801206e:	00db      	lsls	r3, r3, #3
 8012070:	4413      	add	r3, r2
 8012072:	009b      	lsls	r3, r3, #2
 8012074:	440b      	add	r3, r1
 8012076:	3324      	adds	r3, #36	@ 0x24
 8012078:	2200      	movs	r2, #0
 801207a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801207c:	7bfb      	ldrb	r3, [r7, #15]
 801207e:	3301      	adds	r3, #1
 8012080:	73fb      	strb	r3, [r7, #15]
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	791b      	ldrb	r3, [r3, #4]
 8012086:	7bfa      	ldrb	r2, [r7, #15]
 8012088:	429a      	cmp	r2, r3
 801208a:	d3af      	bcc.n	8011fec <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801208c:	2300      	movs	r3, #0
 801208e:	73fb      	strb	r3, [r7, #15]
 8012090:	e044      	b.n	801211c <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8012092:	7bfa      	ldrb	r2, [r7, #15]
 8012094:	6879      	ldr	r1, [r7, #4]
 8012096:	4613      	mov	r3, r2
 8012098:	00db      	lsls	r3, r3, #3
 801209a:	4413      	add	r3, r2
 801209c:	009b      	lsls	r3, r3, #2
 801209e:	440b      	add	r3, r1
 80120a0:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80120a4:	2200      	movs	r2, #0
 80120a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80120a8:	7bfa      	ldrb	r2, [r7, #15]
 80120aa:	6879      	ldr	r1, [r7, #4]
 80120ac:	4613      	mov	r3, r2
 80120ae:	00db      	lsls	r3, r3, #3
 80120b0:	4413      	add	r3, r2
 80120b2:	009b      	lsls	r3, r3, #2
 80120b4:	440b      	add	r3, r1
 80120b6:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80120ba:	7bfa      	ldrb	r2, [r7, #15]
 80120bc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80120be:	7bfa      	ldrb	r2, [r7, #15]
 80120c0:	6879      	ldr	r1, [r7, #4]
 80120c2:	4613      	mov	r3, r2
 80120c4:	00db      	lsls	r3, r3, #3
 80120c6:	4413      	add	r3, r2
 80120c8:	009b      	lsls	r3, r3, #2
 80120ca:	440b      	add	r3, r1
 80120cc:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80120d0:	2200      	movs	r2, #0
 80120d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80120d4:	7bfa      	ldrb	r2, [r7, #15]
 80120d6:	6879      	ldr	r1, [r7, #4]
 80120d8:	4613      	mov	r3, r2
 80120da:	00db      	lsls	r3, r3, #3
 80120dc:	4413      	add	r3, r2
 80120de:	009b      	lsls	r3, r3, #2
 80120e0:	440b      	add	r3, r1
 80120e2:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80120e6:	2200      	movs	r2, #0
 80120e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80120ea:	7bfa      	ldrb	r2, [r7, #15]
 80120ec:	6879      	ldr	r1, [r7, #4]
 80120ee:	4613      	mov	r3, r2
 80120f0:	00db      	lsls	r3, r3, #3
 80120f2:	4413      	add	r3, r2
 80120f4:	009b      	lsls	r3, r3, #2
 80120f6:	440b      	add	r3, r1
 80120f8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80120fc:	2200      	movs	r2, #0
 80120fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8012100:	7bfa      	ldrb	r2, [r7, #15]
 8012102:	6879      	ldr	r1, [r7, #4]
 8012104:	4613      	mov	r3, r2
 8012106:	00db      	lsls	r3, r3, #3
 8012108:	4413      	add	r3, r2
 801210a:	009b      	lsls	r3, r3, #2
 801210c:	440b      	add	r3, r1
 801210e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8012112:	2200      	movs	r2, #0
 8012114:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8012116:	7bfb      	ldrb	r3, [r7, #15]
 8012118:	3301      	adds	r3, #1
 801211a:	73fb      	strb	r3, [r7, #15]
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	791b      	ldrb	r3, [r3, #4]
 8012120:	7bfa      	ldrb	r2, [r7, #15]
 8012122:	429a      	cmp	r2, r3
 8012124:	d3b5      	bcc.n	8012092 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	6818      	ldr	r0, [r3, #0]
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	7c1a      	ldrb	r2, [r3, #16]
 801212e:	f88d 2000 	strb.w	r2, [sp]
 8012132:	3304      	adds	r3, #4
 8012134:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012136:	f002 f921 	bl	801437c <USB_DevInit>
 801213a:	4603      	mov	r3, r0
 801213c:	2b00      	cmp	r3, #0
 801213e:	d005      	beq.n	801214c <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	2202      	movs	r2, #2
 8012144:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8012148:	2301      	movs	r3, #1
 801214a:	e00c      	b.n	8012166 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	2200      	movs	r2, #0
 8012150:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	2201      	movs	r2, #1
 8012156:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	681b      	ldr	r3, [r3, #0]
 801215e:	4618      	mov	r0, r3
 8012160:	f003 f96b 	bl	801543a <USB_DevDisconnect>

  return HAL_OK;
 8012164:	2300      	movs	r3, #0
}
 8012166:	4618      	mov	r0, r3
 8012168:	3710      	adds	r7, #16
 801216a:	46bd      	mov	sp, r7
 801216c:	bd80      	pop	{r7, pc}

0801216e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 801216e:	b580      	push	{r7, lr}
 8012170:	b084      	sub	sp, #16
 8012172:	af00      	add	r7, sp, #0
 8012174:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	681b      	ldr	r3, [r3, #0]
 801217a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8012182:	2b01      	cmp	r3, #1
 8012184:	d101      	bne.n	801218a <HAL_PCD_Start+0x1c>
 8012186:	2302      	movs	r3, #2
 8012188:	e022      	b.n	80121d0 <HAL_PCD_Start+0x62>
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	2201      	movs	r2, #1
 801218e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8012192:	68fb      	ldr	r3, [r7, #12]
 8012194:	68db      	ldr	r3, [r3, #12]
 8012196:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801219a:	2b00      	cmp	r3, #0
 801219c:	d009      	beq.n	80121b2 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80121a2:	2b01      	cmp	r3, #1
 80121a4:	d105      	bne.n	80121b2 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80121a6:	68fb      	ldr	r3, [r7, #12]
 80121a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80121aa:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80121ae:	68fb      	ldr	r3, [r7, #12]
 80121b0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	681b      	ldr	r3, [r3, #0]
 80121b6:	4618      	mov	r0, r3
 80121b8:	f002 f872 	bl	80142a0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	681b      	ldr	r3, [r3, #0]
 80121c0:	4618      	mov	r0, r3
 80121c2:	f003 f919 	bl	80153f8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	2200      	movs	r2, #0
 80121ca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80121ce:	2300      	movs	r3, #0
}
 80121d0:	4618      	mov	r0, r3
 80121d2:	3710      	adds	r7, #16
 80121d4:	46bd      	mov	sp, r7
 80121d6:	bd80      	pop	{r7, pc}

080121d8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80121d8:	b590      	push	{r4, r7, lr}
 80121da:	b08d      	sub	sp, #52	@ 0x34
 80121dc:	af00      	add	r7, sp, #0
 80121de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	681b      	ldr	r3, [r3, #0]
 80121e4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80121e6:	6a3b      	ldr	r3, [r7, #32]
 80121e8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	681b      	ldr	r3, [r3, #0]
 80121ee:	4618      	mov	r0, r3
 80121f0:	f003 f9d7 	bl	80155a2 <USB_GetMode>
 80121f4:	4603      	mov	r3, r0
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	f040 848c 	bne.w	8012b14 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	681b      	ldr	r3, [r3, #0]
 8012200:	4618      	mov	r0, r3
 8012202:	f003 f93b 	bl	801547c <USB_ReadInterrupts>
 8012206:	4603      	mov	r3, r0
 8012208:	2b00      	cmp	r3, #0
 801220a:	f000 8482 	beq.w	8012b12 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 801220e:	69fb      	ldr	r3, [r7, #28]
 8012210:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012214:	689b      	ldr	r3, [r3, #8]
 8012216:	0a1b      	lsrs	r3, r3, #8
 8012218:	f3c3 020d 	ubfx	r2, r3, #0, #14
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	681b      	ldr	r3, [r3, #0]
 8012226:	4618      	mov	r0, r3
 8012228:	f003 f928 	bl	801547c <USB_ReadInterrupts>
 801222c:	4603      	mov	r3, r0
 801222e:	f003 0302 	and.w	r3, r3, #2
 8012232:	2b02      	cmp	r3, #2
 8012234:	d107      	bne.n	8012246 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	681b      	ldr	r3, [r3, #0]
 801223a:	695a      	ldr	r2, [r3, #20]
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	681b      	ldr	r3, [r3, #0]
 8012240:	f002 0202 	and.w	r2, r2, #2
 8012244:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	681b      	ldr	r3, [r3, #0]
 801224a:	4618      	mov	r0, r3
 801224c:	f003 f916 	bl	801547c <USB_ReadInterrupts>
 8012250:	4603      	mov	r3, r0
 8012252:	f003 0310 	and.w	r3, r3, #16
 8012256:	2b10      	cmp	r3, #16
 8012258:	d161      	bne.n	801231e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	681b      	ldr	r3, [r3, #0]
 801225e:	699a      	ldr	r2, [r3, #24]
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	681b      	ldr	r3, [r3, #0]
 8012264:	f022 0210 	bic.w	r2, r2, #16
 8012268:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 801226a:	6a3b      	ldr	r3, [r7, #32]
 801226c:	6a1b      	ldr	r3, [r3, #32]
 801226e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8012270:	69bb      	ldr	r3, [r7, #24]
 8012272:	f003 020f 	and.w	r2, r3, #15
 8012276:	4613      	mov	r3, r2
 8012278:	00db      	lsls	r3, r3, #3
 801227a:	4413      	add	r3, r2
 801227c:	009b      	lsls	r3, r3, #2
 801227e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8012282:	687a      	ldr	r2, [r7, #4]
 8012284:	4413      	add	r3, r2
 8012286:	3304      	adds	r3, #4
 8012288:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 801228a:	69bb      	ldr	r3, [r7, #24]
 801228c:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8012290:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8012294:	d124      	bne.n	80122e0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8012296:	69ba      	ldr	r2, [r7, #24]
 8012298:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 801229c:	4013      	ands	r3, r2
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d035      	beq.n	801230e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80122a2:	697b      	ldr	r3, [r7, #20]
 80122a4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80122a6:	69bb      	ldr	r3, [r7, #24]
 80122a8:	091b      	lsrs	r3, r3, #4
 80122aa:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80122ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80122b0:	b29b      	uxth	r3, r3
 80122b2:	461a      	mov	r2, r3
 80122b4:	6a38      	ldr	r0, [r7, #32]
 80122b6:	f002 ff4d 	bl	8015154 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80122ba:	697b      	ldr	r3, [r7, #20]
 80122bc:	68da      	ldr	r2, [r3, #12]
 80122be:	69bb      	ldr	r3, [r7, #24]
 80122c0:	091b      	lsrs	r3, r3, #4
 80122c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80122c6:	441a      	add	r2, r3
 80122c8:	697b      	ldr	r3, [r7, #20]
 80122ca:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80122cc:	697b      	ldr	r3, [r7, #20]
 80122ce:	695a      	ldr	r2, [r3, #20]
 80122d0:	69bb      	ldr	r3, [r7, #24]
 80122d2:	091b      	lsrs	r3, r3, #4
 80122d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80122d8:	441a      	add	r2, r3
 80122da:	697b      	ldr	r3, [r7, #20]
 80122dc:	615a      	str	r2, [r3, #20]
 80122de:	e016      	b.n	801230e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80122e0:	69bb      	ldr	r3, [r7, #24]
 80122e2:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80122e6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80122ea:	d110      	bne.n	801230e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80122f2:	2208      	movs	r2, #8
 80122f4:	4619      	mov	r1, r3
 80122f6:	6a38      	ldr	r0, [r7, #32]
 80122f8:	f002 ff2c 	bl	8015154 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80122fc:	697b      	ldr	r3, [r7, #20]
 80122fe:	695a      	ldr	r2, [r3, #20]
 8012300:	69bb      	ldr	r3, [r7, #24]
 8012302:	091b      	lsrs	r3, r3, #4
 8012304:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012308:	441a      	add	r2, r3
 801230a:	697b      	ldr	r3, [r7, #20]
 801230c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	681b      	ldr	r3, [r3, #0]
 8012312:	699a      	ldr	r2, [r3, #24]
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	681b      	ldr	r3, [r3, #0]
 8012318:	f042 0210 	orr.w	r2, r2, #16
 801231c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	681b      	ldr	r3, [r3, #0]
 8012322:	4618      	mov	r0, r3
 8012324:	f003 f8aa 	bl	801547c <USB_ReadInterrupts>
 8012328:	4603      	mov	r3, r0
 801232a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 801232e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8012332:	f040 80a7 	bne.w	8012484 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8012336:	2300      	movs	r3, #0
 8012338:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	681b      	ldr	r3, [r3, #0]
 801233e:	4618      	mov	r0, r3
 8012340:	f003 f8af 	bl	80154a2 <USB_ReadDevAllOutEpInterrupt>
 8012344:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8012346:	e099      	b.n	801247c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8012348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801234a:	f003 0301 	and.w	r3, r3, #1
 801234e:	2b00      	cmp	r3, #0
 8012350:	f000 808e 	beq.w	8012470 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	681b      	ldr	r3, [r3, #0]
 8012358:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801235a:	b2d2      	uxtb	r2, r2
 801235c:	4611      	mov	r1, r2
 801235e:	4618      	mov	r0, r3
 8012360:	f003 f8d3 	bl	801550a <USB_ReadDevOutEPInterrupt>
 8012364:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8012366:	693b      	ldr	r3, [r7, #16]
 8012368:	f003 0301 	and.w	r3, r3, #1
 801236c:	2b00      	cmp	r3, #0
 801236e:	d00c      	beq.n	801238a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8012370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012372:	015a      	lsls	r2, r3, #5
 8012374:	69fb      	ldr	r3, [r7, #28]
 8012376:	4413      	add	r3, r2
 8012378:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801237c:	461a      	mov	r2, r3
 801237e:	2301      	movs	r3, #1
 8012380:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8012382:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8012384:	6878      	ldr	r0, [r7, #4]
 8012386:	f000 fea3 	bl	80130d0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 801238a:	693b      	ldr	r3, [r7, #16]
 801238c:	f003 0308 	and.w	r3, r3, #8
 8012390:	2b00      	cmp	r3, #0
 8012392:	d00c      	beq.n	80123ae <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8012394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012396:	015a      	lsls	r2, r3, #5
 8012398:	69fb      	ldr	r3, [r7, #28]
 801239a:	4413      	add	r3, r2
 801239c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80123a0:	461a      	mov	r2, r3
 80123a2:	2308      	movs	r3, #8
 80123a4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80123a6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80123a8:	6878      	ldr	r0, [r7, #4]
 80123aa:	f000 ff79 	bl	80132a0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80123ae:	693b      	ldr	r3, [r7, #16]
 80123b0:	f003 0310 	and.w	r3, r3, #16
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	d008      	beq.n	80123ca <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80123b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80123ba:	015a      	lsls	r2, r3, #5
 80123bc:	69fb      	ldr	r3, [r7, #28]
 80123be:	4413      	add	r3, r2
 80123c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80123c4:	461a      	mov	r2, r3
 80123c6:	2310      	movs	r3, #16
 80123c8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80123ca:	693b      	ldr	r3, [r7, #16]
 80123cc:	f003 0302 	and.w	r3, r3, #2
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	d030      	beq.n	8012436 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80123d4:	6a3b      	ldr	r3, [r7, #32]
 80123d6:	695b      	ldr	r3, [r3, #20]
 80123d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80123dc:	2b80      	cmp	r3, #128	@ 0x80
 80123de:	d109      	bne.n	80123f4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80123e0:	69fb      	ldr	r3, [r7, #28]
 80123e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80123e6:	685b      	ldr	r3, [r3, #4]
 80123e8:	69fa      	ldr	r2, [r7, #28]
 80123ea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80123ee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80123f2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80123f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80123f6:	4613      	mov	r3, r2
 80123f8:	00db      	lsls	r3, r3, #3
 80123fa:	4413      	add	r3, r2
 80123fc:	009b      	lsls	r3, r3, #2
 80123fe:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8012402:	687a      	ldr	r2, [r7, #4]
 8012404:	4413      	add	r3, r2
 8012406:	3304      	adds	r3, #4
 8012408:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 801240a:	697b      	ldr	r3, [r7, #20]
 801240c:	78db      	ldrb	r3, [r3, #3]
 801240e:	2b01      	cmp	r3, #1
 8012410:	d108      	bne.n	8012424 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8012412:	697b      	ldr	r3, [r7, #20]
 8012414:	2200      	movs	r2, #0
 8012416:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8012418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801241a:	b2db      	uxtb	r3, r3
 801241c:	4619      	mov	r1, r3
 801241e:	6878      	ldr	r0, [r7, #4]
 8012420:	f005 fc2a 	bl	8017c78 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8012424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012426:	015a      	lsls	r2, r3, #5
 8012428:	69fb      	ldr	r3, [r7, #28]
 801242a:	4413      	add	r3, r2
 801242c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012430:	461a      	mov	r2, r3
 8012432:	2302      	movs	r3, #2
 8012434:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8012436:	693b      	ldr	r3, [r7, #16]
 8012438:	f003 0320 	and.w	r3, r3, #32
 801243c:	2b00      	cmp	r3, #0
 801243e:	d008      	beq.n	8012452 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8012440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012442:	015a      	lsls	r2, r3, #5
 8012444:	69fb      	ldr	r3, [r7, #28]
 8012446:	4413      	add	r3, r2
 8012448:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801244c:	461a      	mov	r2, r3
 801244e:	2320      	movs	r3, #32
 8012450:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8012452:	693b      	ldr	r3, [r7, #16]
 8012454:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8012458:	2b00      	cmp	r3, #0
 801245a:	d009      	beq.n	8012470 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 801245c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801245e:	015a      	lsls	r2, r3, #5
 8012460:	69fb      	ldr	r3, [r7, #28]
 8012462:	4413      	add	r3, r2
 8012464:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012468:	461a      	mov	r2, r3
 801246a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 801246e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8012470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012472:	3301      	adds	r3, #1
 8012474:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8012476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012478:	085b      	lsrs	r3, r3, #1
 801247a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 801247c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801247e:	2b00      	cmp	r3, #0
 8012480:	f47f af62 	bne.w	8012348 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	681b      	ldr	r3, [r3, #0]
 8012488:	4618      	mov	r0, r3
 801248a:	f002 fff7 	bl	801547c <USB_ReadInterrupts>
 801248e:	4603      	mov	r3, r0
 8012490:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8012494:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8012498:	f040 80db 	bne.w	8012652 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	681b      	ldr	r3, [r3, #0]
 80124a0:	4618      	mov	r0, r3
 80124a2:	f003 f818 	bl	80154d6 <USB_ReadDevAllInEpInterrupt>
 80124a6:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80124a8:	2300      	movs	r3, #0
 80124aa:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80124ac:	e0cd      	b.n	801264a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80124ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80124b0:	f003 0301 	and.w	r3, r3, #1
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	f000 80c2 	beq.w	801263e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	681b      	ldr	r3, [r3, #0]
 80124be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80124c0:	b2d2      	uxtb	r2, r2
 80124c2:	4611      	mov	r1, r2
 80124c4:	4618      	mov	r0, r3
 80124c6:	f003 f83e 	bl	8015546 <USB_ReadDevInEPInterrupt>
 80124ca:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80124cc:	693b      	ldr	r3, [r7, #16]
 80124ce:	f003 0301 	and.w	r3, r3, #1
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	d057      	beq.n	8012586 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80124d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80124d8:	f003 030f 	and.w	r3, r3, #15
 80124dc:	2201      	movs	r2, #1
 80124de:	fa02 f303 	lsl.w	r3, r2, r3
 80124e2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80124e4:	69fb      	ldr	r3, [r7, #28]
 80124e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80124ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80124ec:	68fb      	ldr	r3, [r7, #12]
 80124ee:	43db      	mvns	r3, r3
 80124f0:	69f9      	ldr	r1, [r7, #28]
 80124f2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80124f6:	4013      	ands	r3, r2
 80124f8:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80124fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80124fc:	015a      	lsls	r2, r3, #5
 80124fe:	69fb      	ldr	r3, [r7, #28]
 8012500:	4413      	add	r3, r2
 8012502:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012506:	461a      	mov	r2, r3
 8012508:	2301      	movs	r3, #1
 801250a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	799b      	ldrb	r3, [r3, #6]
 8012510:	2b01      	cmp	r3, #1
 8012512:	d132      	bne.n	801257a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8012514:	6879      	ldr	r1, [r7, #4]
 8012516:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012518:	4613      	mov	r3, r2
 801251a:	00db      	lsls	r3, r3, #3
 801251c:	4413      	add	r3, r2
 801251e:	009b      	lsls	r3, r3, #2
 8012520:	440b      	add	r3, r1
 8012522:	3320      	adds	r3, #32
 8012524:	6819      	ldr	r1, [r3, #0]
 8012526:	6878      	ldr	r0, [r7, #4]
 8012528:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801252a:	4613      	mov	r3, r2
 801252c:	00db      	lsls	r3, r3, #3
 801252e:	4413      	add	r3, r2
 8012530:	009b      	lsls	r3, r3, #2
 8012532:	4403      	add	r3, r0
 8012534:	331c      	adds	r3, #28
 8012536:	681b      	ldr	r3, [r3, #0]
 8012538:	4419      	add	r1, r3
 801253a:	6878      	ldr	r0, [r7, #4]
 801253c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801253e:	4613      	mov	r3, r2
 8012540:	00db      	lsls	r3, r3, #3
 8012542:	4413      	add	r3, r2
 8012544:	009b      	lsls	r3, r3, #2
 8012546:	4403      	add	r3, r0
 8012548:	3320      	adds	r3, #32
 801254a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 801254c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801254e:	2b00      	cmp	r3, #0
 8012550:	d113      	bne.n	801257a <HAL_PCD_IRQHandler+0x3a2>
 8012552:	6879      	ldr	r1, [r7, #4]
 8012554:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012556:	4613      	mov	r3, r2
 8012558:	00db      	lsls	r3, r3, #3
 801255a:	4413      	add	r3, r2
 801255c:	009b      	lsls	r3, r3, #2
 801255e:	440b      	add	r3, r1
 8012560:	3324      	adds	r3, #36	@ 0x24
 8012562:	681b      	ldr	r3, [r3, #0]
 8012564:	2b00      	cmp	r3, #0
 8012566:	d108      	bne.n	801257a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	6818      	ldr	r0, [r3, #0]
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8012572:	461a      	mov	r2, r3
 8012574:	2101      	movs	r1, #1
 8012576:	f003 f845 	bl	8015604 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 801257a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801257c:	b2db      	uxtb	r3, r3
 801257e:	4619      	mov	r1, r3
 8012580:	6878      	ldr	r0, [r7, #4]
 8012582:	f005 faf4 	bl	8017b6e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8012586:	693b      	ldr	r3, [r7, #16]
 8012588:	f003 0308 	and.w	r3, r3, #8
 801258c:	2b00      	cmp	r3, #0
 801258e:	d008      	beq.n	80125a2 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8012590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012592:	015a      	lsls	r2, r3, #5
 8012594:	69fb      	ldr	r3, [r7, #28]
 8012596:	4413      	add	r3, r2
 8012598:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801259c:	461a      	mov	r2, r3
 801259e:	2308      	movs	r3, #8
 80125a0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80125a2:	693b      	ldr	r3, [r7, #16]
 80125a4:	f003 0310 	and.w	r3, r3, #16
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d008      	beq.n	80125be <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80125ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125ae:	015a      	lsls	r2, r3, #5
 80125b0:	69fb      	ldr	r3, [r7, #28]
 80125b2:	4413      	add	r3, r2
 80125b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80125b8:	461a      	mov	r2, r3
 80125ba:	2310      	movs	r3, #16
 80125bc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80125be:	693b      	ldr	r3, [r7, #16]
 80125c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80125c4:	2b00      	cmp	r3, #0
 80125c6:	d008      	beq.n	80125da <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80125c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125ca:	015a      	lsls	r2, r3, #5
 80125cc:	69fb      	ldr	r3, [r7, #28]
 80125ce:	4413      	add	r3, r2
 80125d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80125d4:	461a      	mov	r2, r3
 80125d6:	2340      	movs	r3, #64	@ 0x40
 80125d8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80125da:	693b      	ldr	r3, [r7, #16]
 80125dc:	f003 0302 	and.w	r3, r3, #2
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	d023      	beq.n	801262c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80125e4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80125e6:	6a38      	ldr	r0, [r7, #32]
 80125e8:	f002 f82c 	bl	8014644 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80125ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80125ee:	4613      	mov	r3, r2
 80125f0:	00db      	lsls	r3, r3, #3
 80125f2:	4413      	add	r3, r2
 80125f4:	009b      	lsls	r3, r3, #2
 80125f6:	3310      	adds	r3, #16
 80125f8:	687a      	ldr	r2, [r7, #4]
 80125fa:	4413      	add	r3, r2
 80125fc:	3304      	adds	r3, #4
 80125fe:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8012600:	697b      	ldr	r3, [r7, #20]
 8012602:	78db      	ldrb	r3, [r3, #3]
 8012604:	2b01      	cmp	r3, #1
 8012606:	d108      	bne.n	801261a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8012608:	697b      	ldr	r3, [r7, #20]
 801260a:	2200      	movs	r2, #0
 801260c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 801260e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012610:	b2db      	uxtb	r3, r3
 8012612:	4619      	mov	r1, r3
 8012614:	6878      	ldr	r0, [r7, #4]
 8012616:	f005 fb41 	bl	8017c9c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 801261a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801261c:	015a      	lsls	r2, r3, #5
 801261e:	69fb      	ldr	r3, [r7, #28]
 8012620:	4413      	add	r3, r2
 8012622:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012626:	461a      	mov	r2, r3
 8012628:	2302      	movs	r3, #2
 801262a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 801262c:	693b      	ldr	r3, [r7, #16]
 801262e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012632:	2b00      	cmp	r3, #0
 8012634:	d003      	beq.n	801263e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8012636:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8012638:	6878      	ldr	r0, [r7, #4]
 801263a:	f000 fcbd 	bl	8012fb8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 801263e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012640:	3301      	adds	r3, #1
 8012642:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8012644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012646:	085b      	lsrs	r3, r3, #1
 8012648:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 801264a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801264c:	2b00      	cmp	r3, #0
 801264e:	f47f af2e 	bne.w	80124ae <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	681b      	ldr	r3, [r3, #0]
 8012656:	4618      	mov	r0, r3
 8012658:	f002 ff10 	bl	801547c <USB_ReadInterrupts>
 801265c:	4603      	mov	r3, r0
 801265e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8012662:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8012666:	d122      	bne.n	80126ae <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8012668:	69fb      	ldr	r3, [r7, #28]
 801266a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801266e:	685b      	ldr	r3, [r3, #4]
 8012670:	69fa      	ldr	r2, [r7, #28]
 8012672:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8012676:	f023 0301 	bic.w	r3, r3, #1
 801267a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8012682:	2b01      	cmp	r3, #1
 8012684:	d108      	bne.n	8012698 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	2200      	movs	r2, #0
 801268a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 801268e:	2100      	movs	r1, #0
 8012690:	6878      	ldr	r0, [r7, #4]
 8012692:	f000 fea3 	bl	80133dc <HAL_PCDEx_LPM_Callback>
 8012696:	e002      	b.n	801269e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8012698:	6878      	ldr	r0, [r7, #4]
 801269a:	f005 fadf 	bl	8017c5c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	681b      	ldr	r3, [r3, #0]
 80126a2:	695a      	ldr	r2, [r3, #20]
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	681b      	ldr	r3, [r3, #0]
 80126a8:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80126ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	681b      	ldr	r3, [r3, #0]
 80126b2:	4618      	mov	r0, r3
 80126b4:	f002 fee2 	bl	801547c <USB_ReadInterrupts>
 80126b8:	4603      	mov	r3, r0
 80126ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80126be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80126c2:	d112      	bne.n	80126ea <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80126c4:	69fb      	ldr	r3, [r7, #28]
 80126c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80126ca:	689b      	ldr	r3, [r3, #8]
 80126cc:	f003 0301 	and.w	r3, r3, #1
 80126d0:	2b01      	cmp	r3, #1
 80126d2:	d102      	bne.n	80126da <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80126d4:	6878      	ldr	r0, [r7, #4]
 80126d6:	f005 fa9b 	bl	8017c10 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	681b      	ldr	r3, [r3, #0]
 80126de:	695a      	ldr	r2, [r3, #20]
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	681b      	ldr	r3, [r3, #0]
 80126e4:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80126e8:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	681b      	ldr	r3, [r3, #0]
 80126ee:	4618      	mov	r0, r3
 80126f0:	f002 fec4 	bl	801547c <USB_ReadInterrupts>
 80126f4:	4603      	mov	r3, r0
 80126f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80126fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80126fe:	f040 80b7 	bne.w	8012870 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8012702:	69fb      	ldr	r3, [r7, #28]
 8012704:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012708:	685b      	ldr	r3, [r3, #4]
 801270a:	69fa      	ldr	r2, [r7, #28]
 801270c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8012710:	f023 0301 	bic.w	r3, r3, #1
 8012714:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	681b      	ldr	r3, [r3, #0]
 801271a:	2110      	movs	r1, #16
 801271c:	4618      	mov	r0, r3
 801271e:	f001 ff91 	bl	8014644 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8012722:	2300      	movs	r3, #0
 8012724:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012726:	e046      	b.n	80127b6 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8012728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801272a:	015a      	lsls	r2, r3, #5
 801272c:	69fb      	ldr	r3, [r7, #28]
 801272e:	4413      	add	r3, r2
 8012730:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012734:	461a      	mov	r2, r3
 8012736:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 801273a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801273c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801273e:	015a      	lsls	r2, r3, #5
 8012740:	69fb      	ldr	r3, [r7, #28]
 8012742:	4413      	add	r3, r2
 8012744:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012748:	681b      	ldr	r3, [r3, #0]
 801274a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801274c:	0151      	lsls	r1, r2, #5
 801274e:	69fa      	ldr	r2, [r7, #28]
 8012750:	440a      	add	r2, r1
 8012752:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012756:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 801275a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 801275c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801275e:	015a      	lsls	r2, r3, #5
 8012760:	69fb      	ldr	r3, [r7, #28]
 8012762:	4413      	add	r3, r2
 8012764:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012768:	461a      	mov	r2, r3
 801276a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 801276e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8012770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012772:	015a      	lsls	r2, r3, #5
 8012774:	69fb      	ldr	r3, [r7, #28]
 8012776:	4413      	add	r3, r2
 8012778:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801277c:	681b      	ldr	r3, [r3, #0]
 801277e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012780:	0151      	lsls	r1, r2, #5
 8012782:	69fa      	ldr	r2, [r7, #28]
 8012784:	440a      	add	r2, r1
 8012786:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801278a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 801278e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8012790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012792:	015a      	lsls	r2, r3, #5
 8012794:	69fb      	ldr	r3, [r7, #28]
 8012796:	4413      	add	r3, r2
 8012798:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801279c:	681b      	ldr	r3, [r3, #0]
 801279e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80127a0:	0151      	lsls	r1, r2, #5
 80127a2:	69fa      	ldr	r2, [r7, #28]
 80127a4:	440a      	add	r2, r1
 80127a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80127aa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80127ae:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80127b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80127b2:	3301      	adds	r3, #1
 80127b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	791b      	ldrb	r3, [r3, #4]
 80127ba:	461a      	mov	r2, r3
 80127bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80127be:	4293      	cmp	r3, r2
 80127c0:	d3b2      	bcc.n	8012728 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80127c2:	69fb      	ldr	r3, [r7, #28]
 80127c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80127c8:	69db      	ldr	r3, [r3, #28]
 80127ca:	69fa      	ldr	r2, [r7, #28]
 80127cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80127d0:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80127d4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	7bdb      	ldrb	r3, [r3, #15]
 80127da:	2b00      	cmp	r3, #0
 80127dc:	d016      	beq.n	801280c <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80127de:	69fb      	ldr	r3, [r7, #28]
 80127e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80127e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80127e8:	69fa      	ldr	r2, [r7, #28]
 80127ea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80127ee:	f043 030b 	orr.w	r3, r3, #11
 80127f2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80127f6:	69fb      	ldr	r3, [r7, #28]
 80127f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80127fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80127fe:	69fa      	ldr	r2, [r7, #28]
 8012800:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8012804:	f043 030b 	orr.w	r3, r3, #11
 8012808:	6453      	str	r3, [r2, #68]	@ 0x44
 801280a:	e015      	b.n	8012838 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 801280c:	69fb      	ldr	r3, [r7, #28]
 801280e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012812:	695b      	ldr	r3, [r3, #20]
 8012814:	69fa      	ldr	r2, [r7, #28]
 8012816:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801281a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801281e:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8012822:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8012824:	69fb      	ldr	r3, [r7, #28]
 8012826:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801282a:	691b      	ldr	r3, [r3, #16]
 801282c:	69fa      	ldr	r2, [r7, #28]
 801282e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8012832:	f043 030b 	orr.w	r3, r3, #11
 8012836:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8012838:	69fb      	ldr	r3, [r7, #28]
 801283a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801283e:	681b      	ldr	r3, [r3, #0]
 8012840:	69fa      	ldr	r2, [r7, #28]
 8012842:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8012846:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 801284a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	6818      	ldr	r0, [r3, #0]
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 801285a:	461a      	mov	r2, r3
 801285c:	f002 fed2 	bl	8015604 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	681b      	ldr	r3, [r3, #0]
 8012864:	695a      	ldr	r2, [r3, #20]
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	681b      	ldr	r3, [r3, #0]
 801286a:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 801286e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	681b      	ldr	r3, [r3, #0]
 8012874:	4618      	mov	r0, r3
 8012876:	f002 fe01 	bl	801547c <USB_ReadInterrupts>
 801287a:	4603      	mov	r3, r0
 801287c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8012880:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012884:	d123      	bne.n	80128ce <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	681b      	ldr	r3, [r3, #0]
 801288a:	4618      	mov	r0, r3
 801288c:	f002 fe97 	bl	80155be <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	681b      	ldr	r3, [r3, #0]
 8012894:	4618      	mov	r0, r3
 8012896:	f001 ff4e 	bl	8014736 <USB_GetDevSpeed>
 801289a:	4603      	mov	r3, r0
 801289c:	461a      	mov	r2, r3
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	681c      	ldr	r4, [r3, #0]
 80128a6:	f001 fa09 	bl	8013cbc <HAL_RCC_GetHCLKFreq>
 80128aa:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80128b0:	461a      	mov	r2, r3
 80128b2:	4620      	mov	r0, r4
 80128b4:	f001 fc52 	bl	801415c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80128b8:	6878      	ldr	r0, [r7, #4]
 80128ba:	f005 f980 	bl	8017bbe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	681b      	ldr	r3, [r3, #0]
 80128c2:	695a      	ldr	r2, [r3, #20]
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	681b      	ldr	r3, [r3, #0]
 80128c8:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80128cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	681b      	ldr	r3, [r3, #0]
 80128d2:	4618      	mov	r0, r3
 80128d4:	f002 fdd2 	bl	801547c <USB_ReadInterrupts>
 80128d8:	4603      	mov	r3, r0
 80128da:	f003 0308 	and.w	r3, r3, #8
 80128de:	2b08      	cmp	r3, #8
 80128e0:	d10a      	bne.n	80128f8 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80128e2:	6878      	ldr	r0, [r7, #4]
 80128e4:	f005 f95d 	bl	8017ba2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	681b      	ldr	r3, [r3, #0]
 80128ec:	695a      	ldr	r2, [r3, #20]
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	681b      	ldr	r3, [r3, #0]
 80128f2:	f002 0208 	and.w	r2, r2, #8
 80128f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	681b      	ldr	r3, [r3, #0]
 80128fc:	4618      	mov	r0, r3
 80128fe:	f002 fdbd 	bl	801547c <USB_ReadInterrupts>
 8012902:	4603      	mov	r3, r0
 8012904:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012908:	2b80      	cmp	r3, #128	@ 0x80
 801290a:	d123      	bne.n	8012954 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 801290c:	6a3b      	ldr	r3, [r7, #32]
 801290e:	699b      	ldr	r3, [r3, #24]
 8012910:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8012914:	6a3b      	ldr	r3, [r7, #32]
 8012916:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8012918:	2301      	movs	r3, #1
 801291a:	627b      	str	r3, [r7, #36]	@ 0x24
 801291c:	e014      	b.n	8012948 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 801291e:	6879      	ldr	r1, [r7, #4]
 8012920:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012922:	4613      	mov	r3, r2
 8012924:	00db      	lsls	r3, r3, #3
 8012926:	4413      	add	r3, r2
 8012928:	009b      	lsls	r3, r3, #2
 801292a:	440b      	add	r3, r1
 801292c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8012930:	781b      	ldrb	r3, [r3, #0]
 8012932:	2b01      	cmp	r3, #1
 8012934:	d105      	bne.n	8012942 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8012936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012938:	b2db      	uxtb	r3, r3
 801293a:	4619      	mov	r1, r3
 801293c:	6878      	ldr	r0, [r7, #4]
 801293e:	f000 fb0a 	bl	8012f56 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8012942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012944:	3301      	adds	r3, #1
 8012946:	627b      	str	r3, [r7, #36]	@ 0x24
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	791b      	ldrb	r3, [r3, #4]
 801294c:	461a      	mov	r2, r3
 801294e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012950:	4293      	cmp	r3, r2
 8012952:	d3e4      	bcc.n	801291e <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	681b      	ldr	r3, [r3, #0]
 8012958:	4618      	mov	r0, r3
 801295a:	f002 fd8f 	bl	801547c <USB_ReadInterrupts>
 801295e:	4603      	mov	r3, r0
 8012960:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8012964:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8012968:	d13c      	bne.n	80129e4 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 801296a:	2301      	movs	r3, #1
 801296c:	627b      	str	r3, [r7, #36]	@ 0x24
 801296e:	e02b      	b.n	80129c8 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8012970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012972:	015a      	lsls	r2, r3, #5
 8012974:	69fb      	ldr	r3, [r7, #28]
 8012976:	4413      	add	r3, r2
 8012978:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801297c:	681b      	ldr	r3, [r3, #0]
 801297e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8012980:	6879      	ldr	r1, [r7, #4]
 8012982:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012984:	4613      	mov	r3, r2
 8012986:	00db      	lsls	r3, r3, #3
 8012988:	4413      	add	r3, r2
 801298a:	009b      	lsls	r3, r3, #2
 801298c:	440b      	add	r3, r1
 801298e:	3318      	adds	r3, #24
 8012990:	781b      	ldrb	r3, [r3, #0]
 8012992:	2b01      	cmp	r3, #1
 8012994:	d115      	bne.n	80129c2 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8012996:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8012998:	2b00      	cmp	r3, #0
 801299a:	da12      	bge.n	80129c2 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 801299c:	6879      	ldr	r1, [r7, #4]
 801299e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80129a0:	4613      	mov	r3, r2
 80129a2:	00db      	lsls	r3, r3, #3
 80129a4:	4413      	add	r3, r2
 80129a6:	009b      	lsls	r3, r3, #2
 80129a8:	440b      	add	r3, r1
 80129aa:	3317      	adds	r3, #23
 80129ac:	2201      	movs	r2, #1
 80129ae:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80129b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80129b2:	b2db      	uxtb	r3, r3
 80129b4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80129b8:	b2db      	uxtb	r3, r3
 80129ba:	4619      	mov	r1, r3
 80129bc:	6878      	ldr	r0, [r7, #4]
 80129be:	f000 faca 	bl	8012f56 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80129c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80129c4:	3301      	adds	r3, #1
 80129c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	791b      	ldrb	r3, [r3, #4]
 80129cc:	461a      	mov	r2, r3
 80129ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80129d0:	4293      	cmp	r3, r2
 80129d2:	d3cd      	bcc.n	8012970 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	681b      	ldr	r3, [r3, #0]
 80129d8:	695a      	ldr	r2, [r3, #20]
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	681b      	ldr	r3, [r3, #0]
 80129de:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80129e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	681b      	ldr	r3, [r3, #0]
 80129e8:	4618      	mov	r0, r3
 80129ea:	f002 fd47 	bl	801547c <USB_ReadInterrupts>
 80129ee:	4603      	mov	r3, r0
 80129f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80129f4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80129f8:	d156      	bne.n	8012aa8 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80129fa:	2301      	movs	r3, #1
 80129fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80129fe:	e045      	b.n	8012a8c <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8012a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a02:	015a      	lsls	r2, r3, #5
 8012a04:	69fb      	ldr	r3, [r7, #28]
 8012a06:	4413      	add	r3, r2
 8012a08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012a0c:	681b      	ldr	r3, [r3, #0]
 8012a0e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8012a10:	6879      	ldr	r1, [r7, #4]
 8012a12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012a14:	4613      	mov	r3, r2
 8012a16:	00db      	lsls	r3, r3, #3
 8012a18:	4413      	add	r3, r2
 8012a1a:	009b      	lsls	r3, r3, #2
 8012a1c:	440b      	add	r3, r1
 8012a1e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8012a22:	781b      	ldrb	r3, [r3, #0]
 8012a24:	2b01      	cmp	r3, #1
 8012a26:	d12e      	bne.n	8012a86 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8012a28:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	da2b      	bge.n	8012a86 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8012a2e:	69bb      	ldr	r3, [r7, #24]
 8012a30:	0c1a      	lsrs	r2, r3, #16
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8012a38:	4053      	eors	r3, r2
 8012a3a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	d121      	bne.n	8012a86 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8012a42:	6879      	ldr	r1, [r7, #4]
 8012a44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012a46:	4613      	mov	r3, r2
 8012a48:	00db      	lsls	r3, r3, #3
 8012a4a:	4413      	add	r3, r2
 8012a4c:	009b      	lsls	r3, r3, #2
 8012a4e:	440b      	add	r3, r1
 8012a50:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8012a54:	2201      	movs	r2, #1
 8012a56:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8012a58:	6a3b      	ldr	r3, [r7, #32]
 8012a5a:	699b      	ldr	r3, [r3, #24]
 8012a5c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8012a60:	6a3b      	ldr	r3, [r7, #32]
 8012a62:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8012a64:	6a3b      	ldr	r3, [r7, #32]
 8012a66:	695b      	ldr	r3, [r3, #20]
 8012a68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012a6c:	2b00      	cmp	r3, #0
 8012a6e:	d10a      	bne.n	8012a86 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8012a70:	69fb      	ldr	r3, [r7, #28]
 8012a72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012a76:	685b      	ldr	r3, [r3, #4]
 8012a78:	69fa      	ldr	r2, [r7, #28]
 8012a7a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8012a7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8012a82:	6053      	str	r3, [r2, #4]
            break;
 8012a84:	e008      	b.n	8012a98 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8012a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a88:	3301      	adds	r3, #1
 8012a8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	791b      	ldrb	r3, [r3, #4]
 8012a90:	461a      	mov	r2, r3
 8012a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a94:	4293      	cmp	r3, r2
 8012a96:	d3b3      	bcc.n	8012a00 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	681b      	ldr	r3, [r3, #0]
 8012a9c:	695a      	ldr	r2, [r3, #20]
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	681b      	ldr	r3, [r3, #0]
 8012aa2:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8012aa6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	681b      	ldr	r3, [r3, #0]
 8012aac:	4618      	mov	r0, r3
 8012aae:	f002 fce5 	bl	801547c <USB_ReadInterrupts>
 8012ab2:	4603      	mov	r3, r0
 8012ab4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8012ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012abc:	d10a      	bne.n	8012ad4 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8012abe:	6878      	ldr	r0, [r7, #4]
 8012ac0:	f005 f8fe 	bl	8017cc0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	681b      	ldr	r3, [r3, #0]
 8012ac8:	695a      	ldr	r2, [r3, #20]
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	681b      	ldr	r3, [r3, #0]
 8012ace:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8012ad2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	681b      	ldr	r3, [r3, #0]
 8012ad8:	4618      	mov	r0, r3
 8012ada:	f002 fccf 	bl	801547c <USB_ReadInterrupts>
 8012ade:	4603      	mov	r3, r0
 8012ae0:	f003 0304 	and.w	r3, r3, #4
 8012ae4:	2b04      	cmp	r3, #4
 8012ae6:	d115      	bne.n	8012b14 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	681b      	ldr	r3, [r3, #0]
 8012aec:	685b      	ldr	r3, [r3, #4]
 8012aee:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8012af0:	69bb      	ldr	r3, [r7, #24]
 8012af2:	f003 0304 	and.w	r3, r3, #4
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	d002      	beq.n	8012b00 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8012afa:	6878      	ldr	r0, [r7, #4]
 8012afc:	f005 f8ee 	bl	8017cdc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	681b      	ldr	r3, [r3, #0]
 8012b04:	6859      	ldr	r1, [r3, #4]
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	681b      	ldr	r3, [r3, #0]
 8012b0a:	69ba      	ldr	r2, [r7, #24]
 8012b0c:	430a      	orrs	r2, r1
 8012b0e:	605a      	str	r2, [r3, #4]
 8012b10:	e000      	b.n	8012b14 <HAL_PCD_IRQHandler+0x93c>
      return;
 8012b12:	bf00      	nop
    }
  }
}
 8012b14:	3734      	adds	r7, #52	@ 0x34
 8012b16:	46bd      	mov	sp, r7
 8012b18:	bd90      	pop	{r4, r7, pc}

08012b1a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8012b1a:	b580      	push	{r7, lr}
 8012b1c:	b082      	sub	sp, #8
 8012b1e:	af00      	add	r7, sp, #0
 8012b20:	6078      	str	r0, [r7, #4]
 8012b22:	460b      	mov	r3, r1
 8012b24:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8012b2c:	2b01      	cmp	r3, #1
 8012b2e:	d101      	bne.n	8012b34 <HAL_PCD_SetAddress+0x1a>
 8012b30:	2302      	movs	r3, #2
 8012b32:	e012      	b.n	8012b5a <HAL_PCD_SetAddress+0x40>
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	2201      	movs	r2, #1
 8012b38:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	78fa      	ldrb	r2, [r7, #3]
 8012b40:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	681b      	ldr	r3, [r3, #0]
 8012b46:	78fa      	ldrb	r2, [r7, #3]
 8012b48:	4611      	mov	r1, r2
 8012b4a:	4618      	mov	r0, r3
 8012b4c:	f002 fc2e 	bl	80153ac <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	2200      	movs	r2, #0
 8012b54:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8012b58:	2300      	movs	r3, #0
}
 8012b5a:	4618      	mov	r0, r3
 8012b5c:	3708      	adds	r7, #8
 8012b5e:	46bd      	mov	sp, r7
 8012b60:	bd80      	pop	{r7, pc}

08012b62 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8012b62:	b580      	push	{r7, lr}
 8012b64:	b084      	sub	sp, #16
 8012b66:	af00      	add	r7, sp, #0
 8012b68:	6078      	str	r0, [r7, #4]
 8012b6a:	4608      	mov	r0, r1
 8012b6c:	4611      	mov	r1, r2
 8012b6e:	461a      	mov	r2, r3
 8012b70:	4603      	mov	r3, r0
 8012b72:	70fb      	strb	r3, [r7, #3]
 8012b74:	460b      	mov	r3, r1
 8012b76:	803b      	strh	r3, [r7, #0]
 8012b78:	4613      	mov	r3, r2
 8012b7a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8012b7c:	2300      	movs	r3, #0
 8012b7e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8012b80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	da0f      	bge.n	8012ba8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8012b88:	78fb      	ldrb	r3, [r7, #3]
 8012b8a:	f003 020f 	and.w	r2, r3, #15
 8012b8e:	4613      	mov	r3, r2
 8012b90:	00db      	lsls	r3, r3, #3
 8012b92:	4413      	add	r3, r2
 8012b94:	009b      	lsls	r3, r3, #2
 8012b96:	3310      	adds	r3, #16
 8012b98:	687a      	ldr	r2, [r7, #4]
 8012b9a:	4413      	add	r3, r2
 8012b9c:	3304      	adds	r3, #4
 8012b9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8012ba0:	68fb      	ldr	r3, [r7, #12]
 8012ba2:	2201      	movs	r2, #1
 8012ba4:	705a      	strb	r2, [r3, #1]
 8012ba6:	e00f      	b.n	8012bc8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8012ba8:	78fb      	ldrb	r3, [r7, #3]
 8012baa:	f003 020f 	and.w	r2, r3, #15
 8012bae:	4613      	mov	r3, r2
 8012bb0:	00db      	lsls	r3, r3, #3
 8012bb2:	4413      	add	r3, r2
 8012bb4:	009b      	lsls	r3, r3, #2
 8012bb6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8012bba:	687a      	ldr	r2, [r7, #4]
 8012bbc:	4413      	add	r3, r2
 8012bbe:	3304      	adds	r3, #4
 8012bc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8012bc2:	68fb      	ldr	r3, [r7, #12]
 8012bc4:	2200      	movs	r2, #0
 8012bc6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8012bc8:	78fb      	ldrb	r3, [r7, #3]
 8012bca:	f003 030f 	and.w	r3, r3, #15
 8012bce:	b2da      	uxtb	r2, r3
 8012bd0:	68fb      	ldr	r3, [r7, #12]
 8012bd2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8012bd4:	883b      	ldrh	r3, [r7, #0]
 8012bd6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8012bda:	68fb      	ldr	r3, [r7, #12]
 8012bdc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8012bde:	68fb      	ldr	r3, [r7, #12]
 8012be0:	78ba      	ldrb	r2, [r7, #2]
 8012be2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8012be4:	68fb      	ldr	r3, [r7, #12]
 8012be6:	785b      	ldrb	r3, [r3, #1]
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	d004      	beq.n	8012bf6 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8012bec:	68fb      	ldr	r3, [r7, #12]
 8012bee:	781b      	ldrb	r3, [r3, #0]
 8012bf0:	461a      	mov	r2, r3
 8012bf2:	68fb      	ldr	r3, [r7, #12]
 8012bf4:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8012bf6:	78bb      	ldrb	r3, [r7, #2]
 8012bf8:	2b02      	cmp	r3, #2
 8012bfa:	d102      	bne.n	8012c02 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8012bfc:	68fb      	ldr	r3, [r7, #12]
 8012bfe:	2200      	movs	r2, #0
 8012c00:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8012c08:	2b01      	cmp	r3, #1
 8012c0a:	d101      	bne.n	8012c10 <HAL_PCD_EP_Open+0xae>
 8012c0c:	2302      	movs	r3, #2
 8012c0e:	e00e      	b.n	8012c2e <HAL_PCD_EP_Open+0xcc>
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	2201      	movs	r2, #1
 8012c14:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	681b      	ldr	r3, [r3, #0]
 8012c1c:	68f9      	ldr	r1, [r7, #12]
 8012c1e:	4618      	mov	r0, r3
 8012c20:	f001 fdae 	bl	8014780 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	2200      	movs	r2, #0
 8012c28:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8012c2c:	7afb      	ldrb	r3, [r7, #11]
}
 8012c2e:	4618      	mov	r0, r3
 8012c30:	3710      	adds	r7, #16
 8012c32:	46bd      	mov	sp, r7
 8012c34:	bd80      	pop	{r7, pc}

08012c36 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8012c36:	b580      	push	{r7, lr}
 8012c38:	b084      	sub	sp, #16
 8012c3a:	af00      	add	r7, sp, #0
 8012c3c:	6078      	str	r0, [r7, #4]
 8012c3e:	460b      	mov	r3, r1
 8012c40:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8012c42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	da0f      	bge.n	8012c6a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8012c4a:	78fb      	ldrb	r3, [r7, #3]
 8012c4c:	f003 020f 	and.w	r2, r3, #15
 8012c50:	4613      	mov	r3, r2
 8012c52:	00db      	lsls	r3, r3, #3
 8012c54:	4413      	add	r3, r2
 8012c56:	009b      	lsls	r3, r3, #2
 8012c58:	3310      	adds	r3, #16
 8012c5a:	687a      	ldr	r2, [r7, #4]
 8012c5c:	4413      	add	r3, r2
 8012c5e:	3304      	adds	r3, #4
 8012c60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8012c62:	68fb      	ldr	r3, [r7, #12]
 8012c64:	2201      	movs	r2, #1
 8012c66:	705a      	strb	r2, [r3, #1]
 8012c68:	e00f      	b.n	8012c8a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8012c6a:	78fb      	ldrb	r3, [r7, #3]
 8012c6c:	f003 020f 	and.w	r2, r3, #15
 8012c70:	4613      	mov	r3, r2
 8012c72:	00db      	lsls	r3, r3, #3
 8012c74:	4413      	add	r3, r2
 8012c76:	009b      	lsls	r3, r3, #2
 8012c78:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8012c7c:	687a      	ldr	r2, [r7, #4]
 8012c7e:	4413      	add	r3, r2
 8012c80:	3304      	adds	r3, #4
 8012c82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8012c84:	68fb      	ldr	r3, [r7, #12]
 8012c86:	2200      	movs	r2, #0
 8012c88:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8012c8a:	78fb      	ldrb	r3, [r7, #3]
 8012c8c:	f003 030f 	and.w	r3, r3, #15
 8012c90:	b2da      	uxtb	r2, r3
 8012c92:	68fb      	ldr	r3, [r7, #12]
 8012c94:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8012c9c:	2b01      	cmp	r3, #1
 8012c9e:	d101      	bne.n	8012ca4 <HAL_PCD_EP_Close+0x6e>
 8012ca0:	2302      	movs	r3, #2
 8012ca2:	e00e      	b.n	8012cc2 <HAL_PCD_EP_Close+0x8c>
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	2201      	movs	r2, #1
 8012ca8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	681b      	ldr	r3, [r3, #0]
 8012cb0:	68f9      	ldr	r1, [r7, #12]
 8012cb2:	4618      	mov	r0, r3
 8012cb4:	f001 fdec 	bl	8014890 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	2200      	movs	r2, #0
 8012cbc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8012cc0:	2300      	movs	r3, #0
}
 8012cc2:	4618      	mov	r0, r3
 8012cc4:	3710      	adds	r7, #16
 8012cc6:	46bd      	mov	sp, r7
 8012cc8:	bd80      	pop	{r7, pc}

08012cca <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8012cca:	b580      	push	{r7, lr}
 8012ccc:	b086      	sub	sp, #24
 8012cce:	af00      	add	r7, sp, #0
 8012cd0:	60f8      	str	r0, [r7, #12]
 8012cd2:	607a      	str	r2, [r7, #4]
 8012cd4:	603b      	str	r3, [r7, #0]
 8012cd6:	460b      	mov	r3, r1
 8012cd8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8012cda:	7afb      	ldrb	r3, [r7, #11]
 8012cdc:	f003 020f 	and.w	r2, r3, #15
 8012ce0:	4613      	mov	r3, r2
 8012ce2:	00db      	lsls	r3, r3, #3
 8012ce4:	4413      	add	r3, r2
 8012ce6:	009b      	lsls	r3, r3, #2
 8012ce8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8012cec:	68fa      	ldr	r2, [r7, #12]
 8012cee:	4413      	add	r3, r2
 8012cf0:	3304      	adds	r3, #4
 8012cf2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8012cf4:	697b      	ldr	r3, [r7, #20]
 8012cf6:	687a      	ldr	r2, [r7, #4]
 8012cf8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8012cfa:	697b      	ldr	r3, [r7, #20]
 8012cfc:	683a      	ldr	r2, [r7, #0]
 8012cfe:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8012d00:	697b      	ldr	r3, [r7, #20]
 8012d02:	2200      	movs	r2, #0
 8012d04:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8012d06:	697b      	ldr	r3, [r7, #20]
 8012d08:	2200      	movs	r2, #0
 8012d0a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8012d0c:	7afb      	ldrb	r3, [r7, #11]
 8012d0e:	f003 030f 	and.w	r3, r3, #15
 8012d12:	b2da      	uxtb	r2, r3
 8012d14:	697b      	ldr	r3, [r7, #20]
 8012d16:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8012d18:	68fb      	ldr	r3, [r7, #12]
 8012d1a:	799b      	ldrb	r3, [r3, #6]
 8012d1c:	2b01      	cmp	r3, #1
 8012d1e:	d102      	bne.n	8012d26 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8012d20:	687a      	ldr	r2, [r7, #4]
 8012d22:	697b      	ldr	r3, [r7, #20]
 8012d24:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8012d26:	68fb      	ldr	r3, [r7, #12]
 8012d28:	6818      	ldr	r0, [r3, #0]
 8012d2a:	68fb      	ldr	r3, [r7, #12]
 8012d2c:	799b      	ldrb	r3, [r3, #6]
 8012d2e:	461a      	mov	r2, r3
 8012d30:	6979      	ldr	r1, [r7, #20]
 8012d32:	f001 fe89 	bl	8014a48 <USB_EPStartXfer>

  return HAL_OK;
 8012d36:	2300      	movs	r3, #0
}
 8012d38:	4618      	mov	r0, r3
 8012d3a:	3718      	adds	r7, #24
 8012d3c:	46bd      	mov	sp, r7
 8012d3e:	bd80      	pop	{r7, pc}

08012d40 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8012d40:	b480      	push	{r7}
 8012d42:	b083      	sub	sp, #12
 8012d44:	af00      	add	r7, sp, #0
 8012d46:	6078      	str	r0, [r7, #4]
 8012d48:	460b      	mov	r3, r1
 8012d4a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8012d4c:	78fb      	ldrb	r3, [r7, #3]
 8012d4e:	f003 020f 	and.w	r2, r3, #15
 8012d52:	6879      	ldr	r1, [r7, #4]
 8012d54:	4613      	mov	r3, r2
 8012d56:	00db      	lsls	r3, r3, #3
 8012d58:	4413      	add	r3, r2
 8012d5a:	009b      	lsls	r3, r3, #2
 8012d5c:	440b      	add	r3, r1
 8012d5e:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8012d62:	681b      	ldr	r3, [r3, #0]
}
 8012d64:	4618      	mov	r0, r3
 8012d66:	370c      	adds	r7, #12
 8012d68:	46bd      	mov	sp, r7
 8012d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d6e:	4770      	bx	lr

08012d70 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8012d70:	b580      	push	{r7, lr}
 8012d72:	b086      	sub	sp, #24
 8012d74:	af00      	add	r7, sp, #0
 8012d76:	60f8      	str	r0, [r7, #12]
 8012d78:	607a      	str	r2, [r7, #4]
 8012d7a:	603b      	str	r3, [r7, #0]
 8012d7c:	460b      	mov	r3, r1
 8012d7e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8012d80:	7afb      	ldrb	r3, [r7, #11]
 8012d82:	f003 020f 	and.w	r2, r3, #15
 8012d86:	4613      	mov	r3, r2
 8012d88:	00db      	lsls	r3, r3, #3
 8012d8a:	4413      	add	r3, r2
 8012d8c:	009b      	lsls	r3, r3, #2
 8012d8e:	3310      	adds	r3, #16
 8012d90:	68fa      	ldr	r2, [r7, #12]
 8012d92:	4413      	add	r3, r2
 8012d94:	3304      	adds	r3, #4
 8012d96:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8012d98:	697b      	ldr	r3, [r7, #20]
 8012d9a:	687a      	ldr	r2, [r7, #4]
 8012d9c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8012d9e:	697b      	ldr	r3, [r7, #20]
 8012da0:	683a      	ldr	r2, [r7, #0]
 8012da2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8012da4:	697b      	ldr	r3, [r7, #20]
 8012da6:	2200      	movs	r2, #0
 8012da8:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8012daa:	697b      	ldr	r3, [r7, #20]
 8012dac:	2201      	movs	r2, #1
 8012dae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8012db0:	7afb      	ldrb	r3, [r7, #11]
 8012db2:	f003 030f 	and.w	r3, r3, #15
 8012db6:	b2da      	uxtb	r2, r3
 8012db8:	697b      	ldr	r3, [r7, #20]
 8012dba:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8012dbc:	68fb      	ldr	r3, [r7, #12]
 8012dbe:	799b      	ldrb	r3, [r3, #6]
 8012dc0:	2b01      	cmp	r3, #1
 8012dc2:	d102      	bne.n	8012dca <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8012dc4:	687a      	ldr	r2, [r7, #4]
 8012dc6:	697b      	ldr	r3, [r7, #20]
 8012dc8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8012dca:	68fb      	ldr	r3, [r7, #12]
 8012dcc:	6818      	ldr	r0, [r3, #0]
 8012dce:	68fb      	ldr	r3, [r7, #12]
 8012dd0:	799b      	ldrb	r3, [r3, #6]
 8012dd2:	461a      	mov	r2, r3
 8012dd4:	6979      	ldr	r1, [r7, #20]
 8012dd6:	f001 fe37 	bl	8014a48 <USB_EPStartXfer>

  return HAL_OK;
 8012dda:	2300      	movs	r3, #0
}
 8012ddc:	4618      	mov	r0, r3
 8012dde:	3718      	adds	r7, #24
 8012de0:	46bd      	mov	sp, r7
 8012de2:	bd80      	pop	{r7, pc}

08012de4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8012de4:	b580      	push	{r7, lr}
 8012de6:	b084      	sub	sp, #16
 8012de8:	af00      	add	r7, sp, #0
 8012dea:	6078      	str	r0, [r7, #4]
 8012dec:	460b      	mov	r3, r1
 8012dee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8012df0:	78fb      	ldrb	r3, [r7, #3]
 8012df2:	f003 030f 	and.w	r3, r3, #15
 8012df6:	687a      	ldr	r2, [r7, #4]
 8012df8:	7912      	ldrb	r2, [r2, #4]
 8012dfa:	4293      	cmp	r3, r2
 8012dfc:	d901      	bls.n	8012e02 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8012dfe:	2301      	movs	r3, #1
 8012e00:	e04f      	b.n	8012ea2 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8012e02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012e06:	2b00      	cmp	r3, #0
 8012e08:	da0f      	bge.n	8012e2a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8012e0a:	78fb      	ldrb	r3, [r7, #3]
 8012e0c:	f003 020f 	and.w	r2, r3, #15
 8012e10:	4613      	mov	r3, r2
 8012e12:	00db      	lsls	r3, r3, #3
 8012e14:	4413      	add	r3, r2
 8012e16:	009b      	lsls	r3, r3, #2
 8012e18:	3310      	adds	r3, #16
 8012e1a:	687a      	ldr	r2, [r7, #4]
 8012e1c:	4413      	add	r3, r2
 8012e1e:	3304      	adds	r3, #4
 8012e20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8012e22:	68fb      	ldr	r3, [r7, #12]
 8012e24:	2201      	movs	r2, #1
 8012e26:	705a      	strb	r2, [r3, #1]
 8012e28:	e00d      	b.n	8012e46 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8012e2a:	78fa      	ldrb	r2, [r7, #3]
 8012e2c:	4613      	mov	r3, r2
 8012e2e:	00db      	lsls	r3, r3, #3
 8012e30:	4413      	add	r3, r2
 8012e32:	009b      	lsls	r3, r3, #2
 8012e34:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8012e38:	687a      	ldr	r2, [r7, #4]
 8012e3a:	4413      	add	r3, r2
 8012e3c:	3304      	adds	r3, #4
 8012e3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8012e40:	68fb      	ldr	r3, [r7, #12]
 8012e42:	2200      	movs	r2, #0
 8012e44:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8012e46:	68fb      	ldr	r3, [r7, #12]
 8012e48:	2201      	movs	r2, #1
 8012e4a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8012e4c:	78fb      	ldrb	r3, [r7, #3]
 8012e4e:	f003 030f 	and.w	r3, r3, #15
 8012e52:	b2da      	uxtb	r2, r3
 8012e54:	68fb      	ldr	r3, [r7, #12]
 8012e56:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8012e5e:	2b01      	cmp	r3, #1
 8012e60:	d101      	bne.n	8012e66 <HAL_PCD_EP_SetStall+0x82>
 8012e62:	2302      	movs	r3, #2
 8012e64:	e01d      	b.n	8012ea2 <HAL_PCD_EP_SetStall+0xbe>
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	2201      	movs	r2, #1
 8012e6a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	681b      	ldr	r3, [r3, #0]
 8012e72:	68f9      	ldr	r1, [r7, #12]
 8012e74:	4618      	mov	r0, r3
 8012e76:	f002 f9c5 	bl	8015204 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8012e7a:	78fb      	ldrb	r3, [r7, #3]
 8012e7c:	f003 030f 	and.w	r3, r3, #15
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	d109      	bne.n	8012e98 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	6818      	ldr	r0, [r3, #0]
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	7999      	ldrb	r1, [r3, #6]
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8012e92:	461a      	mov	r2, r3
 8012e94:	f002 fbb6 	bl	8015604 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	2200      	movs	r2, #0
 8012e9c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8012ea0:	2300      	movs	r3, #0
}
 8012ea2:	4618      	mov	r0, r3
 8012ea4:	3710      	adds	r7, #16
 8012ea6:	46bd      	mov	sp, r7
 8012ea8:	bd80      	pop	{r7, pc}

08012eaa <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8012eaa:	b580      	push	{r7, lr}
 8012eac:	b084      	sub	sp, #16
 8012eae:	af00      	add	r7, sp, #0
 8012eb0:	6078      	str	r0, [r7, #4]
 8012eb2:	460b      	mov	r3, r1
 8012eb4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8012eb6:	78fb      	ldrb	r3, [r7, #3]
 8012eb8:	f003 030f 	and.w	r3, r3, #15
 8012ebc:	687a      	ldr	r2, [r7, #4]
 8012ebe:	7912      	ldrb	r2, [r2, #4]
 8012ec0:	4293      	cmp	r3, r2
 8012ec2:	d901      	bls.n	8012ec8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8012ec4:	2301      	movs	r3, #1
 8012ec6:	e042      	b.n	8012f4e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8012ec8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	da0f      	bge.n	8012ef0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8012ed0:	78fb      	ldrb	r3, [r7, #3]
 8012ed2:	f003 020f 	and.w	r2, r3, #15
 8012ed6:	4613      	mov	r3, r2
 8012ed8:	00db      	lsls	r3, r3, #3
 8012eda:	4413      	add	r3, r2
 8012edc:	009b      	lsls	r3, r3, #2
 8012ede:	3310      	adds	r3, #16
 8012ee0:	687a      	ldr	r2, [r7, #4]
 8012ee2:	4413      	add	r3, r2
 8012ee4:	3304      	adds	r3, #4
 8012ee6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8012ee8:	68fb      	ldr	r3, [r7, #12]
 8012eea:	2201      	movs	r2, #1
 8012eec:	705a      	strb	r2, [r3, #1]
 8012eee:	e00f      	b.n	8012f10 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8012ef0:	78fb      	ldrb	r3, [r7, #3]
 8012ef2:	f003 020f 	and.w	r2, r3, #15
 8012ef6:	4613      	mov	r3, r2
 8012ef8:	00db      	lsls	r3, r3, #3
 8012efa:	4413      	add	r3, r2
 8012efc:	009b      	lsls	r3, r3, #2
 8012efe:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8012f02:	687a      	ldr	r2, [r7, #4]
 8012f04:	4413      	add	r3, r2
 8012f06:	3304      	adds	r3, #4
 8012f08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8012f0a:	68fb      	ldr	r3, [r7, #12]
 8012f0c:	2200      	movs	r2, #0
 8012f0e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8012f10:	68fb      	ldr	r3, [r7, #12]
 8012f12:	2200      	movs	r2, #0
 8012f14:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8012f16:	78fb      	ldrb	r3, [r7, #3]
 8012f18:	f003 030f 	and.w	r3, r3, #15
 8012f1c:	b2da      	uxtb	r2, r3
 8012f1e:	68fb      	ldr	r3, [r7, #12]
 8012f20:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8012f28:	2b01      	cmp	r3, #1
 8012f2a:	d101      	bne.n	8012f30 <HAL_PCD_EP_ClrStall+0x86>
 8012f2c:	2302      	movs	r3, #2
 8012f2e:	e00e      	b.n	8012f4e <HAL_PCD_EP_ClrStall+0xa4>
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	2201      	movs	r2, #1
 8012f34:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	681b      	ldr	r3, [r3, #0]
 8012f3c:	68f9      	ldr	r1, [r7, #12]
 8012f3e:	4618      	mov	r0, r3
 8012f40:	f002 f9ce 	bl	80152e0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	2200      	movs	r2, #0
 8012f48:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8012f4c:	2300      	movs	r3, #0
}
 8012f4e:	4618      	mov	r0, r3
 8012f50:	3710      	adds	r7, #16
 8012f52:	46bd      	mov	sp, r7
 8012f54:	bd80      	pop	{r7, pc}

08012f56 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8012f56:	b580      	push	{r7, lr}
 8012f58:	b084      	sub	sp, #16
 8012f5a:	af00      	add	r7, sp, #0
 8012f5c:	6078      	str	r0, [r7, #4]
 8012f5e:	460b      	mov	r3, r1
 8012f60:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8012f62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	da0c      	bge.n	8012f84 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8012f6a:	78fb      	ldrb	r3, [r7, #3]
 8012f6c:	f003 020f 	and.w	r2, r3, #15
 8012f70:	4613      	mov	r3, r2
 8012f72:	00db      	lsls	r3, r3, #3
 8012f74:	4413      	add	r3, r2
 8012f76:	009b      	lsls	r3, r3, #2
 8012f78:	3310      	adds	r3, #16
 8012f7a:	687a      	ldr	r2, [r7, #4]
 8012f7c:	4413      	add	r3, r2
 8012f7e:	3304      	adds	r3, #4
 8012f80:	60fb      	str	r3, [r7, #12]
 8012f82:	e00c      	b.n	8012f9e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8012f84:	78fb      	ldrb	r3, [r7, #3]
 8012f86:	f003 020f 	and.w	r2, r3, #15
 8012f8a:	4613      	mov	r3, r2
 8012f8c:	00db      	lsls	r3, r3, #3
 8012f8e:	4413      	add	r3, r2
 8012f90:	009b      	lsls	r3, r3, #2
 8012f92:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8012f96:	687a      	ldr	r2, [r7, #4]
 8012f98:	4413      	add	r3, r2
 8012f9a:	3304      	adds	r3, #4
 8012f9c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	681b      	ldr	r3, [r3, #0]
 8012fa2:	68f9      	ldr	r1, [r7, #12]
 8012fa4:	4618      	mov	r0, r3
 8012fa6:	f001 ffed 	bl	8014f84 <USB_EPStopXfer>
 8012faa:	4603      	mov	r3, r0
 8012fac:	72fb      	strb	r3, [r7, #11]

  return ret;
 8012fae:	7afb      	ldrb	r3, [r7, #11]
}
 8012fb0:	4618      	mov	r0, r3
 8012fb2:	3710      	adds	r7, #16
 8012fb4:	46bd      	mov	sp, r7
 8012fb6:	bd80      	pop	{r7, pc}

08012fb8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8012fb8:	b580      	push	{r7, lr}
 8012fba:	b08a      	sub	sp, #40	@ 0x28
 8012fbc:	af02      	add	r7, sp, #8
 8012fbe:	6078      	str	r0, [r7, #4]
 8012fc0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	681b      	ldr	r3, [r3, #0]
 8012fc6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012fc8:	697b      	ldr	r3, [r7, #20]
 8012fca:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8012fcc:	683a      	ldr	r2, [r7, #0]
 8012fce:	4613      	mov	r3, r2
 8012fd0:	00db      	lsls	r3, r3, #3
 8012fd2:	4413      	add	r3, r2
 8012fd4:	009b      	lsls	r3, r3, #2
 8012fd6:	3310      	adds	r3, #16
 8012fd8:	687a      	ldr	r2, [r7, #4]
 8012fda:	4413      	add	r3, r2
 8012fdc:	3304      	adds	r3, #4
 8012fde:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8012fe0:	68fb      	ldr	r3, [r7, #12]
 8012fe2:	695a      	ldr	r2, [r3, #20]
 8012fe4:	68fb      	ldr	r3, [r7, #12]
 8012fe6:	691b      	ldr	r3, [r3, #16]
 8012fe8:	429a      	cmp	r2, r3
 8012fea:	d901      	bls.n	8012ff0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8012fec:	2301      	movs	r3, #1
 8012fee:	e06b      	b.n	80130c8 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8012ff0:	68fb      	ldr	r3, [r7, #12]
 8012ff2:	691a      	ldr	r2, [r3, #16]
 8012ff4:	68fb      	ldr	r3, [r7, #12]
 8012ff6:	695b      	ldr	r3, [r3, #20]
 8012ff8:	1ad3      	subs	r3, r2, r3
 8012ffa:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8012ffc:	68fb      	ldr	r3, [r7, #12]
 8012ffe:	689b      	ldr	r3, [r3, #8]
 8013000:	69fa      	ldr	r2, [r7, #28]
 8013002:	429a      	cmp	r2, r3
 8013004:	d902      	bls.n	801300c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8013006:	68fb      	ldr	r3, [r7, #12]
 8013008:	689b      	ldr	r3, [r3, #8]
 801300a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 801300c:	69fb      	ldr	r3, [r7, #28]
 801300e:	3303      	adds	r3, #3
 8013010:	089b      	lsrs	r3, r3, #2
 8013012:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8013014:	e02a      	b.n	801306c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8013016:	68fb      	ldr	r3, [r7, #12]
 8013018:	691a      	ldr	r2, [r3, #16]
 801301a:	68fb      	ldr	r3, [r7, #12]
 801301c:	695b      	ldr	r3, [r3, #20]
 801301e:	1ad3      	subs	r3, r2, r3
 8013020:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8013022:	68fb      	ldr	r3, [r7, #12]
 8013024:	689b      	ldr	r3, [r3, #8]
 8013026:	69fa      	ldr	r2, [r7, #28]
 8013028:	429a      	cmp	r2, r3
 801302a:	d902      	bls.n	8013032 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 801302c:	68fb      	ldr	r3, [r7, #12]
 801302e:	689b      	ldr	r3, [r3, #8]
 8013030:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8013032:	69fb      	ldr	r3, [r7, #28]
 8013034:	3303      	adds	r3, #3
 8013036:	089b      	lsrs	r3, r3, #2
 8013038:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 801303a:	68fb      	ldr	r3, [r7, #12]
 801303c:	68d9      	ldr	r1, [r3, #12]
 801303e:	683b      	ldr	r3, [r7, #0]
 8013040:	b2da      	uxtb	r2, r3
 8013042:	69fb      	ldr	r3, [r7, #28]
 8013044:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 801304a:	9300      	str	r3, [sp, #0]
 801304c:	4603      	mov	r3, r0
 801304e:	6978      	ldr	r0, [r7, #20]
 8013050:	f002 f842 	bl	80150d8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8013054:	68fb      	ldr	r3, [r7, #12]
 8013056:	68da      	ldr	r2, [r3, #12]
 8013058:	69fb      	ldr	r3, [r7, #28]
 801305a:	441a      	add	r2, r3
 801305c:	68fb      	ldr	r3, [r7, #12]
 801305e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8013060:	68fb      	ldr	r3, [r7, #12]
 8013062:	695a      	ldr	r2, [r3, #20]
 8013064:	69fb      	ldr	r3, [r7, #28]
 8013066:	441a      	add	r2, r3
 8013068:	68fb      	ldr	r3, [r7, #12]
 801306a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 801306c:	683b      	ldr	r3, [r7, #0]
 801306e:	015a      	lsls	r2, r3, #5
 8013070:	693b      	ldr	r3, [r7, #16]
 8013072:	4413      	add	r3, r2
 8013074:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013078:	699b      	ldr	r3, [r3, #24]
 801307a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 801307c:	69ba      	ldr	r2, [r7, #24]
 801307e:	429a      	cmp	r2, r3
 8013080:	d809      	bhi.n	8013096 <PCD_WriteEmptyTxFifo+0xde>
 8013082:	68fb      	ldr	r3, [r7, #12]
 8013084:	695a      	ldr	r2, [r3, #20]
 8013086:	68fb      	ldr	r3, [r7, #12]
 8013088:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 801308a:	429a      	cmp	r2, r3
 801308c:	d203      	bcs.n	8013096 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 801308e:	68fb      	ldr	r3, [r7, #12]
 8013090:	691b      	ldr	r3, [r3, #16]
 8013092:	2b00      	cmp	r3, #0
 8013094:	d1bf      	bne.n	8013016 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8013096:	68fb      	ldr	r3, [r7, #12]
 8013098:	691a      	ldr	r2, [r3, #16]
 801309a:	68fb      	ldr	r3, [r7, #12]
 801309c:	695b      	ldr	r3, [r3, #20]
 801309e:	429a      	cmp	r2, r3
 80130a0:	d811      	bhi.n	80130c6 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80130a2:	683b      	ldr	r3, [r7, #0]
 80130a4:	f003 030f 	and.w	r3, r3, #15
 80130a8:	2201      	movs	r2, #1
 80130aa:	fa02 f303 	lsl.w	r3, r2, r3
 80130ae:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80130b0:	693b      	ldr	r3, [r7, #16]
 80130b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80130b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80130b8:	68bb      	ldr	r3, [r7, #8]
 80130ba:	43db      	mvns	r3, r3
 80130bc:	6939      	ldr	r1, [r7, #16]
 80130be:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80130c2:	4013      	ands	r3, r2
 80130c4:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80130c6:	2300      	movs	r3, #0
}
 80130c8:	4618      	mov	r0, r3
 80130ca:	3720      	adds	r7, #32
 80130cc:	46bd      	mov	sp, r7
 80130ce:	bd80      	pop	{r7, pc}

080130d0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80130d0:	b580      	push	{r7, lr}
 80130d2:	b088      	sub	sp, #32
 80130d4:	af00      	add	r7, sp, #0
 80130d6:	6078      	str	r0, [r7, #4]
 80130d8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	681b      	ldr	r3, [r3, #0]
 80130de:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80130e0:	69fb      	ldr	r3, [r7, #28]
 80130e2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80130e4:	69fb      	ldr	r3, [r7, #28]
 80130e6:	333c      	adds	r3, #60	@ 0x3c
 80130e8:	3304      	adds	r3, #4
 80130ea:	681b      	ldr	r3, [r3, #0]
 80130ec:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80130ee:	683b      	ldr	r3, [r7, #0]
 80130f0:	015a      	lsls	r2, r3, #5
 80130f2:	69bb      	ldr	r3, [r7, #24]
 80130f4:	4413      	add	r3, r2
 80130f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80130fa:	689b      	ldr	r3, [r3, #8]
 80130fc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	799b      	ldrb	r3, [r3, #6]
 8013102:	2b01      	cmp	r3, #1
 8013104:	d17b      	bne.n	80131fe <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8013106:	693b      	ldr	r3, [r7, #16]
 8013108:	f003 0308 	and.w	r3, r3, #8
 801310c:	2b00      	cmp	r3, #0
 801310e:	d015      	beq.n	801313c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8013110:	697b      	ldr	r3, [r7, #20]
 8013112:	4a61      	ldr	r2, [pc, #388]	@ (8013298 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8013114:	4293      	cmp	r3, r2
 8013116:	f240 80b9 	bls.w	801328c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 801311a:	693b      	ldr	r3, [r7, #16]
 801311c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8013120:	2b00      	cmp	r3, #0
 8013122:	f000 80b3 	beq.w	801328c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8013126:	683b      	ldr	r3, [r7, #0]
 8013128:	015a      	lsls	r2, r3, #5
 801312a:	69bb      	ldr	r3, [r7, #24]
 801312c:	4413      	add	r3, r2
 801312e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013132:	461a      	mov	r2, r3
 8013134:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8013138:	6093      	str	r3, [r2, #8]
 801313a:	e0a7      	b.n	801328c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 801313c:	693b      	ldr	r3, [r7, #16]
 801313e:	f003 0320 	and.w	r3, r3, #32
 8013142:	2b00      	cmp	r3, #0
 8013144:	d009      	beq.n	801315a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8013146:	683b      	ldr	r3, [r7, #0]
 8013148:	015a      	lsls	r2, r3, #5
 801314a:	69bb      	ldr	r3, [r7, #24]
 801314c:	4413      	add	r3, r2
 801314e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013152:	461a      	mov	r2, r3
 8013154:	2320      	movs	r3, #32
 8013156:	6093      	str	r3, [r2, #8]
 8013158:	e098      	b.n	801328c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 801315a:	693b      	ldr	r3, [r7, #16]
 801315c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8013160:	2b00      	cmp	r3, #0
 8013162:	f040 8093 	bne.w	801328c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8013166:	697b      	ldr	r3, [r7, #20]
 8013168:	4a4b      	ldr	r2, [pc, #300]	@ (8013298 <PCD_EP_OutXfrComplete_int+0x1c8>)
 801316a:	4293      	cmp	r3, r2
 801316c:	d90f      	bls.n	801318e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 801316e:	693b      	ldr	r3, [r7, #16]
 8013170:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8013174:	2b00      	cmp	r3, #0
 8013176:	d00a      	beq.n	801318e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8013178:	683b      	ldr	r3, [r7, #0]
 801317a:	015a      	lsls	r2, r3, #5
 801317c:	69bb      	ldr	r3, [r7, #24]
 801317e:	4413      	add	r3, r2
 8013180:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013184:	461a      	mov	r2, r3
 8013186:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801318a:	6093      	str	r3, [r2, #8]
 801318c:	e07e      	b.n	801328c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 801318e:	683a      	ldr	r2, [r7, #0]
 8013190:	4613      	mov	r3, r2
 8013192:	00db      	lsls	r3, r3, #3
 8013194:	4413      	add	r3, r2
 8013196:	009b      	lsls	r3, r3, #2
 8013198:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 801319c:	687a      	ldr	r2, [r7, #4]
 801319e:	4413      	add	r3, r2
 80131a0:	3304      	adds	r3, #4
 80131a2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80131a4:	68fb      	ldr	r3, [r7, #12]
 80131a6:	6a1a      	ldr	r2, [r3, #32]
 80131a8:	683b      	ldr	r3, [r7, #0]
 80131aa:	0159      	lsls	r1, r3, #5
 80131ac:	69bb      	ldr	r3, [r7, #24]
 80131ae:	440b      	add	r3, r1
 80131b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80131b4:	691b      	ldr	r3, [r3, #16]
 80131b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80131ba:	1ad2      	subs	r2, r2, r3
 80131bc:	68fb      	ldr	r3, [r7, #12]
 80131be:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80131c0:	683b      	ldr	r3, [r7, #0]
 80131c2:	2b00      	cmp	r3, #0
 80131c4:	d114      	bne.n	80131f0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80131c6:	68fb      	ldr	r3, [r7, #12]
 80131c8:	691b      	ldr	r3, [r3, #16]
 80131ca:	2b00      	cmp	r3, #0
 80131cc:	d109      	bne.n	80131e2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	6818      	ldr	r0, [r3, #0]
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80131d8:	461a      	mov	r2, r3
 80131da:	2101      	movs	r1, #1
 80131dc:	f002 fa12 	bl	8015604 <USB_EP0_OutStart>
 80131e0:	e006      	b.n	80131f0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80131e2:	68fb      	ldr	r3, [r7, #12]
 80131e4:	68da      	ldr	r2, [r3, #12]
 80131e6:	68fb      	ldr	r3, [r7, #12]
 80131e8:	695b      	ldr	r3, [r3, #20]
 80131ea:	441a      	add	r2, r3
 80131ec:	68fb      	ldr	r3, [r7, #12]
 80131ee:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80131f0:	683b      	ldr	r3, [r7, #0]
 80131f2:	b2db      	uxtb	r3, r3
 80131f4:	4619      	mov	r1, r3
 80131f6:	6878      	ldr	r0, [r7, #4]
 80131f8:	f004 fc9e 	bl	8017b38 <HAL_PCD_DataOutStageCallback>
 80131fc:	e046      	b.n	801328c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80131fe:	697b      	ldr	r3, [r7, #20]
 8013200:	4a26      	ldr	r2, [pc, #152]	@ (801329c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8013202:	4293      	cmp	r3, r2
 8013204:	d124      	bne.n	8013250 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8013206:	693b      	ldr	r3, [r7, #16]
 8013208:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801320c:	2b00      	cmp	r3, #0
 801320e:	d00a      	beq.n	8013226 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8013210:	683b      	ldr	r3, [r7, #0]
 8013212:	015a      	lsls	r2, r3, #5
 8013214:	69bb      	ldr	r3, [r7, #24]
 8013216:	4413      	add	r3, r2
 8013218:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801321c:	461a      	mov	r2, r3
 801321e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8013222:	6093      	str	r3, [r2, #8]
 8013224:	e032      	b.n	801328c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8013226:	693b      	ldr	r3, [r7, #16]
 8013228:	f003 0320 	and.w	r3, r3, #32
 801322c:	2b00      	cmp	r3, #0
 801322e:	d008      	beq.n	8013242 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8013230:	683b      	ldr	r3, [r7, #0]
 8013232:	015a      	lsls	r2, r3, #5
 8013234:	69bb      	ldr	r3, [r7, #24]
 8013236:	4413      	add	r3, r2
 8013238:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801323c:	461a      	mov	r2, r3
 801323e:	2320      	movs	r3, #32
 8013240:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8013242:	683b      	ldr	r3, [r7, #0]
 8013244:	b2db      	uxtb	r3, r3
 8013246:	4619      	mov	r1, r3
 8013248:	6878      	ldr	r0, [r7, #4]
 801324a:	f004 fc75 	bl	8017b38 <HAL_PCD_DataOutStageCallback>
 801324e:	e01d      	b.n	801328c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8013250:	683b      	ldr	r3, [r7, #0]
 8013252:	2b00      	cmp	r3, #0
 8013254:	d114      	bne.n	8013280 <PCD_EP_OutXfrComplete_int+0x1b0>
 8013256:	6879      	ldr	r1, [r7, #4]
 8013258:	683a      	ldr	r2, [r7, #0]
 801325a:	4613      	mov	r3, r2
 801325c:	00db      	lsls	r3, r3, #3
 801325e:	4413      	add	r3, r2
 8013260:	009b      	lsls	r3, r3, #2
 8013262:	440b      	add	r3, r1
 8013264:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8013268:	681b      	ldr	r3, [r3, #0]
 801326a:	2b00      	cmp	r3, #0
 801326c:	d108      	bne.n	8013280 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	6818      	ldr	r0, [r3, #0]
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8013278:	461a      	mov	r2, r3
 801327a:	2100      	movs	r1, #0
 801327c:	f002 f9c2 	bl	8015604 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8013280:	683b      	ldr	r3, [r7, #0]
 8013282:	b2db      	uxtb	r3, r3
 8013284:	4619      	mov	r1, r3
 8013286:	6878      	ldr	r0, [r7, #4]
 8013288:	f004 fc56 	bl	8017b38 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 801328c:	2300      	movs	r3, #0
}
 801328e:	4618      	mov	r0, r3
 8013290:	3720      	adds	r7, #32
 8013292:	46bd      	mov	sp, r7
 8013294:	bd80      	pop	{r7, pc}
 8013296:	bf00      	nop
 8013298:	4f54300a 	.word	0x4f54300a
 801329c:	4f54310a 	.word	0x4f54310a

080132a0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80132a0:	b580      	push	{r7, lr}
 80132a2:	b086      	sub	sp, #24
 80132a4:	af00      	add	r7, sp, #0
 80132a6:	6078      	str	r0, [r7, #4]
 80132a8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	681b      	ldr	r3, [r3, #0]
 80132ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80132b0:	697b      	ldr	r3, [r7, #20]
 80132b2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80132b4:	697b      	ldr	r3, [r7, #20]
 80132b6:	333c      	adds	r3, #60	@ 0x3c
 80132b8:	3304      	adds	r3, #4
 80132ba:	681b      	ldr	r3, [r3, #0]
 80132bc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80132be:	683b      	ldr	r3, [r7, #0]
 80132c0:	015a      	lsls	r2, r3, #5
 80132c2:	693b      	ldr	r3, [r7, #16]
 80132c4:	4413      	add	r3, r2
 80132c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80132ca:	689b      	ldr	r3, [r3, #8]
 80132cc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80132ce:	68fb      	ldr	r3, [r7, #12]
 80132d0:	4a15      	ldr	r2, [pc, #84]	@ (8013328 <PCD_EP_OutSetupPacket_int+0x88>)
 80132d2:	4293      	cmp	r3, r2
 80132d4:	d90e      	bls.n	80132f4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80132d6:	68bb      	ldr	r3, [r7, #8]
 80132d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80132dc:	2b00      	cmp	r3, #0
 80132de:	d009      	beq.n	80132f4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80132e0:	683b      	ldr	r3, [r7, #0]
 80132e2:	015a      	lsls	r2, r3, #5
 80132e4:	693b      	ldr	r3, [r7, #16]
 80132e6:	4413      	add	r3, r2
 80132e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80132ec:	461a      	mov	r2, r3
 80132ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80132f2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80132f4:	6878      	ldr	r0, [r7, #4]
 80132f6:	f004 fc0d 	bl	8017b14 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80132fa:	68fb      	ldr	r3, [r7, #12]
 80132fc:	4a0a      	ldr	r2, [pc, #40]	@ (8013328 <PCD_EP_OutSetupPacket_int+0x88>)
 80132fe:	4293      	cmp	r3, r2
 8013300:	d90c      	bls.n	801331c <PCD_EP_OutSetupPacket_int+0x7c>
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	799b      	ldrb	r3, [r3, #6]
 8013306:	2b01      	cmp	r3, #1
 8013308:	d108      	bne.n	801331c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	6818      	ldr	r0, [r3, #0]
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8013314:	461a      	mov	r2, r3
 8013316:	2101      	movs	r1, #1
 8013318:	f002 f974 	bl	8015604 <USB_EP0_OutStart>
  }

  return HAL_OK;
 801331c:	2300      	movs	r3, #0
}
 801331e:	4618      	mov	r0, r3
 8013320:	3718      	adds	r7, #24
 8013322:	46bd      	mov	sp, r7
 8013324:	bd80      	pop	{r7, pc}
 8013326:	bf00      	nop
 8013328:	4f54300a 	.word	0x4f54300a

0801332c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 801332c:	b480      	push	{r7}
 801332e:	b085      	sub	sp, #20
 8013330:	af00      	add	r7, sp, #0
 8013332:	6078      	str	r0, [r7, #4]
 8013334:	460b      	mov	r3, r1
 8013336:	70fb      	strb	r3, [r7, #3]
 8013338:	4613      	mov	r3, r2
 801333a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	681b      	ldr	r3, [r3, #0]
 8013340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013342:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8013344:	78fb      	ldrb	r3, [r7, #3]
 8013346:	2b00      	cmp	r3, #0
 8013348:	d107      	bne.n	801335a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 801334a:	883b      	ldrh	r3, [r7, #0]
 801334c:	0419      	lsls	r1, r3, #16
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	681b      	ldr	r3, [r3, #0]
 8013352:	68ba      	ldr	r2, [r7, #8]
 8013354:	430a      	orrs	r2, r1
 8013356:	629a      	str	r2, [r3, #40]	@ 0x28
 8013358:	e028      	b.n	80133ac <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	681b      	ldr	r3, [r3, #0]
 801335e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013360:	0c1b      	lsrs	r3, r3, #16
 8013362:	68ba      	ldr	r2, [r7, #8]
 8013364:	4413      	add	r3, r2
 8013366:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8013368:	2300      	movs	r3, #0
 801336a:	73fb      	strb	r3, [r7, #15]
 801336c:	e00d      	b.n	801338a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	681a      	ldr	r2, [r3, #0]
 8013372:	7bfb      	ldrb	r3, [r7, #15]
 8013374:	3340      	adds	r3, #64	@ 0x40
 8013376:	009b      	lsls	r3, r3, #2
 8013378:	4413      	add	r3, r2
 801337a:	685b      	ldr	r3, [r3, #4]
 801337c:	0c1b      	lsrs	r3, r3, #16
 801337e:	68ba      	ldr	r2, [r7, #8]
 8013380:	4413      	add	r3, r2
 8013382:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8013384:	7bfb      	ldrb	r3, [r7, #15]
 8013386:	3301      	adds	r3, #1
 8013388:	73fb      	strb	r3, [r7, #15]
 801338a:	7bfa      	ldrb	r2, [r7, #15]
 801338c:	78fb      	ldrb	r3, [r7, #3]
 801338e:	3b01      	subs	r3, #1
 8013390:	429a      	cmp	r2, r3
 8013392:	d3ec      	bcc.n	801336e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8013394:	883b      	ldrh	r3, [r7, #0]
 8013396:	0418      	lsls	r0, r3, #16
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	6819      	ldr	r1, [r3, #0]
 801339c:	78fb      	ldrb	r3, [r7, #3]
 801339e:	3b01      	subs	r3, #1
 80133a0:	68ba      	ldr	r2, [r7, #8]
 80133a2:	4302      	orrs	r2, r0
 80133a4:	3340      	adds	r3, #64	@ 0x40
 80133a6:	009b      	lsls	r3, r3, #2
 80133a8:	440b      	add	r3, r1
 80133aa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80133ac:	2300      	movs	r3, #0
}
 80133ae:	4618      	mov	r0, r3
 80133b0:	3714      	adds	r7, #20
 80133b2:	46bd      	mov	sp, r7
 80133b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133b8:	4770      	bx	lr

080133ba <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80133ba:	b480      	push	{r7}
 80133bc:	b083      	sub	sp, #12
 80133be:	af00      	add	r7, sp, #0
 80133c0:	6078      	str	r0, [r7, #4]
 80133c2:	460b      	mov	r3, r1
 80133c4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	681b      	ldr	r3, [r3, #0]
 80133ca:	887a      	ldrh	r2, [r7, #2]
 80133cc:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80133ce:	2300      	movs	r3, #0
}
 80133d0:	4618      	mov	r0, r3
 80133d2:	370c      	adds	r7, #12
 80133d4:	46bd      	mov	sp, r7
 80133d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133da:	4770      	bx	lr

080133dc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80133dc:	b480      	push	{r7}
 80133de:	b083      	sub	sp, #12
 80133e0:	af00      	add	r7, sp, #0
 80133e2:	6078      	str	r0, [r7, #4]
 80133e4:	460b      	mov	r3, r1
 80133e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80133e8:	bf00      	nop
 80133ea:	370c      	adds	r7, #12
 80133ec:	46bd      	mov	sp, r7
 80133ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133f2:	4770      	bx	lr

080133f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80133f4:	b580      	push	{r7, lr}
 80133f6:	b086      	sub	sp, #24
 80133f8:	af00      	add	r7, sp, #0
 80133fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	2b00      	cmp	r3, #0
 8013400:	d101      	bne.n	8013406 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8013402:	2301      	movs	r3, #1
 8013404:	e267      	b.n	80138d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	681b      	ldr	r3, [r3, #0]
 801340a:	f003 0301 	and.w	r3, r3, #1
 801340e:	2b00      	cmp	r3, #0
 8013410:	d075      	beq.n	80134fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8013412:	4b88      	ldr	r3, [pc, #544]	@ (8013634 <HAL_RCC_OscConfig+0x240>)
 8013414:	689b      	ldr	r3, [r3, #8]
 8013416:	f003 030c 	and.w	r3, r3, #12
 801341a:	2b04      	cmp	r3, #4
 801341c:	d00c      	beq.n	8013438 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801341e:	4b85      	ldr	r3, [pc, #532]	@ (8013634 <HAL_RCC_OscConfig+0x240>)
 8013420:	689b      	ldr	r3, [r3, #8]
 8013422:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8013426:	2b08      	cmp	r3, #8
 8013428:	d112      	bne.n	8013450 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801342a:	4b82      	ldr	r3, [pc, #520]	@ (8013634 <HAL_RCC_OscConfig+0x240>)
 801342c:	685b      	ldr	r3, [r3, #4]
 801342e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8013432:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8013436:	d10b      	bne.n	8013450 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8013438:	4b7e      	ldr	r3, [pc, #504]	@ (8013634 <HAL_RCC_OscConfig+0x240>)
 801343a:	681b      	ldr	r3, [r3, #0]
 801343c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013440:	2b00      	cmp	r3, #0
 8013442:	d05b      	beq.n	80134fc <HAL_RCC_OscConfig+0x108>
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	685b      	ldr	r3, [r3, #4]
 8013448:	2b00      	cmp	r3, #0
 801344a:	d157      	bne.n	80134fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 801344c:	2301      	movs	r3, #1
 801344e:	e242      	b.n	80138d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	685b      	ldr	r3, [r3, #4]
 8013454:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013458:	d106      	bne.n	8013468 <HAL_RCC_OscConfig+0x74>
 801345a:	4b76      	ldr	r3, [pc, #472]	@ (8013634 <HAL_RCC_OscConfig+0x240>)
 801345c:	681b      	ldr	r3, [r3, #0]
 801345e:	4a75      	ldr	r2, [pc, #468]	@ (8013634 <HAL_RCC_OscConfig+0x240>)
 8013460:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8013464:	6013      	str	r3, [r2, #0]
 8013466:	e01d      	b.n	80134a4 <HAL_RCC_OscConfig+0xb0>
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	685b      	ldr	r3, [r3, #4]
 801346c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8013470:	d10c      	bne.n	801348c <HAL_RCC_OscConfig+0x98>
 8013472:	4b70      	ldr	r3, [pc, #448]	@ (8013634 <HAL_RCC_OscConfig+0x240>)
 8013474:	681b      	ldr	r3, [r3, #0]
 8013476:	4a6f      	ldr	r2, [pc, #444]	@ (8013634 <HAL_RCC_OscConfig+0x240>)
 8013478:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801347c:	6013      	str	r3, [r2, #0]
 801347e:	4b6d      	ldr	r3, [pc, #436]	@ (8013634 <HAL_RCC_OscConfig+0x240>)
 8013480:	681b      	ldr	r3, [r3, #0]
 8013482:	4a6c      	ldr	r2, [pc, #432]	@ (8013634 <HAL_RCC_OscConfig+0x240>)
 8013484:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8013488:	6013      	str	r3, [r2, #0]
 801348a:	e00b      	b.n	80134a4 <HAL_RCC_OscConfig+0xb0>
 801348c:	4b69      	ldr	r3, [pc, #420]	@ (8013634 <HAL_RCC_OscConfig+0x240>)
 801348e:	681b      	ldr	r3, [r3, #0]
 8013490:	4a68      	ldr	r2, [pc, #416]	@ (8013634 <HAL_RCC_OscConfig+0x240>)
 8013492:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8013496:	6013      	str	r3, [r2, #0]
 8013498:	4b66      	ldr	r3, [pc, #408]	@ (8013634 <HAL_RCC_OscConfig+0x240>)
 801349a:	681b      	ldr	r3, [r3, #0]
 801349c:	4a65      	ldr	r2, [pc, #404]	@ (8013634 <HAL_RCC_OscConfig+0x240>)
 801349e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80134a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	685b      	ldr	r3, [r3, #4]
 80134a8:	2b00      	cmp	r3, #0
 80134aa:	d013      	beq.n	80134d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80134ac:	f7fd fc5a 	bl	8010d64 <HAL_GetTick>
 80134b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80134b2:	e008      	b.n	80134c6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80134b4:	f7fd fc56 	bl	8010d64 <HAL_GetTick>
 80134b8:	4602      	mov	r2, r0
 80134ba:	693b      	ldr	r3, [r7, #16]
 80134bc:	1ad3      	subs	r3, r2, r3
 80134be:	2b64      	cmp	r3, #100	@ 0x64
 80134c0:	d901      	bls.n	80134c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80134c2:	2303      	movs	r3, #3
 80134c4:	e207      	b.n	80138d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80134c6:	4b5b      	ldr	r3, [pc, #364]	@ (8013634 <HAL_RCC_OscConfig+0x240>)
 80134c8:	681b      	ldr	r3, [r3, #0]
 80134ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80134ce:	2b00      	cmp	r3, #0
 80134d0:	d0f0      	beq.n	80134b4 <HAL_RCC_OscConfig+0xc0>
 80134d2:	e014      	b.n	80134fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80134d4:	f7fd fc46 	bl	8010d64 <HAL_GetTick>
 80134d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80134da:	e008      	b.n	80134ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80134dc:	f7fd fc42 	bl	8010d64 <HAL_GetTick>
 80134e0:	4602      	mov	r2, r0
 80134e2:	693b      	ldr	r3, [r7, #16]
 80134e4:	1ad3      	subs	r3, r2, r3
 80134e6:	2b64      	cmp	r3, #100	@ 0x64
 80134e8:	d901      	bls.n	80134ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80134ea:	2303      	movs	r3, #3
 80134ec:	e1f3      	b.n	80138d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80134ee:	4b51      	ldr	r3, [pc, #324]	@ (8013634 <HAL_RCC_OscConfig+0x240>)
 80134f0:	681b      	ldr	r3, [r3, #0]
 80134f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	d1f0      	bne.n	80134dc <HAL_RCC_OscConfig+0xe8>
 80134fa:	e000      	b.n	80134fe <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80134fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	681b      	ldr	r3, [r3, #0]
 8013502:	f003 0302 	and.w	r3, r3, #2
 8013506:	2b00      	cmp	r3, #0
 8013508:	d063      	beq.n	80135d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 801350a:	4b4a      	ldr	r3, [pc, #296]	@ (8013634 <HAL_RCC_OscConfig+0x240>)
 801350c:	689b      	ldr	r3, [r3, #8]
 801350e:	f003 030c 	and.w	r3, r3, #12
 8013512:	2b00      	cmp	r3, #0
 8013514:	d00b      	beq.n	801352e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8013516:	4b47      	ldr	r3, [pc, #284]	@ (8013634 <HAL_RCC_OscConfig+0x240>)
 8013518:	689b      	ldr	r3, [r3, #8]
 801351a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 801351e:	2b08      	cmp	r3, #8
 8013520:	d11c      	bne.n	801355c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8013522:	4b44      	ldr	r3, [pc, #272]	@ (8013634 <HAL_RCC_OscConfig+0x240>)
 8013524:	685b      	ldr	r3, [r3, #4]
 8013526:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801352a:	2b00      	cmp	r3, #0
 801352c:	d116      	bne.n	801355c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801352e:	4b41      	ldr	r3, [pc, #260]	@ (8013634 <HAL_RCC_OscConfig+0x240>)
 8013530:	681b      	ldr	r3, [r3, #0]
 8013532:	f003 0302 	and.w	r3, r3, #2
 8013536:	2b00      	cmp	r3, #0
 8013538:	d005      	beq.n	8013546 <HAL_RCC_OscConfig+0x152>
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	68db      	ldr	r3, [r3, #12]
 801353e:	2b01      	cmp	r3, #1
 8013540:	d001      	beq.n	8013546 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8013542:	2301      	movs	r3, #1
 8013544:	e1c7      	b.n	80138d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8013546:	4b3b      	ldr	r3, [pc, #236]	@ (8013634 <HAL_RCC_OscConfig+0x240>)
 8013548:	681b      	ldr	r3, [r3, #0]
 801354a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	691b      	ldr	r3, [r3, #16]
 8013552:	00db      	lsls	r3, r3, #3
 8013554:	4937      	ldr	r1, [pc, #220]	@ (8013634 <HAL_RCC_OscConfig+0x240>)
 8013556:	4313      	orrs	r3, r2
 8013558:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801355a:	e03a      	b.n	80135d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	68db      	ldr	r3, [r3, #12]
 8013560:	2b00      	cmp	r3, #0
 8013562:	d020      	beq.n	80135a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8013564:	4b34      	ldr	r3, [pc, #208]	@ (8013638 <HAL_RCC_OscConfig+0x244>)
 8013566:	2201      	movs	r2, #1
 8013568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801356a:	f7fd fbfb 	bl	8010d64 <HAL_GetTick>
 801356e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8013570:	e008      	b.n	8013584 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8013572:	f7fd fbf7 	bl	8010d64 <HAL_GetTick>
 8013576:	4602      	mov	r2, r0
 8013578:	693b      	ldr	r3, [r7, #16]
 801357a:	1ad3      	subs	r3, r2, r3
 801357c:	2b02      	cmp	r3, #2
 801357e:	d901      	bls.n	8013584 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8013580:	2303      	movs	r3, #3
 8013582:	e1a8      	b.n	80138d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8013584:	4b2b      	ldr	r3, [pc, #172]	@ (8013634 <HAL_RCC_OscConfig+0x240>)
 8013586:	681b      	ldr	r3, [r3, #0]
 8013588:	f003 0302 	and.w	r3, r3, #2
 801358c:	2b00      	cmp	r3, #0
 801358e:	d0f0      	beq.n	8013572 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8013590:	4b28      	ldr	r3, [pc, #160]	@ (8013634 <HAL_RCC_OscConfig+0x240>)
 8013592:	681b      	ldr	r3, [r3, #0]
 8013594:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	691b      	ldr	r3, [r3, #16]
 801359c:	00db      	lsls	r3, r3, #3
 801359e:	4925      	ldr	r1, [pc, #148]	@ (8013634 <HAL_RCC_OscConfig+0x240>)
 80135a0:	4313      	orrs	r3, r2
 80135a2:	600b      	str	r3, [r1, #0]
 80135a4:	e015      	b.n	80135d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80135a6:	4b24      	ldr	r3, [pc, #144]	@ (8013638 <HAL_RCC_OscConfig+0x244>)
 80135a8:	2200      	movs	r2, #0
 80135aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80135ac:	f7fd fbda 	bl	8010d64 <HAL_GetTick>
 80135b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80135b2:	e008      	b.n	80135c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80135b4:	f7fd fbd6 	bl	8010d64 <HAL_GetTick>
 80135b8:	4602      	mov	r2, r0
 80135ba:	693b      	ldr	r3, [r7, #16]
 80135bc:	1ad3      	subs	r3, r2, r3
 80135be:	2b02      	cmp	r3, #2
 80135c0:	d901      	bls.n	80135c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80135c2:	2303      	movs	r3, #3
 80135c4:	e187      	b.n	80138d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80135c6:	4b1b      	ldr	r3, [pc, #108]	@ (8013634 <HAL_RCC_OscConfig+0x240>)
 80135c8:	681b      	ldr	r3, [r3, #0]
 80135ca:	f003 0302 	and.w	r3, r3, #2
 80135ce:	2b00      	cmp	r3, #0
 80135d0:	d1f0      	bne.n	80135b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	681b      	ldr	r3, [r3, #0]
 80135d6:	f003 0308 	and.w	r3, r3, #8
 80135da:	2b00      	cmp	r3, #0
 80135dc:	d036      	beq.n	801364c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	695b      	ldr	r3, [r3, #20]
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	d016      	beq.n	8013614 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80135e6:	4b15      	ldr	r3, [pc, #84]	@ (801363c <HAL_RCC_OscConfig+0x248>)
 80135e8:	2201      	movs	r2, #1
 80135ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80135ec:	f7fd fbba 	bl	8010d64 <HAL_GetTick>
 80135f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80135f2:	e008      	b.n	8013606 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80135f4:	f7fd fbb6 	bl	8010d64 <HAL_GetTick>
 80135f8:	4602      	mov	r2, r0
 80135fa:	693b      	ldr	r3, [r7, #16]
 80135fc:	1ad3      	subs	r3, r2, r3
 80135fe:	2b02      	cmp	r3, #2
 8013600:	d901      	bls.n	8013606 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8013602:	2303      	movs	r3, #3
 8013604:	e167      	b.n	80138d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8013606:	4b0b      	ldr	r3, [pc, #44]	@ (8013634 <HAL_RCC_OscConfig+0x240>)
 8013608:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801360a:	f003 0302 	and.w	r3, r3, #2
 801360e:	2b00      	cmp	r3, #0
 8013610:	d0f0      	beq.n	80135f4 <HAL_RCC_OscConfig+0x200>
 8013612:	e01b      	b.n	801364c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8013614:	4b09      	ldr	r3, [pc, #36]	@ (801363c <HAL_RCC_OscConfig+0x248>)
 8013616:	2200      	movs	r2, #0
 8013618:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801361a:	f7fd fba3 	bl	8010d64 <HAL_GetTick>
 801361e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8013620:	e00e      	b.n	8013640 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8013622:	f7fd fb9f 	bl	8010d64 <HAL_GetTick>
 8013626:	4602      	mov	r2, r0
 8013628:	693b      	ldr	r3, [r7, #16]
 801362a:	1ad3      	subs	r3, r2, r3
 801362c:	2b02      	cmp	r3, #2
 801362e:	d907      	bls.n	8013640 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8013630:	2303      	movs	r3, #3
 8013632:	e150      	b.n	80138d6 <HAL_RCC_OscConfig+0x4e2>
 8013634:	40023800 	.word	0x40023800
 8013638:	42470000 	.word	0x42470000
 801363c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8013640:	4b88      	ldr	r3, [pc, #544]	@ (8013864 <HAL_RCC_OscConfig+0x470>)
 8013642:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013644:	f003 0302 	and.w	r3, r3, #2
 8013648:	2b00      	cmp	r3, #0
 801364a:	d1ea      	bne.n	8013622 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	681b      	ldr	r3, [r3, #0]
 8013650:	f003 0304 	and.w	r3, r3, #4
 8013654:	2b00      	cmp	r3, #0
 8013656:	f000 8097 	beq.w	8013788 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 801365a:	2300      	movs	r3, #0
 801365c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 801365e:	4b81      	ldr	r3, [pc, #516]	@ (8013864 <HAL_RCC_OscConfig+0x470>)
 8013660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013662:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8013666:	2b00      	cmp	r3, #0
 8013668:	d10f      	bne.n	801368a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801366a:	2300      	movs	r3, #0
 801366c:	60bb      	str	r3, [r7, #8]
 801366e:	4b7d      	ldr	r3, [pc, #500]	@ (8013864 <HAL_RCC_OscConfig+0x470>)
 8013670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013672:	4a7c      	ldr	r2, [pc, #496]	@ (8013864 <HAL_RCC_OscConfig+0x470>)
 8013674:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8013678:	6413      	str	r3, [r2, #64]	@ 0x40
 801367a:	4b7a      	ldr	r3, [pc, #488]	@ (8013864 <HAL_RCC_OscConfig+0x470>)
 801367c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801367e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8013682:	60bb      	str	r3, [r7, #8]
 8013684:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8013686:	2301      	movs	r3, #1
 8013688:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801368a:	4b77      	ldr	r3, [pc, #476]	@ (8013868 <HAL_RCC_OscConfig+0x474>)
 801368c:	681b      	ldr	r3, [r3, #0]
 801368e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013692:	2b00      	cmp	r3, #0
 8013694:	d118      	bne.n	80136c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8013696:	4b74      	ldr	r3, [pc, #464]	@ (8013868 <HAL_RCC_OscConfig+0x474>)
 8013698:	681b      	ldr	r3, [r3, #0]
 801369a:	4a73      	ldr	r2, [pc, #460]	@ (8013868 <HAL_RCC_OscConfig+0x474>)
 801369c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80136a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80136a2:	f7fd fb5f 	bl	8010d64 <HAL_GetTick>
 80136a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80136a8:	e008      	b.n	80136bc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80136aa:	f7fd fb5b 	bl	8010d64 <HAL_GetTick>
 80136ae:	4602      	mov	r2, r0
 80136b0:	693b      	ldr	r3, [r7, #16]
 80136b2:	1ad3      	subs	r3, r2, r3
 80136b4:	2b02      	cmp	r3, #2
 80136b6:	d901      	bls.n	80136bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80136b8:	2303      	movs	r3, #3
 80136ba:	e10c      	b.n	80138d6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80136bc:	4b6a      	ldr	r3, [pc, #424]	@ (8013868 <HAL_RCC_OscConfig+0x474>)
 80136be:	681b      	ldr	r3, [r3, #0]
 80136c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	d0f0      	beq.n	80136aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	689b      	ldr	r3, [r3, #8]
 80136cc:	2b01      	cmp	r3, #1
 80136ce:	d106      	bne.n	80136de <HAL_RCC_OscConfig+0x2ea>
 80136d0:	4b64      	ldr	r3, [pc, #400]	@ (8013864 <HAL_RCC_OscConfig+0x470>)
 80136d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80136d4:	4a63      	ldr	r2, [pc, #396]	@ (8013864 <HAL_RCC_OscConfig+0x470>)
 80136d6:	f043 0301 	orr.w	r3, r3, #1
 80136da:	6713      	str	r3, [r2, #112]	@ 0x70
 80136dc:	e01c      	b.n	8013718 <HAL_RCC_OscConfig+0x324>
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	689b      	ldr	r3, [r3, #8]
 80136e2:	2b05      	cmp	r3, #5
 80136e4:	d10c      	bne.n	8013700 <HAL_RCC_OscConfig+0x30c>
 80136e6:	4b5f      	ldr	r3, [pc, #380]	@ (8013864 <HAL_RCC_OscConfig+0x470>)
 80136e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80136ea:	4a5e      	ldr	r2, [pc, #376]	@ (8013864 <HAL_RCC_OscConfig+0x470>)
 80136ec:	f043 0304 	orr.w	r3, r3, #4
 80136f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80136f2:	4b5c      	ldr	r3, [pc, #368]	@ (8013864 <HAL_RCC_OscConfig+0x470>)
 80136f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80136f6:	4a5b      	ldr	r2, [pc, #364]	@ (8013864 <HAL_RCC_OscConfig+0x470>)
 80136f8:	f043 0301 	orr.w	r3, r3, #1
 80136fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80136fe:	e00b      	b.n	8013718 <HAL_RCC_OscConfig+0x324>
 8013700:	4b58      	ldr	r3, [pc, #352]	@ (8013864 <HAL_RCC_OscConfig+0x470>)
 8013702:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013704:	4a57      	ldr	r2, [pc, #348]	@ (8013864 <HAL_RCC_OscConfig+0x470>)
 8013706:	f023 0301 	bic.w	r3, r3, #1
 801370a:	6713      	str	r3, [r2, #112]	@ 0x70
 801370c:	4b55      	ldr	r3, [pc, #340]	@ (8013864 <HAL_RCC_OscConfig+0x470>)
 801370e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013710:	4a54      	ldr	r2, [pc, #336]	@ (8013864 <HAL_RCC_OscConfig+0x470>)
 8013712:	f023 0304 	bic.w	r3, r3, #4
 8013716:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	689b      	ldr	r3, [r3, #8]
 801371c:	2b00      	cmp	r3, #0
 801371e:	d015      	beq.n	801374c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013720:	f7fd fb20 	bl	8010d64 <HAL_GetTick>
 8013724:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8013726:	e00a      	b.n	801373e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8013728:	f7fd fb1c 	bl	8010d64 <HAL_GetTick>
 801372c:	4602      	mov	r2, r0
 801372e:	693b      	ldr	r3, [r7, #16]
 8013730:	1ad3      	subs	r3, r2, r3
 8013732:	f241 3288 	movw	r2, #5000	@ 0x1388
 8013736:	4293      	cmp	r3, r2
 8013738:	d901      	bls.n	801373e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 801373a:	2303      	movs	r3, #3
 801373c:	e0cb      	b.n	80138d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801373e:	4b49      	ldr	r3, [pc, #292]	@ (8013864 <HAL_RCC_OscConfig+0x470>)
 8013740:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013742:	f003 0302 	and.w	r3, r3, #2
 8013746:	2b00      	cmp	r3, #0
 8013748:	d0ee      	beq.n	8013728 <HAL_RCC_OscConfig+0x334>
 801374a:	e014      	b.n	8013776 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801374c:	f7fd fb0a 	bl	8010d64 <HAL_GetTick>
 8013750:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8013752:	e00a      	b.n	801376a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8013754:	f7fd fb06 	bl	8010d64 <HAL_GetTick>
 8013758:	4602      	mov	r2, r0
 801375a:	693b      	ldr	r3, [r7, #16]
 801375c:	1ad3      	subs	r3, r2, r3
 801375e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8013762:	4293      	cmp	r3, r2
 8013764:	d901      	bls.n	801376a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8013766:	2303      	movs	r3, #3
 8013768:	e0b5      	b.n	80138d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801376a:	4b3e      	ldr	r3, [pc, #248]	@ (8013864 <HAL_RCC_OscConfig+0x470>)
 801376c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801376e:	f003 0302 	and.w	r3, r3, #2
 8013772:	2b00      	cmp	r3, #0
 8013774:	d1ee      	bne.n	8013754 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8013776:	7dfb      	ldrb	r3, [r7, #23]
 8013778:	2b01      	cmp	r3, #1
 801377a:	d105      	bne.n	8013788 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801377c:	4b39      	ldr	r3, [pc, #228]	@ (8013864 <HAL_RCC_OscConfig+0x470>)
 801377e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013780:	4a38      	ldr	r2, [pc, #224]	@ (8013864 <HAL_RCC_OscConfig+0x470>)
 8013782:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8013786:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	699b      	ldr	r3, [r3, #24]
 801378c:	2b00      	cmp	r3, #0
 801378e:	f000 80a1 	beq.w	80138d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8013792:	4b34      	ldr	r3, [pc, #208]	@ (8013864 <HAL_RCC_OscConfig+0x470>)
 8013794:	689b      	ldr	r3, [r3, #8]
 8013796:	f003 030c 	and.w	r3, r3, #12
 801379a:	2b08      	cmp	r3, #8
 801379c:	d05c      	beq.n	8013858 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	699b      	ldr	r3, [r3, #24]
 80137a2:	2b02      	cmp	r3, #2
 80137a4:	d141      	bne.n	801382a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80137a6:	4b31      	ldr	r3, [pc, #196]	@ (801386c <HAL_RCC_OscConfig+0x478>)
 80137a8:	2200      	movs	r2, #0
 80137aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80137ac:	f7fd fada 	bl	8010d64 <HAL_GetTick>
 80137b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80137b2:	e008      	b.n	80137c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80137b4:	f7fd fad6 	bl	8010d64 <HAL_GetTick>
 80137b8:	4602      	mov	r2, r0
 80137ba:	693b      	ldr	r3, [r7, #16]
 80137bc:	1ad3      	subs	r3, r2, r3
 80137be:	2b02      	cmp	r3, #2
 80137c0:	d901      	bls.n	80137c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80137c2:	2303      	movs	r3, #3
 80137c4:	e087      	b.n	80138d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80137c6:	4b27      	ldr	r3, [pc, #156]	@ (8013864 <HAL_RCC_OscConfig+0x470>)
 80137c8:	681b      	ldr	r3, [r3, #0]
 80137ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80137ce:	2b00      	cmp	r3, #0
 80137d0:	d1f0      	bne.n	80137b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	69da      	ldr	r2, [r3, #28]
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	6a1b      	ldr	r3, [r3, #32]
 80137da:	431a      	orrs	r2, r3
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80137e0:	019b      	lsls	r3, r3, #6
 80137e2:	431a      	orrs	r2, r3
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80137e8:	085b      	lsrs	r3, r3, #1
 80137ea:	3b01      	subs	r3, #1
 80137ec:	041b      	lsls	r3, r3, #16
 80137ee:	431a      	orrs	r2, r3
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80137f4:	061b      	lsls	r3, r3, #24
 80137f6:	491b      	ldr	r1, [pc, #108]	@ (8013864 <HAL_RCC_OscConfig+0x470>)
 80137f8:	4313      	orrs	r3, r2
 80137fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80137fc:	4b1b      	ldr	r3, [pc, #108]	@ (801386c <HAL_RCC_OscConfig+0x478>)
 80137fe:	2201      	movs	r2, #1
 8013800:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013802:	f7fd faaf 	bl	8010d64 <HAL_GetTick>
 8013806:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8013808:	e008      	b.n	801381c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801380a:	f7fd faab 	bl	8010d64 <HAL_GetTick>
 801380e:	4602      	mov	r2, r0
 8013810:	693b      	ldr	r3, [r7, #16]
 8013812:	1ad3      	subs	r3, r2, r3
 8013814:	2b02      	cmp	r3, #2
 8013816:	d901      	bls.n	801381c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8013818:	2303      	movs	r3, #3
 801381a:	e05c      	b.n	80138d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801381c:	4b11      	ldr	r3, [pc, #68]	@ (8013864 <HAL_RCC_OscConfig+0x470>)
 801381e:	681b      	ldr	r3, [r3, #0]
 8013820:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8013824:	2b00      	cmp	r3, #0
 8013826:	d0f0      	beq.n	801380a <HAL_RCC_OscConfig+0x416>
 8013828:	e054      	b.n	80138d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801382a:	4b10      	ldr	r3, [pc, #64]	@ (801386c <HAL_RCC_OscConfig+0x478>)
 801382c:	2200      	movs	r2, #0
 801382e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013830:	f7fd fa98 	bl	8010d64 <HAL_GetTick>
 8013834:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8013836:	e008      	b.n	801384a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8013838:	f7fd fa94 	bl	8010d64 <HAL_GetTick>
 801383c:	4602      	mov	r2, r0
 801383e:	693b      	ldr	r3, [r7, #16]
 8013840:	1ad3      	subs	r3, r2, r3
 8013842:	2b02      	cmp	r3, #2
 8013844:	d901      	bls.n	801384a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8013846:	2303      	movs	r3, #3
 8013848:	e045      	b.n	80138d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801384a:	4b06      	ldr	r3, [pc, #24]	@ (8013864 <HAL_RCC_OscConfig+0x470>)
 801384c:	681b      	ldr	r3, [r3, #0]
 801384e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8013852:	2b00      	cmp	r3, #0
 8013854:	d1f0      	bne.n	8013838 <HAL_RCC_OscConfig+0x444>
 8013856:	e03d      	b.n	80138d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	699b      	ldr	r3, [r3, #24]
 801385c:	2b01      	cmp	r3, #1
 801385e:	d107      	bne.n	8013870 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8013860:	2301      	movs	r3, #1
 8013862:	e038      	b.n	80138d6 <HAL_RCC_OscConfig+0x4e2>
 8013864:	40023800 	.word	0x40023800
 8013868:	40007000 	.word	0x40007000
 801386c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8013870:	4b1b      	ldr	r3, [pc, #108]	@ (80138e0 <HAL_RCC_OscConfig+0x4ec>)
 8013872:	685b      	ldr	r3, [r3, #4]
 8013874:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	699b      	ldr	r3, [r3, #24]
 801387a:	2b01      	cmp	r3, #1
 801387c:	d028      	beq.n	80138d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801387e:	68fb      	ldr	r3, [r7, #12]
 8013880:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8013888:	429a      	cmp	r2, r3
 801388a:	d121      	bne.n	80138d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801388c:	68fb      	ldr	r3, [r7, #12]
 801388e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8013896:	429a      	cmp	r2, r3
 8013898:	d11a      	bne.n	80138d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801389a:	68fa      	ldr	r2, [r7, #12]
 801389c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80138a0:	4013      	ands	r3, r2
 80138a2:	687a      	ldr	r2, [r7, #4]
 80138a4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80138a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80138a8:	4293      	cmp	r3, r2
 80138aa:	d111      	bne.n	80138d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80138ac:	68fb      	ldr	r3, [r7, #12]
 80138ae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80138b6:	085b      	lsrs	r3, r3, #1
 80138b8:	3b01      	subs	r3, #1
 80138ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80138bc:	429a      	cmp	r2, r3
 80138be:	d107      	bne.n	80138d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80138c0:	68fb      	ldr	r3, [r7, #12]
 80138c2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80138ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80138cc:	429a      	cmp	r2, r3
 80138ce:	d001      	beq.n	80138d4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80138d0:	2301      	movs	r3, #1
 80138d2:	e000      	b.n	80138d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80138d4:	2300      	movs	r3, #0
}
 80138d6:	4618      	mov	r0, r3
 80138d8:	3718      	adds	r7, #24
 80138da:	46bd      	mov	sp, r7
 80138dc:	bd80      	pop	{r7, pc}
 80138de:	bf00      	nop
 80138e0:	40023800 	.word	0x40023800

080138e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80138e4:	b580      	push	{r7, lr}
 80138e6:	b084      	sub	sp, #16
 80138e8:	af00      	add	r7, sp, #0
 80138ea:	6078      	str	r0, [r7, #4]
 80138ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	2b00      	cmp	r3, #0
 80138f2:	d101      	bne.n	80138f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80138f4:	2301      	movs	r3, #1
 80138f6:	e0cc      	b.n	8013a92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80138f8:	4b68      	ldr	r3, [pc, #416]	@ (8013a9c <HAL_RCC_ClockConfig+0x1b8>)
 80138fa:	681b      	ldr	r3, [r3, #0]
 80138fc:	f003 0307 	and.w	r3, r3, #7
 8013900:	683a      	ldr	r2, [r7, #0]
 8013902:	429a      	cmp	r2, r3
 8013904:	d90c      	bls.n	8013920 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8013906:	4b65      	ldr	r3, [pc, #404]	@ (8013a9c <HAL_RCC_ClockConfig+0x1b8>)
 8013908:	683a      	ldr	r2, [r7, #0]
 801390a:	b2d2      	uxtb	r2, r2
 801390c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801390e:	4b63      	ldr	r3, [pc, #396]	@ (8013a9c <HAL_RCC_ClockConfig+0x1b8>)
 8013910:	681b      	ldr	r3, [r3, #0]
 8013912:	f003 0307 	and.w	r3, r3, #7
 8013916:	683a      	ldr	r2, [r7, #0]
 8013918:	429a      	cmp	r2, r3
 801391a:	d001      	beq.n	8013920 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 801391c:	2301      	movs	r3, #1
 801391e:	e0b8      	b.n	8013a92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	681b      	ldr	r3, [r3, #0]
 8013924:	f003 0302 	and.w	r3, r3, #2
 8013928:	2b00      	cmp	r3, #0
 801392a:	d020      	beq.n	801396e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	681b      	ldr	r3, [r3, #0]
 8013930:	f003 0304 	and.w	r3, r3, #4
 8013934:	2b00      	cmp	r3, #0
 8013936:	d005      	beq.n	8013944 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8013938:	4b59      	ldr	r3, [pc, #356]	@ (8013aa0 <HAL_RCC_ClockConfig+0x1bc>)
 801393a:	689b      	ldr	r3, [r3, #8]
 801393c:	4a58      	ldr	r2, [pc, #352]	@ (8013aa0 <HAL_RCC_ClockConfig+0x1bc>)
 801393e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8013942:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	681b      	ldr	r3, [r3, #0]
 8013948:	f003 0308 	and.w	r3, r3, #8
 801394c:	2b00      	cmp	r3, #0
 801394e:	d005      	beq.n	801395c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8013950:	4b53      	ldr	r3, [pc, #332]	@ (8013aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8013952:	689b      	ldr	r3, [r3, #8]
 8013954:	4a52      	ldr	r2, [pc, #328]	@ (8013aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8013956:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 801395a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801395c:	4b50      	ldr	r3, [pc, #320]	@ (8013aa0 <HAL_RCC_ClockConfig+0x1bc>)
 801395e:	689b      	ldr	r3, [r3, #8]
 8013960:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	689b      	ldr	r3, [r3, #8]
 8013968:	494d      	ldr	r1, [pc, #308]	@ (8013aa0 <HAL_RCC_ClockConfig+0x1bc>)
 801396a:	4313      	orrs	r3, r2
 801396c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	681b      	ldr	r3, [r3, #0]
 8013972:	f003 0301 	and.w	r3, r3, #1
 8013976:	2b00      	cmp	r3, #0
 8013978:	d044      	beq.n	8013a04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	685b      	ldr	r3, [r3, #4]
 801397e:	2b01      	cmp	r3, #1
 8013980:	d107      	bne.n	8013992 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8013982:	4b47      	ldr	r3, [pc, #284]	@ (8013aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8013984:	681b      	ldr	r3, [r3, #0]
 8013986:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801398a:	2b00      	cmp	r3, #0
 801398c:	d119      	bne.n	80139c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801398e:	2301      	movs	r3, #1
 8013990:	e07f      	b.n	8013a92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	685b      	ldr	r3, [r3, #4]
 8013996:	2b02      	cmp	r3, #2
 8013998:	d003      	beq.n	80139a2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801399e:	2b03      	cmp	r3, #3
 80139a0:	d107      	bne.n	80139b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80139a2:	4b3f      	ldr	r3, [pc, #252]	@ (8013aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80139a4:	681b      	ldr	r3, [r3, #0]
 80139a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80139aa:	2b00      	cmp	r3, #0
 80139ac:	d109      	bne.n	80139c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80139ae:	2301      	movs	r3, #1
 80139b0:	e06f      	b.n	8013a92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80139b2:	4b3b      	ldr	r3, [pc, #236]	@ (8013aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80139b4:	681b      	ldr	r3, [r3, #0]
 80139b6:	f003 0302 	and.w	r3, r3, #2
 80139ba:	2b00      	cmp	r3, #0
 80139bc:	d101      	bne.n	80139c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80139be:	2301      	movs	r3, #1
 80139c0:	e067      	b.n	8013a92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80139c2:	4b37      	ldr	r3, [pc, #220]	@ (8013aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80139c4:	689b      	ldr	r3, [r3, #8]
 80139c6:	f023 0203 	bic.w	r2, r3, #3
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	685b      	ldr	r3, [r3, #4]
 80139ce:	4934      	ldr	r1, [pc, #208]	@ (8013aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80139d0:	4313      	orrs	r3, r2
 80139d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80139d4:	f7fd f9c6 	bl	8010d64 <HAL_GetTick>
 80139d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80139da:	e00a      	b.n	80139f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80139dc:	f7fd f9c2 	bl	8010d64 <HAL_GetTick>
 80139e0:	4602      	mov	r2, r0
 80139e2:	68fb      	ldr	r3, [r7, #12]
 80139e4:	1ad3      	subs	r3, r2, r3
 80139e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80139ea:	4293      	cmp	r3, r2
 80139ec:	d901      	bls.n	80139f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80139ee:	2303      	movs	r3, #3
 80139f0:	e04f      	b.n	8013a92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80139f2:	4b2b      	ldr	r3, [pc, #172]	@ (8013aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80139f4:	689b      	ldr	r3, [r3, #8]
 80139f6:	f003 020c 	and.w	r2, r3, #12
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	685b      	ldr	r3, [r3, #4]
 80139fe:	009b      	lsls	r3, r3, #2
 8013a00:	429a      	cmp	r2, r3
 8013a02:	d1eb      	bne.n	80139dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8013a04:	4b25      	ldr	r3, [pc, #148]	@ (8013a9c <HAL_RCC_ClockConfig+0x1b8>)
 8013a06:	681b      	ldr	r3, [r3, #0]
 8013a08:	f003 0307 	and.w	r3, r3, #7
 8013a0c:	683a      	ldr	r2, [r7, #0]
 8013a0e:	429a      	cmp	r2, r3
 8013a10:	d20c      	bcs.n	8013a2c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8013a12:	4b22      	ldr	r3, [pc, #136]	@ (8013a9c <HAL_RCC_ClockConfig+0x1b8>)
 8013a14:	683a      	ldr	r2, [r7, #0]
 8013a16:	b2d2      	uxtb	r2, r2
 8013a18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8013a1a:	4b20      	ldr	r3, [pc, #128]	@ (8013a9c <HAL_RCC_ClockConfig+0x1b8>)
 8013a1c:	681b      	ldr	r3, [r3, #0]
 8013a1e:	f003 0307 	and.w	r3, r3, #7
 8013a22:	683a      	ldr	r2, [r7, #0]
 8013a24:	429a      	cmp	r2, r3
 8013a26:	d001      	beq.n	8013a2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8013a28:	2301      	movs	r3, #1
 8013a2a:	e032      	b.n	8013a92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	681b      	ldr	r3, [r3, #0]
 8013a30:	f003 0304 	and.w	r3, r3, #4
 8013a34:	2b00      	cmp	r3, #0
 8013a36:	d008      	beq.n	8013a4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8013a38:	4b19      	ldr	r3, [pc, #100]	@ (8013aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8013a3a:	689b      	ldr	r3, [r3, #8]
 8013a3c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	68db      	ldr	r3, [r3, #12]
 8013a44:	4916      	ldr	r1, [pc, #88]	@ (8013aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8013a46:	4313      	orrs	r3, r2
 8013a48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	681b      	ldr	r3, [r3, #0]
 8013a4e:	f003 0308 	and.w	r3, r3, #8
 8013a52:	2b00      	cmp	r3, #0
 8013a54:	d009      	beq.n	8013a6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8013a56:	4b12      	ldr	r3, [pc, #72]	@ (8013aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8013a58:	689b      	ldr	r3, [r3, #8]
 8013a5a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	691b      	ldr	r3, [r3, #16]
 8013a62:	00db      	lsls	r3, r3, #3
 8013a64:	490e      	ldr	r1, [pc, #56]	@ (8013aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8013a66:	4313      	orrs	r3, r2
 8013a68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8013a6a:	f000 f821 	bl	8013ab0 <HAL_RCC_GetSysClockFreq>
 8013a6e:	4602      	mov	r2, r0
 8013a70:	4b0b      	ldr	r3, [pc, #44]	@ (8013aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8013a72:	689b      	ldr	r3, [r3, #8]
 8013a74:	091b      	lsrs	r3, r3, #4
 8013a76:	f003 030f 	and.w	r3, r3, #15
 8013a7a:	490a      	ldr	r1, [pc, #40]	@ (8013aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8013a7c:	5ccb      	ldrb	r3, [r1, r3]
 8013a7e:	fa22 f303 	lsr.w	r3, r2, r3
 8013a82:	4a09      	ldr	r2, [pc, #36]	@ (8013aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8013a84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8013a86:	4b09      	ldr	r3, [pc, #36]	@ (8013aac <HAL_RCC_ClockConfig+0x1c8>)
 8013a88:	681b      	ldr	r3, [r3, #0]
 8013a8a:	4618      	mov	r0, r3
 8013a8c:	f7fd f926 	bl	8010cdc <HAL_InitTick>

  return HAL_OK;
 8013a90:	2300      	movs	r3, #0
}
 8013a92:	4618      	mov	r0, r3
 8013a94:	3710      	adds	r7, #16
 8013a96:	46bd      	mov	sp, r7
 8013a98:	bd80      	pop	{r7, pc}
 8013a9a:	bf00      	nop
 8013a9c:	40023c00 	.word	0x40023c00
 8013aa0:	40023800 	.word	0x40023800
 8013aa4:	0801814c 	.word	0x0801814c
 8013aa8:	20000000 	.word	0x20000000
 8013aac:	20000004 	.word	0x20000004

08013ab0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8013ab0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013ab4:	b094      	sub	sp, #80	@ 0x50
 8013ab6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8013ab8:	2300      	movs	r3, #0
 8013aba:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8013abc:	2300      	movs	r3, #0
 8013abe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8013ac0:	2300      	movs	r3, #0
 8013ac2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8013ac4:	2300      	movs	r3, #0
 8013ac6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8013ac8:	4b79      	ldr	r3, [pc, #484]	@ (8013cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8013aca:	689b      	ldr	r3, [r3, #8]
 8013acc:	f003 030c 	and.w	r3, r3, #12
 8013ad0:	2b08      	cmp	r3, #8
 8013ad2:	d00d      	beq.n	8013af0 <HAL_RCC_GetSysClockFreq+0x40>
 8013ad4:	2b08      	cmp	r3, #8
 8013ad6:	f200 80e1 	bhi.w	8013c9c <HAL_RCC_GetSysClockFreq+0x1ec>
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	d002      	beq.n	8013ae4 <HAL_RCC_GetSysClockFreq+0x34>
 8013ade:	2b04      	cmp	r3, #4
 8013ae0:	d003      	beq.n	8013aea <HAL_RCC_GetSysClockFreq+0x3a>
 8013ae2:	e0db      	b.n	8013c9c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8013ae4:	4b73      	ldr	r3, [pc, #460]	@ (8013cb4 <HAL_RCC_GetSysClockFreq+0x204>)
 8013ae6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8013ae8:	e0db      	b.n	8013ca2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8013aea:	4b73      	ldr	r3, [pc, #460]	@ (8013cb8 <HAL_RCC_GetSysClockFreq+0x208>)
 8013aec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8013aee:	e0d8      	b.n	8013ca2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8013af0:	4b6f      	ldr	r3, [pc, #444]	@ (8013cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8013af2:	685b      	ldr	r3, [r3, #4]
 8013af4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013af8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8013afa:	4b6d      	ldr	r3, [pc, #436]	@ (8013cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8013afc:	685b      	ldr	r3, [r3, #4]
 8013afe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	d063      	beq.n	8013bce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8013b06:	4b6a      	ldr	r3, [pc, #424]	@ (8013cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8013b08:	685b      	ldr	r3, [r3, #4]
 8013b0a:	099b      	lsrs	r3, r3, #6
 8013b0c:	2200      	movs	r2, #0
 8013b0e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013b10:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8013b12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013b18:	633b      	str	r3, [r7, #48]	@ 0x30
 8013b1a:	2300      	movs	r3, #0
 8013b1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8013b1e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8013b22:	4622      	mov	r2, r4
 8013b24:	462b      	mov	r3, r5
 8013b26:	f04f 0000 	mov.w	r0, #0
 8013b2a:	f04f 0100 	mov.w	r1, #0
 8013b2e:	0159      	lsls	r1, r3, #5
 8013b30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8013b34:	0150      	lsls	r0, r2, #5
 8013b36:	4602      	mov	r2, r0
 8013b38:	460b      	mov	r3, r1
 8013b3a:	4621      	mov	r1, r4
 8013b3c:	1a51      	subs	r1, r2, r1
 8013b3e:	6139      	str	r1, [r7, #16]
 8013b40:	4629      	mov	r1, r5
 8013b42:	eb63 0301 	sbc.w	r3, r3, r1
 8013b46:	617b      	str	r3, [r7, #20]
 8013b48:	f04f 0200 	mov.w	r2, #0
 8013b4c:	f04f 0300 	mov.w	r3, #0
 8013b50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8013b54:	4659      	mov	r1, fp
 8013b56:	018b      	lsls	r3, r1, #6
 8013b58:	4651      	mov	r1, sl
 8013b5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8013b5e:	4651      	mov	r1, sl
 8013b60:	018a      	lsls	r2, r1, #6
 8013b62:	4651      	mov	r1, sl
 8013b64:	ebb2 0801 	subs.w	r8, r2, r1
 8013b68:	4659      	mov	r1, fp
 8013b6a:	eb63 0901 	sbc.w	r9, r3, r1
 8013b6e:	f04f 0200 	mov.w	r2, #0
 8013b72:	f04f 0300 	mov.w	r3, #0
 8013b76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8013b7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8013b7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8013b82:	4690      	mov	r8, r2
 8013b84:	4699      	mov	r9, r3
 8013b86:	4623      	mov	r3, r4
 8013b88:	eb18 0303 	adds.w	r3, r8, r3
 8013b8c:	60bb      	str	r3, [r7, #8]
 8013b8e:	462b      	mov	r3, r5
 8013b90:	eb49 0303 	adc.w	r3, r9, r3
 8013b94:	60fb      	str	r3, [r7, #12]
 8013b96:	f04f 0200 	mov.w	r2, #0
 8013b9a:	f04f 0300 	mov.w	r3, #0
 8013b9e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8013ba2:	4629      	mov	r1, r5
 8013ba4:	024b      	lsls	r3, r1, #9
 8013ba6:	4621      	mov	r1, r4
 8013ba8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8013bac:	4621      	mov	r1, r4
 8013bae:	024a      	lsls	r2, r1, #9
 8013bb0:	4610      	mov	r0, r2
 8013bb2:	4619      	mov	r1, r3
 8013bb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013bb6:	2200      	movs	r2, #0
 8013bb8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013bba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8013bbc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8013bc0:	f7fc fb02 	bl	80101c8 <__aeabi_uldivmod>
 8013bc4:	4602      	mov	r2, r0
 8013bc6:	460b      	mov	r3, r1
 8013bc8:	4613      	mov	r3, r2
 8013bca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013bcc:	e058      	b.n	8013c80 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8013bce:	4b38      	ldr	r3, [pc, #224]	@ (8013cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8013bd0:	685b      	ldr	r3, [r3, #4]
 8013bd2:	099b      	lsrs	r3, r3, #6
 8013bd4:	2200      	movs	r2, #0
 8013bd6:	4618      	mov	r0, r3
 8013bd8:	4611      	mov	r1, r2
 8013bda:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8013bde:	623b      	str	r3, [r7, #32]
 8013be0:	2300      	movs	r3, #0
 8013be2:	627b      	str	r3, [r7, #36]	@ 0x24
 8013be4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8013be8:	4642      	mov	r2, r8
 8013bea:	464b      	mov	r3, r9
 8013bec:	f04f 0000 	mov.w	r0, #0
 8013bf0:	f04f 0100 	mov.w	r1, #0
 8013bf4:	0159      	lsls	r1, r3, #5
 8013bf6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8013bfa:	0150      	lsls	r0, r2, #5
 8013bfc:	4602      	mov	r2, r0
 8013bfe:	460b      	mov	r3, r1
 8013c00:	4641      	mov	r1, r8
 8013c02:	ebb2 0a01 	subs.w	sl, r2, r1
 8013c06:	4649      	mov	r1, r9
 8013c08:	eb63 0b01 	sbc.w	fp, r3, r1
 8013c0c:	f04f 0200 	mov.w	r2, #0
 8013c10:	f04f 0300 	mov.w	r3, #0
 8013c14:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8013c18:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8013c1c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8013c20:	ebb2 040a 	subs.w	r4, r2, sl
 8013c24:	eb63 050b 	sbc.w	r5, r3, fp
 8013c28:	f04f 0200 	mov.w	r2, #0
 8013c2c:	f04f 0300 	mov.w	r3, #0
 8013c30:	00eb      	lsls	r3, r5, #3
 8013c32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8013c36:	00e2      	lsls	r2, r4, #3
 8013c38:	4614      	mov	r4, r2
 8013c3a:	461d      	mov	r5, r3
 8013c3c:	4643      	mov	r3, r8
 8013c3e:	18e3      	adds	r3, r4, r3
 8013c40:	603b      	str	r3, [r7, #0]
 8013c42:	464b      	mov	r3, r9
 8013c44:	eb45 0303 	adc.w	r3, r5, r3
 8013c48:	607b      	str	r3, [r7, #4]
 8013c4a:	f04f 0200 	mov.w	r2, #0
 8013c4e:	f04f 0300 	mov.w	r3, #0
 8013c52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8013c56:	4629      	mov	r1, r5
 8013c58:	028b      	lsls	r3, r1, #10
 8013c5a:	4621      	mov	r1, r4
 8013c5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8013c60:	4621      	mov	r1, r4
 8013c62:	028a      	lsls	r2, r1, #10
 8013c64:	4610      	mov	r0, r2
 8013c66:	4619      	mov	r1, r3
 8013c68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013c6a:	2200      	movs	r2, #0
 8013c6c:	61bb      	str	r3, [r7, #24]
 8013c6e:	61fa      	str	r2, [r7, #28]
 8013c70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8013c74:	f7fc faa8 	bl	80101c8 <__aeabi_uldivmod>
 8013c78:	4602      	mov	r2, r0
 8013c7a:	460b      	mov	r3, r1
 8013c7c:	4613      	mov	r3, r2
 8013c7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8013c80:	4b0b      	ldr	r3, [pc, #44]	@ (8013cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8013c82:	685b      	ldr	r3, [r3, #4]
 8013c84:	0c1b      	lsrs	r3, r3, #16
 8013c86:	f003 0303 	and.w	r3, r3, #3
 8013c8a:	3301      	adds	r3, #1
 8013c8c:	005b      	lsls	r3, r3, #1
 8013c8e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8013c90:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013c92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8013c98:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8013c9a:	e002      	b.n	8013ca2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8013c9c:	4b05      	ldr	r3, [pc, #20]	@ (8013cb4 <HAL_RCC_GetSysClockFreq+0x204>)
 8013c9e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8013ca0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8013ca2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8013ca4:	4618      	mov	r0, r3
 8013ca6:	3750      	adds	r7, #80	@ 0x50
 8013ca8:	46bd      	mov	sp, r7
 8013caa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8013cae:	bf00      	nop
 8013cb0:	40023800 	.word	0x40023800
 8013cb4:	00f42400 	.word	0x00f42400
 8013cb8:	007a1200 	.word	0x007a1200

08013cbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8013cbc:	b480      	push	{r7}
 8013cbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8013cc0:	4b03      	ldr	r3, [pc, #12]	@ (8013cd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8013cc2:	681b      	ldr	r3, [r3, #0]
}
 8013cc4:	4618      	mov	r0, r3
 8013cc6:	46bd      	mov	sp, r7
 8013cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ccc:	4770      	bx	lr
 8013cce:	bf00      	nop
 8013cd0:	20000000 	.word	0x20000000

08013cd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8013cd4:	b580      	push	{r7, lr}
 8013cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8013cd8:	f7ff fff0 	bl	8013cbc <HAL_RCC_GetHCLKFreq>
 8013cdc:	4602      	mov	r2, r0
 8013cde:	4b05      	ldr	r3, [pc, #20]	@ (8013cf4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8013ce0:	689b      	ldr	r3, [r3, #8]
 8013ce2:	0a9b      	lsrs	r3, r3, #10
 8013ce4:	f003 0307 	and.w	r3, r3, #7
 8013ce8:	4903      	ldr	r1, [pc, #12]	@ (8013cf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8013cea:	5ccb      	ldrb	r3, [r1, r3]
 8013cec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8013cf0:	4618      	mov	r0, r3
 8013cf2:	bd80      	pop	{r7, pc}
 8013cf4:	40023800 	.word	0x40023800
 8013cf8:	0801815c 	.word	0x0801815c

08013cfc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8013cfc:	b580      	push	{r7, lr}
 8013cfe:	b086      	sub	sp, #24
 8013d00:	af00      	add	r7, sp, #0
 8013d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8013d04:	2300      	movs	r3, #0
 8013d06:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8013d08:	2300      	movs	r3, #0
 8013d0a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	681b      	ldr	r3, [r3, #0]
 8013d10:	f003 0301 	and.w	r3, r3, #1
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	d105      	bne.n	8013d24 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8013d18:	687b      	ldr	r3, [r7, #4]
 8013d1a:	681b      	ldr	r3, [r3, #0]
 8013d1c:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	d035      	beq.n	8013d90 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8013d24:	4b62      	ldr	r3, [pc, #392]	@ (8013eb0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8013d26:	2200      	movs	r2, #0
 8013d28:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8013d2a:	f7fd f81b 	bl	8010d64 <HAL_GetTick>
 8013d2e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8013d30:	e008      	b.n	8013d44 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8013d32:	f7fd f817 	bl	8010d64 <HAL_GetTick>
 8013d36:	4602      	mov	r2, r0
 8013d38:	697b      	ldr	r3, [r7, #20]
 8013d3a:	1ad3      	subs	r3, r2, r3
 8013d3c:	2b02      	cmp	r3, #2
 8013d3e:	d901      	bls.n	8013d44 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8013d40:	2303      	movs	r3, #3
 8013d42:	e0b0      	b.n	8013ea6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8013d44:	4b5b      	ldr	r3, [pc, #364]	@ (8013eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8013d46:	681b      	ldr	r3, [r3, #0]
 8013d48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013d4c:	2b00      	cmp	r3, #0
 8013d4e:	d1f0      	bne.n	8013d32 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	685b      	ldr	r3, [r3, #4]
 8013d54:	019a      	lsls	r2, r3, #6
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	689b      	ldr	r3, [r3, #8]
 8013d5a:	071b      	lsls	r3, r3, #28
 8013d5c:	4955      	ldr	r1, [pc, #340]	@ (8013eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8013d5e:	4313      	orrs	r3, r2
 8013d60:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8013d64:	4b52      	ldr	r3, [pc, #328]	@ (8013eb0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8013d66:	2201      	movs	r2, #1
 8013d68:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8013d6a:	f7fc fffb 	bl	8010d64 <HAL_GetTick>
 8013d6e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8013d70:	e008      	b.n	8013d84 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8013d72:	f7fc fff7 	bl	8010d64 <HAL_GetTick>
 8013d76:	4602      	mov	r2, r0
 8013d78:	697b      	ldr	r3, [r7, #20]
 8013d7a:	1ad3      	subs	r3, r2, r3
 8013d7c:	2b02      	cmp	r3, #2
 8013d7e:	d901      	bls.n	8013d84 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8013d80:	2303      	movs	r3, #3
 8013d82:	e090      	b.n	8013ea6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8013d84:	4b4b      	ldr	r3, [pc, #300]	@ (8013eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8013d86:	681b      	ldr	r3, [r3, #0]
 8013d88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013d8c:	2b00      	cmp	r3, #0
 8013d8e:	d0f0      	beq.n	8013d72 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8013d90:	687b      	ldr	r3, [r7, #4]
 8013d92:	681b      	ldr	r3, [r3, #0]
 8013d94:	f003 0302 	and.w	r3, r3, #2
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	f000 8083 	beq.w	8013ea4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8013d9e:	2300      	movs	r3, #0
 8013da0:	60fb      	str	r3, [r7, #12]
 8013da2:	4b44      	ldr	r3, [pc, #272]	@ (8013eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8013da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013da6:	4a43      	ldr	r2, [pc, #268]	@ (8013eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8013da8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8013dac:	6413      	str	r3, [r2, #64]	@ 0x40
 8013dae:	4b41      	ldr	r3, [pc, #260]	@ (8013eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8013db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013db2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8013db6:	60fb      	str	r3, [r7, #12]
 8013db8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8013dba:	4b3f      	ldr	r3, [pc, #252]	@ (8013eb8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8013dbc:	681b      	ldr	r3, [r3, #0]
 8013dbe:	4a3e      	ldr	r2, [pc, #248]	@ (8013eb8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8013dc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8013dc4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8013dc6:	f7fc ffcd 	bl	8010d64 <HAL_GetTick>
 8013dca:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8013dcc:	e008      	b.n	8013de0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8013dce:	f7fc ffc9 	bl	8010d64 <HAL_GetTick>
 8013dd2:	4602      	mov	r2, r0
 8013dd4:	697b      	ldr	r3, [r7, #20]
 8013dd6:	1ad3      	subs	r3, r2, r3
 8013dd8:	2b02      	cmp	r3, #2
 8013dda:	d901      	bls.n	8013de0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8013ddc:	2303      	movs	r3, #3
 8013dde:	e062      	b.n	8013ea6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8013de0:	4b35      	ldr	r3, [pc, #212]	@ (8013eb8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8013de2:	681b      	ldr	r3, [r3, #0]
 8013de4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013de8:	2b00      	cmp	r3, #0
 8013dea:	d0f0      	beq.n	8013dce <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8013dec:	4b31      	ldr	r3, [pc, #196]	@ (8013eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8013dee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013df0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8013df4:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8013df6:	693b      	ldr	r3, [r7, #16]
 8013df8:	2b00      	cmp	r3, #0
 8013dfa:	d02f      	beq.n	8013e5c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	68db      	ldr	r3, [r3, #12]
 8013e00:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8013e04:	693a      	ldr	r2, [r7, #16]
 8013e06:	429a      	cmp	r2, r3
 8013e08:	d028      	beq.n	8013e5c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8013e0a:	4b2a      	ldr	r3, [pc, #168]	@ (8013eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8013e0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013e0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8013e12:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8013e14:	4b29      	ldr	r3, [pc, #164]	@ (8013ebc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8013e16:	2201      	movs	r2, #1
 8013e18:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8013e1a:	4b28      	ldr	r3, [pc, #160]	@ (8013ebc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8013e1c:	2200      	movs	r2, #0
 8013e1e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8013e20:	4a24      	ldr	r2, [pc, #144]	@ (8013eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8013e22:	693b      	ldr	r3, [r7, #16]
 8013e24:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8013e26:	4b23      	ldr	r3, [pc, #140]	@ (8013eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8013e28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013e2a:	f003 0301 	and.w	r3, r3, #1
 8013e2e:	2b01      	cmp	r3, #1
 8013e30:	d114      	bne.n	8013e5c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8013e32:	f7fc ff97 	bl	8010d64 <HAL_GetTick>
 8013e36:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8013e38:	e00a      	b.n	8013e50 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8013e3a:	f7fc ff93 	bl	8010d64 <HAL_GetTick>
 8013e3e:	4602      	mov	r2, r0
 8013e40:	697b      	ldr	r3, [r7, #20]
 8013e42:	1ad3      	subs	r3, r2, r3
 8013e44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8013e48:	4293      	cmp	r3, r2
 8013e4a:	d901      	bls.n	8013e50 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8013e4c:	2303      	movs	r3, #3
 8013e4e:	e02a      	b.n	8013ea6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8013e50:	4b18      	ldr	r3, [pc, #96]	@ (8013eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8013e52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013e54:	f003 0302 	and.w	r3, r3, #2
 8013e58:	2b00      	cmp	r3, #0
 8013e5a:	d0ee      	beq.n	8013e3a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	68db      	ldr	r3, [r3, #12]
 8013e60:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8013e64:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8013e68:	d10d      	bne.n	8013e86 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8013e6a:	4b12      	ldr	r3, [pc, #72]	@ (8013eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8013e6c:	689b      	ldr	r3, [r3, #8]
 8013e6e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	68db      	ldr	r3, [r3, #12]
 8013e76:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8013e7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8013e7e:	490d      	ldr	r1, [pc, #52]	@ (8013eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8013e80:	4313      	orrs	r3, r2
 8013e82:	608b      	str	r3, [r1, #8]
 8013e84:	e005      	b.n	8013e92 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8013e86:	4b0b      	ldr	r3, [pc, #44]	@ (8013eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8013e88:	689b      	ldr	r3, [r3, #8]
 8013e8a:	4a0a      	ldr	r2, [pc, #40]	@ (8013eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8013e8c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8013e90:	6093      	str	r3, [r2, #8]
 8013e92:	4b08      	ldr	r3, [pc, #32]	@ (8013eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8013e94:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	68db      	ldr	r3, [r3, #12]
 8013e9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013e9e:	4905      	ldr	r1, [pc, #20]	@ (8013eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8013ea0:	4313      	orrs	r3, r2
 8013ea2:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8013ea4:	2300      	movs	r3, #0
}
 8013ea6:	4618      	mov	r0, r3
 8013ea8:	3718      	adds	r7, #24
 8013eaa:	46bd      	mov	sp, r7
 8013eac:	bd80      	pop	{r7, pc}
 8013eae:	bf00      	nop
 8013eb0:	42470068 	.word	0x42470068
 8013eb4:	40023800 	.word	0x40023800
 8013eb8:	40007000 	.word	0x40007000
 8013ebc:	42470e40 	.word	0x42470e40

08013ec0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8013ec0:	b480      	push	{r7}
 8013ec2:	b087      	sub	sp, #28
 8013ec4:	af00      	add	r7, sp, #0
 8013ec6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8013ec8:	2300      	movs	r3, #0
 8013eca:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8013ecc:	2300      	movs	r3, #0
 8013ece:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8013ed0:	2300      	movs	r3, #0
 8013ed2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8013ed4:	2300      	movs	r3, #0
 8013ed6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	2b01      	cmp	r3, #1
 8013edc:	d13f      	bne.n	8013f5e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8013ede:	4b24      	ldr	r3, [pc, #144]	@ (8013f70 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8013ee0:	689b      	ldr	r3, [r3, #8]
 8013ee2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8013ee6:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8013ee8:	68fb      	ldr	r3, [r7, #12]
 8013eea:	2b00      	cmp	r3, #0
 8013eec:	d006      	beq.n	8013efc <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8013eee:	68fb      	ldr	r3, [r7, #12]
 8013ef0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8013ef4:	d12f      	bne.n	8013f56 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8013ef6:	4b1f      	ldr	r3, [pc, #124]	@ (8013f74 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8013ef8:	617b      	str	r3, [r7, #20]
          break;
 8013efa:	e02f      	b.n	8013f5c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8013efc:	4b1c      	ldr	r3, [pc, #112]	@ (8013f70 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8013efe:	685b      	ldr	r3, [r3, #4]
 8013f00:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8013f04:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8013f08:	d108      	bne.n	8013f1c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8013f0a:	4b19      	ldr	r3, [pc, #100]	@ (8013f70 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8013f0c:	685b      	ldr	r3, [r3, #4]
 8013f0e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013f12:	4a19      	ldr	r2, [pc, #100]	@ (8013f78 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8013f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8013f18:	613b      	str	r3, [r7, #16]
 8013f1a:	e007      	b.n	8013f2c <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8013f1c:	4b14      	ldr	r3, [pc, #80]	@ (8013f70 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8013f1e:	685b      	ldr	r3, [r3, #4]
 8013f20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013f24:	4a15      	ldr	r2, [pc, #84]	@ (8013f7c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8013f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8013f2a:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8013f2c:	4b10      	ldr	r3, [pc, #64]	@ (8013f70 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8013f2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013f32:	099b      	lsrs	r3, r3, #6
 8013f34:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8013f38:	693b      	ldr	r3, [r7, #16]
 8013f3a:	fb02 f303 	mul.w	r3, r2, r3
 8013f3e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8013f40:	4b0b      	ldr	r3, [pc, #44]	@ (8013f70 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8013f42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013f46:	0f1b      	lsrs	r3, r3, #28
 8013f48:	f003 0307 	and.w	r3, r3, #7
 8013f4c:	68ba      	ldr	r2, [r7, #8]
 8013f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8013f52:	617b      	str	r3, [r7, #20]
          break;
 8013f54:	e002      	b.n	8013f5c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8013f56:	2300      	movs	r3, #0
 8013f58:	617b      	str	r3, [r7, #20]
          break;
 8013f5a:	bf00      	nop
        }
      }
      break;
 8013f5c:	e000      	b.n	8013f60 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8013f5e:	bf00      	nop
    }
  }
  return frequency;
 8013f60:	697b      	ldr	r3, [r7, #20]
}
 8013f62:	4618      	mov	r0, r3
 8013f64:	371c      	adds	r7, #28
 8013f66:	46bd      	mov	sp, r7
 8013f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f6c:	4770      	bx	lr
 8013f6e:	bf00      	nop
 8013f70:	40023800 	.word	0x40023800
 8013f74:	00bb8000 	.word	0x00bb8000
 8013f78:	007a1200 	.word	0x007a1200
 8013f7c:	00f42400 	.word	0x00f42400

08013f80 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8013f80:	b580      	push	{r7, lr}
 8013f82:	b082      	sub	sp, #8
 8013f84:	af00      	add	r7, sp, #0
 8013f86:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	2b00      	cmp	r3, #0
 8013f8c:	d101      	bne.n	8013f92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8013f8e:	2301      	movs	r3, #1
 8013f90:	e07b      	b.n	801408a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013f96:	2b00      	cmp	r3, #0
 8013f98:	d108      	bne.n	8013fac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	685b      	ldr	r3, [r3, #4]
 8013f9e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8013fa2:	d009      	beq.n	8013fb8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	2200      	movs	r2, #0
 8013fa8:	61da      	str	r2, [r3, #28]
 8013faa:	e005      	b.n	8013fb8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	2200      	movs	r2, #0
 8013fb0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	2200      	movs	r2, #0
 8013fb6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	2200      	movs	r2, #0
 8013fbc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8013fc4:	b2db      	uxtb	r3, r3
 8013fc6:	2b00      	cmp	r3, #0
 8013fc8:	d106      	bne.n	8013fd8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	2200      	movs	r2, #0
 8013fce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8013fd2:	6878      	ldr	r0, [r7, #4]
 8013fd4:	f7fc fd9e 	bl	8010b14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	2202      	movs	r2, #2
 8013fdc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8013fe0:	687b      	ldr	r3, [r7, #4]
 8013fe2:	681b      	ldr	r3, [r3, #0]
 8013fe4:	681a      	ldr	r2, [r3, #0]
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	681b      	ldr	r3, [r3, #0]
 8013fea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8013fee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	685b      	ldr	r3, [r3, #4]
 8013ff4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	689b      	ldr	r3, [r3, #8]
 8013ffc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8014000:	431a      	orrs	r2, r3
 8014002:	687b      	ldr	r3, [r7, #4]
 8014004:	68db      	ldr	r3, [r3, #12]
 8014006:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801400a:	431a      	orrs	r2, r3
 801400c:	687b      	ldr	r3, [r7, #4]
 801400e:	691b      	ldr	r3, [r3, #16]
 8014010:	f003 0302 	and.w	r3, r3, #2
 8014014:	431a      	orrs	r2, r3
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	695b      	ldr	r3, [r3, #20]
 801401a:	f003 0301 	and.w	r3, r3, #1
 801401e:	431a      	orrs	r2, r3
 8014020:	687b      	ldr	r3, [r7, #4]
 8014022:	699b      	ldr	r3, [r3, #24]
 8014024:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8014028:	431a      	orrs	r2, r3
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	69db      	ldr	r3, [r3, #28]
 801402e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8014032:	431a      	orrs	r2, r3
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	6a1b      	ldr	r3, [r3, #32]
 8014038:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801403c:	ea42 0103 	orr.w	r1, r2, r3
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014044:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	681b      	ldr	r3, [r3, #0]
 801404c:	430a      	orrs	r2, r1
 801404e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	699b      	ldr	r3, [r3, #24]
 8014054:	0c1b      	lsrs	r3, r3, #16
 8014056:	f003 0104 	and.w	r1, r3, #4
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801405e:	f003 0210 	and.w	r2, r3, #16
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	681b      	ldr	r3, [r3, #0]
 8014066:	430a      	orrs	r2, r1
 8014068:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	681b      	ldr	r3, [r3, #0]
 801406e:	69da      	ldr	r2, [r3, #28]
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	681b      	ldr	r3, [r3, #0]
 8014074:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8014078:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	2200      	movs	r2, #0
 801407e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8014080:	687b      	ldr	r3, [r7, #4]
 8014082:	2201      	movs	r2, #1
 8014084:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8014088:	2300      	movs	r3, #0
}
 801408a:	4618      	mov	r0, r3
 801408c:	3708      	adds	r7, #8
 801408e:	46bd      	mov	sp, r7
 8014090:	bd80      	pop	{r7, pc}

08014092 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8014092:	b084      	sub	sp, #16
 8014094:	b580      	push	{r7, lr}
 8014096:	b084      	sub	sp, #16
 8014098:	af00      	add	r7, sp, #0
 801409a:	6078      	str	r0, [r7, #4]
 801409c:	f107 001c 	add.w	r0, r7, #28
 80140a0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80140a4:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80140a8:	2b01      	cmp	r3, #1
 80140aa:	d123      	bne.n	80140f4 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80140b0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80140b4:	687b      	ldr	r3, [r7, #4]
 80140b6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	68db      	ldr	r3, [r3, #12]
 80140bc:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80140c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80140c4:	687a      	ldr	r2, [r7, #4]
 80140c6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80140c8:	687b      	ldr	r3, [r7, #4]
 80140ca:	68db      	ldr	r3, [r3, #12]
 80140cc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80140d4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80140d8:	2b01      	cmp	r3, #1
 80140da:	d105      	bne.n	80140e8 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80140dc:	687b      	ldr	r3, [r7, #4]
 80140de:	68db      	ldr	r3, [r3, #12]
 80140e0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80140e8:	6878      	ldr	r0, [r7, #4]
 80140ea:	f001 fae9 	bl	80156c0 <USB_CoreReset>
 80140ee:	4603      	mov	r3, r0
 80140f0:	73fb      	strb	r3, [r7, #15]
 80140f2:	e01b      	b.n	801412c <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	68db      	ldr	r3, [r3, #12]
 80140f8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8014100:	6878      	ldr	r0, [r7, #4]
 8014102:	f001 fadd 	bl	80156c0 <USB_CoreReset>
 8014106:	4603      	mov	r3, r0
 8014108:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 801410a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 801410e:	2b00      	cmp	r3, #0
 8014110:	d106      	bne.n	8014120 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014116:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	639a      	str	r2, [r3, #56]	@ 0x38
 801411e:	e005      	b.n	801412c <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8014120:	687b      	ldr	r3, [r7, #4]
 8014122:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014124:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 801412c:	7fbb      	ldrb	r3, [r7, #30]
 801412e:	2b01      	cmp	r3, #1
 8014130:	d10b      	bne.n	801414a <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	689b      	ldr	r3, [r3, #8]
 8014136:	f043 0206 	orr.w	r2, r3, #6
 801413a:	687b      	ldr	r3, [r7, #4]
 801413c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 801413e:	687b      	ldr	r3, [r7, #4]
 8014140:	689b      	ldr	r3, [r3, #8]
 8014142:	f043 0220 	orr.w	r2, r3, #32
 8014146:	687b      	ldr	r3, [r7, #4]
 8014148:	609a      	str	r2, [r3, #8]
  }

  return ret;
 801414a:	7bfb      	ldrb	r3, [r7, #15]
}
 801414c:	4618      	mov	r0, r3
 801414e:	3710      	adds	r7, #16
 8014150:	46bd      	mov	sp, r7
 8014152:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8014156:	b004      	add	sp, #16
 8014158:	4770      	bx	lr
	...

0801415c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 801415c:	b480      	push	{r7}
 801415e:	b087      	sub	sp, #28
 8014160:	af00      	add	r7, sp, #0
 8014162:	60f8      	str	r0, [r7, #12]
 8014164:	60b9      	str	r1, [r7, #8]
 8014166:	4613      	mov	r3, r2
 8014168:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 801416a:	79fb      	ldrb	r3, [r7, #7]
 801416c:	2b02      	cmp	r3, #2
 801416e:	d165      	bne.n	801423c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8014170:	68bb      	ldr	r3, [r7, #8]
 8014172:	4a41      	ldr	r2, [pc, #260]	@ (8014278 <USB_SetTurnaroundTime+0x11c>)
 8014174:	4293      	cmp	r3, r2
 8014176:	d906      	bls.n	8014186 <USB_SetTurnaroundTime+0x2a>
 8014178:	68bb      	ldr	r3, [r7, #8]
 801417a:	4a40      	ldr	r2, [pc, #256]	@ (801427c <USB_SetTurnaroundTime+0x120>)
 801417c:	4293      	cmp	r3, r2
 801417e:	d202      	bcs.n	8014186 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8014180:	230f      	movs	r3, #15
 8014182:	617b      	str	r3, [r7, #20]
 8014184:	e062      	b.n	801424c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8014186:	68bb      	ldr	r3, [r7, #8]
 8014188:	4a3c      	ldr	r2, [pc, #240]	@ (801427c <USB_SetTurnaroundTime+0x120>)
 801418a:	4293      	cmp	r3, r2
 801418c:	d306      	bcc.n	801419c <USB_SetTurnaroundTime+0x40>
 801418e:	68bb      	ldr	r3, [r7, #8]
 8014190:	4a3b      	ldr	r2, [pc, #236]	@ (8014280 <USB_SetTurnaroundTime+0x124>)
 8014192:	4293      	cmp	r3, r2
 8014194:	d202      	bcs.n	801419c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8014196:	230e      	movs	r3, #14
 8014198:	617b      	str	r3, [r7, #20]
 801419a:	e057      	b.n	801424c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 801419c:	68bb      	ldr	r3, [r7, #8]
 801419e:	4a38      	ldr	r2, [pc, #224]	@ (8014280 <USB_SetTurnaroundTime+0x124>)
 80141a0:	4293      	cmp	r3, r2
 80141a2:	d306      	bcc.n	80141b2 <USB_SetTurnaroundTime+0x56>
 80141a4:	68bb      	ldr	r3, [r7, #8]
 80141a6:	4a37      	ldr	r2, [pc, #220]	@ (8014284 <USB_SetTurnaroundTime+0x128>)
 80141a8:	4293      	cmp	r3, r2
 80141aa:	d202      	bcs.n	80141b2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80141ac:	230d      	movs	r3, #13
 80141ae:	617b      	str	r3, [r7, #20]
 80141b0:	e04c      	b.n	801424c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80141b2:	68bb      	ldr	r3, [r7, #8]
 80141b4:	4a33      	ldr	r2, [pc, #204]	@ (8014284 <USB_SetTurnaroundTime+0x128>)
 80141b6:	4293      	cmp	r3, r2
 80141b8:	d306      	bcc.n	80141c8 <USB_SetTurnaroundTime+0x6c>
 80141ba:	68bb      	ldr	r3, [r7, #8]
 80141bc:	4a32      	ldr	r2, [pc, #200]	@ (8014288 <USB_SetTurnaroundTime+0x12c>)
 80141be:	4293      	cmp	r3, r2
 80141c0:	d802      	bhi.n	80141c8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80141c2:	230c      	movs	r3, #12
 80141c4:	617b      	str	r3, [r7, #20]
 80141c6:	e041      	b.n	801424c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80141c8:	68bb      	ldr	r3, [r7, #8]
 80141ca:	4a2f      	ldr	r2, [pc, #188]	@ (8014288 <USB_SetTurnaroundTime+0x12c>)
 80141cc:	4293      	cmp	r3, r2
 80141ce:	d906      	bls.n	80141de <USB_SetTurnaroundTime+0x82>
 80141d0:	68bb      	ldr	r3, [r7, #8]
 80141d2:	4a2e      	ldr	r2, [pc, #184]	@ (801428c <USB_SetTurnaroundTime+0x130>)
 80141d4:	4293      	cmp	r3, r2
 80141d6:	d802      	bhi.n	80141de <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80141d8:	230b      	movs	r3, #11
 80141da:	617b      	str	r3, [r7, #20]
 80141dc:	e036      	b.n	801424c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80141de:	68bb      	ldr	r3, [r7, #8]
 80141e0:	4a2a      	ldr	r2, [pc, #168]	@ (801428c <USB_SetTurnaroundTime+0x130>)
 80141e2:	4293      	cmp	r3, r2
 80141e4:	d906      	bls.n	80141f4 <USB_SetTurnaroundTime+0x98>
 80141e6:	68bb      	ldr	r3, [r7, #8]
 80141e8:	4a29      	ldr	r2, [pc, #164]	@ (8014290 <USB_SetTurnaroundTime+0x134>)
 80141ea:	4293      	cmp	r3, r2
 80141ec:	d802      	bhi.n	80141f4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80141ee:	230a      	movs	r3, #10
 80141f0:	617b      	str	r3, [r7, #20]
 80141f2:	e02b      	b.n	801424c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80141f4:	68bb      	ldr	r3, [r7, #8]
 80141f6:	4a26      	ldr	r2, [pc, #152]	@ (8014290 <USB_SetTurnaroundTime+0x134>)
 80141f8:	4293      	cmp	r3, r2
 80141fa:	d906      	bls.n	801420a <USB_SetTurnaroundTime+0xae>
 80141fc:	68bb      	ldr	r3, [r7, #8]
 80141fe:	4a25      	ldr	r2, [pc, #148]	@ (8014294 <USB_SetTurnaroundTime+0x138>)
 8014200:	4293      	cmp	r3, r2
 8014202:	d202      	bcs.n	801420a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8014204:	2309      	movs	r3, #9
 8014206:	617b      	str	r3, [r7, #20]
 8014208:	e020      	b.n	801424c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 801420a:	68bb      	ldr	r3, [r7, #8]
 801420c:	4a21      	ldr	r2, [pc, #132]	@ (8014294 <USB_SetTurnaroundTime+0x138>)
 801420e:	4293      	cmp	r3, r2
 8014210:	d306      	bcc.n	8014220 <USB_SetTurnaroundTime+0xc4>
 8014212:	68bb      	ldr	r3, [r7, #8]
 8014214:	4a20      	ldr	r2, [pc, #128]	@ (8014298 <USB_SetTurnaroundTime+0x13c>)
 8014216:	4293      	cmp	r3, r2
 8014218:	d802      	bhi.n	8014220 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 801421a:	2308      	movs	r3, #8
 801421c:	617b      	str	r3, [r7, #20]
 801421e:	e015      	b.n	801424c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8014220:	68bb      	ldr	r3, [r7, #8]
 8014222:	4a1d      	ldr	r2, [pc, #116]	@ (8014298 <USB_SetTurnaroundTime+0x13c>)
 8014224:	4293      	cmp	r3, r2
 8014226:	d906      	bls.n	8014236 <USB_SetTurnaroundTime+0xda>
 8014228:	68bb      	ldr	r3, [r7, #8]
 801422a:	4a1c      	ldr	r2, [pc, #112]	@ (801429c <USB_SetTurnaroundTime+0x140>)
 801422c:	4293      	cmp	r3, r2
 801422e:	d202      	bcs.n	8014236 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8014230:	2307      	movs	r3, #7
 8014232:	617b      	str	r3, [r7, #20]
 8014234:	e00a      	b.n	801424c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8014236:	2306      	movs	r3, #6
 8014238:	617b      	str	r3, [r7, #20]
 801423a:	e007      	b.n	801424c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 801423c:	79fb      	ldrb	r3, [r7, #7]
 801423e:	2b00      	cmp	r3, #0
 8014240:	d102      	bne.n	8014248 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8014242:	2309      	movs	r3, #9
 8014244:	617b      	str	r3, [r7, #20]
 8014246:	e001      	b.n	801424c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8014248:	2309      	movs	r3, #9
 801424a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 801424c:	68fb      	ldr	r3, [r7, #12]
 801424e:	68db      	ldr	r3, [r3, #12]
 8014250:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8014254:	68fb      	ldr	r3, [r7, #12]
 8014256:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8014258:	68fb      	ldr	r3, [r7, #12]
 801425a:	68da      	ldr	r2, [r3, #12]
 801425c:	697b      	ldr	r3, [r7, #20]
 801425e:	029b      	lsls	r3, r3, #10
 8014260:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8014264:	431a      	orrs	r2, r3
 8014266:	68fb      	ldr	r3, [r7, #12]
 8014268:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801426a:	2300      	movs	r3, #0
}
 801426c:	4618      	mov	r0, r3
 801426e:	371c      	adds	r7, #28
 8014270:	46bd      	mov	sp, r7
 8014272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014276:	4770      	bx	lr
 8014278:	00d8acbf 	.word	0x00d8acbf
 801427c:	00e4e1c0 	.word	0x00e4e1c0
 8014280:	00f42400 	.word	0x00f42400
 8014284:	01067380 	.word	0x01067380
 8014288:	011a499f 	.word	0x011a499f
 801428c:	01312cff 	.word	0x01312cff
 8014290:	014ca43f 	.word	0x014ca43f
 8014294:	016e3600 	.word	0x016e3600
 8014298:	01a6ab1f 	.word	0x01a6ab1f
 801429c:	01e84800 	.word	0x01e84800

080142a0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80142a0:	b480      	push	{r7}
 80142a2:	b083      	sub	sp, #12
 80142a4:	af00      	add	r7, sp, #0
 80142a6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	689b      	ldr	r3, [r3, #8]
 80142ac:	f043 0201 	orr.w	r2, r3, #1
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80142b4:	2300      	movs	r3, #0
}
 80142b6:	4618      	mov	r0, r3
 80142b8:	370c      	adds	r7, #12
 80142ba:	46bd      	mov	sp, r7
 80142bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142c0:	4770      	bx	lr

080142c2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80142c2:	b480      	push	{r7}
 80142c4:	b083      	sub	sp, #12
 80142c6:	af00      	add	r7, sp, #0
 80142c8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	689b      	ldr	r3, [r3, #8]
 80142ce:	f023 0201 	bic.w	r2, r3, #1
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80142d6:	2300      	movs	r3, #0
}
 80142d8:	4618      	mov	r0, r3
 80142da:	370c      	adds	r7, #12
 80142dc:	46bd      	mov	sp, r7
 80142de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142e2:	4770      	bx	lr

080142e4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80142e4:	b580      	push	{r7, lr}
 80142e6:	b084      	sub	sp, #16
 80142e8:	af00      	add	r7, sp, #0
 80142ea:	6078      	str	r0, [r7, #4]
 80142ec:	460b      	mov	r3, r1
 80142ee:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80142f0:	2300      	movs	r3, #0
 80142f2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	68db      	ldr	r3, [r3, #12]
 80142f8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8014300:	78fb      	ldrb	r3, [r7, #3]
 8014302:	2b01      	cmp	r3, #1
 8014304:	d115      	bne.n	8014332 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8014306:	687b      	ldr	r3, [r7, #4]
 8014308:	68db      	ldr	r3, [r3, #12]
 801430a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8014312:	200a      	movs	r0, #10
 8014314:	f7fc fd32 	bl	8010d7c <HAL_Delay>
      ms += 10U;
 8014318:	68fb      	ldr	r3, [r7, #12]
 801431a:	330a      	adds	r3, #10
 801431c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 801431e:	6878      	ldr	r0, [r7, #4]
 8014320:	f001 f93f 	bl	80155a2 <USB_GetMode>
 8014324:	4603      	mov	r3, r0
 8014326:	2b01      	cmp	r3, #1
 8014328:	d01e      	beq.n	8014368 <USB_SetCurrentMode+0x84>
 801432a:	68fb      	ldr	r3, [r7, #12]
 801432c:	2bc7      	cmp	r3, #199	@ 0xc7
 801432e:	d9f0      	bls.n	8014312 <USB_SetCurrentMode+0x2e>
 8014330:	e01a      	b.n	8014368 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8014332:	78fb      	ldrb	r3, [r7, #3]
 8014334:	2b00      	cmp	r3, #0
 8014336:	d115      	bne.n	8014364 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	68db      	ldr	r3, [r3, #12]
 801433c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8014344:	200a      	movs	r0, #10
 8014346:	f7fc fd19 	bl	8010d7c <HAL_Delay>
      ms += 10U;
 801434a:	68fb      	ldr	r3, [r7, #12]
 801434c:	330a      	adds	r3, #10
 801434e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8014350:	6878      	ldr	r0, [r7, #4]
 8014352:	f001 f926 	bl	80155a2 <USB_GetMode>
 8014356:	4603      	mov	r3, r0
 8014358:	2b00      	cmp	r3, #0
 801435a:	d005      	beq.n	8014368 <USB_SetCurrentMode+0x84>
 801435c:	68fb      	ldr	r3, [r7, #12]
 801435e:	2bc7      	cmp	r3, #199	@ 0xc7
 8014360:	d9f0      	bls.n	8014344 <USB_SetCurrentMode+0x60>
 8014362:	e001      	b.n	8014368 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8014364:	2301      	movs	r3, #1
 8014366:	e005      	b.n	8014374 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8014368:	68fb      	ldr	r3, [r7, #12]
 801436a:	2bc8      	cmp	r3, #200	@ 0xc8
 801436c:	d101      	bne.n	8014372 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 801436e:	2301      	movs	r3, #1
 8014370:	e000      	b.n	8014374 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8014372:	2300      	movs	r3, #0
}
 8014374:	4618      	mov	r0, r3
 8014376:	3710      	adds	r7, #16
 8014378:	46bd      	mov	sp, r7
 801437a:	bd80      	pop	{r7, pc}

0801437c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801437c:	b084      	sub	sp, #16
 801437e:	b580      	push	{r7, lr}
 8014380:	b086      	sub	sp, #24
 8014382:	af00      	add	r7, sp, #0
 8014384:	6078      	str	r0, [r7, #4]
 8014386:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 801438a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801438e:	2300      	movs	r3, #0
 8014390:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014392:	687b      	ldr	r3, [r7, #4]
 8014394:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8014396:	2300      	movs	r3, #0
 8014398:	613b      	str	r3, [r7, #16]
 801439a:	e009      	b.n	80143b0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 801439c:	687a      	ldr	r2, [r7, #4]
 801439e:	693b      	ldr	r3, [r7, #16]
 80143a0:	3340      	adds	r3, #64	@ 0x40
 80143a2:	009b      	lsls	r3, r3, #2
 80143a4:	4413      	add	r3, r2
 80143a6:	2200      	movs	r2, #0
 80143a8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80143aa:	693b      	ldr	r3, [r7, #16]
 80143ac:	3301      	adds	r3, #1
 80143ae:	613b      	str	r3, [r7, #16]
 80143b0:	693b      	ldr	r3, [r7, #16]
 80143b2:	2b0e      	cmp	r3, #14
 80143b4:	d9f2      	bls.n	801439c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80143b6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	d11c      	bne.n	80143f8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80143be:	68fb      	ldr	r3, [r7, #12]
 80143c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80143c4:	685b      	ldr	r3, [r3, #4]
 80143c6:	68fa      	ldr	r2, [r7, #12]
 80143c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80143cc:	f043 0302 	orr.w	r3, r3, #2
 80143d0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80143d2:	687b      	ldr	r3, [r7, #4]
 80143d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80143d6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80143e2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80143ee:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	639a      	str	r2, [r3, #56]	@ 0x38
 80143f6:	e00b      	b.n	8014410 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80143fc:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8014404:	687b      	ldr	r3, [r7, #4]
 8014406:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014408:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 801440c:	687b      	ldr	r3, [r7, #4]
 801440e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8014410:	68fb      	ldr	r3, [r7, #12]
 8014412:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8014416:	461a      	mov	r2, r3
 8014418:	2300      	movs	r3, #0
 801441a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801441c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8014420:	2b01      	cmp	r3, #1
 8014422:	d10d      	bne.n	8014440 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8014424:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014428:	2b00      	cmp	r3, #0
 801442a:	d104      	bne.n	8014436 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 801442c:	2100      	movs	r1, #0
 801442e:	6878      	ldr	r0, [r7, #4]
 8014430:	f000 f968 	bl	8014704 <USB_SetDevSpeed>
 8014434:	e008      	b.n	8014448 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8014436:	2101      	movs	r1, #1
 8014438:	6878      	ldr	r0, [r7, #4]
 801443a:	f000 f963 	bl	8014704 <USB_SetDevSpeed>
 801443e:	e003      	b.n	8014448 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8014440:	2103      	movs	r1, #3
 8014442:	6878      	ldr	r0, [r7, #4]
 8014444:	f000 f95e 	bl	8014704 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8014448:	2110      	movs	r1, #16
 801444a:	6878      	ldr	r0, [r7, #4]
 801444c:	f000 f8fa 	bl	8014644 <USB_FlushTxFifo>
 8014450:	4603      	mov	r3, r0
 8014452:	2b00      	cmp	r3, #0
 8014454:	d001      	beq.n	801445a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8014456:	2301      	movs	r3, #1
 8014458:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 801445a:	6878      	ldr	r0, [r7, #4]
 801445c:	f000 f924 	bl	80146a8 <USB_FlushRxFifo>
 8014460:	4603      	mov	r3, r0
 8014462:	2b00      	cmp	r3, #0
 8014464:	d001      	beq.n	801446a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8014466:	2301      	movs	r3, #1
 8014468:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 801446a:	68fb      	ldr	r3, [r7, #12]
 801446c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014470:	461a      	mov	r2, r3
 8014472:	2300      	movs	r3, #0
 8014474:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8014476:	68fb      	ldr	r3, [r7, #12]
 8014478:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801447c:	461a      	mov	r2, r3
 801447e:	2300      	movs	r3, #0
 8014480:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8014482:	68fb      	ldr	r3, [r7, #12]
 8014484:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014488:	461a      	mov	r2, r3
 801448a:	2300      	movs	r3, #0
 801448c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801448e:	2300      	movs	r3, #0
 8014490:	613b      	str	r3, [r7, #16]
 8014492:	e043      	b.n	801451c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8014494:	693b      	ldr	r3, [r7, #16]
 8014496:	015a      	lsls	r2, r3, #5
 8014498:	68fb      	ldr	r3, [r7, #12]
 801449a:	4413      	add	r3, r2
 801449c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80144a0:	681b      	ldr	r3, [r3, #0]
 80144a2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80144a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80144aa:	d118      	bne.n	80144de <USB_DevInit+0x162>
    {
      if (i == 0U)
 80144ac:	693b      	ldr	r3, [r7, #16]
 80144ae:	2b00      	cmp	r3, #0
 80144b0:	d10a      	bne.n	80144c8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80144b2:	693b      	ldr	r3, [r7, #16]
 80144b4:	015a      	lsls	r2, r3, #5
 80144b6:	68fb      	ldr	r3, [r7, #12]
 80144b8:	4413      	add	r3, r2
 80144ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80144be:	461a      	mov	r2, r3
 80144c0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80144c4:	6013      	str	r3, [r2, #0]
 80144c6:	e013      	b.n	80144f0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80144c8:	693b      	ldr	r3, [r7, #16]
 80144ca:	015a      	lsls	r2, r3, #5
 80144cc:	68fb      	ldr	r3, [r7, #12]
 80144ce:	4413      	add	r3, r2
 80144d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80144d4:	461a      	mov	r2, r3
 80144d6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80144da:	6013      	str	r3, [r2, #0]
 80144dc:	e008      	b.n	80144f0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80144de:	693b      	ldr	r3, [r7, #16]
 80144e0:	015a      	lsls	r2, r3, #5
 80144e2:	68fb      	ldr	r3, [r7, #12]
 80144e4:	4413      	add	r3, r2
 80144e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80144ea:	461a      	mov	r2, r3
 80144ec:	2300      	movs	r3, #0
 80144ee:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80144f0:	693b      	ldr	r3, [r7, #16]
 80144f2:	015a      	lsls	r2, r3, #5
 80144f4:	68fb      	ldr	r3, [r7, #12]
 80144f6:	4413      	add	r3, r2
 80144f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80144fc:	461a      	mov	r2, r3
 80144fe:	2300      	movs	r3, #0
 8014500:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8014502:	693b      	ldr	r3, [r7, #16]
 8014504:	015a      	lsls	r2, r3, #5
 8014506:	68fb      	ldr	r3, [r7, #12]
 8014508:	4413      	add	r3, r2
 801450a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801450e:	461a      	mov	r2, r3
 8014510:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8014514:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014516:	693b      	ldr	r3, [r7, #16]
 8014518:	3301      	adds	r3, #1
 801451a:	613b      	str	r3, [r7, #16]
 801451c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8014520:	461a      	mov	r2, r3
 8014522:	693b      	ldr	r3, [r7, #16]
 8014524:	4293      	cmp	r3, r2
 8014526:	d3b5      	bcc.n	8014494 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014528:	2300      	movs	r3, #0
 801452a:	613b      	str	r3, [r7, #16]
 801452c:	e043      	b.n	80145b6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801452e:	693b      	ldr	r3, [r7, #16]
 8014530:	015a      	lsls	r2, r3, #5
 8014532:	68fb      	ldr	r3, [r7, #12]
 8014534:	4413      	add	r3, r2
 8014536:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801453a:	681b      	ldr	r3, [r3, #0]
 801453c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8014540:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8014544:	d118      	bne.n	8014578 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8014546:	693b      	ldr	r3, [r7, #16]
 8014548:	2b00      	cmp	r3, #0
 801454a:	d10a      	bne.n	8014562 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 801454c:	693b      	ldr	r3, [r7, #16]
 801454e:	015a      	lsls	r2, r3, #5
 8014550:	68fb      	ldr	r3, [r7, #12]
 8014552:	4413      	add	r3, r2
 8014554:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014558:	461a      	mov	r2, r3
 801455a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 801455e:	6013      	str	r3, [r2, #0]
 8014560:	e013      	b.n	801458a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8014562:	693b      	ldr	r3, [r7, #16]
 8014564:	015a      	lsls	r2, r3, #5
 8014566:	68fb      	ldr	r3, [r7, #12]
 8014568:	4413      	add	r3, r2
 801456a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801456e:	461a      	mov	r2, r3
 8014570:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8014574:	6013      	str	r3, [r2, #0]
 8014576:	e008      	b.n	801458a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8014578:	693b      	ldr	r3, [r7, #16]
 801457a:	015a      	lsls	r2, r3, #5
 801457c:	68fb      	ldr	r3, [r7, #12]
 801457e:	4413      	add	r3, r2
 8014580:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014584:	461a      	mov	r2, r3
 8014586:	2300      	movs	r3, #0
 8014588:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 801458a:	693b      	ldr	r3, [r7, #16]
 801458c:	015a      	lsls	r2, r3, #5
 801458e:	68fb      	ldr	r3, [r7, #12]
 8014590:	4413      	add	r3, r2
 8014592:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014596:	461a      	mov	r2, r3
 8014598:	2300      	movs	r3, #0
 801459a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 801459c:	693b      	ldr	r3, [r7, #16]
 801459e:	015a      	lsls	r2, r3, #5
 80145a0:	68fb      	ldr	r3, [r7, #12]
 80145a2:	4413      	add	r3, r2
 80145a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80145a8:	461a      	mov	r2, r3
 80145aa:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80145ae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80145b0:	693b      	ldr	r3, [r7, #16]
 80145b2:	3301      	adds	r3, #1
 80145b4:	613b      	str	r3, [r7, #16]
 80145b6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80145ba:	461a      	mov	r2, r3
 80145bc:	693b      	ldr	r3, [r7, #16]
 80145be:	4293      	cmp	r3, r2
 80145c0:	d3b5      	bcc.n	801452e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80145c2:	68fb      	ldr	r3, [r7, #12]
 80145c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80145c8:	691b      	ldr	r3, [r3, #16]
 80145ca:	68fa      	ldr	r2, [r7, #12]
 80145cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80145d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80145d4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80145d6:	687b      	ldr	r3, [r7, #4]
 80145d8:	2200      	movs	r2, #0
 80145da:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80145e2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80145e4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80145e8:	2b00      	cmp	r3, #0
 80145ea:	d105      	bne.n	80145f8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	699b      	ldr	r3, [r3, #24]
 80145f0:	f043 0210 	orr.w	r2, r3, #16
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80145f8:	687b      	ldr	r3, [r7, #4]
 80145fa:	699a      	ldr	r2, [r3, #24]
 80145fc:	4b10      	ldr	r3, [pc, #64]	@ (8014640 <USB_DevInit+0x2c4>)
 80145fe:	4313      	orrs	r3, r2
 8014600:	687a      	ldr	r2, [r7, #4]
 8014602:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8014604:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8014608:	2b00      	cmp	r3, #0
 801460a:	d005      	beq.n	8014618 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	699b      	ldr	r3, [r3, #24]
 8014610:	f043 0208 	orr.w	r2, r3, #8
 8014614:	687b      	ldr	r3, [r7, #4]
 8014616:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8014618:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 801461c:	2b01      	cmp	r3, #1
 801461e:	d107      	bne.n	8014630 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	699b      	ldr	r3, [r3, #24]
 8014624:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8014628:	f043 0304 	orr.w	r3, r3, #4
 801462c:	687a      	ldr	r2, [r7, #4]
 801462e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8014630:	7dfb      	ldrb	r3, [r7, #23]
}
 8014632:	4618      	mov	r0, r3
 8014634:	3718      	adds	r7, #24
 8014636:	46bd      	mov	sp, r7
 8014638:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801463c:	b004      	add	sp, #16
 801463e:	4770      	bx	lr
 8014640:	803c3800 	.word	0x803c3800

08014644 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8014644:	b480      	push	{r7}
 8014646:	b085      	sub	sp, #20
 8014648:	af00      	add	r7, sp, #0
 801464a:	6078      	str	r0, [r7, #4]
 801464c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801464e:	2300      	movs	r3, #0
 8014650:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8014652:	68fb      	ldr	r3, [r7, #12]
 8014654:	3301      	adds	r3, #1
 8014656:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8014658:	68fb      	ldr	r3, [r7, #12]
 801465a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801465e:	d901      	bls.n	8014664 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8014660:	2303      	movs	r3, #3
 8014662:	e01b      	b.n	801469c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	691b      	ldr	r3, [r3, #16]
 8014668:	2b00      	cmp	r3, #0
 801466a:	daf2      	bge.n	8014652 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 801466c:	2300      	movs	r3, #0
 801466e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8014670:	683b      	ldr	r3, [r7, #0]
 8014672:	019b      	lsls	r3, r3, #6
 8014674:	f043 0220 	orr.w	r2, r3, #32
 8014678:	687b      	ldr	r3, [r7, #4]
 801467a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801467c:	68fb      	ldr	r3, [r7, #12]
 801467e:	3301      	adds	r3, #1
 8014680:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8014682:	68fb      	ldr	r3, [r7, #12]
 8014684:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8014688:	d901      	bls.n	801468e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 801468a:	2303      	movs	r3, #3
 801468c:	e006      	b.n	801469c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	691b      	ldr	r3, [r3, #16]
 8014692:	f003 0320 	and.w	r3, r3, #32
 8014696:	2b20      	cmp	r3, #32
 8014698:	d0f0      	beq.n	801467c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 801469a:	2300      	movs	r3, #0
}
 801469c:	4618      	mov	r0, r3
 801469e:	3714      	adds	r7, #20
 80146a0:	46bd      	mov	sp, r7
 80146a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146a6:	4770      	bx	lr

080146a8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80146a8:	b480      	push	{r7}
 80146aa:	b085      	sub	sp, #20
 80146ac:	af00      	add	r7, sp, #0
 80146ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80146b0:	2300      	movs	r3, #0
 80146b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80146b4:	68fb      	ldr	r3, [r7, #12]
 80146b6:	3301      	adds	r3, #1
 80146b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80146ba:	68fb      	ldr	r3, [r7, #12]
 80146bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80146c0:	d901      	bls.n	80146c6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80146c2:	2303      	movs	r3, #3
 80146c4:	e018      	b.n	80146f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	691b      	ldr	r3, [r3, #16]
 80146ca:	2b00      	cmp	r3, #0
 80146cc:	daf2      	bge.n	80146b4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80146ce:	2300      	movs	r3, #0
 80146d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	2210      	movs	r2, #16
 80146d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80146d8:	68fb      	ldr	r3, [r7, #12]
 80146da:	3301      	adds	r3, #1
 80146dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80146de:	68fb      	ldr	r3, [r7, #12]
 80146e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80146e4:	d901      	bls.n	80146ea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80146e6:	2303      	movs	r3, #3
 80146e8:	e006      	b.n	80146f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80146ea:	687b      	ldr	r3, [r7, #4]
 80146ec:	691b      	ldr	r3, [r3, #16]
 80146ee:	f003 0310 	and.w	r3, r3, #16
 80146f2:	2b10      	cmp	r3, #16
 80146f4:	d0f0      	beq.n	80146d8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80146f6:	2300      	movs	r3, #0
}
 80146f8:	4618      	mov	r0, r3
 80146fa:	3714      	adds	r7, #20
 80146fc:	46bd      	mov	sp, r7
 80146fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014702:	4770      	bx	lr

08014704 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8014704:	b480      	push	{r7}
 8014706:	b085      	sub	sp, #20
 8014708:	af00      	add	r7, sp, #0
 801470a:	6078      	str	r0, [r7, #4]
 801470c:	460b      	mov	r3, r1
 801470e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8014714:	68fb      	ldr	r3, [r7, #12]
 8014716:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801471a:	681a      	ldr	r2, [r3, #0]
 801471c:	78fb      	ldrb	r3, [r7, #3]
 801471e:	68f9      	ldr	r1, [r7, #12]
 8014720:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8014724:	4313      	orrs	r3, r2
 8014726:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8014728:	2300      	movs	r3, #0
}
 801472a:	4618      	mov	r0, r3
 801472c:	3714      	adds	r7, #20
 801472e:	46bd      	mov	sp, r7
 8014730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014734:	4770      	bx	lr

08014736 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8014736:	b480      	push	{r7}
 8014738:	b087      	sub	sp, #28
 801473a:	af00      	add	r7, sp, #0
 801473c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801473e:	687b      	ldr	r3, [r7, #4]
 8014740:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8014742:	693b      	ldr	r3, [r7, #16]
 8014744:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014748:	689b      	ldr	r3, [r3, #8]
 801474a:	f003 0306 	and.w	r3, r3, #6
 801474e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8014750:	68fb      	ldr	r3, [r7, #12]
 8014752:	2b00      	cmp	r3, #0
 8014754:	d102      	bne.n	801475c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8014756:	2300      	movs	r3, #0
 8014758:	75fb      	strb	r3, [r7, #23]
 801475a:	e00a      	b.n	8014772 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 801475c:	68fb      	ldr	r3, [r7, #12]
 801475e:	2b02      	cmp	r3, #2
 8014760:	d002      	beq.n	8014768 <USB_GetDevSpeed+0x32>
 8014762:	68fb      	ldr	r3, [r7, #12]
 8014764:	2b06      	cmp	r3, #6
 8014766:	d102      	bne.n	801476e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8014768:	2302      	movs	r3, #2
 801476a:	75fb      	strb	r3, [r7, #23]
 801476c:	e001      	b.n	8014772 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 801476e:	230f      	movs	r3, #15
 8014770:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8014772:	7dfb      	ldrb	r3, [r7, #23]
}
 8014774:	4618      	mov	r0, r3
 8014776:	371c      	adds	r7, #28
 8014778:	46bd      	mov	sp, r7
 801477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801477e:	4770      	bx	lr

08014780 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8014780:	b480      	push	{r7}
 8014782:	b085      	sub	sp, #20
 8014784:	af00      	add	r7, sp, #0
 8014786:	6078      	str	r0, [r7, #4]
 8014788:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801478e:	683b      	ldr	r3, [r7, #0]
 8014790:	781b      	ldrb	r3, [r3, #0]
 8014792:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8014794:	683b      	ldr	r3, [r7, #0]
 8014796:	785b      	ldrb	r3, [r3, #1]
 8014798:	2b01      	cmp	r3, #1
 801479a:	d13a      	bne.n	8014812 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 801479c:	68fb      	ldr	r3, [r7, #12]
 801479e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80147a2:	69da      	ldr	r2, [r3, #28]
 80147a4:	683b      	ldr	r3, [r7, #0]
 80147a6:	781b      	ldrb	r3, [r3, #0]
 80147a8:	f003 030f 	and.w	r3, r3, #15
 80147ac:	2101      	movs	r1, #1
 80147ae:	fa01 f303 	lsl.w	r3, r1, r3
 80147b2:	b29b      	uxth	r3, r3
 80147b4:	68f9      	ldr	r1, [r7, #12]
 80147b6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80147ba:	4313      	orrs	r3, r2
 80147bc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80147be:	68bb      	ldr	r3, [r7, #8]
 80147c0:	015a      	lsls	r2, r3, #5
 80147c2:	68fb      	ldr	r3, [r7, #12]
 80147c4:	4413      	add	r3, r2
 80147c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80147ca:	681b      	ldr	r3, [r3, #0]
 80147cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80147d0:	2b00      	cmp	r3, #0
 80147d2:	d155      	bne.n	8014880 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80147d4:	68bb      	ldr	r3, [r7, #8]
 80147d6:	015a      	lsls	r2, r3, #5
 80147d8:	68fb      	ldr	r3, [r7, #12]
 80147da:	4413      	add	r3, r2
 80147dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80147e0:	681a      	ldr	r2, [r3, #0]
 80147e2:	683b      	ldr	r3, [r7, #0]
 80147e4:	689b      	ldr	r3, [r3, #8]
 80147e6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80147ea:	683b      	ldr	r3, [r7, #0]
 80147ec:	791b      	ldrb	r3, [r3, #4]
 80147ee:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80147f0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80147f2:	68bb      	ldr	r3, [r7, #8]
 80147f4:	059b      	lsls	r3, r3, #22
 80147f6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80147f8:	4313      	orrs	r3, r2
 80147fa:	68ba      	ldr	r2, [r7, #8]
 80147fc:	0151      	lsls	r1, r2, #5
 80147fe:	68fa      	ldr	r2, [r7, #12]
 8014800:	440a      	add	r2, r1
 8014802:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014806:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801480a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801480e:	6013      	str	r3, [r2, #0]
 8014810:	e036      	b.n	8014880 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8014812:	68fb      	ldr	r3, [r7, #12]
 8014814:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014818:	69da      	ldr	r2, [r3, #28]
 801481a:	683b      	ldr	r3, [r7, #0]
 801481c:	781b      	ldrb	r3, [r3, #0]
 801481e:	f003 030f 	and.w	r3, r3, #15
 8014822:	2101      	movs	r1, #1
 8014824:	fa01 f303 	lsl.w	r3, r1, r3
 8014828:	041b      	lsls	r3, r3, #16
 801482a:	68f9      	ldr	r1, [r7, #12]
 801482c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8014830:	4313      	orrs	r3, r2
 8014832:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8014834:	68bb      	ldr	r3, [r7, #8]
 8014836:	015a      	lsls	r2, r3, #5
 8014838:	68fb      	ldr	r3, [r7, #12]
 801483a:	4413      	add	r3, r2
 801483c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014840:	681b      	ldr	r3, [r3, #0]
 8014842:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8014846:	2b00      	cmp	r3, #0
 8014848:	d11a      	bne.n	8014880 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801484a:	68bb      	ldr	r3, [r7, #8]
 801484c:	015a      	lsls	r2, r3, #5
 801484e:	68fb      	ldr	r3, [r7, #12]
 8014850:	4413      	add	r3, r2
 8014852:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014856:	681a      	ldr	r2, [r3, #0]
 8014858:	683b      	ldr	r3, [r7, #0]
 801485a:	689b      	ldr	r3, [r3, #8]
 801485c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8014860:	683b      	ldr	r3, [r7, #0]
 8014862:	791b      	ldrb	r3, [r3, #4]
 8014864:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8014866:	430b      	orrs	r3, r1
 8014868:	4313      	orrs	r3, r2
 801486a:	68ba      	ldr	r2, [r7, #8]
 801486c:	0151      	lsls	r1, r2, #5
 801486e:	68fa      	ldr	r2, [r7, #12]
 8014870:	440a      	add	r2, r1
 8014872:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014876:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801487a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801487e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8014880:	2300      	movs	r3, #0
}
 8014882:	4618      	mov	r0, r3
 8014884:	3714      	adds	r7, #20
 8014886:	46bd      	mov	sp, r7
 8014888:	f85d 7b04 	ldr.w	r7, [sp], #4
 801488c:	4770      	bx	lr
	...

08014890 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8014890:	b480      	push	{r7}
 8014892:	b085      	sub	sp, #20
 8014894:	af00      	add	r7, sp, #0
 8014896:	6078      	str	r0, [r7, #4]
 8014898:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801489a:	687b      	ldr	r3, [r7, #4]
 801489c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801489e:	683b      	ldr	r3, [r7, #0]
 80148a0:	781b      	ldrb	r3, [r3, #0]
 80148a2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80148a4:	683b      	ldr	r3, [r7, #0]
 80148a6:	785b      	ldrb	r3, [r3, #1]
 80148a8:	2b01      	cmp	r3, #1
 80148aa:	d161      	bne.n	8014970 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80148ac:	68bb      	ldr	r3, [r7, #8]
 80148ae:	015a      	lsls	r2, r3, #5
 80148b0:	68fb      	ldr	r3, [r7, #12]
 80148b2:	4413      	add	r3, r2
 80148b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80148b8:	681b      	ldr	r3, [r3, #0]
 80148ba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80148be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80148c2:	d11f      	bne.n	8014904 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80148c4:	68bb      	ldr	r3, [r7, #8]
 80148c6:	015a      	lsls	r2, r3, #5
 80148c8:	68fb      	ldr	r3, [r7, #12]
 80148ca:	4413      	add	r3, r2
 80148cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80148d0:	681b      	ldr	r3, [r3, #0]
 80148d2:	68ba      	ldr	r2, [r7, #8]
 80148d4:	0151      	lsls	r1, r2, #5
 80148d6:	68fa      	ldr	r2, [r7, #12]
 80148d8:	440a      	add	r2, r1
 80148da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80148de:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80148e2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80148e4:	68bb      	ldr	r3, [r7, #8]
 80148e6:	015a      	lsls	r2, r3, #5
 80148e8:	68fb      	ldr	r3, [r7, #12]
 80148ea:	4413      	add	r3, r2
 80148ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80148f0:	681b      	ldr	r3, [r3, #0]
 80148f2:	68ba      	ldr	r2, [r7, #8]
 80148f4:	0151      	lsls	r1, r2, #5
 80148f6:	68fa      	ldr	r2, [r7, #12]
 80148f8:	440a      	add	r2, r1
 80148fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80148fe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8014902:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8014904:	68fb      	ldr	r3, [r7, #12]
 8014906:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801490a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801490c:	683b      	ldr	r3, [r7, #0]
 801490e:	781b      	ldrb	r3, [r3, #0]
 8014910:	f003 030f 	and.w	r3, r3, #15
 8014914:	2101      	movs	r1, #1
 8014916:	fa01 f303 	lsl.w	r3, r1, r3
 801491a:	b29b      	uxth	r3, r3
 801491c:	43db      	mvns	r3, r3
 801491e:	68f9      	ldr	r1, [r7, #12]
 8014920:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8014924:	4013      	ands	r3, r2
 8014926:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8014928:	68fb      	ldr	r3, [r7, #12]
 801492a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801492e:	69da      	ldr	r2, [r3, #28]
 8014930:	683b      	ldr	r3, [r7, #0]
 8014932:	781b      	ldrb	r3, [r3, #0]
 8014934:	f003 030f 	and.w	r3, r3, #15
 8014938:	2101      	movs	r1, #1
 801493a:	fa01 f303 	lsl.w	r3, r1, r3
 801493e:	b29b      	uxth	r3, r3
 8014940:	43db      	mvns	r3, r3
 8014942:	68f9      	ldr	r1, [r7, #12]
 8014944:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8014948:	4013      	ands	r3, r2
 801494a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 801494c:	68bb      	ldr	r3, [r7, #8]
 801494e:	015a      	lsls	r2, r3, #5
 8014950:	68fb      	ldr	r3, [r7, #12]
 8014952:	4413      	add	r3, r2
 8014954:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014958:	681a      	ldr	r2, [r3, #0]
 801495a:	68bb      	ldr	r3, [r7, #8]
 801495c:	0159      	lsls	r1, r3, #5
 801495e:	68fb      	ldr	r3, [r7, #12]
 8014960:	440b      	add	r3, r1
 8014962:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014966:	4619      	mov	r1, r3
 8014968:	4b35      	ldr	r3, [pc, #212]	@ (8014a40 <USB_DeactivateEndpoint+0x1b0>)
 801496a:	4013      	ands	r3, r2
 801496c:	600b      	str	r3, [r1, #0]
 801496e:	e060      	b.n	8014a32 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014970:	68bb      	ldr	r3, [r7, #8]
 8014972:	015a      	lsls	r2, r3, #5
 8014974:	68fb      	ldr	r3, [r7, #12]
 8014976:	4413      	add	r3, r2
 8014978:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801497c:	681b      	ldr	r3, [r3, #0]
 801497e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8014982:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8014986:	d11f      	bne.n	80149c8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8014988:	68bb      	ldr	r3, [r7, #8]
 801498a:	015a      	lsls	r2, r3, #5
 801498c:	68fb      	ldr	r3, [r7, #12]
 801498e:	4413      	add	r3, r2
 8014990:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014994:	681b      	ldr	r3, [r3, #0]
 8014996:	68ba      	ldr	r2, [r7, #8]
 8014998:	0151      	lsls	r1, r2, #5
 801499a:	68fa      	ldr	r2, [r7, #12]
 801499c:	440a      	add	r2, r1
 801499e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80149a2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80149a6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80149a8:	68bb      	ldr	r3, [r7, #8]
 80149aa:	015a      	lsls	r2, r3, #5
 80149ac:	68fb      	ldr	r3, [r7, #12]
 80149ae:	4413      	add	r3, r2
 80149b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80149b4:	681b      	ldr	r3, [r3, #0]
 80149b6:	68ba      	ldr	r2, [r7, #8]
 80149b8:	0151      	lsls	r1, r2, #5
 80149ba:	68fa      	ldr	r2, [r7, #12]
 80149bc:	440a      	add	r2, r1
 80149be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80149c2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80149c6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80149c8:	68fb      	ldr	r3, [r7, #12]
 80149ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80149ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80149d0:	683b      	ldr	r3, [r7, #0]
 80149d2:	781b      	ldrb	r3, [r3, #0]
 80149d4:	f003 030f 	and.w	r3, r3, #15
 80149d8:	2101      	movs	r1, #1
 80149da:	fa01 f303 	lsl.w	r3, r1, r3
 80149de:	041b      	lsls	r3, r3, #16
 80149e0:	43db      	mvns	r3, r3
 80149e2:	68f9      	ldr	r1, [r7, #12]
 80149e4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80149e8:	4013      	ands	r3, r2
 80149ea:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80149ec:	68fb      	ldr	r3, [r7, #12]
 80149ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80149f2:	69da      	ldr	r2, [r3, #28]
 80149f4:	683b      	ldr	r3, [r7, #0]
 80149f6:	781b      	ldrb	r3, [r3, #0]
 80149f8:	f003 030f 	and.w	r3, r3, #15
 80149fc:	2101      	movs	r1, #1
 80149fe:	fa01 f303 	lsl.w	r3, r1, r3
 8014a02:	041b      	lsls	r3, r3, #16
 8014a04:	43db      	mvns	r3, r3
 8014a06:	68f9      	ldr	r1, [r7, #12]
 8014a08:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8014a0c:	4013      	ands	r3, r2
 8014a0e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8014a10:	68bb      	ldr	r3, [r7, #8]
 8014a12:	015a      	lsls	r2, r3, #5
 8014a14:	68fb      	ldr	r3, [r7, #12]
 8014a16:	4413      	add	r3, r2
 8014a18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014a1c:	681a      	ldr	r2, [r3, #0]
 8014a1e:	68bb      	ldr	r3, [r7, #8]
 8014a20:	0159      	lsls	r1, r3, #5
 8014a22:	68fb      	ldr	r3, [r7, #12]
 8014a24:	440b      	add	r3, r1
 8014a26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014a2a:	4619      	mov	r1, r3
 8014a2c:	4b05      	ldr	r3, [pc, #20]	@ (8014a44 <USB_DeactivateEndpoint+0x1b4>)
 8014a2e:	4013      	ands	r3, r2
 8014a30:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8014a32:	2300      	movs	r3, #0
}
 8014a34:	4618      	mov	r0, r3
 8014a36:	3714      	adds	r7, #20
 8014a38:	46bd      	mov	sp, r7
 8014a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a3e:	4770      	bx	lr
 8014a40:	ec337800 	.word	0xec337800
 8014a44:	eff37800 	.word	0xeff37800

08014a48 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8014a48:	b580      	push	{r7, lr}
 8014a4a:	b08a      	sub	sp, #40	@ 0x28
 8014a4c:	af02      	add	r7, sp, #8
 8014a4e:	60f8      	str	r0, [r7, #12]
 8014a50:	60b9      	str	r1, [r7, #8]
 8014a52:	4613      	mov	r3, r2
 8014a54:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014a56:	68fb      	ldr	r3, [r7, #12]
 8014a58:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8014a5a:	68bb      	ldr	r3, [r7, #8]
 8014a5c:	781b      	ldrb	r3, [r3, #0]
 8014a5e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8014a60:	68bb      	ldr	r3, [r7, #8]
 8014a62:	785b      	ldrb	r3, [r3, #1]
 8014a64:	2b01      	cmp	r3, #1
 8014a66:	f040 817f 	bne.w	8014d68 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8014a6a:	68bb      	ldr	r3, [r7, #8]
 8014a6c:	691b      	ldr	r3, [r3, #16]
 8014a6e:	2b00      	cmp	r3, #0
 8014a70:	d132      	bne.n	8014ad8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014a72:	69bb      	ldr	r3, [r7, #24]
 8014a74:	015a      	lsls	r2, r3, #5
 8014a76:	69fb      	ldr	r3, [r7, #28]
 8014a78:	4413      	add	r3, r2
 8014a7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014a7e:	691b      	ldr	r3, [r3, #16]
 8014a80:	69ba      	ldr	r2, [r7, #24]
 8014a82:	0151      	lsls	r1, r2, #5
 8014a84:	69fa      	ldr	r2, [r7, #28]
 8014a86:	440a      	add	r2, r1
 8014a88:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014a8c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8014a90:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8014a94:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8014a96:	69bb      	ldr	r3, [r7, #24]
 8014a98:	015a      	lsls	r2, r3, #5
 8014a9a:	69fb      	ldr	r3, [r7, #28]
 8014a9c:	4413      	add	r3, r2
 8014a9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014aa2:	691b      	ldr	r3, [r3, #16]
 8014aa4:	69ba      	ldr	r2, [r7, #24]
 8014aa6:	0151      	lsls	r1, r2, #5
 8014aa8:	69fa      	ldr	r2, [r7, #28]
 8014aaa:	440a      	add	r2, r1
 8014aac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014ab0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8014ab4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014ab6:	69bb      	ldr	r3, [r7, #24]
 8014ab8:	015a      	lsls	r2, r3, #5
 8014aba:	69fb      	ldr	r3, [r7, #28]
 8014abc:	4413      	add	r3, r2
 8014abe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014ac2:	691b      	ldr	r3, [r3, #16]
 8014ac4:	69ba      	ldr	r2, [r7, #24]
 8014ac6:	0151      	lsls	r1, r2, #5
 8014ac8:	69fa      	ldr	r2, [r7, #28]
 8014aca:	440a      	add	r2, r1
 8014acc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014ad0:	0cdb      	lsrs	r3, r3, #19
 8014ad2:	04db      	lsls	r3, r3, #19
 8014ad4:	6113      	str	r3, [r2, #16]
 8014ad6:	e097      	b.n	8014c08 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014ad8:	69bb      	ldr	r3, [r7, #24]
 8014ada:	015a      	lsls	r2, r3, #5
 8014adc:	69fb      	ldr	r3, [r7, #28]
 8014ade:	4413      	add	r3, r2
 8014ae0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014ae4:	691b      	ldr	r3, [r3, #16]
 8014ae6:	69ba      	ldr	r2, [r7, #24]
 8014ae8:	0151      	lsls	r1, r2, #5
 8014aea:	69fa      	ldr	r2, [r7, #28]
 8014aec:	440a      	add	r2, r1
 8014aee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014af2:	0cdb      	lsrs	r3, r3, #19
 8014af4:	04db      	lsls	r3, r3, #19
 8014af6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014af8:	69bb      	ldr	r3, [r7, #24]
 8014afa:	015a      	lsls	r2, r3, #5
 8014afc:	69fb      	ldr	r3, [r7, #28]
 8014afe:	4413      	add	r3, r2
 8014b00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014b04:	691b      	ldr	r3, [r3, #16]
 8014b06:	69ba      	ldr	r2, [r7, #24]
 8014b08:	0151      	lsls	r1, r2, #5
 8014b0a:	69fa      	ldr	r2, [r7, #28]
 8014b0c:	440a      	add	r2, r1
 8014b0e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014b12:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8014b16:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8014b1a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8014b1c:	69bb      	ldr	r3, [r7, #24]
 8014b1e:	2b00      	cmp	r3, #0
 8014b20:	d11a      	bne.n	8014b58 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8014b22:	68bb      	ldr	r3, [r7, #8]
 8014b24:	691a      	ldr	r2, [r3, #16]
 8014b26:	68bb      	ldr	r3, [r7, #8]
 8014b28:	689b      	ldr	r3, [r3, #8]
 8014b2a:	429a      	cmp	r2, r3
 8014b2c:	d903      	bls.n	8014b36 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8014b2e:	68bb      	ldr	r3, [r7, #8]
 8014b30:	689a      	ldr	r2, [r3, #8]
 8014b32:	68bb      	ldr	r3, [r7, #8]
 8014b34:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8014b36:	69bb      	ldr	r3, [r7, #24]
 8014b38:	015a      	lsls	r2, r3, #5
 8014b3a:	69fb      	ldr	r3, [r7, #28]
 8014b3c:	4413      	add	r3, r2
 8014b3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014b42:	691b      	ldr	r3, [r3, #16]
 8014b44:	69ba      	ldr	r2, [r7, #24]
 8014b46:	0151      	lsls	r1, r2, #5
 8014b48:	69fa      	ldr	r2, [r7, #28]
 8014b4a:	440a      	add	r2, r1
 8014b4c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014b50:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8014b54:	6113      	str	r3, [r2, #16]
 8014b56:	e044      	b.n	8014be2 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8014b58:	68bb      	ldr	r3, [r7, #8]
 8014b5a:	691a      	ldr	r2, [r3, #16]
 8014b5c:	68bb      	ldr	r3, [r7, #8]
 8014b5e:	689b      	ldr	r3, [r3, #8]
 8014b60:	4413      	add	r3, r2
 8014b62:	1e5a      	subs	r2, r3, #1
 8014b64:	68bb      	ldr	r3, [r7, #8]
 8014b66:	689b      	ldr	r3, [r3, #8]
 8014b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8014b6c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8014b6e:	69bb      	ldr	r3, [r7, #24]
 8014b70:	015a      	lsls	r2, r3, #5
 8014b72:	69fb      	ldr	r3, [r7, #28]
 8014b74:	4413      	add	r3, r2
 8014b76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014b7a:	691a      	ldr	r2, [r3, #16]
 8014b7c:	8afb      	ldrh	r3, [r7, #22]
 8014b7e:	04d9      	lsls	r1, r3, #19
 8014b80:	4ba4      	ldr	r3, [pc, #656]	@ (8014e14 <USB_EPStartXfer+0x3cc>)
 8014b82:	400b      	ands	r3, r1
 8014b84:	69b9      	ldr	r1, [r7, #24]
 8014b86:	0148      	lsls	r0, r1, #5
 8014b88:	69f9      	ldr	r1, [r7, #28]
 8014b8a:	4401      	add	r1, r0
 8014b8c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8014b90:	4313      	orrs	r3, r2
 8014b92:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8014b94:	68bb      	ldr	r3, [r7, #8]
 8014b96:	791b      	ldrb	r3, [r3, #4]
 8014b98:	2b01      	cmp	r3, #1
 8014b9a:	d122      	bne.n	8014be2 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8014b9c:	69bb      	ldr	r3, [r7, #24]
 8014b9e:	015a      	lsls	r2, r3, #5
 8014ba0:	69fb      	ldr	r3, [r7, #28]
 8014ba2:	4413      	add	r3, r2
 8014ba4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014ba8:	691b      	ldr	r3, [r3, #16]
 8014baa:	69ba      	ldr	r2, [r7, #24]
 8014bac:	0151      	lsls	r1, r2, #5
 8014bae:	69fa      	ldr	r2, [r7, #28]
 8014bb0:	440a      	add	r2, r1
 8014bb2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014bb6:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8014bba:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8014bbc:	69bb      	ldr	r3, [r7, #24]
 8014bbe:	015a      	lsls	r2, r3, #5
 8014bc0:	69fb      	ldr	r3, [r7, #28]
 8014bc2:	4413      	add	r3, r2
 8014bc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014bc8:	691a      	ldr	r2, [r3, #16]
 8014bca:	8afb      	ldrh	r3, [r7, #22]
 8014bcc:	075b      	lsls	r3, r3, #29
 8014bce:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8014bd2:	69b9      	ldr	r1, [r7, #24]
 8014bd4:	0148      	lsls	r0, r1, #5
 8014bd6:	69f9      	ldr	r1, [r7, #28]
 8014bd8:	4401      	add	r1, r0
 8014bda:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8014bde:	4313      	orrs	r3, r2
 8014be0:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8014be2:	69bb      	ldr	r3, [r7, #24]
 8014be4:	015a      	lsls	r2, r3, #5
 8014be6:	69fb      	ldr	r3, [r7, #28]
 8014be8:	4413      	add	r3, r2
 8014bea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014bee:	691a      	ldr	r2, [r3, #16]
 8014bf0:	68bb      	ldr	r3, [r7, #8]
 8014bf2:	691b      	ldr	r3, [r3, #16]
 8014bf4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014bf8:	69b9      	ldr	r1, [r7, #24]
 8014bfa:	0148      	lsls	r0, r1, #5
 8014bfc:	69f9      	ldr	r1, [r7, #28]
 8014bfe:	4401      	add	r1, r0
 8014c00:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8014c04:	4313      	orrs	r3, r2
 8014c06:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8014c08:	79fb      	ldrb	r3, [r7, #7]
 8014c0a:	2b01      	cmp	r3, #1
 8014c0c:	d14b      	bne.n	8014ca6 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8014c0e:	68bb      	ldr	r3, [r7, #8]
 8014c10:	69db      	ldr	r3, [r3, #28]
 8014c12:	2b00      	cmp	r3, #0
 8014c14:	d009      	beq.n	8014c2a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8014c16:	69bb      	ldr	r3, [r7, #24]
 8014c18:	015a      	lsls	r2, r3, #5
 8014c1a:	69fb      	ldr	r3, [r7, #28]
 8014c1c:	4413      	add	r3, r2
 8014c1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014c22:	461a      	mov	r2, r3
 8014c24:	68bb      	ldr	r3, [r7, #8]
 8014c26:	69db      	ldr	r3, [r3, #28]
 8014c28:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8014c2a:	68bb      	ldr	r3, [r7, #8]
 8014c2c:	791b      	ldrb	r3, [r3, #4]
 8014c2e:	2b01      	cmp	r3, #1
 8014c30:	d128      	bne.n	8014c84 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014c32:	69fb      	ldr	r3, [r7, #28]
 8014c34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014c38:	689b      	ldr	r3, [r3, #8]
 8014c3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014c3e:	2b00      	cmp	r3, #0
 8014c40:	d110      	bne.n	8014c64 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8014c42:	69bb      	ldr	r3, [r7, #24]
 8014c44:	015a      	lsls	r2, r3, #5
 8014c46:	69fb      	ldr	r3, [r7, #28]
 8014c48:	4413      	add	r3, r2
 8014c4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014c4e:	681b      	ldr	r3, [r3, #0]
 8014c50:	69ba      	ldr	r2, [r7, #24]
 8014c52:	0151      	lsls	r1, r2, #5
 8014c54:	69fa      	ldr	r2, [r7, #28]
 8014c56:	440a      	add	r2, r1
 8014c58:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014c5c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8014c60:	6013      	str	r3, [r2, #0]
 8014c62:	e00f      	b.n	8014c84 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8014c64:	69bb      	ldr	r3, [r7, #24]
 8014c66:	015a      	lsls	r2, r3, #5
 8014c68:	69fb      	ldr	r3, [r7, #28]
 8014c6a:	4413      	add	r3, r2
 8014c6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014c70:	681b      	ldr	r3, [r3, #0]
 8014c72:	69ba      	ldr	r2, [r7, #24]
 8014c74:	0151      	lsls	r1, r2, #5
 8014c76:	69fa      	ldr	r2, [r7, #28]
 8014c78:	440a      	add	r2, r1
 8014c7a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014c7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8014c82:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014c84:	69bb      	ldr	r3, [r7, #24]
 8014c86:	015a      	lsls	r2, r3, #5
 8014c88:	69fb      	ldr	r3, [r7, #28]
 8014c8a:	4413      	add	r3, r2
 8014c8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014c90:	681b      	ldr	r3, [r3, #0]
 8014c92:	69ba      	ldr	r2, [r7, #24]
 8014c94:	0151      	lsls	r1, r2, #5
 8014c96:	69fa      	ldr	r2, [r7, #28]
 8014c98:	440a      	add	r2, r1
 8014c9a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014c9e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8014ca2:	6013      	str	r3, [r2, #0]
 8014ca4:	e166      	b.n	8014f74 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014ca6:	69bb      	ldr	r3, [r7, #24]
 8014ca8:	015a      	lsls	r2, r3, #5
 8014caa:	69fb      	ldr	r3, [r7, #28]
 8014cac:	4413      	add	r3, r2
 8014cae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014cb2:	681b      	ldr	r3, [r3, #0]
 8014cb4:	69ba      	ldr	r2, [r7, #24]
 8014cb6:	0151      	lsls	r1, r2, #5
 8014cb8:	69fa      	ldr	r2, [r7, #28]
 8014cba:	440a      	add	r2, r1
 8014cbc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014cc0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8014cc4:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8014cc6:	68bb      	ldr	r3, [r7, #8]
 8014cc8:	791b      	ldrb	r3, [r3, #4]
 8014cca:	2b01      	cmp	r3, #1
 8014ccc:	d015      	beq.n	8014cfa <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8014cce:	68bb      	ldr	r3, [r7, #8]
 8014cd0:	691b      	ldr	r3, [r3, #16]
 8014cd2:	2b00      	cmp	r3, #0
 8014cd4:	f000 814e 	beq.w	8014f74 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8014cd8:	69fb      	ldr	r3, [r7, #28]
 8014cda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014cde:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014ce0:	68bb      	ldr	r3, [r7, #8]
 8014ce2:	781b      	ldrb	r3, [r3, #0]
 8014ce4:	f003 030f 	and.w	r3, r3, #15
 8014ce8:	2101      	movs	r1, #1
 8014cea:	fa01 f303 	lsl.w	r3, r1, r3
 8014cee:	69f9      	ldr	r1, [r7, #28]
 8014cf0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8014cf4:	4313      	orrs	r3, r2
 8014cf6:	634b      	str	r3, [r1, #52]	@ 0x34
 8014cf8:	e13c      	b.n	8014f74 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014cfa:	69fb      	ldr	r3, [r7, #28]
 8014cfc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014d00:	689b      	ldr	r3, [r3, #8]
 8014d02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014d06:	2b00      	cmp	r3, #0
 8014d08:	d110      	bne.n	8014d2c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8014d0a:	69bb      	ldr	r3, [r7, #24]
 8014d0c:	015a      	lsls	r2, r3, #5
 8014d0e:	69fb      	ldr	r3, [r7, #28]
 8014d10:	4413      	add	r3, r2
 8014d12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014d16:	681b      	ldr	r3, [r3, #0]
 8014d18:	69ba      	ldr	r2, [r7, #24]
 8014d1a:	0151      	lsls	r1, r2, #5
 8014d1c:	69fa      	ldr	r2, [r7, #28]
 8014d1e:	440a      	add	r2, r1
 8014d20:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014d24:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8014d28:	6013      	str	r3, [r2, #0]
 8014d2a:	e00f      	b.n	8014d4c <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8014d2c:	69bb      	ldr	r3, [r7, #24]
 8014d2e:	015a      	lsls	r2, r3, #5
 8014d30:	69fb      	ldr	r3, [r7, #28]
 8014d32:	4413      	add	r3, r2
 8014d34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014d38:	681b      	ldr	r3, [r3, #0]
 8014d3a:	69ba      	ldr	r2, [r7, #24]
 8014d3c:	0151      	lsls	r1, r2, #5
 8014d3e:	69fa      	ldr	r2, [r7, #28]
 8014d40:	440a      	add	r2, r1
 8014d42:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014d46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8014d4a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8014d4c:	68bb      	ldr	r3, [r7, #8]
 8014d4e:	68d9      	ldr	r1, [r3, #12]
 8014d50:	68bb      	ldr	r3, [r7, #8]
 8014d52:	781a      	ldrb	r2, [r3, #0]
 8014d54:	68bb      	ldr	r3, [r7, #8]
 8014d56:	691b      	ldr	r3, [r3, #16]
 8014d58:	b298      	uxth	r0, r3
 8014d5a:	79fb      	ldrb	r3, [r7, #7]
 8014d5c:	9300      	str	r3, [sp, #0]
 8014d5e:	4603      	mov	r3, r0
 8014d60:	68f8      	ldr	r0, [r7, #12]
 8014d62:	f000 f9b9 	bl	80150d8 <USB_WritePacket>
 8014d66:	e105      	b.n	8014f74 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8014d68:	69bb      	ldr	r3, [r7, #24]
 8014d6a:	015a      	lsls	r2, r3, #5
 8014d6c:	69fb      	ldr	r3, [r7, #28]
 8014d6e:	4413      	add	r3, r2
 8014d70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014d74:	691b      	ldr	r3, [r3, #16]
 8014d76:	69ba      	ldr	r2, [r7, #24]
 8014d78:	0151      	lsls	r1, r2, #5
 8014d7a:	69fa      	ldr	r2, [r7, #28]
 8014d7c:	440a      	add	r2, r1
 8014d7e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014d82:	0cdb      	lsrs	r3, r3, #19
 8014d84:	04db      	lsls	r3, r3, #19
 8014d86:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8014d88:	69bb      	ldr	r3, [r7, #24]
 8014d8a:	015a      	lsls	r2, r3, #5
 8014d8c:	69fb      	ldr	r3, [r7, #28]
 8014d8e:	4413      	add	r3, r2
 8014d90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014d94:	691b      	ldr	r3, [r3, #16]
 8014d96:	69ba      	ldr	r2, [r7, #24]
 8014d98:	0151      	lsls	r1, r2, #5
 8014d9a:	69fa      	ldr	r2, [r7, #28]
 8014d9c:	440a      	add	r2, r1
 8014d9e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014da2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8014da6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8014daa:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8014dac:	69bb      	ldr	r3, [r7, #24]
 8014dae:	2b00      	cmp	r3, #0
 8014db0:	d132      	bne.n	8014e18 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8014db2:	68bb      	ldr	r3, [r7, #8]
 8014db4:	691b      	ldr	r3, [r3, #16]
 8014db6:	2b00      	cmp	r3, #0
 8014db8:	d003      	beq.n	8014dc2 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8014dba:	68bb      	ldr	r3, [r7, #8]
 8014dbc:	689a      	ldr	r2, [r3, #8]
 8014dbe:	68bb      	ldr	r3, [r7, #8]
 8014dc0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8014dc2:	68bb      	ldr	r3, [r7, #8]
 8014dc4:	689a      	ldr	r2, [r3, #8]
 8014dc6:	68bb      	ldr	r3, [r7, #8]
 8014dc8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8014dca:	69bb      	ldr	r3, [r7, #24]
 8014dcc:	015a      	lsls	r2, r3, #5
 8014dce:	69fb      	ldr	r3, [r7, #28]
 8014dd0:	4413      	add	r3, r2
 8014dd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014dd6:	691a      	ldr	r2, [r3, #16]
 8014dd8:	68bb      	ldr	r3, [r7, #8]
 8014dda:	6a1b      	ldr	r3, [r3, #32]
 8014ddc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014de0:	69b9      	ldr	r1, [r7, #24]
 8014de2:	0148      	lsls	r0, r1, #5
 8014de4:	69f9      	ldr	r1, [r7, #28]
 8014de6:	4401      	add	r1, r0
 8014de8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8014dec:	4313      	orrs	r3, r2
 8014dee:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014df0:	69bb      	ldr	r3, [r7, #24]
 8014df2:	015a      	lsls	r2, r3, #5
 8014df4:	69fb      	ldr	r3, [r7, #28]
 8014df6:	4413      	add	r3, r2
 8014df8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014dfc:	691b      	ldr	r3, [r3, #16]
 8014dfe:	69ba      	ldr	r2, [r7, #24]
 8014e00:	0151      	lsls	r1, r2, #5
 8014e02:	69fa      	ldr	r2, [r7, #28]
 8014e04:	440a      	add	r2, r1
 8014e06:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014e0a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8014e0e:	6113      	str	r3, [r2, #16]
 8014e10:	e062      	b.n	8014ed8 <USB_EPStartXfer+0x490>
 8014e12:	bf00      	nop
 8014e14:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8014e18:	68bb      	ldr	r3, [r7, #8]
 8014e1a:	691b      	ldr	r3, [r3, #16]
 8014e1c:	2b00      	cmp	r3, #0
 8014e1e:	d123      	bne.n	8014e68 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8014e20:	69bb      	ldr	r3, [r7, #24]
 8014e22:	015a      	lsls	r2, r3, #5
 8014e24:	69fb      	ldr	r3, [r7, #28]
 8014e26:	4413      	add	r3, r2
 8014e28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014e2c:	691a      	ldr	r2, [r3, #16]
 8014e2e:	68bb      	ldr	r3, [r7, #8]
 8014e30:	689b      	ldr	r3, [r3, #8]
 8014e32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014e36:	69b9      	ldr	r1, [r7, #24]
 8014e38:	0148      	lsls	r0, r1, #5
 8014e3a:	69f9      	ldr	r1, [r7, #28]
 8014e3c:	4401      	add	r1, r0
 8014e3e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8014e42:	4313      	orrs	r3, r2
 8014e44:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014e46:	69bb      	ldr	r3, [r7, #24]
 8014e48:	015a      	lsls	r2, r3, #5
 8014e4a:	69fb      	ldr	r3, [r7, #28]
 8014e4c:	4413      	add	r3, r2
 8014e4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014e52:	691b      	ldr	r3, [r3, #16]
 8014e54:	69ba      	ldr	r2, [r7, #24]
 8014e56:	0151      	lsls	r1, r2, #5
 8014e58:	69fa      	ldr	r2, [r7, #28]
 8014e5a:	440a      	add	r2, r1
 8014e5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014e60:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8014e64:	6113      	str	r3, [r2, #16]
 8014e66:	e037      	b.n	8014ed8 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8014e68:	68bb      	ldr	r3, [r7, #8]
 8014e6a:	691a      	ldr	r2, [r3, #16]
 8014e6c:	68bb      	ldr	r3, [r7, #8]
 8014e6e:	689b      	ldr	r3, [r3, #8]
 8014e70:	4413      	add	r3, r2
 8014e72:	1e5a      	subs	r2, r3, #1
 8014e74:	68bb      	ldr	r3, [r7, #8]
 8014e76:	689b      	ldr	r3, [r3, #8]
 8014e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8014e7c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8014e7e:	68bb      	ldr	r3, [r7, #8]
 8014e80:	689b      	ldr	r3, [r3, #8]
 8014e82:	8afa      	ldrh	r2, [r7, #22]
 8014e84:	fb03 f202 	mul.w	r2, r3, r2
 8014e88:	68bb      	ldr	r3, [r7, #8]
 8014e8a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8014e8c:	69bb      	ldr	r3, [r7, #24]
 8014e8e:	015a      	lsls	r2, r3, #5
 8014e90:	69fb      	ldr	r3, [r7, #28]
 8014e92:	4413      	add	r3, r2
 8014e94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014e98:	691a      	ldr	r2, [r3, #16]
 8014e9a:	8afb      	ldrh	r3, [r7, #22]
 8014e9c:	04d9      	lsls	r1, r3, #19
 8014e9e:	4b38      	ldr	r3, [pc, #224]	@ (8014f80 <USB_EPStartXfer+0x538>)
 8014ea0:	400b      	ands	r3, r1
 8014ea2:	69b9      	ldr	r1, [r7, #24]
 8014ea4:	0148      	lsls	r0, r1, #5
 8014ea6:	69f9      	ldr	r1, [r7, #28]
 8014ea8:	4401      	add	r1, r0
 8014eaa:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8014eae:	4313      	orrs	r3, r2
 8014eb0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8014eb2:	69bb      	ldr	r3, [r7, #24]
 8014eb4:	015a      	lsls	r2, r3, #5
 8014eb6:	69fb      	ldr	r3, [r7, #28]
 8014eb8:	4413      	add	r3, r2
 8014eba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014ebe:	691a      	ldr	r2, [r3, #16]
 8014ec0:	68bb      	ldr	r3, [r7, #8]
 8014ec2:	6a1b      	ldr	r3, [r3, #32]
 8014ec4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014ec8:	69b9      	ldr	r1, [r7, #24]
 8014eca:	0148      	lsls	r0, r1, #5
 8014ecc:	69f9      	ldr	r1, [r7, #28]
 8014ece:	4401      	add	r1, r0
 8014ed0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8014ed4:	4313      	orrs	r3, r2
 8014ed6:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8014ed8:	79fb      	ldrb	r3, [r7, #7]
 8014eda:	2b01      	cmp	r3, #1
 8014edc:	d10d      	bne.n	8014efa <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8014ede:	68bb      	ldr	r3, [r7, #8]
 8014ee0:	68db      	ldr	r3, [r3, #12]
 8014ee2:	2b00      	cmp	r3, #0
 8014ee4:	d009      	beq.n	8014efa <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8014ee6:	68bb      	ldr	r3, [r7, #8]
 8014ee8:	68d9      	ldr	r1, [r3, #12]
 8014eea:	69bb      	ldr	r3, [r7, #24]
 8014eec:	015a      	lsls	r2, r3, #5
 8014eee:	69fb      	ldr	r3, [r7, #28]
 8014ef0:	4413      	add	r3, r2
 8014ef2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014ef6:	460a      	mov	r2, r1
 8014ef8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8014efa:	68bb      	ldr	r3, [r7, #8]
 8014efc:	791b      	ldrb	r3, [r3, #4]
 8014efe:	2b01      	cmp	r3, #1
 8014f00:	d128      	bne.n	8014f54 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014f02:	69fb      	ldr	r3, [r7, #28]
 8014f04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014f08:	689b      	ldr	r3, [r3, #8]
 8014f0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014f0e:	2b00      	cmp	r3, #0
 8014f10:	d110      	bne.n	8014f34 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8014f12:	69bb      	ldr	r3, [r7, #24]
 8014f14:	015a      	lsls	r2, r3, #5
 8014f16:	69fb      	ldr	r3, [r7, #28]
 8014f18:	4413      	add	r3, r2
 8014f1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014f1e:	681b      	ldr	r3, [r3, #0]
 8014f20:	69ba      	ldr	r2, [r7, #24]
 8014f22:	0151      	lsls	r1, r2, #5
 8014f24:	69fa      	ldr	r2, [r7, #28]
 8014f26:	440a      	add	r2, r1
 8014f28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014f2c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8014f30:	6013      	str	r3, [r2, #0]
 8014f32:	e00f      	b.n	8014f54 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8014f34:	69bb      	ldr	r3, [r7, #24]
 8014f36:	015a      	lsls	r2, r3, #5
 8014f38:	69fb      	ldr	r3, [r7, #28]
 8014f3a:	4413      	add	r3, r2
 8014f3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014f40:	681b      	ldr	r3, [r3, #0]
 8014f42:	69ba      	ldr	r2, [r7, #24]
 8014f44:	0151      	lsls	r1, r2, #5
 8014f46:	69fa      	ldr	r2, [r7, #28]
 8014f48:	440a      	add	r2, r1
 8014f4a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014f4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8014f52:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8014f54:	69bb      	ldr	r3, [r7, #24]
 8014f56:	015a      	lsls	r2, r3, #5
 8014f58:	69fb      	ldr	r3, [r7, #28]
 8014f5a:	4413      	add	r3, r2
 8014f5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014f60:	681b      	ldr	r3, [r3, #0]
 8014f62:	69ba      	ldr	r2, [r7, #24]
 8014f64:	0151      	lsls	r1, r2, #5
 8014f66:	69fa      	ldr	r2, [r7, #28]
 8014f68:	440a      	add	r2, r1
 8014f6a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014f6e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8014f72:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8014f74:	2300      	movs	r3, #0
}
 8014f76:	4618      	mov	r0, r3
 8014f78:	3720      	adds	r7, #32
 8014f7a:	46bd      	mov	sp, r7
 8014f7c:	bd80      	pop	{r7, pc}
 8014f7e:	bf00      	nop
 8014f80:	1ff80000 	.word	0x1ff80000

08014f84 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014f84:	b480      	push	{r7}
 8014f86:	b087      	sub	sp, #28
 8014f88:	af00      	add	r7, sp, #0
 8014f8a:	6078      	str	r0, [r7, #4]
 8014f8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8014f8e:	2300      	movs	r3, #0
 8014f90:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8014f92:	2300      	movs	r3, #0
 8014f94:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014f96:	687b      	ldr	r3, [r7, #4]
 8014f98:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8014f9a:	683b      	ldr	r3, [r7, #0]
 8014f9c:	785b      	ldrb	r3, [r3, #1]
 8014f9e:	2b01      	cmp	r3, #1
 8014fa0:	d14a      	bne.n	8015038 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8014fa2:	683b      	ldr	r3, [r7, #0]
 8014fa4:	781b      	ldrb	r3, [r3, #0]
 8014fa6:	015a      	lsls	r2, r3, #5
 8014fa8:	693b      	ldr	r3, [r7, #16]
 8014faa:	4413      	add	r3, r2
 8014fac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014fb0:	681b      	ldr	r3, [r3, #0]
 8014fb2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8014fb6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8014fba:	f040 8086 	bne.w	80150ca <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8014fbe:	683b      	ldr	r3, [r7, #0]
 8014fc0:	781b      	ldrb	r3, [r3, #0]
 8014fc2:	015a      	lsls	r2, r3, #5
 8014fc4:	693b      	ldr	r3, [r7, #16]
 8014fc6:	4413      	add	r3, r2
 8014fc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014fcc:	681b      	ldr	r3, [r3, #0]
 8014fce:	683a      	ldr	r2, [r7, #0]
 8014fd0:	7812      	ldrb	r2, [r2, #0]
 8014fd2:	0151      	lsls	r1, r2, #5
 8014fd4:	693a      	ldr	r2, [r7, #16]
 8014fd6:	440a      	add	r2, r1
 8014fd8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014fdc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8014fe0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8014fe2:	683b      	ldr	r3, [r7, #0]
 8014fe4:	781b      	ldrb	r3, [r3, #0]
 8014fe6:	015a      	lsls	r2, r3, #5
 8014fe8:	693b      	ldr	r3, [r7, #16]
 8014fea:	4413      	add	r3, r2
 8014fec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014ff0:	681b      	ldr	r3, [r3, #0]
 8014ff2:	683a      	ldr	r2, [r7, #0]
 8014ff4:	7812      	ldrb	r2, [r2, #0]
 8014ff6:	0151      	lsls	r1, r2, #5
 8014ff8:	693a      	ldr	r2, [r7, #16]
 8014ffa:	440a      	add	r2, r1
 8014ffc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015000:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8015004:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8015006:	68fb      	ldr	r3, [r7, #12]
 8015008:	3301      	adds	r3, #1
 801500a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 801500c:	68fb      	ldr	r3, [r7, #12]
 801500e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8015012:	4293      	cmp	r3, r2
 8015014:	d902      	bls.n	801501c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8015016:	2301      	movs	r3, #1
 8015018:	75fb      	strb	r3, [r7, #23]
          break;
 801501a:	e056      	b.n	80150ca <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 801501c:	683b      	ldr	r3, [r7, #0]
 801501e:	781b      	ldrb	r3, [r3, #0]
 8015020:	015a      	lsls	r2, r3, #5
 8015022:	693b      	ldr	r3, [r7, #16]
 8015024:	4413      	add	r3, r2
 8015026:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801502a:	681b      	ldr	r3, [r3, #0]
 801502c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8015030:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8015034:	d0e7      	beq.n	8015006 <USB_EPStopXfer+0x82>
 8015036:	e048      	b.n	80150ca <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8015038:	683b      	ldr	r3, [r7, #0]
 801503a:	781b      	ldrb	r3, [r3, #0]
 801503c:	015a      	lsls	r2, r3, #5
 801503e:	693b      	ldr	r3, [r7, #16]
 8015040:	4413      	add	r3, r2
 8015042:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015046:	681b      	ldr	r3, [r3, #0]
 8015048:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801504c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8015050:	d13b      	bne.n	80150ca <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8015052:	683b      	ldr	r3, [r7, #0]
 8015054:	781b      	ldrb	r3, [r3, #0]
 8015056:	015a      	lsls	r2, r3, #5
 8015058:	693b      	ldr	r3, [r7, #16]
 801505a:	4413      	add	r3, r2
 801505c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015060:	681b      	ldr	r3, [r3, #0]
 8015062:	683a      	ldr	r2, [r7, #0]
 8015064:	7812      	ldrb	r2, [r2, #0]
 8015066:	0151      	lsls	r1, r2, #5
 8015068:	693a      	ldr	r2, [r7, #16]
 801506a:	440a      	add	r2, r1
 801506c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015070:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8015074:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8015076:	683b      	ldr	r3, [r7, #0]
 8015078:	781b      	ldrb	r3, [r3, #0]
 801507a:	015a      	lsls	r2, r3, #5
 801507c:	693b      	ldr	r3, [r7, #16]
 801507e:	4413      	add	r3, r2
 8015080:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015084:	681b      	ldr	r3, [r3, #0]
 8015086:	683a      	ldr	r2, [r7, #0]
 8015088:	7812      	ldrb	r2, [r2, #0]
 801508a:	0151      	lsls	r1, r2, #5
 801508c:	693a      	ldr	r2, [r7, #16]
 801508e:	440a      	add	r2, r1
 8015090:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015094:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8015098:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801509a:	68fb      	ldr	r3, [r7, #12]
 801509c:	3301      	adds	r3, #1
 801509e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80150a0:	68fb      	ldr	r3, [r7, #12]
 80150a2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80150a6:	4293      	cmp	r3, r2
 80150a8:	d902      	bls.n	80150b0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80150aa:	2301      	movs	r3, #1
 80150ac:	75fb      	strb	r3, [r7, #23]
          break;
 80150ae:	e00c      	b.n	80150ca <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80150b0:	683b      	ldr	r3, [r7, #0]
 80150b2:	781b      	ldrb	r3, [r3, #0]
 80150b4:	015a      	lsls	r2, r3, #5
 80150b6:	693b      	ldr	r3, [r7, #16]
 80150b8:	4413      	add	r3, r2
 80150ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80150be:	681b      	ldr	r3, [r3, #0]
 80150c0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80150c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80150c8:	d0e7      	beq.n	801509a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80150ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80150cc:	4618      	mov	r0, r3
 80150ce:	371c      	adds	r7, #28
 80150d0:	46bd      	mov	sp, r7
 80150d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150d6:	4770      	bx	lr

080150d8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80150d8:	b480      	push	{r7}
 80150da:	b089      	sub	sp, #36	@ 0x24
 80150dc:	af00      	add	r7, sp, #0
 80150de:	60f8      	str	r0, [r7, #12]
 80150e0:	60b9      	str	r1, [r7, #8]
 80150e2:	4611      	mov	r1, r2
 80150e4:	461a      	mov	r2, r3
 80150e6:	460b      	mov	r3, r1
 80150e8:	71fb      	strb	r3, [r7, #7]
 80150ea:	4613      	mov	r3, r2
 80150ec:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80150ee:	68fb      	ldr	r3, [r7, #12]
 80150f0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80150f2:	68bb      	ldr	r3, [r7, #8]
 80150f4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80150f6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80150fa:	2b00      	cmp	r3, #0
 80150fc:	d123      	bne.n	8015146 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80150fe:	88bb      	ldrh	r3, [r7, #4]
 8015100:	3303      	adds	r3, #3
 8015102:	089b      	lsrs	r3, r3, #2
 8015104:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8015106:	2300      	movs	r3, #0
 8015108:	61bb      	str	r3, [r7, #24]
 801510a:	e018      	b.n	801513e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 801510c:	79fb      	ldrb	r3, [r7, #7]
 801510e:	031a      	lsls	r2, r3, #12
 8015110:	697b      	ldr	r3, [r7, #20]
 8015112:	4413      	add	r3, r2
 8015114:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8015118:	461a      	mov	r2, r3
 801511a:	69fb      	ldr	r3, [r7, #28]
 801511c:	681b      	ldr	r3, [r3, #0]
 801511e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8015120:	69fb      	ldr	r3, [r7, #28]
 8015122:	3301      	adds	r3, #1
 8015124:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8015126:	69fb      	ldr	r3, [r7, #28]
 8015128:	3301      	adds	r3, #1
 801512a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801512c:	69fb      	ldr	r3, [r7, #28]
 801512e:	3301      	adds	r3, #1
 8015130:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8015132:	69fb      	ldr	r3, [r7, #28]
 8015134:	3301      	adds	r3, #1
 8015136:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8015138:	69bb      	ldr	r3, [r7, #24]
 801513a:	3301      	adds	r3, #1
 801513c:	61bb      	str	r3, [r7, #24]
 801513e:	69ba      	ldr	r2, [r7, #24]
 8015140:	693b      	ldr	r3, [r7, #16]
 8015142:	429a      	cmp	r2, r3
 8015144:	d3e2      	bcc.n	801510c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8015146:	2300      	movs	r3, #0
}
 8015148:	4618      	mov	r0, r3
 801514a:	3724      	adds	r7, #36	@ 0x24
 801514c:	46bd      	mov	sp, r7
 801514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015152:	4770      	bx	lr

08015154 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8015154:	b480      	push	{r7}
 8015156:	b08b      	sub	sp, #44	@ 0x2c
 8015158:	af00      	add	r7, sp, #0
 801515a:	60f8      	str	r0, [r7, #12]
 801515c:	60b9      	str	r1, [r7, #8]
 801515e:	4613      	mov	r3, r2
 8015160:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015162:	68fb      	ldr	r3, [r7, #12]
 8015164:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8015166:	68bb      	ldr	r3, [r7, #8]
 8015168:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 801516a:	88fb      	ldrh	r3, [r7, #6]
 801516c:	089b      	lsrs	r3, r3, #2
 801516e:	b29b      	uxth	r3, r3
 8015170:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8015172:	88fb      	ldrh	r3, [r7, #6]
 8015174:	f003 0303 	and.w	r3, r3, #3
 8015178:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 801517a:	2300      	movs	r3, #0
 801517c:	623b      	str	r3, [r7, #32]
 801517e:	e014      	b.n	80151aa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8015180:	69bb      	ldr	r3, [r7, #24]
 8015182:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8015186:	681a      	ldr	r2, [r3, #0]
 8015188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801518a:	601a      	str	r2, [r3, #0]
    pDest++;
 801518c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801518e:	3301      	adds	r3, #1
 8015190:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8015192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015194:	3301      	adds	r3, #1
 8015196:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8015198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801519a:	3301      	adds	r3, #1
 801519c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 801519e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80151a0:	3301      	adds	r3, #1
 80151a2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80151a4:	6a3b      	ldr	r3, [r7, #32]
 80151a6:	3301      	adds	r3, #1
 80151a8:	623b      	str	r3, [r7, #32]
 80151aa:	6a3a      	ldr	r2, [r7, #32]
 80151ac:	697b      	ldr	r3, [r7, #20]
 80151ae:	429a      	cmp	r2, r3
 80151b0:	d3e6      	bcc.n	8015180 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80151b2:	8bfb      	ldrh	r3, [r7, #30]
 80151b4:	2b00      	cmp	r3, #0
 80151b6:	d01e      	beq.n	80151f6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80151b8:	2300      	movs	r3, #0
 80151ba:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80151bc:	69bb      	ldr	r3, [r7, #24]
 80151be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80151c2:	461a      	mov	r2, r3
 80151c4:	f107 0310 	add.w	r3, r7, #16
 80151c8:	6812      	ldr	r2, [r2, #0]
 80151ca:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80151cc:	693a      	ldr	r2, [r7, #16]
 80151ce:	6a3b      	ldr	r3, [r7, #32]
 80151d0:	b2db      	uxtb	r3, r3
 80151d2:	00db      	lsls	r3, r3, #3
 80151d4:	fa22 f303 	lsr.w	r3, r2, r3
 80151d8:	b2da      	uxtb	r2, r3
 80151da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80151dc:	701a      	strb	r2, [r3, #0]
      i++;
 80151de:	6a3b      	ldr	r3, [r7, #32]
 80151e0:	3301      	adds	r3, #1
 80151e2:	623b      	str	r3, [r7, #32]
      pDest++;
 80151e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80151e6:	3301      	adds	r3, #1
 80151e8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80151ea:	8bfb      	ldrh	r3, [r7, #30]
 80151ec:	3b01      	subs	r3, #1
 80151ee:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80151f0:	8bfb      	ldrh	r3, [r7, #30]
 80151f2:	2b00      	cmp	r3, #0
 80151f4:	d1ea      	bne.n	80151cc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80151f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80151f8:	4618      	mov	r0, r3
 80151fa:	372c      	adds	r7, #44	@ 0x2c
 80151fc:	46bd      	mov	sp, r7
 80151fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015202:	4770      	bx	lr

08015204 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8015204:	b480      	push	{r7}
 8015206:	b085      	sub	sp, #20
 8015208:	af00      	add	r7, sp, #0
 801520a:	6078      	str	r0, [r7, #4]
 801520c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801520e:	687b      	ldr	r3, [r7, #4]
 8015210:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8015212:	683b      	ldr	r3, [r7, #0]
 8015214:	781b      	ldrb	r3, [r3, #0]
 8015216:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8015218:	683b      	ldr	r3, [r7, #0]
 801521a:	785b      	ldrb	r3, [r3, #1]
 801521c:	2b01      	cmp	r3, #1
 801521e:	d12c      	bne.n	801527a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8015220:	68bb      	ldr	r3, [r7, #8]
 8015222:	015a      	lsls	r2, r3, #5
 8015224:	68fb      	ldr	r3, [r7, #12]
 8015226:	4413      	add	r3, r2
 8015228:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801522c:	681b      	ldr	r3, [r3, #0]
 801522e:	2b00      	cmp	r3, #0
 8015230:	db12      	blt.n	8015258 <USB_EPSetStall+0x54>
 8015232:	68bb      	ldr	r3, [r7, #8]
 8015234:	2b00      	cmp	r3, #0
 8015236:	d00f      	beq.n	8015258 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8015238:	68bb      	ldr	r3, [r7, #8]
 801523a:	015a      	lsls	r2, r3, #5
 801523c:	68fb      	ldr	r3, [r7, #12]
 801523e:	4413      	add	r3, r2
 8015240:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015244:	681b      	ldr	r3, [r3, #0]
 8015246:	68ba      	ldr	r2, [r7, #8]
 8015248:	0151      	lsls	r1, r2, #5
 801524a:	68fa      	ldr	r2, [r7, #12]
 801524c:	440a      	add	r2, r1
 801524e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015252:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8015256:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8015258:	68bb      	ldr	r3, [r7, #8]
 801525a:	015a      	lsls	r2, r3, #5
 801525c:	68fb      	ldr	r3, [r7, #12]
 801525e:	4413      	add	r3, r2
 8015260:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015264:	681b      	ldr	r3, [r3, #0]
 8015266:	68ba      	ldr	r2, [r7, #8]
 8015268:	0151      	lsls	r1, r2, #5
 801526a:	68fa      	ldr	r2, [r7, #12]
 801526c:	440a      	add	r2, r1
 801526e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015272:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8015276:	6013      	str	r3, [r2, #0]
 8015278:	e02b      	b.n	80152d2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801527a:	68bb      	ldr	r3, [r7, #8]
 801527c:	015a      	lsls	r2, r3, #5
 801527e:	68fb      	ldr	r3, [r7, #12]
 8015280:	4413      	add	r3, r2
 8015282:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015286:	681b      	ldr	r3, [r3, #0]
 8015288:	2b00      	cmp	r3, #0
 801528a:	db12      	blt.n	80152b2 <USB_EPSetStall+0xae>
 801528c:	68bb      	ldr	r3, [r7, #8]
 801528e:	2b00      	cmp	r3, #0
 8015290:	d00f      	beq.n	80152b2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8015292:	68bb      	ldr	r3, [r7, #8]
 8015294:	015a      	lsls	r2, r3, #5
 8015296:	68fb      	ldr	r3, [r7, #12]
 8015298:	4413      	add	r3, r2
 801529a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801529e:	681b      	ldr	r3, [r3, #0]
 80152a0:	68ba      	ldr	r2, [r7, #8]
 80152a2:	0151      	lsls	r1, r2, #5
 80152a4:	68fa      	ldr	r2, [r7, #12]
 80152a6:	440a      	add	r2, r1
 80152a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80152ac:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80152b0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80152b2:	68bb      	ldr	r3, [r7, #8]
 80152b4:	015a      	lsls	r2, r3, #5
 80152b6:	68fb      	ldr	r3, [r7, #12]
 80152b8:	4413      	add	r3, r2
 80152ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80152be:	681b      	ldr	r3, [r3, #0]
 80152c0:	68ba      	ldr	r2, [r7, #8]
 80152c2:	0151      	lsls	r1, r2, #5
 80152c4:	68fa      	ldr	r2, [r7, #12]
 80152c6:	440a      	add	r2, r1
 80152c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80152cc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80152d0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80152d2:	2300      	movs	r3, #0
}
 80152d4:	4618      	mov	r0, r3
 80152d6:	3714      	adds	r7, #20
 80152d8:	46bd      	mov	sp, r7
 80152da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152de:	4770      	bx	lr

080152e0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80152e0:	b480      	push	{r7}
 80152e2:	b085      	sub	sp, #20
 80152e4:	af00      	add	r7, sp, #0
 80152e6:	6078      	str	r0, [r7, #4]
 80152e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80152ea:	687b      	ldr	r3, [r7, #4]
 80152ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80152ee:	683b      	ldr	r3, [r7, #0]
 80152f0:	781b      	ldrb	r3, [r3, #0]
 80152f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80152f4:	683b      	ldr	r3, [r7, #0]
 80152f6:	785b      	ldrb	r3, [r3, #1]
 80152f8:	2b01      	cmp	r3, #1
 80152fa:	d128      	bne.n	801534e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80152fc:	68bb      	ldr	r3, [r7, #8]
 80152fe:	015a      	lsls	r2, r3, #5
 8015300:	68fb      	ldr	r3, [r7, #12]
 8015302:	4413      	add	r3, r2
 8015304:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015308:	681b      	ldr	r3, [r3, #0]
 801530a:	68ba      	ldr	r2, [r7, #8]
 801530c:	0151      	lsls	r1, r2, #5
 801530e:	68fa      	ldr	r2, [r7, #12]
 8015310:	440a      	add	r2, r1
 8015312:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015316:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 801531a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801531c:	683b      	ldr	r3, [r7, #0]
 801531e:	791b      	ldrb	r3, [r3, #4]
 8015320:	2b03      	cmp	r3, #3
 8015322:	d003      	beq.n	801532c <USB_EPClearStall+0x4c>
 8015324:	683b      	ldr	r3, [r7, #0]
 8015326:	791b      	ldrb	r3, [r3, #4]
 8015328:	2b02      	cmp	r3, #2
 801532a:	d138      	bne.n	801539e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801532c:	68bb      	ldr	r3, [r7, #8]
 801532e:	015a      	lsls	r2, r3, #5
 8015330:	68fb      	ldr	r3, [r7, #12]
 8015332:	4413      	add	r3, r2
 8015334:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015338:	681b      	ldr	r3, [r3, #0]
 801533a:	68ba      	ldr	r2, [r7, #8]
 801533c:	0151      	lsls	r1, r2, #5
 801533e:	68fa      	ldr	r2, [r7, #12]
 8015340:	440a      	add	r2, r1
 8015342:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015346:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801534a:	6013      	str	r3, [r2, #0]
 801534c:	e027      	b.n	801539e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801534e:	68bb      	ldr	r3, [r7, #8]
 8015350:	015a      	lsls	r2, r3, #5
 8015352:	68fb      	ldr	r3, [r7, #12]
 8015354:	4413      	add	r3, r2
 8015356:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801535a:	681b      	ldr	r3, [r3, #0]
 801535c:	68ba      	ldr	r2, [r7, #8]
 801535e:	0151      	lsls	r1, r2, #5
 8015360:	68fa      	ldr	r2, [r7, #12]
 8015362:	440a      	add	r2, r1
 8015364:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015368:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 801536c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801536e:	683b      	ldr	r3, [r7, #0]
 8015370:	791b      	ldrb	r3, [r3, #4]
 8015372:	2b03      	cmp	r3, #3
 8015374:	d003      	beq.n	801537e <USB_EPClearStall+0x9e>
 8015376:	683b      	ldr	r3, [r7, #0]
 8015378:	791b      	ldrb	r3, [r3, #4]
 801537a:	2b02      	cmp	r3, #2
 801537c:	d10f      	bne.n	801539e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801537e:	68bb      	ldr	r3, [r7, #8]
 8015380:	015a      	lsls	r2, r3, #5
 8015382:	68fb      	ldr	r3, [r7, #12]
 8015384:	4413      	add	r3, r2
 8015386:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801538a:	681b      	ldr	r3, [r3, #0]
 801538c:	68ba      	ldr	r2, [r7, #8]
 801538e:	0151      	lsls	r1, r2, #5
 8015390:	68fa      	ldr	r2, [r7, #12]
 8015392:	440a      	add	r2, r1
 8015394:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015398:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801539c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 801539e:	2300      	movs	r3, #0
}
 80153a0:	4618      	mov	r0, r3
 80153a2:	3714      	adds	r7, #20
 80153a4:	46bd      	mov	sp, r7
 80153a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153aa:	4770      	bx	lr

080153ac <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80153ac:	b480      	push	{r7}
 80153ae:	b085      	sub	sp, #20
 80153b0:	af00      	add	r7, sp, #0
 80153b2:	6078      	str	r0, [r7, #4]
 80153b4:	460b      	mov	r3, r1
 80153b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80153bc:	68fb      	ldr	r3, [r7, #12]
 80153be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80153c2:	681b      	ldr	r3, [r3, #0]
 80153c4:	68fa      	ldr	r2, [r7, #12]
 80153c6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80153ca:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80153ce:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80153d0:	68fb      	ldr	r3, [r7, #12]
 80153d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80153d6:	681a      	ldr	r2, [r3, #0]
 80153d8:	78fb      	ldrb	r3, [r7, #3]
 80153da:	011b      	lsls	r3, r3, #4
 80153dc:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80153e0:	68f9      	ldr	r1, [r7, #12]
 80153e2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80153e6:	4313      	orrs	r3, r2
 80153e8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80153ea:	2300      	movs	r3, #0
}
 80153ec:	4618      	mov	r0, r3
 80153ee:	3714      	adds	r7, #20
 80153f0:	46bd      	mov	sp, r7
 80153f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153f6:	4770      	bx	lr

080153f8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80153f8:	b480      	push	{r7}
 80153fa:	b085      	sub	sp, #20
 80153fc:	af00      	add	r7, sp, #0
 80153fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015400:	687b      	ldr	r3, [r7, #4]
 8015402:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8015404:	68fb      	ldr	r3, [r7, #12]
 8015406:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801540a:	681b      	ldr	r3, [r3, #0]
 801540c:	68fa      	ldr	r2, [r7, #12]
 801540e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8015412:	f023 0303 	bic.w	r3, r3, #3
 8015416:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8015418:	68fb      	ldr	r3, [r7, #12]
 801541a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801541e:	685b      	ldr	r3, [r3, #4]
 8015420:	68fa      	ldr	r2, [r7, #12]
 8015422:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8015426:	f023 0302 	bic.w	r3, r3, #2
 801542a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801542c:	2300      	movs	r3, #0
}
 801542e:	4618      	mov	r0, r3
 8015430:	3714      	adds	r7, #20
 8015432:	46bd      	mov	sp, r7
 8015434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015438:	4770      	bx	lr

0801543a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 801543a:	b480      	push	{r7}
 801543c:	b085      	sub	sp, #20
 801543e:	af00      	add	r7, sp, #0
 8015440:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015442:	687b      	ldr	r3, [r7, #4]
 8015444:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8015446:	68fb      	ldr	r3, [r7, #12]
 8015448:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801544c:	681b      	ldr	r3, [r3, #0]
 801544e:	68fa      	ldr	r2, [r7, #12]
 8015450:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8015454:	f023 0303 	bic.w	r3, r3, #3
 8015458:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801545a:	68fb      	ldr	r3, [r7, #12]
 801545c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015460:	685b      	ldr	r3, [r3, #4]
 8015462:	68fa      	ldr	r2, [r7, #12]
 8015464:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8015468:	f043 0302 	orr.w	r3, r3, #2
 801546c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801546e:	2300      	movs	r3, #0
}
 8015470:	4618      	mov	r0, r3
 8015472:	3714      	adds	r7, #20
 8015474:	46bd      	mov	sp, r7
 8015476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801547a:	4770      	bx	lr

0801547c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 801547c:	b480      	push	{r7}
 801547e:	b085      	sub	sp, #20
 8015480:	af00      	add	r7, sp, #0
 8015482:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8015484:	687b      	ldr	r3, [r7, #4]
 8015486:	695b      	ldr	r3, [r3, #20]
 8015488:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801548a:	687b      	ldr	r3, [r7, #4]
 801548c:	699b      	ldr	r3, [r3, #24]
 801548e:	68fa      	ldr	r2, [r7, #12]
 8015490:	4013      	ands	r3, r2
 8015492:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8015494:	68fb      	ldr	r3, [r7, #12]
}
 8015496:	4618      	mov	r0, r3
 8015498:	3714      	adds	r7, #20
 801549a:	46bd      	mov	sp, r7
 801549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154a0:	4770      	bx	lr

080154a2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80154a2:	b480      	push	{r7}
 80154a4:	b085      	sub	sp, #20
 80154a6:	af00      	add	r7, sp, #0
 80154a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80154aa:	687b      	ldr	r3, [r7, #4]
 80154ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80154ae:	68fb      	ldr	r3, [r7, #12]
 80154b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80154b4:	699b      	ldr	r3, [r3, #24]
 80154b6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80154b8:	68fb      	ldr	r3, [r7, #12]
 80154ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80154be:	69db      	ldr	r3, [r3, #28]
 80154c0:	68ba      	ldr	r2, [r7, #8]
 80154c2:	4013      	ands	r3, r2
 80154c4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80154c6:	68bb      	ldr	r3, [r7, #8]
 80154c8:	0c1b      	lsrs	r3, r3, #16
}
 80154ca:	4618      	mov	r0, r3
 80154cc:	3714      	adds	r7, #20
 80154ce:	46bd      	mov	sp, r7
 80154d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154d4:	4770      	bx	lr

080154d6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80154d6:	b480      	push	{r7}
 80154d8:	b085      	sub	sp, #20
 80154da:	af00      	add	r7, sp, #0
 80154dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80154de:	687b      	ldr	r3, [r7, #4]
 80154e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80154e2:	68fb      	ldr	r3, [r7, #12]
 80154e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80154e8:	699b      	ldr	r3, [r3, #24]
 80154ea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80154ec:	68fb      	ldr	r3, [r7, #12]
 80154ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80154f2:	69db      	ldr	r3, [r3, #28]
 80154f4:	68ba      	ldr	r2, [r7, #8]
 80154f6:	4013      	ands	r3, r2
 80154f8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80154fa:	68bb      	ldr	r3, [r7, #8]
 80154fc:	b29b      	uxth	r3, r3
}
 80154fe:	4618      	mov	r0, r3
 8015500:	3714      	adds	r7, #20
 8015502:	46bd      	mov	sp, r7
 8015504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015508:	4770      	bx	lr

0801550a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801550a:	b480      	push	{r7}
 801550c:	b085      	sub	sp, #20
 801550e:	af00      	add	r7, sp, #0
 8015510:	6078      	str	r0, [r7, #4]
 8015512:	460b      	mov	r3, r1
 8015514:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015516:	687b      	ldr	r3, [r7, #4]
 8015518:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801551a:	78fb      	ldrb	r3, [r7, #3]
 801551c:	015a      	lsls	r2, r3, #5
 801551e:	68fb      	ldr	r3, [r7, #12]
 8015520:	4413      	add	r3, r2
 8015522:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015526:	689b      	ldr	r3, [r3, #8]
 8015528:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801552a:	68fb      	ldr	r3, [r7, #12]
 801552c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015530:	695b      	ldr	r3, [r3, #20]
 8015532:	68ba      	ldr	r2, [r7, #8]
 8015534:	4013      	ands	r3, r2
 8015536:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8015538:	68bb      	ldr	r3, [r7, #8]
}
 801553a:	4618      	mov	r0, r3
 801553c:	3714      	adds	r7, #20
 801553e:	46bd      	mov	sp, r7
 8015540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015544:	4770      	bx	lr

08015546 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8015546:	b480      	push	{r7}
 8015548:	b087      	sub	sp, #28
 801554a:	af00      	add	r7, sp, #0
 801554c:	6078      	str	r0, [r7, #4]
 801554e:	460b      	mov	r3, r1
 8015550:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015552:	687b      	ldr	r3, [r7, #4]
 8015554:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8015556:	697b      	ldr	r3, [r7, #20]
 8015558:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801555c:	691b      	ldr	r3, [r3, #16]
 801555e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8015560:	697b      	ldr	r3, [r7, #20]
 8015562:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015566:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015568:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801556a:	78fb      	ldrb	r3, [r7, #3]
 801556c:	f003 030f 	and.w	r3, r3, #15
 8015570:	68fa      	ldr	r2, [r7, #12]
 8015572:	fa22 f303 	lsr.w	r3, r2, r3
 8015576:	01db      	lsls	r3, r3, #7
 8015578:	b2db      	uxtb	r3, r3
 801557a:	693a      	ldr	r2, [r7, #16]
 801557c:	4313      	orrs	r3, r2
 801557e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8015580:	78fb      	ldrb	r3, [r7, #3]
 8015582:	015a      	lsls	r2, r3, #5
 8015584:	697b      	ldr	r3, [r7, #20]
 8015586:	4413      	add	r3, r2
 8015588:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801558c:	689b      	ldr	r3, [r3, #8]
 801558e:	693a      	ldr	r2, [r7, #16]
 8015590:	4013      	ands	r3, r2
 8015592:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8015594:	68bb      	ldr	r3, [r7, #8]
}
 8015596:	4618      	mov	r0, r3
 8015598:	371c      	adds	r7, #28
 801559a:	46bd      	mov	sp, r7
 801559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155a0:	4770      	bx	lr

080155a2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80155a2:	b480      	push	{r7}
 80155a4:	b083      	sub	sp, #12
 80155a6:	af00      	add	r7, sp, #0
 80155a8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80155aa:	687b      	ldr	r3, [r7, #4]
 80155ac:	695b      	ldr	r3, [r3, #20]
 80155ae:	f003 0301 	and.w	r3, r3, #1
}
 80155b2:	4618      	mov	r0, r3
 80155b4:	370c      	adds	r7, #12
 80155b6:	46bd      	mov	sp, r7
 80155b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155bc:	4770      	bx	lr

080155be <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80155be:	b480      	push	{r7}
 80155c0:	b085      	sub	sp, #20
 80155c2:	af00      	add	r7, sp, #0
 80155c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80155c6:	687b      	ldr	r3, [r7, #4]
 80155c8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80155ca:	68fb      	ldr	r3, [r7, #12]
 80155cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80155d0:	681b      	ldr	r3, [r3, #0]
 80155d2:	68fa      	ldr	r2, [r7, #12]
 80155d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80155d8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80155dc:	f023 0307 	bic.w	r3, r3, #7
 80155e0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80155e2:	68fb      	ldr	r3, [r7, #12]
 80155e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80155e8:	685b      	ldr	r3, [r3, #4]
 80155ea:	68fa      	ldr	r2, [r7, #12]
 80155ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80155f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80155f4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80155f6:	2300      	movs	r3, #0
}
 80155f8:	4618      	mov	r0, r3
 80155fa:	3714      	adds	r7, #20
 80155fc:	46bd      	mov	sp, r7
 80155fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015602:	4770      	bx	lr

08015604 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8015604:	b480      	push	{r7}
 8015606:	b087      	sub	sp, #28
 8015608:	af00      	add	r7, sp, #0
 801560a:	60f8      	str	r0, [r7, #12]
 801560c:	460b      	mov	r3, r1
 801560e:	607a      	str	r2, [r7, #4]
 8015610:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015612:	68fb      	ldr	r3, [r7, #12]
 8015614:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8015616:	68fb      	ldr	r3, [r7, #12]
 8015618:	333c      	adds	r3, #60	@ 0x3c
 801561a:	3304      	adds	r3, #4
 801561c:	681b      	ldr	r3, [r3, #0]
 801561e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8015620:	693b      	ldr	r3, [r7, #16]
 8015622:	4a26      	ldr	r2, [pc, #152]	@ (80156bc <USB_EP0_OutStart+0xb8>)
 8015624:	4293      	cmp	r3, r2
 8015626:	d90a      	bls.n	801563e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8015628:	697b      	ldr	r3, [r7, #20]
 801562a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801562e:	681b      	ldr	r3, [r3, #0]
 8015630:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8015634:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8015638:	d101      	bne.n	801563e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801563a:	2300      	movs	r3, #0
 801563c:	e037      	b.n	80156ae <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801563e:	697b      	ldr	r3, [r7, #20]
 8015640:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015644:	461a      	mov	r2, r3
 8015646:	2300      	movs	r3, #0
 8015648:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801564a:	697b      	ldr	r3, [r7, #20]
 801564c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015650:	691b      	ldr	r3, [r3, #16]
 8015652:	697a      	ldr	r2, [r7, #20]
 8015654:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015658:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801565c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801565e:	697b      	ldr	r3, [r7, #20]
 8015660:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015664:	691b      	ldr	r3, [r3, #16]
 8015666:	697a      	ldr	r2, [r7, #20]
 8015668:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801566c:	f043 0318 	orr.w	r3, r3, #24
 8015670:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8015672:	697b      	ldr	r3, [r7, #20]
 8015674:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015678:	691b      	ldr	r3, [r3, #16]
 801567a:	697a      	ldr	r2, [r7, #20]
 801567c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015680:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8015684:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8015686:	7afb      	ldrb	r3, [r7, #11]
 8015688:	2b01      	cmp	r3, #1
 801568a:	d10f      	bne.n	80156ac <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 801568c:	697b      	ldr	r3, [r7, #20]
 801568e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015692:	461a      	mov	r2, r3
 8015694:	687b      	ldr	r3, [r7, #4]
 8015696:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8015698:	697b      	ldr	r3, [r7, #20]
 801569a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801569e:	681b      	ldr	r3, [r3, #0]
 80156a0:	697a      	ldr	r2, [r7, #20]
 80156a2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80156a6:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80156aa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80156ac:	2300      	movs	r3, #0
}
 80156ae:	4618      	mov	r0, r3
 80156b0:	371c      	adds	r7, #28
 80156b2:	46bd      	mov	sp, r7
 80156b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156b8:	4770      	bx	lr
 80156ba:	bf00      	nop
 80156bc:	4f54300a 	.word	0x4f54300a

080156c0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80156c0:	b480      	push	{r7}
 80156c2:	b085      	sub	sp, #20
 80156c4:	af00      	add	r7, sp, #0
 80156c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80156c8:	2300      	movs	r3, #0
 80156ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80156cc:	68fb      	ldr	r3, [r7, #12]
 80156ce:	3301      	adds	r3, #1
 80156d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80156d2:	68fb      	ldr	r3, [r7, #12]
 80156d4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80156d8:	d901      	bls.n	80156de <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80156da:	2303      	movs	r3, #3
 80156dc:	e022      	b.n	8015724 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80156de:	687b      	ldr	r3, [r7, #4]
 80156e0:	691b      	ldr	r3, [r3, #16]
 80156e2:	2b00      	cmp	r3, #0
 80156e4:	daf2      	bge.n	80156cc <USB_CoreReset+0xc>

  count = 10U;
 80156e6:	230a      	movs	r3, #10
 80156e8:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 80156ea:	e002      	b.n	80156f2 <USB_CoreReset+0x32>
  {
    count--;
 80156ec:	68fb      	ldr	r3, [r7, #12]
 80156ee:	3b01      	subs	r3, #1
 80156f0:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80156f2:	68fb      	ldr	r3, [r7, #12]
 80156f4:	2b00      	cmp	r3, #0
 80156f6:	d1f9      	bne.n	80156ec <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80156f8:	687b      	ldr	r3, [r7, #4]
 80156fa:	691b      	ldr	r3, [r3, #16]
 80156fc:	f043 0201 	orr.w	r2, r3, #1
 8015700:	687b      	ldr	r3, [r7, #4]
 8015702:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8015704:	68fb      	ldr	r3, [r7, #12]
 8015706:	3301      	adds	r3, #1
 8015708:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801570a:	68fb      	ldr	r3, [r7, #12]
 801570c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8015710:	d901      	bls.n	8015716 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8015712:	2303      	movs	r3, #3
 8015714:	e006      	b.n	8015724 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8015716:	687b      	ldr	r3, [r7, #4]
 8015718:	691b      	ldr	r3, [r3, #16]
 801571a:	f003 0301 	and.w	r3, r3, #1
 801571e:	2b01      	cmp	r3, #1
 8015720:	d0f0      	beq.n	8015704 <USB_CoreReset+0x44>

  return HAL_OK;
 8015722:	2300      	movs	r3, #0
}
 8015724:	4618      	mov	r0, r3
 8015726:	3714      	adds	r7, #20
 8015728:	46bd      	mov	sp, r7
 801572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801572e:	4770      	bx	lr

08015730 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015730:	b580      	push	{r7, lr}
 8015732:	b084      	sub	sp, #16
 8015734:	af00      	add	r7, sp, #0
 8015736:	6078      	str	r0, [r7, #4]
 8015738:	460b      	mov	r3, r1
 801573a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801573c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8015740:	f002 fc64 	bl	801800c <USBD_static_malloc>
 8015744:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8015746:	68fb      	ldr	r3, [r7, #12]
 8015748:	2b00      	cmp	r3, #0
 801574a:	d109      	bne.n	8015760 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 801574c:	687b      	ldr	r3, [r7, #4]
 801574e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015752:	687b      	ldr	r3, [r7, #4]
 8015754:	32b0      	adds	r2, #176	@ 0xb0
 8015756:	2100      	movs	r1, #0
 8015758:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 801575c:	2302      	movs	r3, #2
 801575e:	e0d4      	b.n	801590a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8015760:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8015764:	2100      	movs	r1, #0
 8015766:	68f8      	ldr	r0, [r7, #12]
 8015768:	f002 fc94 	bl	8018094 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 801576c:	687b      	ldr	r3, [r7, #4]
 801576e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015772:	687b      	ldr	r3, [r7, #4]
 8015774:	32b0      	adds	r2, #176	@ 0xb0
 8015776:	68f9      	ldr	r1, [r7, #12]
 8015778:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015782:	687b      	ldr	r3, [r7, #4]
 8015784:	32b0      	adds	r2, #176	@ 0xb0
 8015786:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801578a:	687b      	ldr	r3, [r7, #4]
 801578c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015790:	687b      	ldr	r3, [r7, #4]
 8015792:	7c1b      	ldrb	r3, [r3, #16]
 8015794:	2b00      	cmp	r3, #0
 8015796:	d138      	bne.n	801580a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8015798:	4b5e      	ldr	r3, [pc, #376]	@ (8015914 <USBD_CDC_Init+0x1e4>)
 801579a:	7819      	ldrb	r1, [r3, #0]
 801579c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80157a0:	2202      	movs	r2, #2
 80157a2:	6878      	ldr	r0, [r7, #4]
 80157a4:	f002 fb0f 	bl	8017dc6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80157a8:	4b5a      	ldr	r3, [pc, #360]	@ (8015914 <USBD_CDC_Init+0x1e4>)
 80157aa:	781b      	ldrb	r3, [r3, #0]
 80157ac:	f003 020f 	and.w	r2, r3, #15
 80157b0:	6879      	ldr	r1, [r7, #4]
 80157b2:	4613      	mov	r3, r2
 80157b4:	009b      	lsls	r3, r3, #2
 80157b6:	4413      	add	r3, r2
 80157b8:	009b      	lsls	r3, r3, #2
 80157ba:	440b      	add	r3, r1
 80157bc:	3323      	adds	r3, #35	@ 0x23
 80157be:	2201      	movs	r2, #1
 80157c0:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80157c2:	4b55      	ldr	r3, [pc, #340]	@ (8015918 <USBD_CDC_Init+0x1e8>)
 80157c4:	7819      	ldrb	r1, [r3, #0]
 80157c6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80157ca:	2202      	movs	r2, #2
 80157cc:	6878      	ldr	r0, [r7, #4]
 80157ce:	f002 fafa 	bl	8017dc6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80157d2:	4b51      	ldr	r3, [pc, #324]	@ (8015918 <USBD_CDC_Init+0x1e8>)
 80157d4:	781b      	ldrb	r3, [r3, #0]
 80157d6:	f003 020f 	and.w	r2, r3, #15
 80157da:	6879      	ldr	r1, [r7, #4]
 80157dc:	4613      	mov	r3, r2
 80157de:	009b      	lsls	r3, r3, #2
 80157e0:	4413      	add	r3, r2
 80157e2:	009b      	lsls	r3, r3, #2
 80157e4:	440b      	add	r3, r1
 80157e6:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80157ea:	2201      	movs	r2, #1
 80157ec:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80157ee:	4b4b      	ldr	r3, [pc, #300]	@ (801591c <USBD_CDC_Init+0x1ec>)
 80157f0:	781b      	ldrb	r3, [r3, #0]
 80157f2:	f003 020f 	and.w	r2, r3, #15
 80157f6:	6879      	ldr	r1, [r7, #4]
 80157f8:	4613      	mov	r3, r2
 80157fa:	009b      	lsls	r3, r3, #2
 80157fc:	4413      	add	r3, r2
 80157fe:	009b      	lsls	r3, r3, #2
 8015800:	440b      	add	r3, r1
 8015802:	331c      	adds	r3, #28
 8015804:	2210      	movs	r2, #16
 8015806:	601a      	str	r2, [r3, #0]
 8015808:	e035      	b.n	8015876 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 801580a:	4b42      	ldr	r3, [pc, #264]	@ (8015914 <USBD_CDC_Init+0x1e4>)
 801580c:	7819      	ldrb	r1, [r3, #0]
 801580e:	2340      	movs	r3, #64	@ 0x40
 8015810:	2202      	movs	r2, #2
 8015812:	6878      	ldr	r0, [r7, #4]
 8015814:	f002 fad7 	bl	8017dc6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8015818:	4b3e      	ldr	r3, [pc, #248]	@ (8015914 <USBD_CDC_Init+0x1e4>)
 801581a:	781b      	ldrb	r3, [r3, #0]
 801581c:	f003 020f 	and.w	r2, r3, #15
 8015820:	6879      	ldr	r1, [r7, #4]
 8015822:	4613      	mov	r3, r2
 8015824:	009b      	lsls	r3, r3, #2
 8015826:	4413      	add	r3, r2
 8015828:	009b      	lsls	r3, r3, #2
 801582a:	440b      	add	r3, r1
 801582c:	3323      	adds	r3, #35	@ 0x23
 801582e:	2201      	movs	r2, #1
 8015830:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8015832:	4b39      	ldr	r3, [pc, #228]	@ (8015918 <USBD_CDC_Init+0x1e8>)
 8015834:	7819      	ldrb	r1, [r3, #0]
 8015836:	2340      	movs	r3, #64	@ 0x40
 8015838:	2202      	movs	r2, #2
 801583a:	6878      	ldr	r0, [r7, #4]
 801583c:	f002 fac3 	bl	8017dc6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8015840:	4b35      	ldr	r3, [pc, #212]	@ (8015918 <USBD_CDC_Init+0x1e8>)
 8015842:	781b      	ldrb	r3, [r3, #0]
 8015844:	f003 020f 	and.w	r2, r3, #15
 8015848:	6879      	ldr	r1, [r7, #4]
 801584a:	4613      	mov	r3, r2
 801584c:	009b      	lsls	r3, r3, #2
 801584e:	4413      	add	r3, r2
 8015850:	009b      	lsls	r3, r3, #2
 8015852:	440b      	add	r3, r1
 8015854:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8015858:	2201      	movs	r2, #1
 801585a:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 801585c:	4b2f      	ldr	r3, [pc, #188]	@ (801591c <USBD_CDC_Init+0x1ec>)
 801585e:	781b      	ldrb	r3, [r3, #0]
 8015860:	f003 020f 	and.w	r2, r3, #15
 8015864:	6879      	ldr	r1, [r7, #4]
 8015866:	4613      	mov	r3, r2
 8015868:	009b      	lsls	r3, r3, #2
 801586a:	4413      	add	r3, r2
 801586c:	009b      	lsls	r3, r3, #2
 801586e:	440b      	add	r3, r1
 8015870:	331c      	adds	r3, #28
 8015872:	2210      	movs	r2, #16
 8015874:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8015876:	4b29      	ldr	r3, [pc, #164]	@ (801591c <USBD_CDC_Init+0x1ec>)
 8015878:	7819      	ldrb	r1, [r3, #0]
 801587a:	2308      	movs	r3, #8
 801587c:	2203      	movs	r2, #3
 801587e:	6878      	ldr	r0, [r7, #4]
 8015880:	f002 faa1 	bl	8017dc6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8015884:	4b25      	ldr	r3, [pc, #148]	@ (801591c <USBD_CDC_Init+0x1ec>)
 8015886:	781b      	ldrb	r3, [r3, #0]
 8015888:	f003 020f 	and.w	r2, r3, #15
 801588c:	6879      	ldr	r1, [r7, #4]
 801588e:	4613      	mov	r3, r2
 8015890:	009b      	lsls	r3, r3, #2
 8015892:	4413      	add	r3, r2
 8015894:	009b      	lsls	r3, r3, #2
 8015896:	440b      	add	r3, r1
 8015898:	3323      	adds	r3, #35	@ 0x23
 801589a:	2201      	movs	r2, #1
 801589c:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 801589e:	68fb      	ldr	r3, [r7, #12]
 80158a0:	2200      	movs	r2, #0
 80158a2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80158a6:	687b      	ldr	r3, [r7, #4]
 80158a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80158ac:	687a      	ldr	r2, [r7, #4]
 80158ae:	33b0      	adds	r3, #176	@ 0xb0
 80158b0:	009b      	lsls	r3, r3, #2
 80158b2:	4413      	add	r3, r2
 80158b4:	685b      	ldr	r3, [r3, #4]
 80158b6:	681b      	ldr	r3, [r3, #0]
 80158b8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80158ba:	68fb      	ldr	r3, [r7, #12]
 80158bc:	2200      	movs	r2, #0
 80158be:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80158c2:	68fb      	ldr	r3, [r7, #12]
 80158c4:	2200      	movs	r2, #0
 80158c6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80158ca:	68fb      	ldr	r3, [r7, #12]
 80158cc:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80158d0:	2b00      	cmp	r3, #0
 80158d2:	d101      	bne.n	80158d8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80158d4:	2302      	movs	r3, #2
 80158d6:	e018      	b.n	801590a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80158d8:	687b      	ldr	r3, [r7, #4]
 80158da:	7c1b      	ldrb	r3, [r3, #16]
 80158dc:	2b00      	cmp	r3, #0
 80158de:	d10a      	bne.n	80158f6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80158e0:	4b0d      	ldr	r3, [pc, #52]	@ (8015918 <USBD_CDC_Init+0x1e8>)
 80158e2:	7819      	ldrb	r1, [r3, #0]
 80158e4:	68fb      	ldr	r3, [r7, #12]
 80158e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80158ea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80158ee:	6878      	ldr	r0, [r7, #4]
 80158f0:	f002 fb58 	bl	8017fa4 <USBD_LL_PrepareReceive>
 80158f4:	e008      	b.n	8015908 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80158f6:	4b08      	ldr	r3, [pc, #32]	@ (8015918 <USBD_CDC_Init+0x1e8>)
 80158f8:	7819      	ldrb	r1, [r3, #0]
 80158fa:	68fb      	ldr	r3, [r7, #12]
 80158fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8015900:	2340      	movs	r3, #64	@ 0x40
 8015902:	6878      	ldr	r0, [r7, #4]
 8015904:	f002 fb4e 	bl	8017fa4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8015908:	2300      	movs	r3, #0
}
 801590a:	4618      	mov	r0, r3
 801590c:	3710      	adds	r7, #16
 801590e:	46bd      	mov	sp, r7
 8015910:	bd80      	pop	{r7, pc}
 8015912:	bf00      	nop
 8015914:	20000093 	.word	0x20000093
 8015918:	20000094 	.word	0x20000094
 801591c:	20000095 	.word	0x20000095

08015920 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015920:	b580      	push	{r7, lr}
 8015922:	b082      	sub	sp, #8
 8015924:	af00      	add	r7, sp, #0
 8015926:	6078      	str	r0, [r7, #4]
 8015928:	460b      	mov	r3, r1
 801592a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 801592c:	4b3a      	ldr	r3, [pc, #232]	@ (8015a18 <USBD_CDC_DeInit+0xf8>)
 801592e:	781b      	ldrb	r3, [r3, #0]
 8015930:	4619      	mov	r1, r3
 8015932:	6878      	ldr	r0, [r7, #4]
 8015934:	f002 fa6d 	bl	8017e12 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8015938:	4b37      	ldr	r3, [pc, #220]	@ (8015a18 <USBD_CDC_DeInit+0xf8>)
 801593a:	781b      	ldrb	r3, [r3, #0]
 801593c:	f003 020f 	and.w	r2, r3, #15
 8015940:	6879      	ldr	r1, [r7, #4]
 8015942:	4613      	mov	r3, r2
 8015944:	009b      	lsls	r3, r3, #2
 8015946:	4413      	add	r3, r2
 8015948:	009b      	lsls	r3, r3, #2
 801594a:	440b      	add	r3, r1
 801594c:	3323      	adds	r3, #35	@ 0x23
 801594e:	2200      	movs	r2, #0
 8015950:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8015952:	4b32      	ldr	r3, [pc, #200]	@ (8015a1c <USBD_CDC_DeInit+0xfc>)
 8015954:	781b      	ldrb	r3, [r3, #0]
 8015956:	4619      	mov	r1, r3
 8015958:	6878      	ldr	r0, [r7, #4]
 801595a:	f002 fa5a 	bl	8017e12 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 801595e:	4b2f      	ldr	r3, [pc, #188]	@ (8015a1c <USBD_CDC_DeInit+0xfc>)
 8015960:	781b      	ldrb	r3, [r3, #0]
 8015962:	f003 020f 	and.w	r2, r3, #15
 8015966:	6879      	ldr	r1, [r7, #4]
 8015968:	4613      	mov	r3, r2
 801596a:	009b      	lsls	r3, r3, #2
 801596c:	4413      	add	r3, r2
 801596e:	009b      	lsls	r3, r3, #2
 8015970:	440b      	add	r3, r1
 8015972:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8015976:	2200      	movs	r2, #0
 8015978:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 801597a:	4b29      	ldr	r3, [pc, #164]	@ (8015a20 <USBD_CDC_DeInit+0x100>)
 801597c:	781b      	ldrb	r3, [r3, #0]
 801597e:	4619      	mov	r1, r3
 8015980:	6878      	ldr	r0, [r7, #4]
 8015982:	f002 fa46 	bl	8017e12 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8015986:	4b26      	ldr	r3, [pc, #152]	@ (8015a20 <USBD_CDC_DeInit+0x100>)
 8015988:	781b      	ldrb	r3, [r3, #0]
 801598a:	f003 020f 	and.w	r2, r3, #15
 801598e:	6879      	ldr	r1, [r7, #4]
 8015990:	4613      	mov	r3, r2
 8015992:	009b      	lsls	r3, r3, #2
 8015994:	4413      	add	r3, r2
 8015996:	009b      	lsls	r3, r3, #2
 8015998:	440b      	add	r3, r1
 801599a:	3323      	adds	r3, #35	@ 0x23
 801599c:	2200      	movs	r2, #0
 801599e:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80159a0:	4b1f      	ldr	r3, [pc, #124]	@ (8015a20 <USBD_CDC_DeInit+0x100>)
 80159a2:	781b      	ldrb	r3, [r3, #0]
 80159a4:	f003 020f 	and.w	r2, r3, #15
 80159a8:	6879      	ldr	r1, [r7, #4]
 80159aa:	4613      	mov	r3, r2
 80159ac:	009b      	lsls	r3, r3, #2
 80159ae:	4413      	add	r3, r2
 80159b0:	009b      	lsls	r3, r3, #2
 80159b2:	440b      	add	r3, r1
 80159b4:	331c      	adds	r3, #28
 80159b6:	2200      	movs	r2, #0
 80159b8:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80159ba:	687b      	ldr	r3, [r7, #4]
 80159bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80159c0:	687b      	ldr	r3, [r7, #4]
 80159c2:	32b0      	adds	r2, #176	@ 0xb0
 80159c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80159c8:	2b00      	cmp	r3, #0
 80159ca:	d01f      	beq.n	8015a0c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80159cc:	687b      	ldr	r3, [r7, #4]
 80159ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80159d2:	687a      	ldr	r2, [r7, #4]
 80159d4:	33b0      	adds	r3, #176	@ 0xb0
 80159d6:	009b      	lsls	r3, r3, #2
 80159d8:	4413      	add	r3, r2
 80159da:	685b      	ldr	r3, [r3, #4]
 80159dc:	685b      	ldr	r3, [r3, #4]
 80159de:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80159e0:	687b      	ldr	r3, [r7, #4]
 80159e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80159e6:	687b      	ldr	r3, [r7, #4]
 80159e8:	32b0      	adds	r2, #176	@ 0xb0
 80159ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80159ee:	4618      	mov	r0, r3
 80159f0:	f002 fb1a 	bl	8018028 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80159f4:	687b      	ldr	r3, [r7, #4]
 80159f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80159fa:	687b      	ldr	r3, [r7, #4]
 80159fc:	32b0      	adds	r2, #176	@ 0xb0
 80159fe:	2100      	movs	r1, #0
 8015a00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8015a04:	687b      	ldr	r3, [r7, #4]
 8015a06:	2200      	movs	r2, #0
 8015a08:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8015a0c:	2300      	movs	r3, #0
}
 8015a0e:	4618      	mov	r0, r3
 8015a10:	3708      	adds	r7, #8
 8015a12:	46bd      	mov	sp, r7
 8015a14:	bd80      	pop	{r7, pc}
 8015a16:	bf00      	nop
 8015a18:	20000093 	.word	0x20000093
 8015a1c:	20000094 	.word	0x20000094
 8015a20:	20000095 	.word	0x20000095

08015a24 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8015a24:	b580      	push	{r7, lr}
 8015a26:	b086      	sub	sp, #24
 8015a28:	af00      	add	r7, sp, #0
 8015a2a:	6078      	str	r0, [r7, #4]
 8015a2c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015a2e:	687b      	ldr	r3, [r7, #4]
 8015a30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015a34:	687b      	ldr	r3, [r7, #4]
 8015a36:	32b0      	adds	r2, #176	@ 0xb0
 8015a38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015a3c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8015a3e:	2300      	movs	r3, #0
 8015a40:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8015a42:	2300      	movs	r3, #0
 8015a44:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8015a46:	2300      	movs	r3, #0
 8015a48:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8015a4a:	693b      	ldr	r3, [r7, #16]
 8015a4c:	2b00      	cmp	r3, #0
 8015a4e:	d101      	bne.n	8015a54 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8015a50:	2303      	movs	r3, #3
 8015a52:	e0bf      	b.n	8015bd4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015a54:	683b      	ldr	r3, [r7, #0]
 8015a56:	781b      	ldrb	r3, [r3, #0]
 8015a58:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8015a5c:	2b00      	cmp	r3, #0
 8015a5e:	d050      	beq.n	8015b02 <USBD_CDC_Setup+0xde>
 8015a60:	2b20      	cmp	r3, #32
 8015a62:	f040 80af 	bne.w	8015bc4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8015a66:	683b      	ldr	r3, [r7, #0]
 8015a68:	88db      	ldrh	r3, [r3, #6]
 8015a6a:	2b00      	cmp	r3, #0
 8015a6c:	d03a      	beq.n	8015ae4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8015a6e:	683b      	ldr	r3, [r7, #0]
 8015a70:	781b      	ldrb	r3, [r3, #0]
 8015a72:	b25b      	sxtb	r3, r3
 8015a74:	2b00      	cmp	r3, #0
 8015a76:	da1b      	bge.n	8015ab0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8015a78:	687b      	ldr	r3, [r7, #4]
 8015a7a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015a7e:	687a      	ldr	r2, [r7, #4]
 8015a80:	33b0      	adds	r3, #176	@ 0xb0
 8015a82:	009b      	lsls	r3, r3, #2
 8015a84:	4413      	add	r3, r2
 8015a86:	685b      	ldr	r3, [r3, #4]
 8015a88:	689b      	ldr	r3, [r3, #8]
 8015a8a:	683a      	ldr	r2, [r7, #0]
 8015a8c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8015a8e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8015a90:	683a      	ldr	r2, [r7, #0]
 8015a92:	88d2      	ldrh	r2, [r2, #6]
 8015a94:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8015a96:	683b      	ldr	r3, [r7, #0]
 8015a98:	88db      	ldrh	r3, [r3, #6]
 8015a9a:	2b07      	cmp	r3, #7
 8015a9c:	bf28      	it	cs
 8015a9e:	2307      	movcs	r3, #7
 8015aa0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8015aa2:	693b      	ldr	r3, [r7, #16]
 8015aa4:	89fa      	ldrh	r2, [r7, #14]
 8015aa6:	4619      	mov	r1, r3
 8015aa8:	6878      	ldr	r0, [r7, #4]
 8015aaa:	f001 fd69 	bl	8017580 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8015aae:	e090      	b.n	8015bd2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8015ab0:	683b      	ldr	r3, [r7, #0]
 8015ab2:	785a      	ldrb	r2, [r3, #1]
 8015ab4:	693b      	ldr	r3, [r7, #16]
 8015ab6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8015aba:	683b      	ldr	r3, [r7, #0]
 8015abc:	88db      	ldrh	r3, [r3, #6]
 8015abe:	2b3f      	cmp	r3, #63	@ 0x3f
 8015ac0:	d803      	bhi.n	8015aca <USBD_CDC_Setup+0xa6>
 8015ac2:	683b      	ldr	r3, [r7, #0]
 8015ac4:	88db      	ldrh	r3, [r3, #6]
 8015ac6:	b2da      	uxtb	r2, r3
 8015ac8:	e000      	b.n	8015acc <USBD_CDC_Setup+0xa8>
 8015aca:	2240      	movs	r2, #64	@ 0x40
 8015acc:	693b      	ldr	r3, [r7, #16]
 8015ace:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8015ad2:	6939      	ldr	r1, [r7, #16]
 8015ad4:	693b      	ldr	r3, [r7, #16]
 8015ad6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8015ada:	461a      	mov	r2, r3
 8015adc:	6878      	ldr	r0, [r7, #4]
 8015ade:	f001 fd7e 	bl	80175de <USBD_CtlPrepareRx>
      break;
 8015ae2:	e076      	b.n	8015bd2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8015ae4:	687b      	ldr	r3, [r7, #4]
 8015ae6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015aea:	687a      	ldr	r2, [r7, #4]
 8015aec:	33b0      	adds	r3, #176	@ 0xb0
 8015aee:	009b      	lsls	r3, r3, #2
 8015af0:	4413      	add	r3, r2
 8015af2:	685b      	ldr	r3, [r3, #4]
 8015af4:	689b      	ldr	r3, [r3, #8]
 8015af6:	683a      	ldr	r2, [r7, #0]
 8015af8:	7850      	ldrb	r0, [r2, #1]
 8015afa:	2200      	movs	r2, #0
 8015afc:	6839      	ldr	r1, [r7, #0]
 8015afe:	4798      	blx	r3
      break;
 8015b00:	e067      	b.n	8015bd2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015b02:	683b      	ldr	r3, [r7, #0]
 8015b04:	785b      	ldrb	r3, [r3, #1]
 8015b06:	2b0b      	cmp	r3, #11
 8015b08:	d851      	bhi.n	8015bae <USBD_CDC_Setup+0x18a>
 8015b0a:	a201      	add	r2, pc, #4	@ (adr r2, 8015b10 <USBD_CDC_Setup+0xec>)
 8015b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015b10:	08015b41 	.word	0x08015b41
 8015b14:	08015bbd 	.word	0x08015bbd
 8015b18:	08015baf 	.word	0x08015baf
 8015b1c:	08015baf 	.word	0x08015baf
 8015b20:	08015baf 	.word	0x08015baf
 8015b24:	08015baf 	.word	0x08015baf
 8015b28:	08015baf 	.word	0x08015baf
 8015b2c:	08015baf 	.word	0x08015baf
 8015b30:	08015baf 	.word	0x08015baf
 8015b34:	08015baf 	.word	0x08015baf
 8015b38:	08015b6b 	.word	0x08015b6b
 8015b3c:	08015b95 	.word	0x08015b95
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015b40:	687b      	ldr	r3, [r7, #4]
 8015b42:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015b46:	b2db      	uxtb	r3, r3
 8015b48:	2b03      	cmp	r3, #3
 8015b4a:	d107      	bne.n	8015b5c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8015b4c:	f107 030a 	add.w	r3, r7, #10
 8015b50:	2202      	movs	r2, #2
 8015b52:	4619      	mov	r1, r3
 8015b54:	6878      	ldr	r0, [r7, #4]
 8015b56:	f001 fd13 	bl	8017580 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015b5a:	e032      	b.n	8015bc2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8015b5c:	6839      	ldr	r1, [r7, #0]
 8015b5e:	6878      	ldr	r0, [r7, #4]
 8015b60:	f001 fc91 	bl	8017486 <USBD_CtlError>
            ret = USBD_FAIL;
 8015b64:	2303      	movs	r3, #3
 8015b66:	75fb      	strb	r3, [r7, #23]
          break;
 8015b68:	e02b      	b.n	8015bc2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015b6a:	687b      	ldr	r3, [r7, #4]
 8015b6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015b70:	b2db      	uxtb	r3, r3
 8015b72:	2b03      	cmp	r3, #3
 8015b74:	d107      	bne.n	8015b86 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8015b76:	f107 030d 	add.w	r3, r7, #13
 8015b7a:	2201      	movs	r2, #1
 8015b7c:	4619      	mov	r1, r3
 8015b7e:	6878      	ldr	r0, [r7, #4]
 8015b80:	f001 fcfe 	bl	8017580 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015b84:	e01d      	b.n	8015bc2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8015b86:	6839      	ldr	r1, [r7, #0]
 8015b88:	6878      	ldr	r0, [r7, #4]
 8015b8a:	f001 fc7c 	bl	8017486 <USBD_CtlError>
            ret = USBD_FAIL;
 8015b8e:	2303      	movs	r3, #3
 8015b90:	75fb      	strb	r3, [r7, #23]
          break;
 8015b92:	e016      	b.n	8015bc2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8015b94:	687b      	ldr	r3, [r7, #4]
 8015b96:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015b9a:	b2db      	uxtb	r3, r3
 8015b9c:	2b03      	cmp	r3, #3
 8015b9e:	d00f      	beq.n	8015bc0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8015ba0:	6839      	ldr	r1, [r7, #0]
 8015ba2:	6878      	ldr	r0, [r7, #4]
 8015ba4:	f001 fc6f 	bl	8017486 <USBD_CtlError>
            ret = USBD_FAIL;
 8015ba8:	2303      	movs	r3, #3
 8015baa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8015bac:	e008      	b.n	8015bc0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8015bae:	6839      	ldr	r1, [r7, #0]
 8015bb0:	6878      	ldr	r0, [r7, #4]
 8015bb2:	f001 fc68 	bl	8017486 <USBD_CtlError>
          ret = USBD_FAIL;
 8015bb6:	2303      	movs	r3, #3
 8015bb8:	75fb      	strb	r3, [r7, #23]
          break;
 8015bba:	e002      	b.n	8015bc2 <USBD_CDC_Setup+0x19e>
          break;
 8015bbc:	bf00      	nop
 8015bbe:	e008      	b.n	8015bd2 <USBD_CDC_Setup+0x1ae>
          break;
 8015bc0:	bf00      	nop
      }
      break;
 8015bc2:	e006      	b.n	8015bd2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8015bc4:	6839      	ldr	r1, [r7, #0]
 8015bc6:	6878      	ldr	r0, [r7, #4]
 8015bc8:	f001 fc5d 	bl	8017486 <USBD_CtlError>
      ret = USBD_FAIL;
 8015bcc:	2303      	movs	r3, #3
 8015bce:	75fb      	strb	r3, [r7, #23]
      break;
 8015bd0:	bf00      	nop
  }

  return (uint8_t)ret;
 8015bd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8015bd4:	4618      	mov	r0, r3
 8015bd6:	3718      	adds	r7, #24
 8015bd8:	46bd      	mov	sp, r7
 8015bda:	bd80      	pop	{r7, pc}

08015bdc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8015bdc:	b580      	push	{r7, lr}
 8015bde:	b084      	sub	sp, #16
 8015be0:	af00      	add	r7, sp, #0
 8015be2:	6078      	str	r0, [r7, #4]
 8015be4:	460b      	mov	r3, r1
 8015be6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8015be8:	687b      	ldr	r3, [r7, #4]
 8015bea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015bee:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8015bf0:	687b      	ldr	r3, [r7, #4]
 8015bf2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015bf6:	687b      	ldr	r3, [r7, #4]
 8015bf8:	32b0      	adds	r2, #176	@ 0xb0
 8015bfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015bfe:	2b00      	cmp	r3, #0
 8015c00:	d101      	bne.n	8015c06 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8015c02:	2303      	movs	r3, #3
 8015c04:	e065      	b.n	8015cd2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015c06:	687b      	ldr	r3, [r7, #4]
 8015c08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015c0c:	687b      	ldr	r3, [r7, #4]
 8015c0e:	32b0      	adds	r2, #176	@ 0xb0
 8015c10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015c14:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8015c16:	78fb      	ldrb	r3, [r7, #3]
 8015c18:	f003 020f 	and.w	r2, r3, #15
 8015c1c:	6879      	ldr	r1, [r7, #4]
 8015c1e:	4613      	mov	r3, r2
 8015c20:	009b      	lsls	r3, r3, #2
 8015c22:	4413      	add	r3, r2
 8015c24:	009b      	lsls	r3, r3, #2
 8015c26:	440b      	add	r3, r1
 8015c28:	3314      	adds	r3, #20
 8015c2a:	681b      	ldr	r3, [r3, #0]
 8015c2c:	2b00      	cmp	r3, #0
 8015c2e:	d02f      	beq.n	8015c90 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8015c30:	78fb      	ldrb	r3, [r7, #3]
 8015c32:	f003 020f 	and.w	r2, r3, #15
 8015c36:	6879      	ldr	r1, [r7, #4]
 8015c38:	4613      	mov	r3, r2
 8015c3a:	009b      	lsls	r3, r3, #2
 8015c3c:	4413      	add	r3, r2
 8015c3e:	009b      	lsls	r3, r3, #2
 8015c40:	440b      	add	r3, r1
 8015c42:	3314      	adds	r3, #20
 8015c44:	681a      	ldr	r2, [r3, #0]
 8015c46:	78fb      	ldrb	r3, [r7, #3]
 8015c48:	f003 010f 	and.w	r1, r3, #15
 8015c4c:	68f8      	ldr	r0, [r7, #12]
 8015c4e:	460b      	mov	r3, r1
 8015c50:	00db      	lsls	r3, r3, #3
 8015c52:	440b      	add	r3, r1
 8015c54:	009b      	lsls	r3, r3, #2
 8015c56:	4403      	add	r3, r0
 8015c58:	331c      	adds	r3, #28
 8015c5a:	681b      	ldr	r3, [r3, #0]
 8015c5c:	fbb2 f1f3 	udiv	r1, r2, r3
 8015c60:	fb01 f303 	mul.w	r3, r1, r3
 8015c64:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8015c66:	2b00      	cmp	r3, #0
 8015c68:	d112      	bne.n	8015c90 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8015c6a:	78fb      	ldrb	r3, [r7, #3]
 8015c6c:	f003 020f 	and.w	r2, r3, #15
 8015c70:	6879      	ldr	r1, [r7, #4]
 8015c72:	4613      	mov	r3, r2
 8015c74:	009b      	lsls	r3, r3, #2
 8015c76:	4413      	add	r3, r2
 8015c78:	009b      	lsls	r3, r3, #2
 8015c7a:	440b      	add	r3, r1
 8015c7c:	3314      	adds	r3, #20
 8015c7e:	2200      	movs	r2, #0
 8015c80:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8015c82:	78f9      	ldrb	r1, [r7, #3]
 8015c84:	2300      	movs	r3, #0
 8015c86:	2200      	movs	r2, #0
 8015c88:	6878      	ldr	r0, [r7, #4]
 8015c8a:	f002 f96a 	bl	8017f62 <USBD_LL_Transmit>
 8015c8e:	e01f      	b.n	8015cd0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8015c90:	68bb      	ldr	r3, [r7, #8]
 8015c92:	2200      	movs	r2, #0
 8015c94:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8015c98:	687b      	ldr	r3, [r7, #4]
 8015c9a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015c9e:	687a      	ldr	r2, [r7, #4]
 8015ca0:	33b0      	adds	r3, #176	@ 0xb0
 8015ca2:	009b      	lsls	r3, r3, #2
 8015ca4:	4413      	add	r3, r2
 8015ca6:	685b      	ldr	r3, [r3, #4]
 8015ca8:	691b      	ldr	r3, [r3, #16]
 8015caa:	2b00      	cmp	r3, #0
 8015cac:	d010      	beq.n	8015cd0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8015cae:	687b      	ldr	r3, [r7, #4]
 8015cb0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015cb4:	687a      	ldr	r2, [r7, #4]
 8015cb6:	33b0      	adds	r3, #176	@ 0xb0
 8015cb8:	009b      	lsls	r3, r3, #2
 8015cba:	4413      	add	r3, r2
 8015cbc:	685b      	ldr	r3, [r3, #4]
 8015cbe:	691b      	ldr	r3, [r3, #16]
 8015cc0:	68ba      	ldr	r2, [r7, #8]
 8015cc2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8015cc6:	68ba      	ldr	r2, [r7, #8]
 8015cc8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8015ccc:	78fa      	ldrb	r2, [r7, #3]
 8015cce:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8015cd0:	2300      	movs	r3, #0
}
 8015cd2:	4618      	mov	r0, r3
 8015cd4:	3710      	adds	r7, #16
 8015cd6:	46bd      	mov	sp, r7
 8015cd8:	bd80      	pop	{r7, pc}

08015cda <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8015cda:	b580      	push	{r7, lr}
 8015cdc:	b084      	sub	sp, #16
 8015cde:	af00      	add	r7, sp, #0
 8015ce0:	6078      	str	r0, [r7, #4]
 8015ce2:	460b      	mov	r3, r1
 8015ce4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015ce6:	687b      	ldr	r3, [r7, #4]
 8015ce8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015cec:	687b      	ldr	r3, [r7, #4]
 8015cee:	32b0      	adds	r2, #176	@ 0xb0
 8015cf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015cf4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8015cf6:	687b      	ldr	r3, [r7, #4]
 8015cf8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015cfc:	687b      	ldr	r3, [r7, #4]
 8015cfe:	32b0      	adds	r2, #176	@ 0xb0
 8015d00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015d04:	2b00      	cmp	r3, #0
 8015d06:	d101      	bne.n	8015d0c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8015d08:	2303      	movs	r3, #3
 8015d0a:	e01a      	b.n	8015d42 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8015d0c:	78fb      	ldrb	r3, [r7, #3]
 8015d0e:	4619      	mov	r1, r3
 8015d10:	6878      	ldr	r0, [r7, #4]
 8015d12:	f002 f968 	bl	8017fe6 <USBD_LL_GetRxDataSize>
 8015d16:	4602      	mov	r2, r0
 8015d18:	68fb      	ldr	r3, [r7, #12]
 8015d1a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8015d1e:	687b      	ldr	r3, [r7, #4]
 8015d20:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015d24:	687a      	ldr	r2, [r7, #4]
 8015d26:	33b0      	adds	r3, #176	@ 0xb0
 8015d28:	009b      	lsls	r3, r3, #2
 8015d2a:	4413      	add	r3, r2
 8015d2c:	685b      	ldr	r3, [r3, #4]
 8015d2e:	68db      	ldr	r3, [r3, #12]
 8015d30:	68fa      	ldr	r2, [r7, #12]
 8015d32:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8015d36:	68fa      	ldr	r2, [r7, #12]
 8015d38:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8015d3c:	4611      	mov	r1, r2
 8015d3e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8015d40:	2300      	movs	r3, #0
}
 8015d42:	4618      	mov	r0, r3
 8015d44:	3710      	adds	r7, #16
 8015d46:	46bd      	mov	sp, r7
 8015d48:	bd80      	pop	{r7, pc}

08015d4a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8015d4a:	b580      	push	{r7, lr}
 8015d4c:	b084      	sub	sp, #16
 8015d4e:	af00      	add	r7, sp, #0
 8015d50:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015d52:	687b      	ldr	r3, [r7, #4]
 8015d54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015d58:	687b      	ldr	r3, [r7, #4]
 8015d5a:	32b0      	adds	r2, #176	@ 0xb0
 8015d5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015d60:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8015d62:	68fb      	ldr	r3, [r7, #12]
 8015d64:	2b00      	cmp	r3, #0
 8015d66:	d101      	bne.n	8015d6c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8015d68:	2303      	movs	r3, #3
 8015d6a:	e024      	b.n	8015db6 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8015d6c:	687b      	ldr	r3, [r7, #4]
 8015d6e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015d72:	687a      	ldr	r2, [r7, #4]
 8015d74:	33b0      	adds	r3, #176	@ 0xb0
 8015d76:	009b      	lsls	r3, r3, #2
 8015d78:	4413      	add	r3, r2
 8015d7a:	685b      	ldr	r3, [r3, #4]
 8015d7c:	2b00      	cmp	r3, #0
 8015d7e:	d019      	beq.n	8015db4 <USBD_CDC_EP0_RxReady+0x6a>
 8015d80:	68fb      	ldr	r3, [r7, #12]
 8015d82:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8015d86:	2bff      	cmp	r3, #255	@ 0xff
 8015d88:	d014      	beq.n	8015db4 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8015d8a:	687b      	ldr	r3, [r7, #4]
 8015d8c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015d90:	687a      	ldr	r2, [r7, #4]
 8015d92:	33b0      	adds	r3, #176	@ 0xb0
 8015d94:	009b      	lsls	r3, r3, #2
 8015d96:	4413      	add	r3, r2
 8015d98:	685b      	ldr	r3, [r3, #4]
 8015d9a:	689b      	ldr	r3, [r3, #8]
 8015d9c:	68fa      	ldr	r2, [r7, #12]
 8015d9e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8015da2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8015da4:	68fa      	ldr	r2, [r7, #12]
 8015da6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8015daa:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8015dac:	68fb      	ldr	r3, [r7, #12]
 8015dae:	22ff      	movs	r2, #255	@ 0xff
 8015db0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8015db4:	2300      	movs	r3, #0
}
 8015db6:	4618      	mov	r0, r3
 8015db8:	3710      	adds	r7, #16
 8015dba:	46bd      	mov	sp, r7
 8015dbc:	bd80      	pop	{r7, pc}
	...

08015dc0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8015dc0:	b580      	push	{r7, lr}
 8015dc2:	b086      	sub	sp, #24
 8015dc4:	af00      	add	r7, sp, #0
 8015dc6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8015dc8:	2182      	movs	r1, #130	@ 0x82
 8015dca:	4818      	ldr	r0, [pc, #96]	@ (8015e2c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8015dcc:	f000 fd22 	bl	8016814 <USBD_GetEpDesc>
 8015dd0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8015dd2:	2101      	movs	r1, #1
 8015dd4:	4815      	ldr	r0, [pc, #84]	@ (8015e2c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8015dd6:	f000 fd1d 	bl	8016814 <USBD_GetEpDesc>
 8015dda:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8015ddc:	2181      	movs	r1, #129	@ 0x81
 8015dde:	4813      	ldr	r0, [pc, #76]	@ (8015e2c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8015de0:	f000 fd18 	bl	8016814 <USBD_GetEpDesc>
 8015de4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8015de6:	697b      	ldr	r3, [r7, #20]
 8015de8:	2b00      	cmp	r3, #0
 8015dea:	d002      	beq.n	8015df2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8015dec:	697b      	ldr	r3, [r7, #20]
 8015dee:	2210      	movs	r2, #16
 8015df0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8015df2:	693b      	ldr	r3, [r7, #16]
 8015df4:	2b00      	cmp	r3, #0
 8015df6:	d006      	beq.n	8015e06 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015df8:	693b      	ldr	r3, [r7, #16]
 8015dfa:	2200      	movs	r2, #0
 8015dfc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015e00:	711a      	strb	r2, [r3, #4]
 8015e02:	2200      	movs	r2, #0
 8015e04:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8015e06:	68fb      	ldr	r3, [r7, #12]
 8015e08:	2b00      	cmp	r3, #0
 8015e0a:	d006      	beq.n	8015e1a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015e0c:	68fb      	ldr	r3, [r7, #12]
 8015e0e:	2200      	movs	r2, #0
 8015e10:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015e14:	711a      	strb	r2, [r3, #4]
 8015e16:	2200      	movs	r2, #0
 8015e18:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8015e1a:	687b      	ldr	r3, [r7, #4]
 8015e1c:	2243      	movs	r2, #67	@ 0x43
 8015e1e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015e20:	4b02      	ldr	r3, [pc, #8]	@ (8015e2c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8015e22:	4618      	mov	r0, r3
 8015e24:	3718      	adds	r7, #24
 8015e26:	46bd      	mov	sp, r7
 8015e28:	bd80      	pop	{r7, pc}
 8015e2a:	bf00      	nop
 8015e2c:	20000050 	.word	0x20000050

08015e30 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8015e30:	b580      	push	{r7, lr}
 8015e32:	b086      	sub	sp, #24
 8015e34:	af00      	add	r7, sp, #0
 8015e36:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8015e38:	2182      	movs	r1, #130	@ 0x82
 8015e3a:	4818      	ldr	r0, [pc, #96]	@ (8015e9c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015e3c:	f000 fcea 	bl	8016814 <USBD_GetEpDesc>
 8015e40:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8015e42:	2101      	movs	r1, #1
 8015e44:	4815      	ldr	r0, [pc, #84]	@ (8015e9c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015e46:	f000 fce5 	bl	8016814 <USBD_GetEpDesc>
 8015e4a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8015e4c:	2181      	movs	r1, #129	@ 0x81
 8015e4e:	4813      	ldr	r0, [pc, #76]	@ (8015e9c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015e50:	f000 fce0 	bl	8016814 <USBD_GetEpDesc>
 8015e54:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8015e56:	697b      	ldr	r3, [r7, #20]
 8015e58:	2b00      	cmp	r3, #0
 8015e5a:	d002      	beq.n	8015e62 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8015e5c:	697b      	ldr	r3, [r7, #20]
 8015e5e:	2210      	movs	r2, #16
 8015e60:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8015e62:	693b      	ldr	r3, [r7, #16]
 8015e64:	2b00      	cmp	r3, #0
 8015e66:	d006      	beq.n	8015e76 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8015e68:	693b      	ldr	r3, [r7, #16]
 8015e6a:	2200      	movs	r2, #0
 8015e6c:	711a      	strb	r2, [r3, #4]
 8015e6e:	2200      	movs	r2, #0
 8015e70:	f042 0202 	orr.w	r2, r2, #2
 8015e74:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8015e76:	68fb      	ldr	r3, [r7, #12]
 8015e78:	2b00      	cmp	r3, #0
 8015e7a:	d006      	beq.n	8015e8a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8015e7c:	68fb      	ldr	r3, [r7, #12]
 8015e7e:	2200      	movs	r2, #0
 8015e80:	711a      	strb	r2, [r3, #4]
 8015e82:	2200      	movs	r2, #0
 8015e84:	f042 0202 	orr.w	r2, r2, #2
 8015e88:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8015e8a:	687b      	ldr	r3, [r7, #4]
 8015e8c:	2243      	movs	r2, #67	@ 0x43
 8015e8e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015e90:	4b02      	ldr	r3, [pc, #8]	@ (8015e9c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8015e92:	4618      	mov	r0, r3
 8015e94:	3718      	adds	r7, #24
 8015e96:	46bd      	mov	sp, r7
 8015e98:	bd80      	pop	{r7, pc}
 8015e9a:	bf00      	nop
 8015e9c:	20000050 	.word	0x20000050

08015ea0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8015ea0:	b580      	push	{r7, lr}
 8015ea2:	b086      	sub	sp, #24
 8015ea4:	af00      	add	r7, sp, #0
 8015ea6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8015ea8:	2182      	movs	r1, #130	@ 0x82
 8015eaa:	4818      	ldr	r0, [pc, #96]	@ (8015f0c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8015eac:	f000 fcb2 	bl	8016814 <USBD_GetEpDesc>
 8015eb0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8015eb2:	2101      	movs	r1, #1
 8015eb4:	4815      	ldr	r0, [pc, #84]	@ (8015f0c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8015eb6:	f000 fcad 	bl	8016814 <USBD_GetEpDesc>
 8015eba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8015ebc:	2181      	movs	r1, #129	@ 0x81
 8015ebe:	4813      	ldr	r0, [pc, #76]	@ (8015f0c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8015ec0:	f000 fca8 	bl	8016814 <USBD_GetEpDesc>
 8015ec4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8015ec6:	697b      	ldr	r3, [r7, #20]
 8015ec8:	2b00      	cmp	r3, #0
 8015eca:	d002      	beq.n	8015ed2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8015ecc:	697b      	ldr	r3, [r7, #20]
 8015ece:	2210      	movs	r2, #16
 8015ed0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8015ed2:	693b      	ldr	r3, [r7, #16]
 8015ed4:	2b00      	cmp	r3, #0
 8015ed6:	d006      	beq.n	8015ee6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015ed8:	693b      	ldr	r3, [r7, #16]
 8015eda:	2200      	movs	r2, #0
 8015edc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015ee0:	711a      	strb	r2, [r3, #4]
 8015ee2:	2200      	movs	r2, #0
 8015ee4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8015ee6:	68fb      	ldr	r3, [r7, #12]
 8015ee8:	2b00      	cmp	r3, #0
 8015eea:	d006      	beq.n	8015efa <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015eec:	68fb      	ldr	r3, [r7, #12]
 8015eee:	2200      	movs	r2, #0
 8015ef0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015ef4:	711a      	strb	r2, [r3, #4]
 8015ef6:	2200      	movs	r2, #0
 8015ef8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8015efa:	687b      	ldr	r3, [r7, #4]
 8015efc:	2243      	movs	r2, #67	@ 0x43
 8015efe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015f00:	4b02      	ldr	r3, [pc, #8]	@ (8015f0c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8015f02:	4618      	mov	r0, r3
 8015f04:	3718      	adds	r7, #24
 8015f06:	46bd      	mov	sp, r7
 8015f08:	bd80      	pop	{r7, pc}
 8015f0a:	bf00      	nop
 8015f0c:	20000050 	.word	0x20000050

08015f10 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8015f10:	b480      	push	{r7}
 8015f12:	b083      	sub	sp, #12
 8015f14:	af00      	add	r7, sp, #0
 8015f16:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8015f18:	687b      	ldr	r3, [r7, #4]
 8015f1a:	220a      	movs	r2, #10
 8015f1c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8015f1e:	4b03      	ldr	r3, [pc, #12]	@ (8015f2c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8015f20:	4618      	mov	r0, r3
 8015f22:	370c      	adds	r7, #12
 8015f24:	46bd      	mov	sp, r7
 8015f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f2a:	4770      	bx	lr
 8015f2c:	2000000c 	.word	0x2000000c

08015f30 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8015f30:	b480      	push	{r7}
 8015f32:	b083      	sub	sp, #12
 8015f34:	af00      	add	r7, sp, #0
 8015f36:	6078      	str	r0, [r7, #4]
 8015f38:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8015f3a:	683b      	ldr	r3, [r7, #0]
 8015f3c:	2b00      	cmp	r3, #0
 8015f3e:	d101      	bne.n	8015f44 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8015f40:	2303      	movs	r3, #3
 8015f42:	e009      	b.n	8015f58 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8015f44:	687b      	ldr	r3, [r7, #4]
 8015f46:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015f4a:	687a      	ldr	r2, [r7, #4]
 8015f4c:	33b0      	adds	r3, #176	@ 0xb0
 8015f4e:	009b      	lsls	r3, r3, #2
 8015f50:	4413      	add	r3, r2
 8015f52:	683a      	ldr	r2, [r7, #0]
 8015f54:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8015f56:	2300      	movs	r3, #0
}
 8015f58:	4618      	mov	r0, r3
 8015f5a:	370c      	adds	r7, #12
 8015f5c:	46bd      	mov	sp, r7
 8015f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f62:	4770      	bx	lr

08015f64 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8015f64:	b480      	push	{r7}
 8015f66:	b087      	sub	sp, #28
 8015f68:	af00      	add	r7, sp, #0
 8015f6a:	60f8      	str	r0, [r7, #12]
 8015f6c:	60b9      	str	r1, [r7, #8]
 8015f6e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015f70:	68fb      	ldr	r3, [r7, #12]
 8015f72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015f76:	68fb      	ldr	r3, [r7, #12]
 8015f78:	32b0      	adds	r2, #176	@ 0xb0
 8015f7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015f7e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8015f80:	697b      	ldr	r3, [r7, #20]
 8015f82:	2b00      	cmp	r3, #0
 8015f84:	d101      	bne.n	8015f8a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8015f86:	2303      	movs	r3, #3
 8015f88:	e008      	b.n	8015f9c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8015f8a:	697b      	ldr	r3, [r7, #20]
 8015f8c:	68ba      	ldr	r2, [r7, #8]
 8015f8e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8015f92:	697b      	ldr	r3, [r7, #20]
 8015f94:	687a      	ldr	r2, [r7, #4]
 8015f96:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8015f9a:	2300      	movs	r3, #0
}
 8015f9c:	4618      	mov	r0, r3
 8015f9e:	371c      	adds	r7, #28
 8015fa0:	46bd      	mov	sp, r7
 8015fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fa6:	4770      	bx	lr

08015fa8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8015fa8:	b480      	push	{r7}
 8015faa:	b085      	sub	sp, #20
 8015fac:	af00      	add	r7, sp, #0
 8015fae:	6078      	str	r0, [r7, #4]
 8015fb0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015fb2:	687b      	ldr	r3, [r7, #4]
 8015fb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015fb8:	687b      	ldr	r3, [r7, #4]
 8015fba:	32b0      	adds	r2, #176	@ 0xb0
 8015fbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015fc0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8015fc2:	68fb      	ldr	r3, [r7, #12]
 8015fc4:	2b00      	cmp	r3, #0
 8015fc6:	d101      	bne.n	8015fcc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8015fc8:	2303      	movs	r3, #3
 8015fca:	e004      	b.n	8015fd6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8015fcc:	68fb      	ldr	r3, [r7, #12]
 8015fce:	683a      	ldr	r2, [r7, #0]
 8015fd0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8015fd4:	2300      	movs	r3, #0
}
 8015fd6:	4618      	mov	r0, r3
 8015fd8:	3714      	adds	r7, #20
 8015fda:	46bd      	mov	sp, r7
 8015fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fe0:	4770      	bx	lr
	...

08015fe4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8015fe4:	b580      	push	{r7, lr}
 8015fe6:	b084      	sub	sp, #16
 8015fe8:	af00      	add	r7, sp, #0
 8015fea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015fec:	687b      	ldr	r3, [r7, #4]
 8015fee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015ff2:	687b      	ldr	r3, [r7, #4]
 8015ff4:	32b0      	adds	r2, #176	@ 0xb0
 8015ff6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015ffa:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8015ffc:	687b      	ldr	r3, [r7, #4]
 8015ffe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016002:	687b      	ldr	r3, [r7, #4]
 8016004:	32b0      	adds	r2, #176	@ 0xb0
 8016006:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801600a:	2b00      	cmp	r3, #0
 801600c:	d101      	bne.n	8016012 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 801600e:	2303      	movs	r3, #3
 8016010:	e018      	b.n	8016044 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016012:	687b      	ldr	r3, [r7, #4]
 8016014:	7c1b      	ldrb	r3, [r3, #16]
 8016016:	2b00      	cmp	r3, #0
 8016018:	d10a      	bne.n	8016030 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801601a:	4b0c      	ldr	r3, [pc, #48]	@ (801604c <USBD_CDC_ReceivePacket+0x68>)
 801601c:	7819      	ldrb	r1, [r3, #0]
 801601e:	68fb      	ldr	r3, [r7, #12]
 8016020:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8016024:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8016028:	6878      	ldr	r0, [r7, #4]
 801602a:	f001 ffbb 	bl	8017fa4 <USBD_LL_PrepareReceive>
 801602e:	e008      	b.n	8016042 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8016030:	4b06      	ldr	r3, [pc, #24]	@ (801604c <USBD_CDC_ReceivePacket+0x68>)
 8016032:	7819      	ldrb	r1, [r3, #0]
 8016034:	68fb      	ldr	r3, [r7, #12]
 8016036:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801603a:	2340      	movs	r3, #64	@ 0x40
 801603c:	6878      	ldr	r0, [r7, #4]
 801603e:	f001 ffb1 	bl	8017fa4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8016042:	2300      	movs	r3, #0
}
 8016044:	4618      	mov	r0, r3
 8016046:	3710      	adds	r7, #16
 8016048:	46bd      	mov	sp, r7
 801604a:	bd80      	pop	{r7, pc}
 801604c:	20000094 	.word	0x20000094

08016050 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8016050:	b580      	push	{r7, lr}
 8016052:	b086      	sub	sp, #24
 8016054:	af00      	add	r7, sp, #0
 8016056:	60f8      	str	r0, [r7, #12]
 8016058:	60b9      	str	r1, [r7, #8]
 801605a:	4613      	mov	r3, r2
 801605c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801605e:	68fb      	ldr	r3, [r7, #12]
 8016060:	2b00      	cmp	r3, #0
 8016062:	d101      	bne.n	8016068 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8016064:	2303      	movs	r3, #3
 8016066:	e01f      	b.n	80160a8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8016068:	68fb      	ldr	r3, [r7, #12]
 801606a:	2200      	movs	r2, #0
 801606c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8016070:	68fb      	ldr	r3, [r7, #12]
 8016072:	2200      	movs	r2, #0
 8016074:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8016078:	68fb      	ldr	r3, [r7, #12]
 801607a:	2200      	movs	r2, #0
 801607c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8016080:	68bb      	ldr	r3, [r7, #8]
 8016082:	2b00      	cmp	r3, #0
 8016084:	d003      	beq.n	801608e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8016086:	68fb      	ldr	r3, [r7, #12]
 8016088:	68ba      	ldr	r2, [r7, #8]
 801608a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801608e:	68fb      	ldr	r3, [r7, #12]
 8016090:	2201      	movs	r2, #1
 8016092:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8016096:	68fb      	ldr	r3, [r7, #12]
 8016098:	79fa      	ldrb	r2, [r7, #7]
 801609a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 801609c:	68f8      	ldr	r0, [r7, #12]
 801609e:	f001 fe2b 	bl	8017cf8 <USBD_LL_Init>
 80160a2:	4603      	mov	r3, r0
 80160a4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80160a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80160a8:	4618      	mov	r0, r3
 80160aa:	3718      	adds	r7, #24
 80160ac:	46bd      	mov	sp, r7
 80160ae:	bd80      	pop	{r7, pc}

080160b0 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80160b0:	b580      	push	{r7, lr}
 80160b2:	b084      	sub	sp, #16
 80160b4:	af00      	add	r7, sp, #0
 80160b6:	6078      	str	r0, [r7, #4]
 80160b8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80160ba:	2300      	movs	r3, #0
 80160bc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80160be:	683b      	ldr	r3, [r7, #0]
 80160c0:	2b00      	cmp	r3, #0
 80160c2:	d101      	bne.n	80160c8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80160c4:	2303      	movs	r3, #3
 80160c6:	e025      	b.n	8016114 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80160c8:	687b      	ldr	r3, [r7, #4]
 80160ca:	683a      	ldr	r2, [r7, #0]
 80160cc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80160d0:	687b      	ldr	r3, [r7, #4]
 80160d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80160d6:	687b      	ldr	r3, [r7, #4]
 80160d8:	32ae      	adds	r2, #174	@ 0xae
 80160da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80160de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80160e0:	2b00      	cmp	r3, #0
 80160e2:	d00f      	beq.n	8016104 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80160e4:	687b      	ldr	r3, [r7, #4]
 80160e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80160ea:	687b      	ldr	r3, [r7, #4]
 80160ec:	32ae      	adds	r2, #174	@ 0xae
 80160ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80160f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80160f4:	f107 020e 	add.w	r2, r7, #14
 80160f8:	4610      	mov	r0, r2
 80160fa:	4798      	blx	r3
 80160fc:	4602      	mov	r2, r0
 80160fe:	687b      	ldr	r3, [r7, #4]
 8016100:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8016104:	687b      	ldr	r3, [r7, #4]
 8016106:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801610a:	1c5a      	adds	r2, r3, #1
 801610c:	687b      	ldr	r3, [r7, #4]
 801610e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8016112:	2300      	movs	r3, #0
}
 8016114:	4618      	mov	r0, r3
 8016116:	3710      	adds	r7, #16
 8016118:	46bd      	mov	sp, r7
 801611a:	bd80      	pop	{r7, pc}

0801611c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 801611c:	b580      	push	{r7, lr}
 801611e:	b082      	sub	sp, #8
 8016120:	af00      	add	r7, sp, #0
 8016122:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8016124:	6878      	ldr	r0, [r7, #4]
 8016126:	f001 fe33 	bl	8017d90 <USBD_LL_Start>
 801612a:	4603      	mov	r3, r0
}
 801612c:	4618      	mov	r0, r3
 801612e:	3708      	adds	r7, #8
 8016130:	46bd      	mov	sp, r7
 8016132:	bd80      	pop	{r7, pc}

08016134 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8016134:	b480      	push	{r7}
 8016136:	b083      	sub	sp, #12
 8016138:	af00      	add	r7, sp, #0
 801613a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801613c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 801613e:	4618      	mov	r0, r3
 8016140:	370c      	adds	r7, #12
 8016142:	46bd      	mov	sp, r7
 8016144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016148:	4770      	bx	lr

0801614a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801614a:	b580      	push	{r7, lr}
 801614c:	b084      	sub	sp, #16
 801614e:	af00      	add	r7, sp, #0
 8016150:	6078      	str	r0, [r7, #4]
 8016152:	460b      	mov	r3, r1
 8016154:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8016156:	2300      	movs	r3, #0
 8016158:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801615a:	687b      	ldr	r3, [r7, #4]
 801615c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016160:	2b00      	cmp	r3, #0
 8016162:	d009      	beq.n	8016178 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8016164:	687b      	ldr	r3, [r7, #4]
 8016166:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801616a:	681b      	ldr	r3, [r3, #0]
 801616c:	78fa      	ldrb	r2, [r7, #3]
 801616e:	4611      	mov	r1, r2
 8016170:	6878      	ldr	r0, [r7, #4]
 8016172:	4798      	blx	r3
 8016174:	4603      	mov	r3, r0
 8016176:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8016178:	7bfb      	ldrb	r3, [r7, #15]
}
 801617a:	4618      	mov	r0, r3
 801617c:	3710      	adds	r7, #16
 801617e:	46bd      	mov	sp, r7
 8016180:	bd80      	pop	{r7, pc}

08016182 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8016182:	b580      	push	{r7, lr}
 8016184:	b084      	sub	sp, #16
 8016186:	af00      	add	r7, sp, #0
 8016188:	6078      	str	r0, [r7, #4]
 801618a:	460b      	mov	r3, r1
 801618c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801618e:	2300      	movs	r3, #0
 8016190:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8016192:	687b      	ldr	r3, [r7, #4]
 8016194:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016198:	685b      	ldr	r3, [r3, #4]
 801619a:	78fa      	ldrb	r2, [r7, #3]
 801619c:	4611      	mov	r1, r2
 801619e:	6878      	ldr	r0, [r7, #4]
 80161a0:	4798      	blx	r3
 80161a2:	4603      	mov	r3, r0
 80161a4:	2b00      	cmp	r3, #0
 80161a6:	d001      	beq.n	80161ac <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80161a8:	2303      	movs	r3, #3
 80161aa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80161ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80161ae:	4618      	mov	r0, r3
 80161b0:	3710      	adds	r7, #16
 80161b2:	46bd      	mov	sp, r7
 80161b4:	bd80      	pop	{r7, pc}

080161b6 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80161b6:	b580      	push	{r7, lr}
 80161b8:	b084      	sub	sp, #16
 80161ba:	af00      	add	r7, sp, #0
 80161bc:	6078      	str	r0, [r7, #4]
 80161be:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80161c0:	687b      	ldr	r3, [r7, #4]
 80161c2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80161c6:	6839      	ldr	r1, [r7, #0]
 80161c8:	4618      	mov	r0, r3
 80161ca:	f001 f922 	bl	8017412 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80161ce:	687b      	ldr	r3, [r7, #4]
 80161d0:	2201      	movs	r2, #1
 80161d2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80161d6:	687b      	ldr	r3, [r7, #4]
 80161d8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80161dc:	461a      	mov	r2, r3
 80161de:	687b      	ldr	r3, [r7, #4]
 80161e0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80161e4:	687b      	ldr	r3, [r7, #4]
 80161e6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80161ea:	f003 031f 	and.w	r3, r3, #31
 80161ee:	2b02      	cmp	r3, #2
 80161f0:	d01a      	beq.n	8016228 <USBD_LL_SetupStage+0x72>
 80161f2:	2b02      	cmp	r3, #2
 80161f4:	d822      	bhi.n	801623c <USBD_LL_SetupStage+0x86>
 80161f6:	2b00      	cmp	r3, #0
 80161f8:	d002      	beq.n	8016200 <USBD_LL_SetupStage+0x4a>
 80161fa:	2b01      	cmp	r3, #1
 80161fc:	d00a      	beq.n	8016214 <USBD_LL_SetupStage+0x5e>
 80161fe:	e01d      	b.n	801623c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8016200:	687b      	ldr	r3, [r7, #4]
 8016202:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8016206:	4619      	mov	r1, r3
 8016208:	6878      	ldr	r0, [r7, #4]
 801620a:	f000 fb77 	bl	80168fc <USBD_StdDevReq>
 801620e:	4603      	mov	r3, r0
 8016210:	73fb      	strb	r3, [r7, #15]
      break;
 8016212:	e020      	b.n	8016256 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8016214:	687b      	ldr	r3, [r7, #4]
 8016216:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801621a:	4619      	mov	r1, r3
 801621c:	6878      	ldr	r0, [r7, #4]
 801621e:	f000 fbdf 	bl	80169e0 <USBD_StdItfReq>
 8016222:	4603      	mov	r3, r0
 8016224:	73fb      	strb	r3, [r7, #15]
      break;
 8016226:	e016      	b.n	8016256 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8016228:	687b      	ldr	r3, [r7, #4]
 801622a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801622e:	4619      	mov	r1, r3
 8016230:	6878      	ldr	r0, [r7, #4]
 8016232:	f000 fc41 	bl	8016ab8 <USBD_StdEPReq>
 8016236:	4603      	mov	r3, r0
 8016238:	73fb      	strb	r3, [r7, #15]
      break;
 801623a:	e00c      	b.n	8016256 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801623c:	687b      	ldr	r3, [r7, #4]
 801623e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8016242:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8016246:	b2db      	uxtb	r3, r3
 8016248:	4619      	mov	r1, r3
 801624a:	6878      	ldr	r0, [r7, #4]
 801624c:	f001 fe00 	bl	8017e50 <USBD_LL_StallEP>
 8016250:	4603      	mov	r3, r0
 8016252:	73fb      	strb	r3, [r7, #15]
      break;
 8016254:	bf00      	nop
  }

  return ret;
 8016256:	7bfb      	ldrb	r3, [r7, #15]
}
 8016258:	4618      	mov	r0, r3
 801625a:	3710      	adds	r7, #16
 801625c:	46bd      	mov	sp, r7
 801625e:	bd80      	pop	{r7, pc}

08016260 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8016260:	b580      	push	{r7, lr}
 8016262:	b086      	sub	sp, #24
 8016264:	af00      	add	r7, sp, #0
 8016266:	60f8      	str	r0, [r7, #12]
 8016268:	460b      	mov	r3, r1
 801626a:	607a      	str	r2, [r7, #4]
 801626c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 801626e:	2300      	movs	r3, #0
 8016270:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8016272:	7afb      	ldrb	r3, [r7, #11]
 8016274:	2b00      	cmp	r3, #0
 8016276:	d177      	bne.n	8016368 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 8016278:	68fb      	ldr	r3, [r7, #12]
 801627a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 801627e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8016280:	68fb      	ldr	r3, [r7, #12]
 8016282:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8016286:	2b03      	cmp	r3, #3
 8016288:	f040 80a1 	bne.w	80163ce <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 801628c:	693b      	ldr	r3, [r7, #16]
 801628e:	685b      	ldr	r3, [r3, #4]
 8016290:	693a      	ldr	r2, [r7, #16]
 8016292:	8992      	ldrh	r2, [r2, #12]
 8016294:	4293      	cmp	r3, r2
 8016296:	d91c      	bls.n	80162d2 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8016298:	693b      	ldr	r3, [r7, #16]
 801629a:	685b      	ldr	r3, [r3, #4]
 801629c:	693a      	ldr	r2, [r7, #16]
 801629e:	8992      	ldrh	r2, [r2, #12]
 80162a0:	1a9a      	subs	r2, r3, r2
 80162a2:	693b      	ldr	r3, [r7, #16]
 80162a4:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 80162a6:	693b      	ldr	r3, [r7, #16]
 80162a8:	691b      	ldr	r3, [r3, #16]
 80162aa:	693a      	ldr	r2, [r7, #16]
 80162ac:	8992      	ldrh	r2, [r2, #12]
 80162ae:	441a      	add	r2, r3
 80162b0:	693b      	ldr	r3, [r7, #16]
 80162b2:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 80162b4:	693b      	ldr	r3, [r7, #16]
 80162b6:	6919      	ldr	r1, [r3, #16]
 80162b8:	693b      	ldr	r3, [r7, #16]
 80162ba:	899b      	ldrh	r3, [r3, #12]
 80162bc:	461a      	mov	r2, r3
 80162be:	693b      	ldr	r3, [r7, #16]
 80162c0:	685b      	ldr	r3, [r3, #4]
 80162c2:	4293      	cmp	r3, r2
 80162c4:	bf38      	it	cc
 80162c6:	4613      	movcc	r3, r2
 80162c8:	461a      	mov	r2, r3
 80162ca:	68f8      	ldr	r0, [r7, #12]
 80162cc:	f001 f9a8 	bl	8017620 <USBD_CtlContinueRx>
 80162d0:	e07d      	b.n	80163ce <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80162d2:	68fb      	ldr	r3, [r7, #12]
 80162d4:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80162d8:	f003 031f 	and.w	r3, r3, #31
 80162dc:	2b02      	cmp	r3, #2
 80162de:	d014      	beq.n	801630a <USBD_LL_DataOutStage+0xaa>
 80162e0:	2b02      	cmp	r3, #2
 80162e2:	d81d      	bhi.n	8016320 <USBD_LL_DataOutStage+0xc0>
 80162e4:	2b00      	cmp	r3, #0
 80162e6:	d002      	beq.n	80162ee <USBD_LL_DataOutStage+0x8e>
 80162e8:	2b01      	cmp	r3, #1
 80162ea:	d003      	beq.n	80162f4 <USBD_LL_DataOutStage+0x94>
 80162ec:	e018      	b.n	8016320 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80162ee:	2300      	movs	r3, #0
 80162f0:	75bb      	strb	r3, [r7, #22]
            break;
 80162f2:	e018      	b.n	8016326 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80162f4:	68fb      	ldr	r3, [r7, #12]
 80162f6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80162fa:	b2db      	uxtb	r3, r3
 80162fc:	4619      	mov	r1, r3
 80162fe:	68f8      	ldr	r0, [r7, #12]
 8016300:	f000 fa6e 	bl	80167e0 <USBD_CoreFindIF>
 8016304:	4603      	mov	r3, r0
 8016306:	75bb      	strb	r3, [r7, #22]
            break;
 8016308:	e00d      	b.n	8016326 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 801630a:	68fb      	ldr	r3, [r7, #12]
 801630c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8016310:	b2db      	uxtb	r3, r3
 8016312:	4619      	mov	r1, r3
 8016314:	68f8      	ldr	r0, [r7, #12]
 8016316:	f000 fa70 	bl	80167fa <USBD_CoreFindEP>
 801631a:	4603      	mov	r3, r0
 801631c:	75bb      	strb	r3, [r7, #22]
            break;
 801631e:	e002      	b.n	8016326 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8016320:	2300      	movs	r3, #0
 8016322:	75bb      	strb	r3, [r7, #22]
            break;
 8016324:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8016326:	7dbb      	ldrb	r3, [r7, #22]
 8016328:	2b00      	cmp	r3, #0
 801632a:	d119      	bne.n	8016360 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801632c:	68fb      	ldr	r3, [r7, #12]
 801632e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016332:	b2db      	uxtb	r3, r3
 8016334:	2b03      	cmp	r3, #3
 8016336:	d113      	bne.n	8016360 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8016338:	7dba      	ldrb	r2, [r7, #22]
 801633a:	68fb      	ldr	r3, [r7, #12]
 801633c:	32ae      	adds	r2, #174	@ 0xae
 801633e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016342:	691b      	ldr	r3, [r3, #16]
 8016344:	2b00      	cmp	r3, #0
 8016346:	d00b      	beq.n	8016360 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8016348:	7dba      	ldrb	r2, [r7, #22]
 801634a:	68fb      	ldr	r3, [r7, #12]
 801634c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8016350:	7dba      	ldrb	r2, [r7, #22]
 8016352:	68fb      	ldr	r3, [r7, #12]
 8016354:	32ae      	adds	r2, #174	@ 0xae
 8016356:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801635a:	691b      	ldr	r3, [r3, #16]
 801635c:	68f8      	ldr	r0, [r7, #12]
 801635e:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8016360:	68f8      	ldr	r0, [r7, #12]
 8016362:	f001 f96e 	bl	8017642 <USBD_CtlSendStatus>
 8016366:	e032      	b.n	80163ce <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8016368:	7afb      	ldrb	r3, [r7, #11]
 801636a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801636e:	b2db      	uxtb	r3, r3
 8016370:	4619      	mov	r1, r3
 8016372:	68f8      	ldr	r0, [r7, #12]
 8016374:	f000 fa41 	bl	80167fa <USBD_CoreFindEP>
 8016378:	4603      	mov	r3, r0
 801637a:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801637c:	7dbb      	ldrb	r3, [r7, #22]
 801637e:	2bff      	cmp	r3, #255	@ 0xff
 8016380:	d025      	beq.n	80163ce <USBD_LL_DataOutStage+0x16e>
 8016382:	7dbb      	ldrb	r3, [r7, #22]
 8016384:	2b00      	cmp	r3, #0
 8016386:	d122      	bne.n	80163ce <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016388:	68fb      	ldr	r3, [r7, #12]
 801638a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801638e:	b2db      	uxtb	r3, r3
 8016390:	2b03      	cmp	r3, #3
 8016392:	d117      	bne.n	80163c4 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8016394:	7dba      	ldrb	r2, [r7, #22]
 8016396:	68fb      	ldr	r3, [r7, #12]
 8016398:	32ae      	adds	r2, #174	@ 0xae
 801639a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801639e:	699b      	ldr	r3, [r3, #24]
 80163a0:	2b00      	cmp	r3, #0
 80163a2:	d00f      	beq.n	80163c4 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 80163a4:	7dba      	ldrb	r2, [r7, #22]
 80163a6:	68fb      	ldr	r3, [r7, #12]
 80163a8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80163ac:	7dba      	ldrb	r2, [r7, #22]
 80163ae:	68fb      	ldr	r3, [r7, #12]
 80163b0:	32ae      	adds	r2, #174	@ 0xae
 80163b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80163b6:	699b      	ldr	r3, [r3, #24]
 80163b8:	7afa      	ldrb	r2, [r7, #11]
 80163ba:	4611      	mov	r1, r2
 80163bc:	68f8      	ldr	r0, [r7, #12]
 80163be:	4798      	blx	r3
 80163c0:	4603      	mov	r3, r0
 80163c2:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80163c4:	7dfb      	ldrb	r3, [r7, #23]
 80163c6:	2b00      	cmp	r3, #0
 80163c8:	d001      	beq.n	80163ce <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 80163ca:	7dfb      	ldrb	r3, [r7, #23]
 80163cc:	e000      	b.n	80163d0 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 80163ce:	2300      	movs	r3, #0
}
 80163d0:	4618      	mov	r0, r3
 80163d2:	3718      	adds	r7, #24
 80163d4:	46bd      	mov	sp, r7
 80163d6:	bd80      	pop	{r7, pc}

080163d8 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80163d8:	b580      	push	{r7, lr}
 80163da:	b086      	sub	sp, #24
 80163dc:	af00      	add	r7, sp, #0
 80163de:	60f8      	str	r0, [r7, #12]
 80163e0:	460b      	mov	r3, r1
 80163e2:	607a      	str	r2, [r7, #4]
 80163e4:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 80163e6:	7afb      	ldrb	r3, [r7, #11]
 80163e8:	2b00      	cmp	r3, #0
 80163ea:	d178      	bne.n	80164de <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 80163ec:	68fb      	ldr	r3, [r7, #12]
 80163ee:	3314      	adds	r3, #20
 80163f0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80163f2:	68fb      	ldr	r3, [r7, #12]
 80163f4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80163f8:	2b02      	cmp	r3, #2
 80163fa:	d163      	bne.n	80164c4 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 80163fc:	693b      	ldr	r3, [r7, #16]
 80163fe:	685b      	ldr	r3, [r3, #4]
 8016400:	693a      	ldr	r2, [r7, #16]
 8016402:	8992      	ldrh	r2, [r2, #12]
 8016404:	4293      	cmp	r3, r2
 8016406:	d91c      	bls.n	8016442 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8016408:	693b      	ldr	r3, [r7, #16]
 801640a:	685b      	ldr	r3, [r3, #4]
 801640c:	693a      	ldr	r2, [r7, #16]
 801640e:	8992      	ldrh	r2, [r2, #12]
 8016410:	1a9a      	subs	r2, r3, r2
 8016412:	693b      	ldr	r3, [r7, #16]
 8016414:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8016416:	693b      	ldr	r3, [r7, #16]
 8016418:	691b      	ldr	r3, [r3, #16]
 801641a:	693a      	ldr	r2, [r7, #16]
 801641c:	8992      	ldrh	r2, [r2, #12]
 801641e:	441a      	add	r2, r3
 8016420:	693b      	ldr	r3, [r7, #16]
 8016422:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8016424:	693b      	ldr	r3, [r7, #16]
 8016426:	6919      	ldr	r1, [r3, #16]
 8016428:	693b      	ldr	r3, [r7, #16]
 801642a:	685b      	ldr	r3, [r3, #4]
 801642c:	461a      	mov	r2, r3
 801642e:	68f8      	ldr	r0, [r7, #12]
 8016430:	f001 f8c4 	bl	80175bc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016434:	2300      	movs	r3, #0
 8016436:	2200      	movs	r2, #0
 8016438:	2100      	movs	r1, #0
 801643a:	68f8      	ldr	r0, [r7, #12]
 801643c:	f001 fdb2 	bl	8017fa4 <USBD_LL_PrepareReceive>
 8016440:	e040      	b.n	80164c4 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8016442:	693b      	ldr	r3, [r7, #16]
 8016444:	899b      	ldrh	r3, [r3, #12]
 8016446:	461a      	mov	r2, r3
 8016448:	693b      	ldr	r3, [r7, #16]
 801644a:	685b      	ldr	r3, [r3, #4]
 801644c:	429a      	cmp	r2, r3
 801644e:	d11c      	bne.n	801648a <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 8016450:	693b      	ldr	r3, [r7, #16]
 8016452:	681b      	ldr	r3, [r3, #0]
 8016454:	693a      	ldr	r2, [r7, #16]
 8016456:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8016458:	4293      	cmp	r3, r2
 801645a:	d316      	bcc.n	801648a <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 801645c:	693b      	ldr	r3, [r7, #16]
 801645e:	681a      	ldr	r2, [r3, #0]
 8016460:	68fb      	ldr	r3, [r7, #12]
 8016462:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8016466:	429a      	cmp	r2, r3
 8016468:	d20f      	bcs.n	801648a <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801646a:	2200      	movs	r2, #0
 801646c:	2100      	movs	r1, #0
 801646e:	68f8      	ldr	r0, [r7, #12]
 8016470:	f001 f8a4 	bl	80175bc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8016474:	68fb      	ldr	r3, [r7, #12]
 8016476:	2200      	movs	r2, #0
 8016478:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801647c:	2300      	movs	r3, #0
 801647e:	2200      	movs	r2, #0
 8016480:	2100      	movs	r1, #0
 8016482:	68f8      	ldr	r0, [r7, #12]
 8016484:	f001 fd8e 	bl	8017fa4 <USBD_LL_PrepareReceive>
 8016488:	e01c      	b.n	80164c4 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801648a:	68fb      	ldr	r3, [r7, #12]
 801648c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016490:	b2db      	uxtb	r3, r3
 8016492:	2b03      	cmp	r3, #3
 8016494:	d10f      	bne.n	80164b6 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8016496:	68fb      	ldr	r3, [r7, #12]
 8016498:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801649c:	68db      	ldr	r3, [r3, #12]
 801649e:	2b00      	cmp	r3, #0
 80164a0:	d009      	beq.n	80164b6 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 80164a2:	68fb      	ldr	r3, [r7, #12]
 80164a4:	2200      	movs	r2, #0
 80164a6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80164aa:	68fb      	ldr	r3, [r7, #12]
 80164ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80164b0:	68db      	ldr	r3, [r3, #12]
 80164b2:	68f8      	ldr	r0, [r7, #12]
 80164b4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80164b6:	2180      	movs	r1, #128	@ 0x80
 80164b8:	68f8      	ldr	r0, [r7, #12]
 80164ba:	f001 fcc9 	bl	8017e50 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80164be:	68f8      	ldr	r0, [r7, #12]
 80164c0:	f001 f8d2 	bl	8017668 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80164c4:	68fb      	ldr	r3, [r7, #12]
 80164c6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80164ca:	2b00      	cmp	r3, #0
 80164cc:	d03a      	beq.n	8016544 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 80164ce:	68f8      	ldr	r0, [r7, #12]
 80164d0:	f7ff fe30 	bl	8016134 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80164d4:	68fb      	ldr	r3, [r7, #12]
 80164d6:	2200      	movs	r2, #0
 80164d8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80164dc:	e032      	b.n	8016544 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80164de:	7afb      	ldrb	r3, [r7, #11]
 80164e0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80164e4:	b2db      	uxtb	r3, r3
 80164e6:	4619      	mov	r1, r3
 80164e8:	68f8      	ldr	r0, [r7, #12]
 80164ea:	f000 f986 	bl	80167fa <USBD_CoreFindEP>
 80164ee:	4603      	mov	r3, r0
 80164f0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80164f2:	7dfb      	ldrb	r3, [r7, #23]
 80164f4:	2bff      	cmp	r3, #255	@ 0xff
 80164f6:	d025      	beq.n	8016544 <USBD_LL_DataInStage+0x16c>
 80164f8:	7dfb      	ldrb	r3, [r7, #23]
 80164fa:	2b00      	cmp	r3, #0
 80164fc:	d122      	bne.n	8016544 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80164fe:	68fb      	ldr	r3, [r7, #12]
 8016500:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016504:	b2db      	uxtb	r3, r3
 8016506:	2b03      	cmp	r3, #3
 8016508:	d11c      	bne.n	8016544 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 801650a:	7dfa      	ldrb	r2, [r7, #23]
 801650c:	68fb      	ldr	r3, [r7, #12]
 801650e:	32ae      	adds	r2, #174	@ 0xae
 8016510:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016514:	695b      	ldr	r3, [r3, #20]
 8016516:	2b00      	cmp	r3, #0
 8016518:	d014      	beq.n	8016544 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 801651a:	7dfa      	ldrb	r2, [r7, #23]
 801651c:	68fb      	ldr	r3, [r7, #12]
 801651e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8016522:	7dfa      	ldrb	r2, [r7, #23]
 8016524:	68fb      	ldr	r3, [r7, #12]
 8016526:	32ae      	adds	r2, #174	@ 0xae
 8016528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801652c:	695b      	ldr	r3, [r3, #20]
 801652e:	7afa      	ldrb	r2, [r7, #11]
 8016530:	4611      	mov	r1, r2
 8016532:	68f8      	ldr	r0, [r7, #12]
 8016534:	4798      	blx	r3
 8016536:	4603      	mov	r3, r0
 8016538:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 801653a:	7dbb      	ldrb	r3, [r7, #22]
 801653c:	2b00      	cmp	r3, #0
 801653e:	d001      	beq.n	8016544 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 8016540:	7dbb      	ldrb	r3, [r7, #22]
 8016542:	e000      	b.n	8016546 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8016544:	2300      	movs	r3, #0
}
 8016546:	4618      	mov	r0, r3
 8016548:	3718      	adds	r7, #24
 801654a:	46bd      	mov	sp, r7
 801654c:	bd80      	pop	{r7, pc}

0801654e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801654e:	b580      	push	{r7, lr}
 8016550:	b084      	sub	sp, #16
 8016552:	af00      	add	r7, sp, #0
 8016554:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8016556:	2300      	movs	r3, #0
 8016558:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801655a:	687b      	ldr	r3, [r7, #4]
 801655c:	2201      	movs	r2, #1
 801655e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8016562:	687b      	ldr	r3, [r7, #4]
 8016564:	2200      	movs	r2, #0
 8016566:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 801656a:	687b      	ldr	r3, [r7, #4]
 801656c:	2200      	movs	r2, #0
 801656e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8016570:	687b      	ldr	r3, [r7, #4]
 8016572:	2200      	movs	r2, #0
 8016574:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8016578:	687b      	ldr	r3, [r7, #4]
 801657a:	2200      	movs	r2, #0
 801657c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8016580:	687b      	ldr	r3, [r7, #4]
 8016582:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016586:	2b00      	cmp	r3, #0
 8016588:	d014      	beq.n	80165b4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 801658a:	687b      	ldr	r3, [r7, #4]
 801658c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016590:	685b      	ldr	r3, [r3, #4]
 8016592:	2b00      	cmp	r3, #0
 8016594:	d00e      	beq.n	80165b4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8016596:	687b      	ldr	r3, [r7, #4]
 8016598:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801659c:	685b      	ldr	r3, [r3, #4]
 801659e:	687a      	ldr	r2, [r7, #4]
 80165a0:	6852      	ldr	r2, [r2, #4]
 80165a2:	b2d2      	uxtb	r2, r2
 80165a4:	4611      	mov	r1, r2
 80165a6:	6878      	ldr	r0, [r7, #4]
 80165a8:	4798      	blx	r3
 80165aa:	4603      	mov	r3, r0
 80165ac:	2b00      	cmp	r3, #0
 80165ae:	d001      	beq.n	80165b4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80165b0:	2303      	movs	r3, #3
 80165b2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80165b4:	2340      	movs	r3, #64	@ 0x40
 80165b6:	2200      	movs	r2, #0
 80165b8:	2100      	movs	r1, #0
 80165ba:	6878      	ldr	r0, [r7, #4]
 80165bc:	f001 fc03 	bl	8017dc6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80165c0:	687b      	ldr	r3, [r7, #4]
 80165c2:	2201      	movs	r2, #1
 80165c4:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80165c8:	687b      	ldr	r3, [r7, #4]
 80165ca:	2240      	movs	r2, #64	@ 0x40
 80165cc:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80165d0:	2340      	movs	r3, #64	@ 0x40
 80165d2:	2200      	movs	r2, #0
 80165d4:	2180      	movs	r1, #128	@ 0x80
 80165d6:	6878      	ldr	r0, [r7, #4]
 80165d8:	f001 fbf5 	bl	8017dc6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80165dc:	687b      	ldr	r3, [r7, #4]
 80165de:	2201      	movs	r2, #1
 80165e0:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80165e4:	687b      	ldr	r3, [r7, #4]
 80165e6:	2240      	movs	r2, #64	@ 0x40
 80165e8:	841a      	strh	r2, [r3, #32]

  return ret;
 80165ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80165ec:	4618      	mov	r0, r3
 80165ee:	3710      	adds	r7, #16
 80165f0:	46bd      	mov	sp, r7
 80165f2:	bd80      	pop	{r7, pc}

080165f4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80165f4:	b480      	push	{r7}
 80165f6:	b083      	sub	sp, #12
 80165f8:	af00      	add	r7, sp, #0
 80165fa:	6078      	str	r0, [r7, #4]
 80165fc:	460b      	mov	r3, r1
 80165fe:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8016600:	687b      	ldr	r3, [r7, #4]
 8016602:	78fa      	ldrb	r2, [r7, #3]
 8016604:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8016606:	2300      	movs	r3, #0
}
 8016608:	4618      	mov	r0, r3
 801660a:	370c      	adds	r7, #12
 801660c:	46bd      	mov	sp, r7
 801660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016612:	4770      	bx	lr

08016614 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8016614:	b480      	push	{r7}
 8016616:	b083      	sub	sp, #12
 8016618:	af00      	add	r7, sp, #0
 801661a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 801661c:	687b      	ldr	r3, [r7, #4]
 801661e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016622:	b2db      	uxtb	r3, r3
 8016624:	2b04      	cmp	r3, #4
 8016626:	d006      	beq.n	8016636 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8016628:	687b      	ldr	r3, [r7, #4]
 801662a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801662e:	b2da      	uxtb	r2, r3
 8016630:	687b      	ldr	r3, [r7, #4]
 8016632:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8016636:	687b      	ldr	r3, [r7, #4]
 8016638:	2204      	movs	r2, #4
 801663a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 801663e:	2300      	movs	r3, #0
}
 8016640:	4618      	mov	r0, r3
 8016642:	370c      	adds	r7, #12
 8016644:	46bd      	mov	sp, r7
 8016646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801664a:	4770      	bx	lr

0801664c <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801664c:	b480      	push	{r7}
 801664e:	b083      	sub	sp, #12
 8016650:	af00      	add	r7, sp, #0
 8016652:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8016654:	687b      	ldr	r3, [r7, #4]
 8016656:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801665a:	b2db      	uxtb	r3, r3
 801665c:	2b04      	cmp	r3, #4
 801665e:	d106      	bne.n	801666e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8016660:	687b      	ldr	r3, [r7, #4]
 8016662:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8016666:	b2da      	uxtb	r2, r3
 8016668:	687b      	ldr	r3, [r7, #4]
 801666a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 801666e:	2300      	movs	r3, #0
}
 8016670:	4618      	mov	r0, r3
 8016672:	370c      	adds	r7, #12
 8016674:	46bd      	mov	sp, r7
 8016676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801667a:	4770      	bx	lr

0801667c <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801667c:	b580      	push	{r7, lr}
 801667e:	b082      	sub	sp, #8
 8016680:	af00      	add	r7, sp, #0
 8016682:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016684:	687b      	ldr	r3, [r7, #4]
 8016686:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801668a:	b2db      	uxtb	r3, r3
 801668c:	2b03      	cmp	r3, #3
 801668e:	d110      	bne.n	80166b2 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8016690:	687b      	ldr	r3, [r7, #4]
 8016692:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016696:	2b00      	cmp	r3, #0
 8016698:	d00b      	beq.n	80166b2 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 801669a:	687b      	ldr	r3, [r7, #4]
 801669c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80166a0:	69db      	ldr	r3, [r3, #28]
 80166a2:	2b00      	cmp	r3, #0
 80166a4:	d005      	beq.n	80166b2 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80166a6:	687b      	ldr	r3, [r7, #4]
 80166a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80166ac:	69db      	ldr	r3, [r3, #28]
 80166ae:	6878      	ldr	r0, [r7, #4]
 80166b0:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80166b2:	2300      	movs	r3, #0
}
 80166b4:	4618      	mov	r0, r3
 80166b6:	3708      	adds	r7, #8
 80166b8:	46bd      	mov	sp, r7
 80166ba:	bd80      	pop	{r7, pc}

080166bc <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80166bc:	b580      	push	{r7, lr}
 80166be:	b082      	sub	sp, #8
 80166c0:	af00      	add	r7, sp, #0
 80166c2:	6078      	str	r0, [r7, #4]
 80166c4:	460b      	mov	r3, r1
 80166c6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80166c8:	687b      	ldr	r3, [r7, #4]
 80166ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80166ce:	687b      	ldr	r3, [r7, #4]
 80166d0:	32ae      	adds	r2, #174	@ 0xae
 80166d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80166d6:	2b00      	cmp	r3, #0
 80166d8:	d101      	bne.n	80166de <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80166da:	2303      	movs	r3, #3
 80166dc:	e01c      	b.n	8016718 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80166de:	687b      	ldr	r3, [r7, #4]
 80166e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80166e4:	b2db      	uxtb	r3, r3
 80166e6:	2b03      	cmp	r3, #3
 80166e8:	d115      	bne.n	8016716 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80166ea:	687b      	ldr	r3, [r7, #4]
 80166ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80166f0:	687b      	ldr	r3, [r7, #4]
 80166f2:	32ae      	adds	r2, #174	@ 0xae
 80166f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80166f8:	6a1b      	ldr	r3, [r3, #32]
 80166fa:	2b00      	cmp	r3, #0
 80166fc:	d00b      	beq.n	8016716 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80166fe:	687b      	ldr	r3, [r7, #4]
 8016700:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016704:	687b      	ldr	r3, [r7, #4]
 8016706:	32ae      	adds	r2, #174	@ 0xae
 8016708:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801670c:	6a1b      	ldr	r3, [r3, #32]
 801670e:	78fa      	ldrb	r2, [r7, #3]
 8016710:	4611      	mov	r1, r2
 8016712:	6878      	ldr	r0, [r7, #4]
 8016714:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8016716:	2300      	movs	r3, #0
}
 8016718:	4618      	mov	r0, r3
 801671a:	3708      	adds	r7, #8
 801671c:	46bd      	mov	sp, r7
 801671e:	bd80      	pop	{r7, pc}

08016720 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8016720:	b580      	push	{r7, lr}
 8016722:	b082      	sub	sp, #8
 8016724:	af00      	add	r7, sp, #0
 8016726:	6078      	str	r0, [r7, #4]
 8016728:	460b      	mov	r3, r1
 801672a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801672c:	687b      	ldr	r3, [r7, #4]
 801672e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016732:	687b      	ldr	r3, [r7, #4]
 8016734:	32ae      	adds	r2, #174	@ 0xae
 8016736:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801673a:	2b00      	cmp	r3, #0
 801673c:	d101      	bne.n	8016742 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 801673e:	2303      	movs	r3, #3
 8016740:	e01c      	b.n	801677c <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016742:	687b      	ldr	r3, [r7, #4]
 8016744:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016748:	b2db      	uxtb	r3, r3
 801674a:	2b03      	cmp	r3, #3
 801674c:	d115      	bne.n	801677a <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 801674e:	687b      	ldr	r3, [r7, #4]
 8016750:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016754:	687b      	ldr	r3, [r7, #4]
 8016756:	32ae      	adds	r2, #174	@ 0xae
 8016758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801675c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801675e:	2b00      	cmp	r3, #0
 8016760:	d00b      	beq.n	801677a <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8016762:	687b      	ldr	r3, [r7, #4]
 8016764:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016768:	687b      	ldr	r3, [r7, #4]
 801676a:	32ae      	adds	r2, #174	@ 0xae
 801676c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016772:	78fa      	ldrb	r2, [r7, #3]
 8016774:	4611      	mov	r1, r2
 8016776:	6878      	ldr	r0, [r7, #4]
 8016778:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801677a:	2300      	movs	r3, #0
}
 801677c:	4618      	mov	r0, r3
 801677e:	3708      	adds	r7, #8
 8016780:	46bd      	mov	sp, r7
 8016782:	bd80      	pop	{r7, pc}

08016784 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8016784:	b480      	push	{r7}
 8016786:	b083      	sub	sp, #12
 8016788:	af00      	add	r7, sp, #0
 801678a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801678c:	2300      	movs	r3, #0
}
 801678e:	4618      	mov	r0, r3
 8016790:	370c      	adds	r7, #12
 8016792:	46bd      	mov	sp, r7
 8016794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016798:	4770      	bx	lr

0801679a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 801679a:	b580      	push	{r7, lr}
 801679c:	b084      	sub	sp, #16
 801679e:	af00      	add	r7, sp, #0
 80167a0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80167a2:	2300      	movs	r3, #0
 80167a4:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80167a6:	687b      	ldr	r3, [r7, #4]
 80167a8:	2201      	movs	r2, #1
 80167aa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80167ae:	687b      	ldr	r3, [r7, #4]
 80167b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80167b4:	2b00      	cmp	r3, #0
 80167b6:	d00e      	beq.n	80167d6 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80167b8:	687b      	ldr	r3, [r7, #4]
 80167ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80167be:	685b      	ldr	r3, [r3, #4]
 80167c0:	687a      	ldr	r2, [r7, #4]
 80167c2:	6852      	ldr	r2, [r2, #4]
 80167c4:	b2d2      	uxtb	r2, r2
 80167c6:	4611      	mov	r1, r2
 80167c8:	6878      	ldr	r0, [r7, #4]
 80167ca:	4798      	blx	r3
 80167cc:	4603      	mov	r3, r0
 80167ce:	2b00      	cmp	r3, #0
 80167d0:	d001      	beq.n	80167d6 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80167d2:	2303      	movs	r3, #3
 80167d4:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80167d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80167d8:	4618      	mov	r0, r3
 80167da:	3710      	adds	r7, #16
 80167dc:	46bd      	mov	sp, r7
 80167de:	bd80      	pop	{r7, pc}

080167e0 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80167e0:	b480      	push	{r7}
 80167e2:	b083      	sub	sp, #12
 80167e4:	af00      	add	r7, sp, #0
 80167e6:	6078      	str	r0, [r7, #4]
 80167e8:	460b      	mov	r3, r1
 80167ea:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80167ec:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80167ee:	4618      	mov	r0, r3
 80167f0:	370c      	adds	r7, #12
 80167f2:	46bd      	mov	sp, r7
 80167f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167f8:	4770      	bx	lr

080167fa <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80167fa:	b480      	push	{r7}
 80167fc:	b083      	sub	sp, #12
 80167fe:	af00      	add	r7, sp, #0
 8016800:	6078      	str	r0, [r7, #4]
 8016802:	460b      	mov	r3, r1
 8016804:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8016806:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8016808:	4618      	mov	r0, r3
 801680a:	370c      	adds	r7, #12
 801680c:	46bd      	mov	sp, r7
 801680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016812:	4770      	bx	lr

08016814 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8016814:	b580      	push	{r7, lr}
 8016816:	b086      	sub	sp, #24
 8016818:	af00      	add	r7, sp, #0
 801681a:	6078      	str	r0, [r7, #4]
 801681c:	460b      	mov	r3, r1
 801681e:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8016820:	687b      	ldr	r3, [r7, #4]
 8016822:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8016824:	687b      	ldr	r3, [r7, #4]
 8016826:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8016828:	2300      	movs	r3, #0
 801682a:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 801682c:	68fb      	ldr	r3, [r7, #12]
 801682e:	885b      	ldrh	r3, [r3, #2]
 8016830:	b29b      	uxth	r3, r3
 8016832:	68fa      	ldr	r2, [r7, #12]
 8016834:	7812      	ldrb	r2, [r2, #0]
 8016836:	4293      	cmp	r3, r2
 8016838:	d91f      	bls.n	801687a <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 801683a:	68fb      	ldr	r3, [r7, #12]
 801683c:	781b      	ldrb	r3, [r3, #0]
 801683e:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8016840:	e013      	b.n	801686a <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8016842:	f107 030a 	add.w	r3, r7, #10
 8016846:	4619      	mov	r1, r3
 8016848:	6978      	ldr	r0, [r7, #20]
 801684a:	f000 f81b 	bl	8016884 <USBD_GetNextDesc>
 801684e:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8016850:	697b      	ldr	r3, [r7, #20]
 8016852:	785b      	ldrb	r3, [r3, #1]
 8016854:	2b05      	cmp	r3, #5
 8016856:	d108      	bne.n	801686a <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8016858:	697b      	ldr	r3, [r7, #20]
 801685a:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 801685c:	693b      	ldr	r3, [r7, #16]
 801685e:	789b      	ldrb	r3, [r3, #2]
 8016860:	78fa      	ldrb	r2, [r7, #3]
 8016862:	429a      	cmp	r2, r3
 8016864:	d008      	beq.n	8016878 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8016866:	2300      	movs	r3, #0
 8016868:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 801686a:	68fb      	ldr	r3, [r7, #12]
 801686c:	885b      	ldrh	r3, [r3, #2]
 801686e:	b29a      	uxth	r2, r3
 8016870:	897b      	ldrh	r3, [r7, #10]
 8016872:	429a      	cmp	r2, r3
 8016874:	d8e5      	bhi.n	8016842 <USBD_GetEpDesc+0x2e>
 8016876:	e000      	b.n	801687a <USBD_GetEpDesc+0x66>
          break;
 8016878:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 801687a:	693b      	ldr	r3, [r7, #16]
}
 801687c:	4618      	mov	r0, r3
 801687e:	3718      	adds	r7, #24
 8016880:	46bd      	mov	sp, r7
 8016882:	bd80      	pop	{r7, pc}

08016884 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8016884:	b480      	push	{r7}
 8016886:	b085      	sub	sp, #20
 8016888:	af00      	add	r7, sp, #0
 801688a:	6078      	str	r0, [r7, #4]
 801688c:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 801688e:	687b      	ldr	r3, [r7, #4]
 8016890:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8016892:	683b      	ldr	r3, [r7, #0]
 8016894:	881b      	ldrh	r3, [r3, #0]
 8016896:	68fa      	ldr	r2, [r7, #12]
 8016898:	7812      	ldrb	r2, [r2, #0]
 801689a:	4413      	add	r3, r2
 801689c:	b29a      	uxth	r2, r3
 801689e:	683b      	ldr	r3, [r7, #0]
 80168a0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80168a2:	68fb      	ldr	r3, [r7, #12]
 80168a4:	781b      	ldrb	r3, [r3, #0]
 80168a6:	461a      	mov	r2, r3
 80168a8:	687b      	ldr	r3, [r7, #4]
 80168aa:	4413      	add	r3, r2
 80168ac:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80168ae:	68fb      	ldr	r3, [r7, #12]
}
 80168b0:	4618      	mov	r0, r3
 80168b2:	3714      	adds	r7, #20
 80168b4:	46bd      	mov	sp, r7
 80168b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168ba:	4770      	bx	lr

080168bc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80168bc:	b480      	push	{r7}
 80168be:	b087      	sub	sp, #28
 80168c0:	af00      	add	r7, sp, #0
 80168c2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80168c4:	687b      	ldr	r3, [r7, #4]
 80168c6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80168c8:	697b      	ldr	r3, [r7, #20]
 80168ca:	781b      	ldrb	r3, [r3, #0]
 80168cc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80168ce:	697b      	ldr	r3, [r7, #20]
 80168d0:	3301      	adds	r3, #1
 80168d2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80168d4:	697b      	ldr	r3, [r7, #20]
 80168d6:	781b      	ldrb	r3, [r3, #0]
 80168d8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80168da:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80168de:	021b      	lsls	r3, r3, #8
 80168e0:	b21a      	sxth	r2, r3
 80168e2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80168e6:	4313      	orrs	r3, r2
 80168e8:	b21b      	sxth	r3, r3
 80168ea:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80168ec:	89fb      	ldrh	r3, [r7, #14]
}
 80168ee:	4618      	mov	r0, r3
 80168f0:	371c      	adds	r7, #28
 80168f2:	46bd      	mov	sp, r7
 80168f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168f8:	4770      	bx	lr
	...

080168fc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80168fc:	b580      	push	{r7, lr}
 80168fe:	b084      	sub	sp, #16
 8016900:	af00      	add	r7, sp, #0
 8016902:	6078      	str	r0, [r7, #4]
 8016904:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016906:	2300      	movs	r3, #0
 8016908:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801690a:	683b      	ldr	r3, [r7, #0]
 801690c:	781b      	ldrb	r3, [r3, #0]
 801690e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8016912:	2b40      	cmp	r3, #64	@ 0x40
 8016914:	d005      	beq.n	8016922 <USBD_StdDevReq+0x26>
 8016916:	2b40      	cmp	r3, #64	@ 0x40
 8016918:	d857      	bhi.n	80169ca <USBD_StdDevReq+0xce>
 801691a:	2b00      	cmp	r3, #0
 801691c:	d00f      	beq.n	801693e <USBD_StdDevReq+0x42>
 801691e:	2b20      	cmp	r3, #32
 8016920:	d153      	bne.n	80169ca <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8016922:	687b      	ldr	r3, [r7, #4]
 8016924:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016928:	687b      	ldr	r3, [r7, #4]
 801692a:	32ae      	adds	r2, #174	@ 0xae
 801692c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016930:	689b      	ldr	r3, [r3, #8]
 8016932:	6839      	ldr	r1, [r7, #0]
 8016934:	6878      	ldr	r0, [r7, #4]
 8016936:	4798      	blx	r3
 8016938:	4603      	mov	r3, r0
 801693a:	73fb      	strb	r3, [r7, #15]
      break;
 801693c:	e04a      	b.n	80169d4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801693e:	683b      	ldr	r3, [r7, #0]
 8016940:	785b      	ldrb	r3, [r3, #1]
 8016942:	2b09      	cmp	r3, #9
 8016944:	d83b      	bhi.n	80169be <USBD_StdDevReq+0xc2>
 8016946:	a201      	add	r2, pc, #4	@ (adr r2, 801694c <USBD_StdDevReq+0x50>)
 8016948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801694c:	080169a1 	.word	0x080169a1
 8016950:	080169b5 	.word	0x080169b5
 8016954:	080169bf 	.word	0x080169bf
 8016958:	080169ab 	.word	0x080169ab
 801695c:	080169bf 	.word	0x080169bf
 8016960:	0801697f 	.word	0x0801697f
 8016964:	08016975 	.word	0x08016975
 8016968:	080169bf 	.word	0x080169bf
 801696c:	08016997 	.word	0x08016997
 8016970:	08016989 	.word	0x08016989
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8016974:	6839      	ldr	r1, [r7, #0]
 8016976:	6878      	ldr	r0, [r7, #4]
 8016978:	f000 fa3e 	bl	8016df8 <USBD_GetDescriptor>
          break;
 801697c:	e024      	b.n	80169c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801697e:	6839      	ldr	r1, [r7, #0]
 8016980:	6878      	ldr	r0, [r7, #4]
 8016982:	f000 fba3 	bl	80170cc <USBD_SetAddress>
          break;
 8016986:	e01f      	b.n	80169c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8016988:	6839      	ldr	r1, [r7, #0]
 801698a:	6878      	ldr	r0, [r7, #4]
 801698c:	f000 fbe2 	bl	8017154 <USBD_SetConfig>
 8016990:	4603      	mov	r3, r0
 8016992:	73fb      	strb	r3, [r7, #15]
          break;
 8016994:	e018      	b.n	80169c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8016996:	6839      	ldr	r1, [r7, #0]
 8016998:	6878      	ldr	r0, [r7, #4]
 801699a:	f000 fc85 	bl	80172a8 <USBD_GetConfig>
          break;
 801699e:	e013      	b.n	80169c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80169a0:	6839      	ldr	r1, [r7, #0]
 80169a2:	6878      	ldr	r0, [r7, #4]
 80169a4:	f000 fcb6 	bl	8017314 <USBD_GetStatus>
          break;
 80169a8:	e00e      	b.n	80169c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80169aa:	6839      	ldr	r1, [r7, #0]
 80169ac:	6878      	ldr	r0, [r7, #4]
 80169ae:	f000 fce5 	bl	801737c <USBD_SetFeature>
          break;
 80169b2:	e009      	b.n	80169c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80169b4:	6839      	ldr	r1, [r7, #0]
 80169b6:	6878      	ldr	r0, [r7, #4]
 80169b8:	f000 fd09 	bl	80173ce <USBD_ClrFeature>
          break;
 80169bc:	e004      	b.n	80169c8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80169be:	6839      	ldr	r1, [r7, #0]
 80169c0:	6878      	ldr	r0, [r7, #4]
 80169c2:	f000 fd60 	bl	8017486 <USBD_CtlError>
          break;
 80169c6:	bf00      	nop
      }
      break;
 80169c8:	e004      	b.n	80169d4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80169ca:	6839      	ldr	r1, [r7, #0]
 80169cc:	6878      	ldr	r0, [r7, #4]
 80169ce:	f000 fd5a 	bl	8017486 <USBD_CtlError>
      break;
 80169d2:	bf00      	nop
  }

  return ret;
 80169d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80169d6:	4618      	mov	r0, r3
 80169d8:	3710      	adds	r7, #16
 80169da:	46bd      	mov	sp, r7
 80169dc:	bd80      	pop	{r7, pc}
 80169de:	bf00      	nop

080169e0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80169e0:	b580      	push	{r7, lr}
 80169e2:	b084      	sub	sp, #16
 80169e4:	af00      	add	r7, sp, #0
 80169e6:	6078      	str	r0, [r7, #4]
 80169e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80169ea:	2300      	movs	r3, #0
 80169ec:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80169ee:	683b      	ldr	r3, [r7, #0]
 80169f0:	781b      	ldrb	r3, [r3, #0]
 80169f2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80169f6:	2b40      	cmp	r3, #64	@ 0x40
 80169f8:	d005      	beq.n	8016a06 <USBD_StdItfReq+0x26>
 80169fa:	2b40      	cmp	r3, #64	@ 0x40
 80169fc:	d852      	bhi.n	8016aa4 <USBD_StdItfReq+0xc4>
 80169fe:	2b00      	cmp	r3, #0
 8016a00:	d001      	beq.n	8016a06 <USBD_StdItfReq+0x26>
 8016a02:	2b20      	cmp	r3, #32
 8016a04:	d14e      	bne.n	8016aa4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8016a06:	687b      	ldr	r3, [r7, #4]
 8016a08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016a0c:	b2db      	uxtb	r3, r3
 8016a0e:	3b01      	subs	r3, #1
 8016a10:	2b02      	cmp	r3, #2
 8016a12:	d840      	bhi.n	8016a96 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8016a14:	683b      	ldr	r3, [r7, #0]
 8016a16:	889b      	ldrh	r3, [r3, #4]
 8016a18:	b2db      	uxtb	r3, r3
 8016a1a:	2b01      	cmp	r3, #1
 8016a1c:	d836      	bhi.n	8016a8c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8016a1e:	683b      	ldr	r3, [r7, #0]
 8016a20:	889b      	ldrh	r3, [r3, #4]
 8016a22:	b2db      	uxtb	r3, r3
 8016a24:	4619      	mov	r1, r3
 8016a26:	6878      	ldr	r0, [r7, #4]
 8016a28:	f7ff feda 	bl	80167e0 <USBD_CoreFindIF>
 8016a2c:	4603      	mov	r3, r0
 8016a2e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016a30:	7bbb      	ldrb	r3, [r7, #14]
 8016a32:	2bff      	cmp	r3, #255	@ 0xff
 8016a34:	d01d      	beq.n	8016a72 <USBD_StdItfReq+0x92>
 8016a36:	7bbb      	ldrb	r3, [r7, #14]
 8016a38:	2b00      	cmp	r3, #0
 8016a3a:	d11a      	bne.n	8016a72 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8016a3c:	7bba      	ldrb	r2, [r7, #14]
 8016a3e:	687b      	ldr	r3, [r7, #4]
 8016a40:	32ae      	adds	r2, #174	@ 0xae
 8016a42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016a46:	689b      	ldr	r3, [r3, #8]
 8016a48:	2b00      	cmp	r3, #0
 8016a4a:	d00f      	beq.n	8016a6c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8016a4c:	7bba      	ldrb	r2, [r7, #14]
 8016a4e:	687b      	ldr	r3, [r7, #4]
 8016a50:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8016a54:	7bba      	ldrb	r2, [r7, #14]
 8016a56:	687b      	ldr	r3, [r7, #4]
 8016a58:	32ae      	adds	r2, #174	@ 0xae
 8016a5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016a5e:	689b      	ldr	r3, [r3, #8]
 8016a60:	6839      	ldr	r1, [r7, #0]
 8016a62:	6878      	ldr	r0, [r7, #4]
 8016a64:	4798      	blx	r3
 8016a66:	4603      	mov	r3, r0
 8016a68:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8016a6a:	e004      	b.n	8016a76 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8016a6c:	2303      	movs	r3, #3
 8016a6e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8016a70:	e001      	b.n	8016a76 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8016a72:	2303      	movs	r3, #3
 8016a74:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8016a76:	683b      	ldr	r3, [r7, #0]
 8016a78:	88db      	ldrh	r3, [r3, #6]
 8016a7a:	2b00      	cmp	r3, #0
 8016a7c:	d110      	bne.n	8016aa0 <USBD_StdItfReq+0xc0>
 8016a7e:	7bfb      	ldrb	r3, [r7, #15]
 8016a80:	2b00      	cmp	r3, #0
 8016a82:	d10d      	bne.n	8016aa0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8016a84:	6878      	ldr	r0, [r7, #4]
 8016a86:	f000 fddc 	bl	8017642 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8016a8a:	e009      	b.n	8016aa0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8016a8c:	6839      	ldr	r1, [r7, #0]
 8016a8e:	6878      	ldr	r0, [r7, #4]
 8016a90:	f000 fcf9 	bl	8017486 <USBD_CtlError>
          break;
 8016a94:	e004      	b.n	8016aa0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8016a96:	6839      	ldr	r1, [r7, #0]
 8016a98:	6878      	ldr	r0, [r7, #4]
 8016a9a:	f000 fcf4 	bl	8017486 <USBD_CtlError>
          break;
 8016a9e:	e000      	b.n	8016aa2 <USBD_StdItfReq+0xc2>
          break;
 8016aa0:	bf00      	nop
      }
      break;
 8016aa2:	e004      	b.n	8016aae <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8016aa4:	6839      	ldr	r1, [r7, #0]
 8016aa6:	6878      	ldr	r0, [r7, #4]
 8016aa8:	f000 fced 	bl	8017486 <USBD_CtlError>
      break;
 8016aac:	bf00      	nop
  }

  return ret;
 8016aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8016ab0:	4618      	mov	r0, r3
 8016ab2:	3710      	adds	r7, #16
 8016ab4:	46bd      	mov	sp, r7
 8016ab6:	bd80      	pop	{r7, pc}

08016ab8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016ab8:	b580      	push	{r7, lr}
 8016aba:	b084      	sub	sp, #16
 8016abc:	af00      	add	r7, sp, #0
 8016abe:	6078      	str	r0, [r7, #4]
 8016ac0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8016ac2:	2300      	movs	r3, #0
 8016ac4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8016ac6:	683b      	ldr	r3, [r7, #0]
 8016ac8:	889b      	ldrh	r3, [r3, #4]
 8016aca:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016acc:	683b      	ldr	r3, [r7, #0]
 8016ace:	781b      	ldrb	r3, [r3, #0]
 8016ad0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8016ad4:	2b40      	cmp	r3, #64	@ 0x40
 8016ad6:	d007      	beq.n	8016ae8 <USBD_StdEPReq+0x30>
 8016ad8:	2b40      	cmp	r3, #64	@ 0x40
 8016ada:	f200 8181 	bhi.w	8016de0 <USBD_StdEPReq+0x328>
 8016ade:	2b00      	cmp	r3, #0
 8016ae0:	d02a      	beq.n	8016b38 <USBD_StdEPReq+0x80>
 8016ae2:	2b20      	cmp	r3, #32
 8016ae4:	f040 817c 	bne.w	8016de0 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8016ae8:	7bbb      	ldrb	r3, [r7, #14]
 8016aea:	4619      	mov	r1, r3
 8016aec:	6878      	ldr	r0, [r7, #4]
 8016aee:	f7ff fe84 	bl	80167fa <USBD_CoreFindEP>
 8016af2:	4603      	mov	r3, r0
 8016af4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016af6:	7b7b      	ldrb	r3, [r7, #13]
 8016af8:	2bff      	cmp	r3, #255	@ 0xff
 8016afa:	f000 8176 	beq.w	8016dea <USBD_StdEPReq+0x332>
 8016afe:	7b7b      	ldrb	r3, [r7, #13]
 8016b00:	2b00      	cmp	r3, #0
 8016b02:	f040 8172 	bne.w	8016dea <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 8016b06:	7b7a      	ldrb	r2, [r7, #13]
 8016b08:	687b      	ldr	r3, [r7, #4]
 8016b0a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8016b0e:	7b7a      	ldrb	r2, [r7, #13]
 8016b10:	687b      	ldr	r3, [r7, #4]
 8016b12:	32ae      	adds	r2, #174	@ 0xae
 8016b14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016b18:	689b      	ldr	r3, [r3, #8]
 8016b1a:	2b00      	cmp	r3, #0
 8016b1c:	f000 8165 	beq.w	8016dea <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8016b20:	7b7a      	ldrb	r2, [r7, #13]
 8016b22:	687b      	ldr	r3, [r7, #4]
 8016b24:	32ae      	adds	r2, #174	@ 0xae
 8016b26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016b2a:	689b      	ldr	r3, [r3, #8]
 8016b2c:	6839      	ldr	r1, [r7, #0]
 8016b2e:	6878      	ldr	r0, [r7, #4]
 8016b30:	4798      	blx	r3
 8016b32:	4603      	mov	r3, r0
 8016b34:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8016b36:	e158      	b.n	8016dea <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8016b38:	683b      	ldr	r3, [r7, #0]
 8016b3a:	785b      	ldrb	r3, [r3, #1]
 8016b3c:	2b03      	cmp	r3, #3
 8016b3e:	d008      	beq.n	8016b52 <USBD_StdEPReq+0x9a>
 8016b40:	2b03      	cmp	r3, #3
 8016b42:	f300 8147 	bgt.w	8016dd4 <USBD_StdEPReq+0x31c>
 8016b46:	2b00      	cmp	r3, #0
 8016b48:	f000 809b 	beq.w	8016c82 <USBD_StdEPReq+0x1ca>
 8016b4c:	2b01      	cmp	r3, #1
 8016b4e:	d03c      	beq.n	8016bca <USBD_StdEPReq+0x112>
 8016b50:	e140      	b.n	8016dd4 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8016b52:	687b      	ldr	r3, [r7, #4]
 8016b54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016b58:	b2db      	uxtb	r3, r3
 8016b5a:	2b02      	cmp	r3, #2
 8016b5c:	d002      	beq.n	8016b64 <USBD_StdEPReq+0xac>
 8016b5e:	2b03      	cmp	r3, #3
 8016b60:	d016      	beq.n	8016b90 <USBD_StdEPReq+0xd8>
 8016b62:	e02c      	b.n	8016bbe <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016b64:	7bbb      	ldrb	r3, [r7, #14]
 8016b66:	2b00      	cmp	r3, #0
 8016b68:	d00d      	beq.n	8016b86 <USBD_StdEPReq+0xce>
 8016b6a:	7bbb      	ldrb	r3, [r7, #14]
 8016b6c:	2b80      	cmp	r3, #128	@ 0x80
 8016b6e:	d00a      	beq.n	8016b86 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8016b70:	7bbb      	ldrb	r3, [r7, #14]
 8016b72:	4619      	mov	r1, r3
 8016b74:	6878      	ldr	r0, [r7, #4]
 8016b76:	f001 f96b 	bl	8017e50 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8016b7a:	2180      	movs	r1, #128	@ 0x80
 8016b7c:	6878      	ldr	r0, [r7, #4]
 8016b7e:	f001 f967 	bl	8017e50 <USBD_LL_StallEP>
 8016b82:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8016b84:	e020      	b.n	8016bc8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8016b86:	6839      	ldr	r1, [r7, #0]
 8016b88:	6878      	ldr	r0, [r7, #4]
 8016b8a:	f000 fc7c 	bl	8017486 <USBD_CtlError>
              break;
 8016b8e:	e01b      	b.n	8016bc8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8016b90:	683b      	ldr	r3, [r7, #0]
 8016b92:	885b      	ldrh	r3, [r3, #2]
 8016b94:	2b00      	cmp	r3, #0
 8016b96:	d10e      	bne.n	8016bb6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8016b98:	7bbb      	ldrb	r3, [r7, #14]
 8016b9a:	2b00      	cmp	r3, #0
 8016b9c:	d00b      	beq.n	8016bb6 <USBD_StdEPReq+0xfe>
 8016b9e:	7bbb      	ldrb	r3, [r7, #14]
 8016ba0:	2b80      	cmp	r3, #128	@ 0x80
 8016ba2:	d008      	beq.n	8016bb6 <USBD_StdEPReq+0xfe>
 8016ba4:	683b      	ldr	r3, [r7, #0]
 8016ba6:	88db      	ldrh	r3, [r3, #6]
 8016ba8:	2b00      	cmp	r3, #0
 8016baa:	d104      	bne.n	8016bb6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8016bac:	7bbb      	ldrb	r3, [r7, #14]
 8016bae:	4619      	mov	r1, r3
 8016bb0:	6878      	ldr	r0, [r7, #4]
 8016bb2:	f001 f94d 	bl	8017e50 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8016bb6:	6878      	ldr	r0, [r7, #4]
 8016bb8:	f000 fd43 	bl	8017642 <USBD_CtlSendStatus>

              break;
 8016bbc:	e004      	b.n	8016bc8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8016bbe:	6839      	ldr	r1, [r7, #0]
 8016bc0:	6878      	ldr	r0, [r7, #4]
 8016bc2:	f000 fc60 	bl	8017486 <USBD_CtlError>
              break;
 8016bc6:	bf00      	nop
          }
          break;
 8016bc8:	e109      	b.n	8016dde <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8016bca:	687b      	ldr	r3, [r7, #4]
 8016bcc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016bd0:	b2db      	uxtb	r3, r3
 8016bd2:	2b02      	cmp	r3, #2
 8016bd4:	d002      	beq.n	8016bdc <USBD_StdEPReq+0x124>
 8016bd6:	2b03      	cmp	r3, #3
 8016bd8:	d016      	beq.n	8016c08 <USBD_StdEPReq+0x150>
 8016bda:	e04b      	b.n	8016c74 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016bdc:	7bbb      	ldrb	r3, [r7, #14]
 8016bde:	2b00      	cmp	r3, #0
 8016be0:	d00d      	beq.n	8016bfe <USBD_StdEPReq+0x146>
 8016be2:	7bbb      	ldrb	r3, [r7, #14]
 8016be4:	2b80      	cmp	r3, #128	@ 0x80
 8016be6:	d00a      	beq.n	8016bfe <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8016be8:	7bbb      	ldrb	r3, [r7, #14]
 8016bea:	4619      	mov	r1, r3
 8016bec:	6878      	ldr	r0, [r7, #4]
 8016bee:	f001 f92f 	bl	8017e50 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8016bf2:	2180      	movs	r1, #128	@ 0x80
 8016bf4:	6878      	ldr	r0, [r7, #4]
 8016bf6:	f001 f92b 	bl	8017e50 <USBD_LL_StallEP>
 8016bfa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8016bfc:	e040      	b.n	8016c80 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8016bfe:	6839      	ldr	r1, [r7, #0]
 8016c00:	6878      	ldr	r0, [r7, #4]
 8016c02:	f000 fc40 	bl	8017486 <USBD_CtlError>
              break;
 8016c06:	e03b      	b.n	8016c80 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8016c08:	683b      	ldr	r3, [r7, #0]
 8016c0a:	885b      	ldrh	r3, [r3, #2]
 8016c0c:	2b00      	cmp	r3, #0
 8016c0e:	d136      	bne.n	8016c7e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8016c10:	7bbb      	ldrb	r3, [r7, #14]
 8016c12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016c16:	2b00      	cmp	r3, #0
 8016c18:	d004      	beq.n	8016c24 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8016c1a:	7bbb      	ldrb	r3, [r7, #14]
 8016c1c:	4619      	mov	r1, r3
 8016c1e:	6878      	ldr	r0, [r7, #4]
 8016c20:	f001 f935 	bl	8017e8e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8016c24:	6878      	ldr	r0, [r7, #4]
 8016c26:	f000 fd0c 	bl	8017642 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8016c2a:	7bbb      	ldrb	r3, [r7, #14]
 8016c2c:	4619      	mov	r1, r3
 8016c2e:	6878      	ldr	r0, [r7, #4]
 8016c30:	f7ff fde3 	bl	80167fa <USBD_CoreFindEP>
 8016c34:	4603      	mov	r3, r0
 8016c36:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016c38:	7b7b      	ldrb	r3, [r7, #13]
 8016c3a:	2bff      	cmp	r3, #255	@ 0xff
 8016c3c:	d01f      	beq.n	8016c7e <USBD_StdEPReq+0x1c6>
 8016c3e:	7b7b      	ldrb	r3, [r7, #13]
 8016c40:	2b00      	cmp	r3, #0
 8016c42:	d11c      	bne.n	8016c7e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8016c44:	7b7a      	ldrb	r2, [r7, #13]
 8016c46:	687b      	ldr	r3, [r7, #4]
 8016c48:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8016c4c:	7b7a      	ldrb	r2, [r7, #13]
 8016c4e:	687b      	ldr	r3, [r7, #4]
 8016c50:	32ae      	adds	r2, #174	@ 0xae
 8016c52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016c56:	689b      	ldr	r3, [r3, #8]
 8016c58:	2b00      	cmp	r3, #0
 8016c5a:	d010      	beq.n	8016c7e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8016c5c:	7b7a      	ldrb	r2, [r7, #13]
 8016c5e:	687b      	ldr	r3, [r7, #4]
 8016c60:	32ae      	adds	r2, #174	@ 0xae
 8016c62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016c66:	689b      	ldr	r3, [r3, #8]
 8016c68:	6839      	ldr	r1, [r7, #0]
 8016c6a:	6878      	ldr	r0, [r7, #4]
 8016c6c:	4798      	blx	r3
 8016c6e:	4603      	mov	r3, r0
 8016c70:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8016c72:	e004      	b.n	8016c7e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8016c74:	6839      	ldr	r1, [r7, #0]
 8016c76:	6878      	ldr	r0, [r7, #4]
 8016c78:	f000 fc05 	bl	8017486 <USBD_CtlError>
              break;
 8016c7c:	e000      	b.n	8016c80 <USBD_StdEPReq+0x1c8>
              break;
 8016c7e:	bf00      	nop
          }
          break;
 8016c80:	e0ad      	b.n	8016dde <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8016c82:	687b      	ldr	r3, [r7, #4]
 8016c84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016c88:	b2db      	uxtb	r3, r3
 8016c8a:	2b02      	cmp	r3, #2
 8016c8c:	d002      	beq.n	8016c94 <USBD_StdEPReq+0x1dc>
 8016c8e:	2b03      	cmp	r3, #3
 8016c90:	d033      	beq.n	8016cfa <USBD_StdEPReq+0x242>
 8016c92:	e099      	b.n	8016dc8 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016c94:	7bbb      	ldrb	r3, [r7, #14]
 8016c96:	2b00      	cmp	r3, #0
 8016c98:	d007      	beq.n	8016caa <USBD_StdEPReq+0x1f2>
 8016c9a:	7bbb      	ldrb	r3, [r7, #14]
 8016c9c:	2b80      	cmp	r3, #128	@ 0x80
 8016c9e:	d004      	beq.n	8016caa <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8016ca0:	6839      	ldr	r1, [r7, #0]
 8016ca2:	6878      	ldr	r0, [r7, #4]
 8016ca4:	f000 fbef 	bl	8017486 <USBD_CtlError>
                break;
 8016ca8:	e093      	b.n	8016dd2 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016caa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016cae:	2b00      	cmp	r3, #0
 8016cb0:	da0b      	bge.n	8016cca <USBD_StdEPReq+0x212>
 8016cb2:	7bbb      	ldrb	r3, [r7, #14]
 8016cb4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8016cb8:	4613      	mov	r3, r2
 8016cba:	009b      	lsls	r3, r3, #2
 8016cbc:	4413      	add	r3, r2
 8016cbe:	009b      	lsls	r3, r3, #2
 8016cc0:	3310      	adds	r3, #16
 8016cc2:	687a      	ldr	r2, [r7, #4]
 8016cc4:	4413      	add	r3, r2
 8016cc6:	3304      	adds	r3, #4
 8016cc8:	e00b      	b.n	8016ce2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8016cca:	7bbb      	ldrb	r3, [r7, #14]
 8016ccc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016cd0:	4613      	mov	r3, r2
 8016cd2:	009b      	lsls	r3, r3, #2
 8016cd4:	4413      	add	r3, r2
 8016cd6:	009b      	lsls	r3, r3, #2
 8016cd8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8016cdc:	687a      	ldr	r2, [r7, #4]
 8016cde:	4413      	add	r3, r2
 8016ce0:	3304      	adds	r3, #4
 8016ce2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8016ce4:	68bb      	ldr	r3, [r7, #8]
 8016ce6:	2200      	movs	r2, #0
 8016ce8:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8016cea:	68bb      	ldr	r3, [r7, #8]
 8016cec:	330e      	adds	r3, #14
 8016cee:	2202      	movs	r2, #2
 8016cf0:	4619      	mov	r1, r3
 8016cf2:	6878      	ldr	r0, [r7, #4]
 8016cf4:	f000 fc44 	bl	8017580 <USBD_CtlSendData>
              break;
 8016cf8:	e06b      	b.n	8016dd2 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8016cfa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016cfe:	2b00      	cmp	r3, #0
 8016d00:	da11      	bge.n	8016d26 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8016d02:	7bbb      	ldrb	r3, [r7, #14]
 8016d04:	f003 020f 	and.w	r2, r3, #15
 8016d08:	6879      	ldr	r1, [r7, #4]
 8016d0a:	4613      	mov	r3, r2
 8016d0c:	009b      	lsls	r3, r3, #2
 8016d0e:	4413      	add	r3, r2
 8016d10:	009b      	lsls	r3, r3, #2
 8016d12:	440b      	add	r3, r1
 8016d14:	3323      	adds	r3, #35	@ 0x23
 8016d16:	781b      	ldrb	r3, [r3, #0]
 8016d18:	2b00      	cmp	r3, #0
 8016d1a:	d117      	bne.n	8016d4c <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8016d1c:	6839      	ldr	r1, [r7, #0]
 8016d1e:	6878      	ldr	r0, [r7, #4]
 8016d20:	f000 fbb1 	bl	8017486 <USBD_CtlError>
                  break;
 8016d24:	e055      	b.n	8016dd2 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8016d26:	7bbb      	ldrb	r3, [r7, #14]
 8016d28:	f003 020f 	and.w	r2, r3, #15
 8016d2c:	6879      	ldr	r1, [r7, #4]
 8016d2e:	4613      	mov	r3, r2
 8016d30:	009b      	lsls	r3, r3, #2
 8016d32:	4413      	add	r3, r2
 8016d34:	009b      	lsls	r3, r3, #2
 8016d36:	440b      	add	r3, r1
 8016d38:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8016d3c:	781b      	ldrb	r3, [r3, #0]
 8016d3e:	2b00      	cmp	r3, #0
 8016d40:	d104      	bne.n	8016d4c <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8016d42:	6839      	ldr	r1, [r7, #0]
 8016d44:	6878      	ldr	r0, [r7, #4]
 8016d46:	f000 fb9e 	bl	8017486 <USBD_CtlError>
                  break;
 8016d4a:	e042      	b.n	8016dd2 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016d4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016d50:	2b00      	cmp	r3, #0
 8016d52:	da0b      	bge.n	8016d6c <USBD_StdEPReq+0x2b4>
 8016d54:	7bbb      	ldrb	r3, [r7, #14]
 8016d56:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8016d5a:	4613      	mov	r3, r2
 8016d5c:	009b      	lsls	r3, r3, #2
 8016d5e:	4413      	add	r3, r2
 8016d60:	009b      	lsls	r3, r3, #2
 8016d62:	3310      	adds	r3, #16
 8016d64:	687a      	ldr	r2, [r7, #4]
 8016d66:	4413      	add	r3, r2
 8016d68:	3304      	adds	r3, #4
 8016d6a:	e00b      	b.n	8016d84 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8016d6c:	7bbb      	ldrb	r3, [r7, #14]
 8016d6e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016d72:	4613      	mov	r3, r2
 8016d74:	009b      	lsls	r3, r3, #2
 8016d76:	4413      	add	r3, r2
 8016d78:	009b      	lsls	r3, r3, #2
 8016d7a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8016d7e:	687a      	ldr	r2, [r7, #4]
 8016d80:	4413      	add	r3, r2
 8016d82:	3304      	adds	r3, #4
 8016d84:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8016d86:	7bbb      	ldrb	r3, [r7, #14]
 8016d88:	2b00      	cmp	r3, #0
 8016d8a:	d002      	beq.n	8016d92 <USBD_StdEPReq+0x2da>
 8016d8c:	7bbb      	ldrb	r3, [r7, #14]
 8016d8e:	2b80      	cmp	r3, #128	@ 0x80
 8016d90:	d103      	bne.n	8016d9a <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 8016d92:	68bb      	ldr	r3, [r7, #8]
 8016d94:	2200      	movs	r2, #0
 8016d96:	739a      	strb	r2, [r3, #14]
 8016d98:	e00e      	b.n	8016db8 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8016d9a:	7bbb      	ldrb	r3, [r7, #14]
 8016d9c:	4619      	mov	r1, r3
 8016d9e:	6878      	ldr	r0, [r7, #4]
 8016da0:	f001 f894 	bl	8017ecc <USBD_LL_IsStallEP>
 8016da4:	4603      	mov	r3, r0
 8016da6:	2b00      	cmp	r3, #0
 8016da8:	d003      	beq.n	8016db2 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 8016daa:	68bb      	ldr	r3, [r7, #8]
 8016dac:	2201      	movs	r2, #1
 8016dae:	739a      	strb	r2, [r3, #14]
 8016db0:	e002      	b.n	8016db8 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 8016db2:	68bb      	ldr	r3, [r7, #8]
 8016db4:	2200      	movs	r2, #0
 8016db6:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8016db8:	68bb      	ldr	r3, [r7, #8]
 8016dba:	330e      	adds	r3, #14
 8016dbc:	2202      	movs	r2, #2
 8016dbe:	4619      	mov	r1, r3
 8016dc0:	6878      	ldr	r0, [r7, #4]
 8016dc2:	f000 fbdd 	bl	8017580 <USBD_CtlSendData>
              break;
 8016dc6:	e004      	b.n	8016dd2 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8016dc8:	6839      	ldr	r1, [r7, #0]
 8016dca:	6878      	ldr	r0, [r7, #4]
 8016dcc:	f000 fb5b 	bl	8017486 <USBD_CtlError>
              break;
 8016dd0:	bf00      	nop
          }
          break;
 8016dd2:	e004      	b.n	8016dde <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 8016dd4:	6839      	ldr	r1, [r7, #0]
 8016dd6:	6878      	ldr	r0, [r7, #4]
 8016dd8:	f000 fb55 	bl	8017486 <USBD_CtlError>
          break;
 8016ddc:	bf00      	nop
      }
      break;
 8016dde:	e005      	b.n	8016dec <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 8016de0:	6839      	ldr	r1, [r7, #0]
 8016de2:	6878      	ldr	r0, [r7, #4]
 8016de4:	f000 fb4f 	bl	8017486 <USBD_CtlError>
      break;
 8016de8:	e000      	b.n	8016dec <USBD_StdEPReq+0x334>
      break;
 8016dea:	bf00      	nop
  }

  return ret;
 8016dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8016dee:	4618      	mov	r0, r3
 8016df0:	3710      	adds	r7, #16
 8016df2:	46bd      	mov	sp, r7
 8016df4:	bd80      	pop	{r7, pc}
	...

08016df8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016df8:	b580      	push	{r7, lr}
 8016dfa:	b084      	sub	sp, #16
 8016dfc:	af00      	add	r7, sp, #0
 8016dfe:	6078      	str	r0, [r7, #4]
 8016e00:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8016e02:	2300      	movs	r3, #0
 8016e04:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8016e06:	2300      	movs	r3, #0
 8016e08:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8016e0a:	2300      	movs	r3, #0
 8016e0c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8016e0e:	683b      	ldr	r3, [r7, #0]
 8016e10:	885b      	ldrh	r3, [r3, #2]
 8016e12:	0a1b      	lsrs	r3, r3, #8
 8016e14:	b29b      	uxth	r3, r3
 8016e16:	3b01      	subs	r3, #1
 8016e18:	2b06      	cmp	r3, #6
 8016e1a:	f200 8128 	bhi.w	801706e <USBD_GetDescriptor+0x276>
 8016e1e:	a201      	add	r2, pc, #4	@ (adr r2, 8016e24 <USBD_GetDescriptor+0x2c>)
 8016e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016e24:	08016e41 	.word	0x08016e41
 8016e28:	08016e59 	.word	0x08016e59
 8016e2c:	08016e99 	.word	0x08016e99
 8016e30:	0801706f 	.word	0x0801706f
 8016e34:	0801706f 	.word	0x0801706f
 8016e38:	0801700f 	.word	0x0801700f
 8016e3c:	0801703b 	.word	0x0801703b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8016e40:	687b      	ldr	r3, [r7, #4]
 8016e42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016e46:	681b      	ldr	r3, [r3, #0]
 8016e48:	687a      	ldr	r2, [r7, #4]
 8016e4a:	7c12      	ldrb	r2, [r2, #16]
 8016e4c:	f107 0108 	add.w	r1, r7, #8
 8016e50:	4610      	mov	r0, r2
 8016e52:	4798      	blx	r3
 8016e54:	60f8      	str	r0, [r7, #12]
      break;
 8016e56:	e112      	b.n	801707e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016e58:	687b      	ldr	r3, [r7, #4]
 8016e5a:	7c1b      	ldrb	r3, [r3, #16]
 8016e5c:	2b00      	cmp	r3, #0
 8016e5e:	d10d      	bne.n	8016e7c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8016e60:	687b      	ldr	r3, [r7, #4]
 8016e62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016e66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016e68:	f107 0208 	add.w	r2, r7, #8
 8016e6c:	4610      	mov	r0, r2
 8016e6e:	4798      	blx	r3
 8016e70:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8016e72:	68fb      	ldr	r3, [r7, #12]
 8016e74:	3301      	adds	r3, #1
 8016e76:	2202      	movs	r2, #2
 8016e78:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8016e7a:	e100      	b.n	801707e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8016e7c:	687b      	ldr	r3, [r7, #4]
 8016e7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016e84:	f107 0208 	add.w	r2, r7, #8
 8016e88:	4610      	mov	r0, r2
 8016e8a:	4798      	blx	r3
 8016e8c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8016e8e:	68fb      	ldr	r3, [r7, #12]
 8016e90:	3301      	adds	r3, #1
 8016e92:	2202      	movs	r2, #2
 8016e94:	701a      	strb	r2, [r3, #0]
      break;
 8016e96:	e0f2      	b.n	801707e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8016e98:	683b      	ldr	r3, [r7, #0]
 8016e9a:	885b      	ldrh	r3, [r3, #2]
 8016e9c:	b2db      	uxtb	r3, r3
 8016e9e:	2b05      	cmp	r3, #5
 8016ea0:	f200 80ac 	bhi.w	8016ffc <USBD_GetDescriptor+0x204>
 8016ea4:	a201      	add	r2, pc, #4	@ (adr r2, 8016eac <USBD_GetDescriptor+0xb4>)
 8016ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016eaa:	bf00      	nop
 8016eac:	08016ec5 	.word	0x08016ec5
 8016eb0:	08016ef9 	.word	0x08016ef9
 8016eb4:	08016f2d 	.word	0x08016f2d
 8016eb8:	08016f61 	.word	0x08016f61
 8016ebc:	08016f95 	.word	0x08016f95
 8016ec0:	08016fc9 	.word	0x08016fc9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8016ec4:	687b      	ldr	r3, [r7, #4]
 8016ec6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016eca:	685b      	ldr	r3, [r3, #4]
 8016ecc:	2b00      	cmp	r3, #0
 8016ece:	d00b      	beq.n	8016ee8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8016ed0:	687b      	ldr	r3, [r7, #4]
 8016ed2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016ed6:	685b      	ldr	r3, [r3, #4]
 8016ed8:	687a      	ldr	r2, [r7, #4]
 8016eda:	7c12      	ldrb	r2, [r2, #16]
 8016edc:	f107 0108 	add.w	r1, r7, #8
 8016ee0:	4610      	mov	r0, r2
 8016ee2:	4798      	blx	r3
 8016ee4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016ee6:	e091      	b.n	801700c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016ee8:	6839      	ldr	r1, [r7, #0]
 8016eea:	6878      	ldr	r0, [r7, #4]
 8016eec:	f000 facb 	bl	8017486 <USBD_CtlError>
            err++;
 8016ef0:	7afb      	ldrb	r3, [r7, #11]
 8016ef2:	3301      	adds	r3, #1
 8016ef4:	72fb      	strb	r3, [r7, #11]
          break;
 8016ef6:	e089      	b.n	801700c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8016ef8:	687b      	ldr	r3, [r7, #4]
 8016efa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016efe:	689b      	ldr	r3, [r3, #8]
 8016f00:	2b00      	cmp	r3, #0
 8016f02:	d00b      	beq.n	8016f1c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8016f04:	687b      	ldr	r3, [r7, #4]
 8016f06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016f0a:	689b      	ldr	r3, [r3, #8]
 8016f0c:	687a      	ldr	r2, [r7, #4]
 8016f0e:	7c12      	ldrb	r2, [r2, #16]
 8016f10:	f107 0108 	add.w	r1, r7, #8
 8016f14:	4610      	mov	r0, r2
 8016f16:	4798      	blx	r3
 8016f18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016f1a:	e077      	b.n	801700c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016f1c:	6839      	ldr	r1, [r7, #0]
 8016f1e:	6878      	ldr	r0, [r7, #4]
 8016f20:	f000 fab1 	bl	8017486 <USBD_CtlError>
            err++;
 8016f24:	7afb      	ldrb	r3, [r7, #11]
 8016f26:	3301      	adds	r3, #1
 8016f28:	72fb      	strb	r3, [r7, #11]
          break;
 8016f2a:	e06f      	b.n	801700c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8016f2c:	687b      	ldr	r3, [r7, #4]
 8016f2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016f32:	68db      	ldr	r3, [r3, #12]
 8016f34:	2b00      	cmp	r3, #0
 8016f36:	d00b      	beq.n	8016f50 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8016f38:	687b      	ldr	r3, [r7, #4]
 8016f3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016f3e:	68db      	ldr	r3, [r3, #12]
 8016f40:	687a      	ldr	r2, [r7, #4]
 8016f42:	7c12      	ldrb	r2, [r2, #16]
 8016f44:	f107 0108 	add.w	r1, r7, #8
 8016f48:	4610      	mov	r0, r2
 8016f4a:	4798      	blx	r3
 8016f4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016f4e:	e05d      	b.n	801700c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016f50:	6839      	ldr	r1, [r7, #0]
 8016f52:	6878      	ldr	r0, [r7, #4]
 8016f54:	f000 fa97 	bl	8017486 <USBD_CtlError>
            err++;
 8016f58:	7afb      	ldrb	r3, [r7, #11]
 8016f5a:	3301      	adds	r3, #1
 8016f5c:	72fb      	strb	r3, [r7, #11]
          break;
 8016f5e:	e055      	b.n	801700c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8016f60:	687b      	ldr	r3, [r7, #4]
 8016f62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016f66:	691b      	ldr	r3, [r3, #16]
 8016f68:	2b00      	cmp	r3, #0
 8016f6a:	d00b      	beq.n	8016f84 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8016f6c:	687b      	ldr	r3, [r7, #4]
 8016f6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016f72:	691b      	ldr	r3, [r3, #16]
 8016f74:	687a      	ldr	r2, [r7, #4]
 8016f76:	7c12      	ldrb	r2, [r2, #16]
 8016f78:	f107 0108 	add.w	r1, r7, #8
 8016f7c:	4610      	mov	r0, r2
 8016f7e:	4798      	blx	r3
 8016f80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016f82:	e043      	b.n	801700c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016f84:	6839      	ldr	r1, [r7, #0]
 8016f86:	6878      	ldr	r0, [r7, #4]
 8016f88:	f000 fa7d 	bl	8017486 <USBD_CtlError>
            err++;
 8016f8c:	7afb      	ldrb	r3, [r7, #11]
 8016f8e:	3301      	adds	r3, #1
 8016f90:	72fb      	strb	r3, [r7, #11]
          break;
 8016f92:	e03b      	b.n	801700c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8016f94:	687b      	ldr	r3, [r7, #4]
 8016f96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016f9a:	695b      	ldr	r3, [r3, #20]
 8016f9c:	2b00      	cmp	r3, #0
 8016f9e:	d00b      	beq.n	8016fb8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8016fa0:	687b      	ldr	r3, [r7, #4]
 8016fa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016fa6:	695b      	ldr	r3, [r3, #20]
 8016fa8:	687a      	ldr	r2, [r7, #4]
 8016faa:	7c12      	ldrb	r2, [r2, #16]
 8016fac:	f107 0108 	add.w	r1, r7, #8
 8016fb0:	4610      	mov	r0, r2
 8016fb2:	4798      	blx	r3
 8016fb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016fb6:	e029      	b.n	801700c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016fb8:	6839      	ldr	r1, [r7, #0]
 8016fba:	6878      	ldr	r0, [r7, #4]
 8016fbc:	f000 fa63 	bl	8017486 <USBD_CtlError>
            err++;
 8016fc0:	7afb      	ldrb	r3, [r7, #11]
 8016fc2:	3301      	adds	r3, #1
 8016fc4:	72fb      	strb	r3, [r7, #11]
          break;
 8016fc6:	e021      	b.n	801700c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8016fc8:	687b      	ldr	r3, [r7, #4]
 8016fca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016fce:	699b      	ldr	r3, [r3, #24]
 8016fd0:	2b00      	cmp	r3, #0
 8016fd2:	d00b      	beq.n	8016fec <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8016fd4:	687b      	ldr	r3, [r7, #4]
 8016fd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016fda:	699b      	ldr	r3, [r3, #24]
 8016fdc:	687a      	ldr	r2, [r7, #4]
 8016fde:	7c12      	ldrb	r2, [r2, #16]
 8016fe0:	f107 0108 	add.w	r1, r7, #8
 8016fe4:	4610      	mov	r0, r2
 8016fe6:	4798      	blx	r3
 8016fe8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016fea:	e00f      	b.n	801700c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016fec:	6839      	ldr	r1, [r7, #0]
 8016fee:	6878      	ldr	r0, [r7, #4]
 8016ff0:	f000 fa49 	bl	8017486 <USBD_CtlError>
            err++;
 8016ff4:	7afb      	ldrb	r3, [r7, #11]
 8016ff6:	3301      	adds	r3, #1
 8016ff8:	72fb      	strb	r3, [r7, #11]
          break;
 8016ffa:	e007      	b.n	801700c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8016ffc:	6839      	ldr	r1, [r7, #0]
 8016ffe:	6878      	ldr	r0, [r7, #4]
 8017000:	f000 fa41 	bl	8017486 <USBD_CtlError>
          err++;
 8017004:	7afb      	ldrb	r3, [r7, #11]
 8017006:	3301      	adds	r3, #1
 8017008:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 801700a:	bf00      	nop
      }
      break;
 801700c:	e037      	b.n	801707e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801700e:	687b      	ldr	r3, [r7, #4]
 8017010:	7c1b      	ldrb	r3, [r3, #16]
 8017012:	2b00      	cmp	r3, #0
 8017014:	d109      	bne.n	801702a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8017016:	687b      	ldr	r3, [r7, #4]
 8017018:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801701c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801701e:	f107 0208 	add.w	r2, r7, #8
 8017022:	4610      	mov	r0, r2
 8017024:	4798      	blx	r3
 8017026:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8017028:	e029      	b.n	801707e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801702a:	6839      	ldr	r1, [r7, #0]
 801702c:	6878      	ldr	r0, [r7, #4]
 801702e:	f000 fa2a 	bl	8017486 <USBD_CtlError>
        err++;
 8017032:	7afb      	ldrb	r3, [r7, #11]
 8017034:	3301      	adds	r3, #1
 8017036:	72fb      	strb	r3, [r7, #11]
      break;
 8017038:	e021      	b.n	801707e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801703a:	687b      	ldr	r3, [r7, #4]
 801703c:	7c1b      	ldrb	r3, [r3, #16]
 801703e:	2b00      	cmp	r3, #0
 8017040:	d10d      	bne.n	801705e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8017042:	687b      	ldr	r3, [r7, #4]
 8017044:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801704a:	f107 0208 	add.w	r2, r7, #8
 801704e:	4610      	mov	r0, r2
 8017050:	4798      	blx	r3
 8017052:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8017054:	68fb      	ldr	r3, [r7, #12]
 8017056:	3301      	adds	r3, #1
 8017058:	2207      	movs	r2, #7
 801705a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801705c:	e00f      	b.n	801707e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801705e:	6839      	ldr	r1, [r7, #0]
 8017060:	6878      	ldr	r0, [r7, #4]
 8017062:	f000 fa10 	bl	8017486 <USBD_CtlError>
        err++;
 8017066:	7afb      	ldrb	r3, [r7, #11]
 8017068:	3301      	adds	r3, #1
 801706a:	72fb      	strb	r3, [r7, #11]
      break;
 801706c:	e007      	b.n	801707e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 801706e:	6839      	ldr	r1, [r7, #0]
 8017070:	6878      	ldr	r0, [r7, #4]
 8017072:	f000 fa08 	bl	8017486 <USBD_CtlError>
      err++;
 8017076:	7afb      	ldrb	r3, [r7, #11]
 8017078:	3301      	adds	r3, #1
 801707a:	72fb      	strb	r3, [r7, #11]
      break;
 801707c:	bf00      	nop
  }

  if (err != 0U)
 801707e:	7afb      	ldrb	r3, [r7, #11]
 8017080:	2b00      	cmp	r3, #0
 8017082:	d11e      	bne.n	80170c2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8017084:	683b      	ldr	r3, [r7, #0]
 8017086:	88db      	ldrh	r3, [r3, #6]
 8017088:	2b00      	cmp	r3, #0
 801708a:	d016      	beq.n	80170ba <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 801708c:	893b      	ldrh	r3, [r7, #8]
 801708e:	2b00      	cmp	r3, #0
 8017090:	d00e      	beq.n	80170b0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8017092:	683b      	ldr	r3, [r7, #0]
 8017094:	88da      	ldrh	r2, [r3, #6]
 8017096:	893b      	ldrh	r3, [r7, #8]
 8017098:	4293      	cmp	r3, r2
 801709a:	bf28      	it	cs
 801709c:	4613      	movcs	r3, r2
 801709e:	b29b      	uxth	r3, r3
 80170a0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80170a2:	893b      	ldrh	r3, [r7, #8]
 80170a4:	461a      	mov	r2, r3
 80170a6:	68f9      	ldr	r1, [r7, #12]
 80170a8:	6878      	ldr	r0, [r7, #4]
 80170aa:	f000 fa69 	bl	8017580 <USBD_CtlSendData>
 80170ae:	e009      	b.n	80170c4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80170b0:	6839      	ldr	r1, [r7, #0]
 80170b2:	6878      	ldr	r0, [r7, #4]
 80170b4:	f000 f9e7 	bl	8017486 <USBD_CtlError>
 80170b8:	e004      	b.n	80170c4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80170ba:	6878      	ldr	r0, [r7, #4]
 80170bc:	f000 fac1 	bl	8017642 <USBD_CtlSendStatus>
 80170c0:	e000      	b.n	80170c4 <USBD_GetDescriptor+0x2cc>
    return;
 80170c2:	bf00      	nop
  }
}
 80170c4:	3710      	adds	r7, #16
 80170c6:	46bd      	mov	sp, r7
 80170c8:	bd80      	pop	{r7, pc}
 80170ca:	bf00      	nop

080170cc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80170cc:	b580      	push	{r7, lr}
 80170ce:	b084      	sub	sp, #16
 80170d0:	af00      	add	r7, sp, #0
 80170d2:	6078      	str	r0, [r7, #4]
 80170d4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80170d6:	683b      	ldr	r3, [r7, #0]
 80170d8:	889b      	ldrh	r3, [r3, #4]
 80170da:	2b00      	cmp	r3, #0
 80170dc:	d131      	bne.n	8017142 <USBD_SetAddress+0x76>
 80170de:	683b      	ldr	r3, [r7, #0]
 80170e0:	88db      	ldrh	r3, [r3, #6]
 80170e2:	2b00      	cmp	r3, #0
 80170e4:	d12d      	bne.n	8017142 <USBD_SetAddress+0x76>
 80170e6:	683b      	ldr	r3, [r7, #0]
 80170e8:	885b      	ldrh	r3, [r3, #2]
 80170ea:	2b7f      	cmp	r3, #127	@ 0x7f
 80170ec:	d829      	bhi.n	8017142 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80170ee:	683b      	ldr	r3, [r7, #0]
 80170f0:	885b      	ldrh	r3, [r3, #2]
 80170f2:	b2db      	uxtb	r3, r3
 80170f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80170f8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80170fa:	687b      	ldr	r3, [r7, #4]
 80170fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017100:	b2db      	uxtb	r3, r3
 8017102:	2b03      	cmp	r3, #3
 8017104:	d104      	bne.n	8017110 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8017106:	6839      	ldr	r1, [r7, #0]
 8017108:	6878      	ldr	r0, [r7, #4]
 801710a:	f000 f9bc 	bl	8017486 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801710e:	e01d      	b.n	801714c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8017110:	687b      	ldr	r3, [r7, #4]
 8017112:	7bfa      	ldrb	r2, [r7, #15]
 8017114:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8017118:	7bfb      	ldrb	r3, [r7, #15]
 801711a:	4619      	mov	r1, r3
 801711c:	6878      	ldr	r0, [r7, #4]
 801711e:	f000 ff01 	bl	8017f24 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8017122:	6878      	ldr	r0, [r7, #4]
 8017124:	f000 fa8d 	bl	8017642 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8017128:	7bfb      	ldrb	r3, [r7, #15]
 801712a:	2b00      	cmp	r3, #0
 801712c:	d004      	beq.n	8017138 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801712e:	687b      	ldr	r3, [r7, #4]
 8017130:	2202      	movs	r2, #2
 8017132:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017136:	e009      	b.n	801714c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8017138:	687b      	ldr	r3, [r7, #4]
 801713a:	2201      	movs	r2, #1
 801713c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017140:	e004      	b.n	801714c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8017142:	6839      	ldr	r1, [r7, #0]
 8017144:	6878      	ldr	r0, [r7, #4]
 8017146:	f000 f99e 	bl	8017486 <USBD_CtlError>
  }
}
 801714a:	bf00      	nop
 801714c:	bf00      	nop
 801714e:	3710      	adds	r7, #16
 8017150:	46bd      	mov	sp, r7
 8017152:	bd80      	pop	{r7, pc}

08017154 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017154:	b580      	push	{r7, lr}
 8017156:	b084      	sub	sp, #16
 8017158:	af00      	add	r7, sp, #0
 801715a:	6078      	str	r0, [r7, #4]
 801715c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801715e:	2300      	movs	r3, #0
 8017160:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8017162:	683b      	ldr	r3, [r7, #0]
 8017164:	885b      	ldrh	r3, [r3, #2]
 8017166:	b2da      	uxtb	r2, r3
 8017168:	4b4e      	ldr	r3, [pc, #312]	@ (80172a4 <USBD_SetConfig+0x150>)
 801716a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801716c:	4b4d      	ldr	r3, [pc, #308]	@ (80172a4 <USBD_SetConfig+0x150>)
 801716e:	781b      	ldrb	r3, [r3, #0]
 8017170:	2b01      	cmp	r3, #1
 8017172:	d905      	bls.n	8017180 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8017174:	6839      	ldr	r1, [r7, #0]
 8017176:	6878      	ldr	r0, [r7, #4]
 8017178:	f000 f985 	bl	8017486 <USBD_CtlError>
    return USBD_FAIL;
 801717c:	2303      	movs	r3, #3
 801717e:	e08c      	b.n	801729a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8017180:	687b      	ldr	r3, [r7, #4]
 8017182:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017186:	b2db      	uxtb	r3, r3
 8017188:	2b02      	cmp	r3, #2
 801718a:	d002      	beq.n	8017192 <USBD_SetConfig+0x3e>
 801718c:	2b03      	cmp	r3, #3
 801718e:	d029      	beq.n	80171e4 <USBD_SetConfig+0x90>
 8017190:	e075      	b.n	801727e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8017192:	4b44      	ldr	r3, [pc, #272]	@ (80172a4 <USBD_SetConfig+0x150>)
 8017194:	781b      	ldrb	r3, [r3, #0]
 8017196:	2b00      	cmp	r3, #0
 8017198:	d020      	beq.n	80171dc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 801719a:	4b42      	ldr	r3, [pc, #264]	@ (80172a4 <USBD_SetConfig+0x150>)
 801719c:	781b      	ldrb	r3, [r3, #0]
 801719e:	461a      	mov	r2, r3
 80171a0:	687b      	ldr	r3, [r7, #4]
 80171a2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80171a4:	4b3f      	ldr	r3, [pc, #252]	@ (80172a4 <USBD_SetConfig+0x150>)
 80171a6:	781b      	ldrb	r3, [r3, #0]
 80171a8:	4619      	mov	r1, r3
 80171aa:	6878      	ldr	r0, [r7, #4]
 80171ac:	f7fe ffcd 	bl	801614a <USBD_SetClassConfig>
 80171b0:	4603      	mov	r3, r0
 80171b2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80171b4:	7bfb      	ldrb	r3, [r7, #15]
 80171b6:	2b00      	cmp	r3, #0
 80171b8:	d008      	beq.n	80171cc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80171ba:	6839      	ldr	r1, [r7, #0]
 80171bc:	6878      	ldr	r0, [r7, #4]
 80171be:	f000 f962 	bl	8017486 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80171c2:	687b      	ldr	r3, [r7, #4]
 80171c4:	2202      	movs	r2, #2
 80171c6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80171ca:	e065      	b.n	8017298 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80171cc:	6878      	ldr	r0, [r7, #4]
 80171ce:	f000 fa38 	bl	8017642 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80171d2:	687b      	ldr	r3, [r7, #4]
 80171d4:	2203      	movs	r2, #3
 80171d6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80171da:	e05d      	b.n	8017298 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80171dc:	6878      	ldr	r0, [r7, #4]
 80171de:	f000 fa30 	bl	8017642 <USBD_CtlSendStatus>
      break;
 80171e2:	e059      	b.n	8017298 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80171e4:	4b2f      	ldr	r3, [pc, #188]	@ (80172a4 <USBD_SetConfig+0x150>)
 80171e6:	781b      	ldrb	r3, [r3, #0]
 80171e8:	2b00      	cmp	r3, #0
 80171ea:	d112      	bne.n	8017212 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80171ec:	687b      	ldr	r3, [r7, #4]
 80171ee:	2202      	movs	r2, #2
 80171f0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80171f4:	4b2b      	ldr	r3, [pc, #172]	@ (80172a4 <USBD_SetConfig+0x150>)
 80171f6:	781b      	ldrb	r3, [r3, #0]
 80171f8:	461a      	mov	r2, r3
 80171fa:	687b      	ldr	r3, [r7, #4]
 80171fc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80171fe:	4b29      	ldr	r3, [pc, #164]	@ (80172a4 <USBD_SetConfig+0x150>)
 8017200:	781b      	ldrb	r3, [r3, #0]
 8017202:	4619      	mov	r1, r3
 8017204:	6878      	ldr	r0, [r7, #4]
 8017206:	f7fe ffbc 	bl	8016182 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801720a:	6878      	ldr	r0, [r7, #4]
 801720c:	f000 fa19 	bl	8017642 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8017210:	e042      	b.n	8017298 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8017212:	4b24      	ldr	r3, [pc, #144]	@ (80172a4 <USBD_SetConfig+0x150>)
 8017214:	781b      	ldrb	r3, [r3, #0]
 8017216:	461a      	mov	r2, r3
 8017218:	687b      	ldr	r3, [r7, #4]
 801721a:	685b      	ldr	r3, [r3, #4]
 801721c:	429a      	cmp	r2, r3
 801721e:	d02a      	beq.n	8017276 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8017220:	687b      	ldr	r3, [r7, #4]
 8017222:	685b      	ldr	r3, [r3, #4]
 8017224:	b2db      	uxtb	r3, r3
 8017226:	4619      	mov	r1, r3
 8017228:	6878      	ldr	r0, [r7, #4]
 801722a:	f7fe ffaa 	bl	8016182 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801722e:	4b1d      	ldr	r3, [pc, #116]	@ (80172a4 <USBD_SetConfig+0x150>)
 8017230:	781b      	ldrb	r3, [r3, #0]
 8017232:	461a      	mov	r2, r3
 8017234:	687b      	ldr	r3, [r7, #4]
 8017236:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8017238:	4b1a      	ldr	r3, [pc, #104]	@ (80172a4 <USBD_SetConfig+0x150>)
 801723a:	781b      	ldrb	r3, [r3, #0]
 801723c:	4619      	mov	r1, r3
 801723e:	6878      	ldr	r0, [r7, #4]
 8017240:	f7fe ff83 	bl	801614a <USBD_SetClassConfig>
 8017244:	4603      	mov	r3, r0
 8017246:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8017248:	7bfb      	ldrb	r3, [r7, #15]
 801724a:	2b00      	cmp	r3, #0
 801724c:	d00f      	beq.n	801726e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 801724e:	6839      	ldr	r1, [r7, #0]
 8017250:	6878      	ldr	r0, [r7, #4]
 8017252:	f000 f918 	bl	8017486 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8017256:	687b      	ldr	r3, [r7, #4]
 8017258:	685b      	ldr	r3, [r3, #4]
 801725a:	b2db      	uxtb	r3, r3
 801725c:	4619      	mov	r1, r3
 801725e:	6878      	ldr	r0, [r7, #4]
 8017260:	f7fe ff8f 	bl	8016182 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8017264:	687b      	ldr	r3, [r7, #4]
 8017266:	2202      	movs	r2, #2
 8017268:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 801726c:	e014      	b.n	8017298 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801726e:	6878      	ldr	r0, [r7, #4]
 8017270:	f000 f9e7 	bl	8017642 <USBD_CtlSendStatus>
      break;
 8017274:	e010      	b.n	8017298 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8017276:	6878      	ldr	r0, [r7, #4]
 8017278:	f000 f9e3 	bl	8017642 <USBD_CtlSendStatus>
      break;
 801727c:	e00c      	b.n	8017298 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 801727e:	6839      	ldr	r1, [r7, #0]
 8017280:	6878      	ldr	r0, [r7, #4]
 8017282:	f000 f900 	bl	8017486 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8017286:	4b07      	ldr	r3, [pc, #28]	@ (80172a4 <USBD_SetConfig+0x150>)
 8017288:	781b      	ldrb	r3, [r3, #0]
 801728a:	4619      	mov	r1, r3
 801728c:	6878      	ldr	r0, [r7, #4]
 801728e:	f7fe ff78 	bl	8016182 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8017292:	2303      	movs	r3, #3
 8017294:	73fb      	strb	r3, [r7, #15]
      break;
 8017296:	bf00      	nop
  }

  return ret;
 8017298:	7bfb      	ldrb	r3, [r7, #15]
}
 801729a:	4618      	mov	r0, r3
 801729c:	3710      	adds	r7, #16
 801729e:	46bd      	mov	sp, r7
 80172a0:	bd80      	pop	{r7, pc}
 80172a2:	bf00      	nop
 80172a4:	20000210 	.word	0x20000210

080172a8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80172a8:	b580      	push	{r7, lr}
 80172aa:	b082      	sub	sp, #8
 80172ac:	af00      	add	r7, sp, #0
 80172ae:	6078      	str	r0, [r7, #4]
 80172b0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80172b2:	683b      	ldr	r3, [r7, #0]
 80172b4:	88db      	ldrh	r3, [r3, #6]
 80172b6:	2b01      	cmp	r3, #1
 80172b8:	d004      	beq.n	80172c4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80172ba:	6839      	ldr	r1, [r7, #0]
 80172bc:	6878      	ldr	r0, [r7, #4]
 80172be:	f000 f8e2 	bl	8017486 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80172c2:	e023      	b.n	801730c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80172c4:	687b      	ldr	r3, [r7, #4]
 80172c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80172ca:	b2db      	uxtb	r3, r3
 80172cc:	2b02      	cmp	r3, #2
 80172ce:	dc02      	bgt.n	80172d6 <USBD_GetConfig+0x2e>
 80172d0:	2b00      	cmp	r3, #0
 80172d2:	dc03      	bgt.n	80172dc <USBD_GetConfig+0x34>
 80172d4:	e015      	b.n	8017302 <USBD_GetConfig+0x5a>
 80172d6:	2b03      	cmp	r3, #3
 80172d8:	d00b      	beq.n	80172f2 <USBD_GetConfig+0x4a>
 80172da:	e012      	b.n	8017302 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80172dc:	687b      	ldr	r3, [r7, #4]
 80172de:	2200      	movs	r2, #0
 80172e0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80172e2:	687b      	ldr	r3, [r7, #4]
 80172e4:	3308      	adds	r3, #8
 80172e6:	2201      	movs	r2, #1
 80172e8:	4619      	mov	r1, r3
 80172ea:	6878      	ldr	r0, [r7, #4]
 80172ec:	f000 f948 	bl	8017580 <USBD_CtlSendData>
        break;
 80172f0:	e00c      	b.n	801730c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80172f2:	687b      	ldr	r3, [r7, #4]
 80172f4:	3304      	adds	r3, #4
 80172f6:	2201      	movs	r2, #1
 80172f8:	4619      	mov	r1, r3
 80172fa:	6878      	ldr	r0, [r7, #4]
 80172fc:	f000 f940 	bl	8017580 <USBD_CtlSendData>
        break;
 8017300:	e004      	b.n	801730c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8017302:	6839      	ldr	r1, [r7, #0]
 8017304:	6878      	ldr	r0, [r7, #4]
 8017306:	f000 f8be 	bl	8017486 <USBD_CtlError>
        break;
 801730a:	bf00      	nop
}
 801730c:	bf00      	nop
 801730e:	3708      	adds	r7, #8
 8017310:	46bd      	mov	sp, r7
 8017312:	bd80      	pop	{r7, pc}

08017314 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017314:	b580      	push	{r7, lr}
 8017316:	b082      	sub	sp, #8
 8017318:	af00      	add	r7, sp, #0
 801731a:	6078      	str	r0, [r7, #4]
 801731c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801731e:	687b      	ldr	r3, [r7, #4]
 8017320:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017324:	b2db      	uxtb	r3, r3
 8017326:	3b01      	subs	r3, #1
 8017328:	2b02      	cmp	r3, #2
 801732a:	d81e      	bhi.n	801736a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801732c:	683b      	ldr	r3, [r7, #0]
 801732e:	88db      	ldrh	r3, [r3, #6]
 8017330:	2b02      	cmp	r3, #2
 8017332:	d004      	beq.n	801733e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8017334:	6839      	ldr	r1, [r7, #0]
 8017336:	6878      	ldr	r0, [r7, #4]
 8017338:	f000 f8a5 	bl	8017486 <USBD_CtlError>
        break;
 801733c:	e01a      	b.n	8017374 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801733e:	687b      	ldr	r3, [r7, #4]
 8017340:	2201      	movs	r2, #1
 8017342:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8017344:	687b      	ldr	r3, [r7, #4]
 8017346:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 801734a:	2b00      	cmp	r3, #0
 801734c:	d005      	beq.n	801735a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801734e:	687b      	ldr	r3, [r7, #4]
 8017350:	68db      	ldr	r3, [r3, #12]
 8017352:	f043 0202 	orr.w	r2, r3, #2
 8017356:	687b      	ldr	r3, [r7, #4]
 8017358:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801735a:	687b      	ldr	r3, [r7, #4]
 801735c:	330c      	adds	r3, #12
 801735e:	2202      	movs	r2, #2
 8017360:	4619      	mov	r1, r3
 8017362:	6878      	ldr	r0, [r7, #4]
 8017364:	f000 f90c 	bl	8017580 <USBD_CtlSendData>
      break;
 8017368:	e004      	b.n	8017374 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801736a:	6839      	ldr	r1, [r7, #0]
 801736c:	6878      	ldr	r0, [r7, #4]
 801736e:	f000 f88a 	bl	8017486 <USBD_CtlError>
      break;
 8017372:	bf00      	nop
  }
}
 8017374:	bf00      	nop
 8017376:	3708      	adds	r7, #8
 8017378:	46bd      	mov	sp, r7
 801737a:	bd80      	pop	{r7, pc}

0801737c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801737c:	b580      	push	{r7, lr}
 801737e:	b082      	sub	sp, #8
 8017380:	af00      	add	r7, sp, #0
 8017382:	6078      	str	r0, [r7, #4]
 8017384:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8017386:	683b      	ldr	r3, [r7, #0]
 8017388:	885b      	ldrh	r3, [r3, #2]
 801738a:	2b01      	cmp	r3, #1
 801738c:	d107      	bne.n	801739e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 801738e:	687b      	ldr	r3, [r7, #4]
 8017390:	2201      	movs	r2, #1
 8017392:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8017396:	6878      	ldr	r0, [r7, #4]
 8017398:	f000 f953 	bl	8017642 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 801739c:	e013      	b.n	80173c6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 801739e:	683b      	ldr	r3, [r7, #0]
 80173a0:	885b      	ldrh	r3, [r3, #2]
 80173a2:	2b02      	cmp	r3, #2
 80173a4:	d10b      	bne.n	80173be <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80173a6:	683b      	ldr	r3, [r7, #0]
 80173a8:	889b      	ldrh	r3, [r3, #4]
 80173aa:	0a1b      	lsrs	r3, r3, #8
 80173ac:	b29b      	uxth	r3, r3
 80173ae:	b2da      	uxtb	r2, r3
 80173b0:	687b      	ldr	r3, [r7, #4]
 80173b2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80173b6:	6878      	ldr	r0, [r7, #4]
 80173b8:	f000 f943 	bl	8017642 <USBD_CtlSendStatus>
}
 80173bc:	e003      	b.n	80173c6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80173be:	6839      	ldr	r1, [r7, #0]
 80173c0:	6878      	ldr	r0, [r7, #4]
 80173c2:	f000 f860 	bl	8017486 <USBD_CtlError>
}
 80173c6:	bf00      	nop
 80173c8:	3708      	adds	r7, #8
 80173ca:	46bd      	mov	sp, r7
 80173cc:	bd80      	pop	{r7, pc}

080173ce <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80173ce:	b580      	push	{r7, lr}
 80173d0:	b082      	sub	sp, #8
 80173d2:	af00      	add	r7, sp, #0
 80173d4:	6078      	str	r0, [r7, #4]
 80173d6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80173d8:	687b      	ldr	r3, [r7, #4]
 80173da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80173de:	b2db      	uxtb	r3, r3
 80173e0:	3b01      	subs	r3, #1
 80173e2:	2b02      	cmp	r3, #2
 80173e4:	d80b      	bhi.n	80173fe <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80173e6:	683b      	ldr	r3, [r7, #0]
 80173e8:	885b      	ldrh	r3, [r3, #2]
 80173ea:	2b01      	cmp	r3, #1
 80173ec:	d10c      	bne.n	8017408 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80173ee:	687b      	ldr	r3, [r7, #4]
 80173f0:	2200      	movs	r2, #0
 80173f2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80173f6:	6878      	ldr	r0, [r7, #4]
 80173f8:	f000 f923 	bl	8017642 <USBD_CtlSendStatus>
      }
      break;
 80173fc:	e004      	b.n	8017408 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80173fe:	6839      	ldr	r1, [r7, #0]
 8017400:	6878      	ldr	r0, [r7, #4]
 8017402:	f000 f840 	bl	8017486 <USBD_CtlError>
      break;
 8017406:	e000      	b.n	801740a <USBD_ClrFeature+0x3c>
      break;
 8017408:	bf00      	nop
  }
}
 801740a:	bf00      	nop
 801740c:	3708      	adds	r7, #8
 801740e:	46bd      	mov	sp, r7
 8017410:	bd80      	pop	{r7, pc}

08017412 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8017412:	b580      	push	{r7, lr}
 8017414:	b084      	sub	sp, #16
 8017416:	af00      	add	r7, sp, #0
 8017418:	6078      	str	r0, [r7, #4]
 801741a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801741c:	683b      	ldr	r3, [r7, #0]
 801741e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8017420:	68fb      	ldr	r3, [r7, #12]
 8017422:	781a      	ldrb	r2, [r3, #0]
 8017424:	687b      	ldr	r3, [r7, #4]
 8017426:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8017428:	68fb      	ldr	r3, [r7, #12]
 801742a:	3301      	adds	r3, #1
 801742c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801742e:	68fb      	ldr	r3, [r7, #12]
 8017430:	781a      	ldrb	r2, [r3, #0]
 8017432:	687b      	ldr	r3, [r7, #4]
 8017434:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8017436:	68fb      	ldr	r3, [r7, #12]
 8017438:	3301      	adds	r3, #1
 801743a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801743c:	68f8      	ldr	r0, [r7, #12]
 801743e:	f7ff fa3d 	bl	80168bc <SWAPBYTE>
 8017442:	4603      	mov	r3, r0
 8017444:	461a      	mov	r2, r3
 8017446:	687b      	ldr	r3, [r7, #4]
 8017448:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801744a:	68fb      	ldr	r3, [r7, #12]
 801744c:	3301      	adds	r3, #1
 801744e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8017450:	68fb      	ldr	r3, [r7, #12]
 8017452:	3301      	adds	r3, #1
 8017454:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8017456:	68f8      	ldr	r0, [r7, #12]
 8017458:	f7ff fa30 	bl	80168bc <SWAPBYTE>
 801745c:	4603      	mov	r3, r0
 801745e:	461a      	mov	r2, r3
 8017460:	687b      	ldr	r3, [r7, #4]
 8017462:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8017464:	68fb      	ldr	r3, [r7, #12]
 8017466:	3301      	adds	r3, #1
 8017468:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801746a:	68fb      	ldr	r3, [r7, #12]
 801746c:	3301      	adds	r3, #1
 801746e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8017470:	68f8      	ldr	r0, [r7, #12]
 8017472:	f7ff fa23 	bl	80168bc <SWAPBYTE>
 8017476:	4603      	mov	r3, r0
 8017478:	461a      	mov	r2, r3
 801747a:	687b      	ldr	r3, [r7, #4]
 801747c:	80da      	strh	r2, [r3, #6]
}
 801747e:	bf00      	nop
 8017480:	3710      	adds	r7, #16
 8017482:	46bd      	mov	sp, r7
 8017484:	bd80      	pop	{r7, pc}

08017486 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017486:	b580      	push	{r7, lr}
 8017488:	b082      	sub	sp, #8
 801748a:	af00      	add	r7, sp, #0
 801748c:	6078      	str	r0, [r7, #4]
 801748e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8017490:	2180      	movs	r1, #128	@ 0x80
 8017492:	6878      	ldr	r0, [r7, #4]
 8017494:	f000 fcdc 	bl	8017e50 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8017498:	2100      	movs	r1, #0
 801749a:	6878      	ldr	r0, [r7, #4]
 801749c:	f000 fcd8 	bl	8017e50 <USBD_LL_StallEP>
}
 80174a0:	bf00      	nop
 80174a2:	3708      	adds	r7, #8
 80174a4:	46bd      	mov	sp, r7
 80174a6:	bd80      	pop	{r7, pc}

080174a8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80174a8:	b580      	push	{r7, lr}
 80174aa:	b086      	sub	sp, #24
 80174ac:	af00      	add	r7, sp, #0
 80174ae:	60f8      	str	r0, [r7, #12]
 80174b0:	60b9      	str	r1, [r7, #8]
 80174b2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80174b4:	2300      	movs	r3, #0
 80174b6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80174b8:	68fb      	ldr	r3, [r7, #12]
 80174ba:	2b00      	cmp	r3, #0
 80174bc:	d042      	beq.n	8017544 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80174be:	68fb      	ldr	r3, [r7, #12]
 80174c0:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80174c2:	6938      	ldr	r0, [r7, #16]
 80174c4:	f000 f842 	bl	801754c <USBD_GetLen>
 80174c8:	4603      	mov	r3, r0
 80174ca:	3301      	adds	r3, #1
 80174cc:	005b      	lsls	r3, r3, #1
 80174ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80174d2:	d808      	bhi.n	80174e6 <USBD_GetString+0x3e>
 80174d4:	6938      	ldr	r0, [r7, #16]
 80174d6:	f000 f839 	bl	801754c <USBD_GetLen>
 80174da:	4603      	mov	r3, r0
 80174dc:	3301      	adds	r3, #1
 80174de:	b29b      	uxth	r3, r3
 80174e0:	005b      	lsls	r3, r3, #1
 80174e2:	b29a      	uxth	r2, r3
 80174e4:	e001      	b.n	80174ea <USBD_GetString+0x42>
 80174e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80174ea:	687b      	ldr	r3, [r7, #4]
 80174ec:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80174ee:	7dfb      	ldrb	r3, [r7, #23]
 80174f0:	68ba      	ldr	r2, [r7, #8]
 80174f2:	4413      	add	r3, r2
 80174f4:	687a      	ldr	r2, [r7, #4]
 80174f6:	7812      	ldrb	r2, [r2, #0]
 80174f8:	701a      	strb	r2, [r3, #0]
  idx++;
 80174fa:	7dfb      	ldrb	r3, [r7, #23]
 80174fc:	3301      	adds	r3, #1
 80174fe:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8017500:	7dfb      	ldrb	r3, [r7, #23]
 8017502:	68ba      	ldr	r2, [r7, #8]
 8017504:	4413      	add	r3, r2
 8017506:	2203      	movs	r2, #3
 8017508:	701a      	strb	r2, [r3, #0]
  idx++;
 801750a:	7dfb      	ldrb	r3, [r7, #23]
 801750c:	3301      	adds	r3, #1
 801750e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8017510:	e013      	b.n	801753a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8017512:	7dfb      	ldrb	r3, [r7, #23]
 8017514:	68ba      	ldr	r2, [r7, #8]
 8017516:	4413      	add	r3, r2
 8017518:	693a      	ldr	r2, [r7, #16]
 801751a:	7812      	ldrb	r2, [r2, #0]
 801751c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801751e:	693b      	ldr	r3, [r7, #16]
 8017520:	3301      	adds	r3, #1
 8017522:	613b      	str	r3, [r7, #16]
    idx++;
 8017524:	7dfb      	ldrb	r3, [r7, #23]
 8017526:	3301      	adds	r3, #1
 8017528:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801752a:	7dfb      	ldrb	r3, [r7, #23]
 801752c:	68ba      	ldr	r2, [r7, #8]
 801752e:	4413      	add	r3, r2
 8017530:	2200      	movs	r2, #0
 8017532:	701a      	strb	r2, [r3, #0]
    idx++;
 8017534:	7dfb      	ldrb	r3, [r7, #23]
 8017536:	3301      	adds	r3, #1
 8017538:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801753a:	693b      	ldr	r3, [r7, #16]
 801753c:	781b      	ldrb	r3, [r3, #0]
 801753e:	2b00      	cmp	r3, #0
 8017540:	d1e7      	bne.n	8017512 <USBD_GetString+0x6a>
 8017542:	e000      	b.n	8017546 <USBD_GetString+0x9e>
    return;
 8017544:	bf00      	nop
  }
}
 8017546:	3718      	adds	r7, #24
 8017548:	46bd      	mov	sp, r7
 801754a:	bd80      	pop	{r7, pc}

0801754c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801754c:	b480      	push	{r7}
 801754e:	b085      	sub	sp, #20
 8017550:	af00      	add	r7, sp, #0
 8017552:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8017554:	2300      	movs	r3, #0
 8017556:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8017558:	687b      	ldr	r3, [r7, #4]
 801755a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801755c:	e005      	b.n	801756a <USBD_GetLen+0x1e>
  {
    len++;
 801755e:	7bfb      	ldrb	r3, [r7, #15]
 8017560:	3301      	adds	r3, #1
 8017562:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8017564:	68bb      	ldr	r3, [r7, #8]
 8017566:	3301      	adds	r3, #1
 8017568:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801756a:	68bb      	ldr	r3, [r7, #8]
 801756c:	781b      	ldrb	r3, [r3, #0]
 801756e:	2b00      	cmp	r3, #0
 8017570:	d1f5      	bne.n	801755e <USBD_GetLen+0x12>
  }

  return len;
 8017572:	7bfb      	ldrb	r3, [r7, #15]
}
 8017574:	4618      	mov	r0, r3
 8017576:	3714      	adds	r7, #20
 8017578:	46bd      	mov	sp, r7
 801757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801757e:	4770      	bx	lr

08017580 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8017580:	b580      	push	{r7, lr}
 8017582:	b084      	sub	sp, #16
 8017584:	af00      	add	r7, sp, #0
 8017586:	60f8      	str	r0, [r7, #12]
 8017588:	60b9      	str	r1, [r7, #8]
 801758a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801758c:	68fb      	ldr	r3, [r7, #12]
 801758e:	2202      	movs	r2, #2
 8017590:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8017594:	68fb      	ldr	r3, [r7, #12]
 8017596:	687a      	ldr	r2, [r7, #4]
 8017598:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 801759a:	68fb      	ldr	r3, [r7, #12]
 801759c:	68ba      	ldr	r2, [r7, #8]
 801759e:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80175a0:	68fb      	ldr	r3, [r7, #12]
 80175a2:	687a      	ldr	r2, [r7, #4]
 80175a4:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80175a6:	687b      	ldr	r3, [r7, #4]
 80175a8:	68ba      	ldr	r2, [r7, #8]
 80175aa:	2100      	movs	r1, #0
 80175ac:	68f8      	ldr	r0, [r7, #12]
 80175ae:	f000 fcd8 	bl	8017f62 <USBD_LL_Transmit>

  return USBD_OK;
 80175b2:	2300      	movs	r3, #0
}
 80175b4:	4618      	mov	r0, r3
 80175b6:	3710      	adds	r7, #16
 80175b8:	46bd      	mov	sp, r7
 80175ba:	bd80      	pop	{r7, pc}

080175bc <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80175bc:	b580      	push	{r7, lr}
 80175be:	b084      	sub	sp, #16
 80175c0:	af00      	add	r7, sp, #0
 80175c2:	60f8      	str	r0, [r7, #12]
 80175c4:	60b9      	str	r1, [r7, #8]
 80175c6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80175c8:	687b      	ldr	r3, [r7, #4]
 80175ca:	68ba      	ldr	r2, [r7, #8]
 80175cc:	2100      	movs	r1, #0
 80175ce:	68f8      	ldr	r0, [r7, #12]
 80175d0:	f000 fcc7 	bl	8017f62 <USBD_LL_Transmit>

  return USBD_OK;
 80175d4:	2300      	movs	r3, #0
}
 80175d6:	4618      	mov	r0, r3
 80175d8:	3710      	adds	r7, #16
 80175da:	46bd      	mov	sp, r7
 80175dc:	bd80      	pop	{r7, pc}

080175de <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80175de:	b580      	push	{r7, lr}
 80175e0:	b084      	sub	sp, #16
 80175e2:	af00      	add	r7, sp, #0
 80175e4:	60f8      	str	r0, [r7, #12]
 80175e6:	60b9      	str	r1, [r7, #8]
 80175e8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80175ea:	68fb      	ldr	r3, [r7, #12]
 80175ec:	2203      	movs	r2, #3
 80175ee:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80175f2:	68fb      	ldr	r3, [r7, #12]
 80175f4:	687a      	ldr	r2, [r7, #4]
 80175f6:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 80175fa:	68fb      	ldr	r3, [r7, #12]
 80175fc:	68ba      	ldr	r2, [r7, #8]
 80175fe:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8017602:	68fb      	ldr	r3, [r7, #12]
 8017604:	687a      	ldr	r2, [r7, #4]
 8017606:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801760a:	687b      	ldr	r3, [r7, #4]
 801760c:	68ba      	ldr	r2, [r7, #8]
 801760e:	2100      	movs	r1, #0
 8017610:	68f8      	ldr	r0, [r7, #12]
 8017612:	f000 fcc7 	bl	8017fa4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017616:	2300      	movs	r3, #0
}
 8017618:	4618      	mov	r0, r3
 801761a:	3710      	adds	r7, #16
 801761c:	46bd      	mov	sp, r7
 801761e:	bd80      	pop	{r7, pc}

08017620 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8017620:	b580      	push	{r7, lr}
 8017622:	b084      	sub	sp, #16
 8017624:	af00      	add	r7, sp, #0
 8017626:	60f8      	str	r0, [r7, #12]
 8017628:	60b9      	str	r1, [r7, #8]
 801762a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801762c:	687b      	ldr	r3, [r7, #4]
 801762e:	68ba      	ldr	r2, [r7, #8]
 8017630:	2100      	movs	r1, #0
 8017632:	68f8      	ldr	r0, [r7, #12]
 8017634:	f000 fcb6 	bl	8017fa4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017638:	2300      	movs	r3, #0
}
 801763a:	4618      	mov	r0, r3
 801763c:	3710      	adds	r7, #16
 801763e:	46bd      	mov	sp, r7
 8017640:	bd80      	pop	{r7, pc}

08017642 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8017642:	b580      	push	{r7, lr}
 8017644:	b082      	sub	sp, #8
 8017646:	af00      	add	r7, sp, #0
 8017648:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801764a:	687b      	ldr	r3, [r7, #4]
 801764c:	2204      	movs	r2, #4
 801764e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8017652:	2300      	movs	r3, #0
 8017654:	2200      	movs	r2, #0
 8017656:	2100      	movs	r1, #0
 8017658:	6878      	ldr	r0, [r7, #4]
 801765a:	f000 fc82 	bl	8017f62 <USBD_LL_Transmit>

  return USBD_OK;
 801765e:	2300      	movs	r3, #0
}
 8017660:	4618      	mov	r0, r3
 8017662:	3708      	adds	r7, #8
 8017664:	46bd      	mov	sp, r7
 8017666:	bd80      	pop	{r7, pc}

08017668 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8017668:	b580      	push	{r7, lr}
 801766a:	b082      	sub	sp, #8
 801766c:	af00      	add	r7, sp, #0
 801766e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8017670:	687b      	ldr	r3, [r7, #4]
 8017672:	2205      	movs	r2, #5
 8017674:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8017678:	2300      	movs	r3, #0
 801767a:	2200      	movs	r2, #0
 801767c:	2100      	movs	r1, #0
 801767e:	6878      	ldr	r0, [r7, #4]
 8017680:	f000 fc90 	bl	8017fa4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017684:	2300      	movs	r3, #0
}
 8017686:	4618      	mov	r0, r3
 8017688:	3708      	adds	r7, #8
 801768a:	46bd      	mov	sp, r7
 801768c:	bd80      	pop	{r7, pc}
	...

08017690 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8017690:	b580      	push	{r7, lr}
 8017692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8017694:	2200      	movs	r2, #0
 8017696:	4912      	ldr	r1, [pc, #72]	@ (80176e0 <MX_USB_DEVICE_Init+0x50>)
 8017698:	4812      	ldr	r0, [pc, #72]	@ (80176e4 <MX_USB_DEVICE_Init+0x54>)
 801769a:	f7fe fcd9 	bl	8016050 <USBD_Init>
 801769e:	4603      	mov	r3, r0
 80176a0:	2b00      	cmp	r3, #0
 80176a2:	d001      	beq.n	80176a8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80176a4:	f7f9 f940 	bl	8010928 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80176a8:	490f      	ldr	r1, [pc, #60]	@ (80176e8 <MX_USB_DEVICE_Init+0x58>)
 80176aa:	480e      	ldr	r0, [pc, #56]	@ (80176e4 <MX_USB_DEVICE_Init+0x54>)
 80176ac:	f7fe fd00 	bl	80160b0 <USBD_RegisterClass>
 80176b0:	4603      	mov	r3, r0
 80176b2:	2b00      	cmp	r3, #0
 80176b4:	d001      	beq.n	80176ba <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80176b6:	f7f9 f937 	bl	8010928 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80176ba:	490c      	ldr	r1, [pc, #48]	@ (80176ec <MX_USB_DEVICE_Init+0x5c>)
 80176bc:	4809      	ldr	r0, [pc, #36]	@ (80176e4 <MX_USB_DEVICE_Init+0x54>)
 80176be:	f7fe fc37 	bl	8015f30 <USBD_CDC_RegisterInterface>
 80176c2:	4603      	mov	r3, r0
 80176c4:	2b00      	cmp	r3, #0
 80176c6:	d001      	beq.n	80176cc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80176c8:	f7f9 f92e 	bl	8010928 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80176cc:	4805      	ldr	r0, [pc, #20]	@ (80176e4 <MX_USB_DEVICE_Init+0x54>)
 80176ce:	f7fe fd25 	bl	801611c <USBD_Start>
 80176d2:	4603      	mov	r3, r0
 80176d4:	2b00      	cmp	r3, #0
 80176d6:	d001      	beq.n	80176dc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80176d8:	f7f9 f926 	bl	8010928 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80176dc:	bf00      	nop
 80176de:	bd80      	pop	{r7, pc}
 80176e0:	200000ac 	.word	0x200000ac
 80176e4:	20000214 	.word	0x20000214
 80176e8:	20000018 	.word	0x20000018
 80176ec:	20000098 	.word	0x20000098

080176f0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80176f0:	b580      	push	{r7, lr}
 80176f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80176f4:	2200      	movs	r2, #0
 80176f6:	4905      	ldr	r1, [pc, #20]	@ (801770c <CDC_Init_FS+0x1c>)
 80176f8:	4805      	ldr	r0, [pc, #20]	@ (8017710 <CDC_Init_FS+0x20>)
 80176fa:	f7fe fc33 	bl	8015f64 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80176fe:	4905      	ldr	r1, [pc, #20]	@ (8017714 <CDC_Init_FS+0x24>)
 8017700:	4803      	ldr	r0, [pc, #12]	@ (8017710 <CDC_Init_FS+0x20>)
 8017702:	f7fe fc51 	bl	8015fa8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8017706:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8017708:	4618      	mov	r0, r3
 801770a:	bd80      	pop	{r7, pc}
 801770c:	20000cf0 	.word	0x20000cf0
 8017710:	20000214 	.word	0x20000214
 8017714:	200004f0 	.word	0x200004f0

08017718 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8017718:	b480      	push	{r7}
 801771a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801771c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801771e:	4618      	mov	r0, r3
 8017720:	46bd      	mov	sp, r7
 8017722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017726:	4770      	bx	lr

08017728 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8017728:	b480      	push	{r7}
 801772a:	b083      	sub	sp, #12
 801772c:	af00      	add	r7, sp, #0
 801772e:	4603      	mov	r3, r0
 8017730:	6039      	str	r1, [r7, #0]
 8017732:	71fb      	strb	r3, [r7, #7]
 8017734:	4613      	mov	r3, r2
 8017736:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8017738:	79fb      	ldrb	r3, [r7, #7]
 801773a:	2b23      	cmp	r3, #35	@ 0x23
 801773c:	d84a      	bhi.n	80177d4 <CDC_Control_FS+0xac>
 801773e:	a201      	add	r2, pc, #4	@ (adr r2, 8017744 <CDC_Control_FS+0x1c>)
 8017740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017744:	080177d5 	.word	0x080177d5
 8017748:	080177d5 	.word	0x080177d5
 801774c:	080177d5 	.word	0x080177d5
 8017750:	080177d5 	.word	0x080177d5
 8017754:	080177d5 	.word	0x080177d5
 8017758:	080177d5 	.word	0x080177d5
 801775c:	080177d5 	.word	0x080177d5
 8017760:	080177d5 	.word	0x080177d5
 8017764:	080177d5 	.word	0x080177d5
 8017768:	080177d5 	.word	0x080177d5
 801776c:	080177d5 	.word	0x080177d5
 8017770:	080177d5 	.word	0x080177d5
 8017774:	080177d5 	.word	0x080177d5
 8017778:	080177d5 	.word	0x080177d5
 801777c:	080177d5 	.word	0x080177d5
 8017780:	080177d5 	.word	0x080177d5
 8017784:	080177d5 	.word	0x080177d5
 8017788:	080177d5 	.word	0x080177d5
 801778c:	080177d5 	.word	0x080177d5
 8017790:	080177d5 	.word	0x080177d5
 8017794:	080177d5 	.word	0x080177d5
 8017798:	080177d5 	.word	0x080177d5
 801779c:	080177d5 	.word	0x080177d5
 80177a0:	080177d5 	.word	0x080177d5
 80177a4:	080177d5 	.word	0x080177d5
 80177a8:	080177d5 	.word	0x080177d5
 80177ac:	080177d5 	.word	0x080177d5
 80177b0:	080177d5 	.word	0x080177d5
 80177b4:	080177d5 	.word	0x080177d5
 80177b8:	080177d5 	.word	0x080177d5
 80177bc:	080177d5 	.word	0x080177d5
 80177c0:	080177d5 	.word	0x080177d5
 80177c4:	080177d5 	.word	0x080177d5
 80177c8:	080177d5 	.word	0x080177d5
 80177cc:	080177d5 	.word	0x080177d5
 80177d0:	080177d5 	.word	0x080177d5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80177d4:	bf00      	nop
  }

  return (USBD_OK);
 80177d6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80177d8:	4618      	mov	r0, r3
 80177da:	370c      	adds	r7, #12
 80177dc:	46bd      	mov	sp, r7
 80177de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177e2:	4770      	bx	lr

080177e4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80177e4:	b580      	push	{r7, lr}
 80177e6:	b082      	sub	sp, #8
 80177e8:	af00      	add	r7, sp, #0
 80177ea:	6078      	str	r0, [r7, #4]
 80177ec:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80177ee:	6879      	ldr	r1, [r7, #4]
 80177f0:	4805      	ldr	r0, [pc, #20]	@ (8017808 <CDC_Receive_FS+0x24>)
 80177f2:	f7fe fbd9 	bl	8015fa8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80177f6:	4804      	ldr	r0, [pc, #16]	@ (8017808 <CDC_Receive_FS+0x24>)
 80177f8:	f7fe fbf4 	bl	8015fe4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80177fc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80177fe:	4618      	mov	r0, r3
 8017800:	3708      	adds	r7, #8
 8017802:	46bd      	mov	sp, r7
 8017804:	bd80      	pop	{r7, pc}
 8017806:	bf00      	nop
 8017808:	20000214 	.word	0x20000214

0801780c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801780c:	b480      	push	{r7}
 801780e:	b087      	sub	sp, #28
 8017810:	af00      	add	r7, sp, #0
 8017812:	60f8      	str	r0, [r7, #12]
 8017814:	60b9      	str	r1, [r7, #8]
 8017816:	4613      	mov	r3, r2
 8017818:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801781a:	2300      	movs	r3, #0
 801781c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801781e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017822:	4618      	mov	r0, r3
 8017824:	371c      	adds	r7, #28
 8017826:	46bd      	mov	sp, r7
 8017828:	f85d 7b04 	ldr.w	r7, [sp], #4
 801782c:	4770      	bx	lr
	...

08017830 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017830:	b480      	push	{r7}
 8017832:	b083      	sub	sp, #12
 8017834:	af00      	add	r7, sp, #0
 8017836:	4603      	mov	r3, r0
 8017838:	6039      	str	r1, [r7, #0]
 801783a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801783c:	683b      	ldr	r3, [r7, #0]
 801783e:	2212      	movs	r2, #18
 8017840:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8017842:	4b03      	ldr	r3, [pc, #12]	@ (8017850 <USBD_FS_DeviceDescriptor+0x20>)
}
 8017844:	4618      	mov	r0, r3
 8017846:	370c      	adds	r7, #12
 8017848:	46bd      	mov	sp, r7
 801784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801784e:	4770      	bx	lr
 8017850:	200000c8 	.word	0x200000c8

08017854 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017854:	b480      	push	{r7}
 8017856:	b083      	sub	sp, #12
 8017858:	af00      	add	r7, sp, #0
 801785a:	4603      	mov	r3, r0
 801785c:	6039      	str	r1, [r7, #0]
 801785e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8017860:	683b      	ldr	r3, [r7, #0]
 8017862:	2204      	movs	r2, #4
 8017864:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8017866:	4b03      	ldr	r3, [pc, #12]	@ (8017874 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8017868:	4618      	mov	r0, r3
 801786a:	370c      	adds	r7, #12
 801786c:	46bd      	mov	sp, r7
 801786e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017872:	4770      	bx	lr
 8017874:	200000dc 	.word	0x200000dc

08017878 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017878:	b580      	push	{r7, lr}
 801787a:	b082      	sub	sp, #8
 801787c:	af00      	add	r7, sp, #0
 801787e:	4603      	mov	r3, r0
 8017880:	6039      	str	r1, [r7, #0]
 8017882:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017884:	79fb      	ldrb	r3, [r7, #7]
 8017886:	2b00      	cmp	r3, #0
 8017888:	d105      	bne.n	8017896 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801788a:	683a      	ldr	r2, [r7, #0]
 801788c:	4907      	ldr	r1, [pc, #28]	@ (80178ac <USBD_FS_ProductStrDescriptor+0x34>)
 801788e:	4808      	ldr	r0, [pc, #32]	@ (80178b0 <USBD_FS_ProductStrDescriptor+0x38>)
 8017890:	f7ff fe0a 	bl	80174a8 <USBD_GetString>
 8017894:	e004      	b.n	80178a0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8017896:	683a      	ldr	r2, [r7, #0]
 8017898:	4904      	ldr	r1, [pc, #16]	@ (80178ac <USBD_FS_ProductStrDescriptor+0x34>)
 801789a:	4805      	ldr	r0, [pc, #20]	@ (80178b0 <USBD_FS_ProductStrDescriptor+0x38>)
 801789c:	f7ff fe04 	bl	80174a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80178a0:	4b02      	ldr	r3, [pc, #8]	@ (80178ac <USBD_FS_ProductStrDescriptor+0x34>)
}
 80178a2:	4618      	mov	r0, r3
 80178a4:	3708      	adds	r7, #8
 80178a6:	46bd      	mov	sp, r7
 80178a8:	bd80      	pop	{r7, pc}
 80178aa:	bf00      	nop
 80178ac:	200014f0 	.word	0x200014f0
 80178b0:	08018104 	.word	0x08018104

080178b4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80178b4:	b580      	push	{r7, lr}
 80178b6:	b082      	sub	sp, #8
 80178b8:	af00      	add	r7, sp, #0
 80178ba:	4603      	mov	r3, r0
 80178bc:	6039      	str	r1, [r7, #0]
 80178be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80178c0:	683a      	ldr	r2, [r7, #0]
 80178c2:	4904      	ldr	r1, [pc, #16]	@ (80178d4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80178c4:	4804      	ldr	r0, [pc, #16]	@ (80178d8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80178c6:	f7ff fdef 	bl	80174a8 <USBD_GetString>
  return USBD_StrDesc;
 80178ca:	4b02      	ldr	r3, [pc, #8]	@ (80178d4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80178cc:	4618      	mov	r0, r3
 80178ce:	3708      	adds	r7, #8
 80178d0:	46bd      	mov	sp, r7
 80178d2:	bd80      	pop	{r7, pc}
 80178d4:	200014f0 	.word	0x200014f0
 80178d8:	0801811c 	.word	0x0801811c

080178dc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80178dc:	b580      	push	{r7, lr}
 80178de:	b082      	sub	sp, #8
 80178e0:	af00      	add	r7, sp, #0
 80178e2:	4603      	mov	r3, r0
 80178e4:	6039      	str	r1, [r7, #0]
 80178e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80178e8:	683b      	ldr	r3, [r7, #0]
 80178ea:	221a      	movs	r2, #26
 80178ec:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80178ee:	f000 f843 	bl	8017978 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80178f2:	4b02      	ldr	r3, [pc, #8]	@ (80178fc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80178f4:	4618      	mov	r0, r3
 80178f6:	3708      	adds	r7, #8
 80178f8:	46bd      	mov	sp, r7
 80178fa:	bd80      	pop	{r7, pc}
 80178fc:	200000e0 	.word	0x200000e0

08017900 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017900:	b580      	push	{r7, lr}
 8017902:	b082      	sub	sp, #8
 8017904:	af00      	add	r7, sp, #0
 8017906:	4603      	mov	r3, r0
 8017908:	6039      	str	r1, [r7, #0]
 801790a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801790c:	79fb      	ldrb	r3, [r7, #7]
 801790e:	2b00      	cmp	r3, #0
 8017910:	d105      	bne.n	801791e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8017912:	683a      	ldr	r2, [r7, #0]
 8017914:	4907      	ldr	r1, [pc, #28]	@ (8017934 <USBD_FS_ConfigStrDescriptor+0x34>)
 8017916:	4808      	ldr	r0, [pc, #32]	@ (8017938 <USBD_FS_ConfigStrDescriptor+0x38>)
 8017918:	f7ff fdc6 	bl	80174a8 <USBD_GetString>
 801791c:	e004      	b.n	8017928 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801791e:	683a      	ldr	r2, [r7, #0]
 8017920:	4904      	ldr	r1, [pc, #16]	@ (8017934 <USBD_FS_ConfigStrDescriptor+0x34>)
 8017922:	4805      	ldr	r0, [pc, #20]	@ (8017938 <USBD_FS_ConfigStrDescriptor+0x38>)
 8017924:	f7ff fdc0 	bl	80174a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017928:	4b02      	ldr	r3, [pc, #8]	@ (8017934 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801792a:	4618      	mov	r0, r3
 801792c:	3708      	adds	r7, #8
 801792e:	46bd      	mov	sp, r7
 8017930:	bd80      	pop	{r7, pc}
 8017932:	bf00      	nop
 8017934:	200014f0 	.word	0x200014f0
 8017938:	08018130 	.word	0x08018130

0801793c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801793c:	b580      	push	{r7, lr}
 801793e:	b082      	sub	sp, #8
 8017940:	af00      	add	r7, sp, #0
 8017942:	4603      	mov	r3, r0
 8017944:	6039      	str	r1, [r7, #0]
 8017946:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017948:	79fb      	ldrb	r3, [r7, #7]
 801794a:	2b00      	cmp	r3, #0
 801794c:	d105      	bne.n	801795a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801794e:	683a      	ldr	r2, [r7, #0]
 8017950:	4907      	ldr	r1, [pc, #28]	@ (8017970 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8017952:	4808      	ldr	r0, [pc, #32]	@ (8017974 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8017954:	f7ff fda8 	bl	80174a8 <USBD_GetString>
 8017958:	e004      	b.n	8017964 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801795a:	683a      	ldr	r2, [r7, #0]
 801795c:	4904      	ldr	r1, [pc, #16]	@ (8017970 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801795e:	4805      	ldr	r0, [pc, #20]	@ (8017974 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8017960:	f7ff fda2 	bl	80174a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017964:	4b02      	ldr	r3, [pc, #8]	@ (8017970 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8017966:	4618      	mov	r0, r3
 8017968:	3708      	adds	r7, #8
 801796a:	46bd      	mov	sp, r7
 801796c:	bd80      	pop	{r7, pc}
 801796e:	bf00      	nop
 8017970:	200014f0 	.word	0x200014f0
 8017974:	0801813c 	.word	0x0801813c

08017978 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8017978:	b580      	push	{r7, lr}
 801797a:	b084      	sub	sp, #16
 801797c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801797e:	4b0f      	ldr	r3, [pc, #60]	@ (80179bc <Get_SerialNum+0x44>)
 8017980:	681b      	ldr	r3, [r3, #0]
 8017982:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8017984:	4b0e      	ldr	r3, [pc, #56]	@ (80179c0 <Get_SerialNum+0x48>)
 8017986:	681b      	ldr	r3, [r3, #0]
 8017988:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801798a:	4b0e      	ldr	r3, [pc, #56]	@ (80179c4 <Get_SerialNum+0x4c>)
 801798c:	681b      	ldr	r3, [r3, #0]
 801798e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8017990:	68fa      	ldr	r2, [r7, #12]
 8017992:	687b      	ldr	r3, [r7, #4]
 8017994:	4413      	add	r3, r2
 8017996:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8017998:	68fb      	ldr	r3, [r7, #12]
 801799a:	2b00      	cmp	r3, #0
 801799c:	d009      	beq.n	80179b2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801799e:	2208      	movs	r2, #8
 80179a0:	4909      	ldr	r1, [pc, #36]	@ (80179c8 <Get_SerialNum+0x50>)
 80179a2:	68f8      	ldr	r0, [r7, #12]
 80179a4:	f000 f814 	bl	80179d0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80179a8:	2204      	movs	r2, #4
 80179aa:	4908      	ldr	r1, [pc, #32]	@ (80179cc <Get_SerialNum+0x54>)
 80179ac:	68b8      	ldr	r0, [r7, #8]
 80179ae:	f000 f80f 	bl	80179d0 <IntToUnicode>
  }
}
 80179b2:	bf00      	nop
 80179b4:	3710      	adds	r7, #16
 80179b6:	46bd      	mov	sp, r7
 80179b8:	bd80      	pop	{r7, pc}
 80179ba:	bf00      	nop
 80179bc:	1fff7a10 	.word	0x1fff7a10
 80179c0:	1fff7a14 	.word	0x1fff7a14
 80179c4:	1fff7a18 	.word	0x1fff7a18
 80179c8:	200000e2 	.word	0x200000e2
 80179cc:	200000f2 	.word	0x200000f2

080179d0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80179d0:	b480      	push	{r7}
 80179d2:	b087      	sub	sp, #28
 80179d4:	af00      	add	r7, sp, #0
 80179d6:	60f8      	str	r0, [r7, #12]
 80179d8:	60b9      	str	r1, [r7, #8]
 80179da:	4613      	mov	r3, r2
 80179dc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80179de:	2300      	movs	r3, #0
 80179e0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80179e2:	2300      	movs	r3, #0
 80179e4:	75fb      	strb	r3, [r7, #23]
 80179e6:	e027      	b.n	8017a38 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80179e8:	68fb      	ldr	r3, [r7, #12]
 80179ea:	0f1b      	lsrs	r3, r3, #28
 80179ec:	2b09      	cmp	r3, #9
 80179ee:	d80b      	bhi.n	8017a08 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80179f0:	68fb      	ldr	r3, [r7, #12]
 80179f2:	0f1b      	lsrs	r3, r3, #28
 80179f4:	b2da      	uxtb	r2, r3
 80179f6:	7dfb      	ldrb	r3, [r7, #23]
 80179f8:	005b      	lsls	r3, r3, #1
 80179fa:	4619      	mov	r1, r3
 80179fc:	68bb      	ldr	r3, [r7, #8]
 80179fe:	440b      	add	r3, r1
 8017a00:	3230      	adds	r2, #48	@ 0x30
 8017a02:	b2d2      	uxtb	r2, r2
 8017a04:	701a      	strb	r2, [r3, #0]
 8017a06:	e00a      	b.n	8017a1e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8017a08:	68fb      	ldr	r3, [r7, #12]
 8017a0a:	0f1b      	lsrs	r3, r3, #28
 8017a0c:	b2da      	uxtb	r2, r3
 8017a0e:	7dfb      	ldrb	r3, [r7, #23]
 8017a10:	005b      	lsls	r3, r3, #1
 8017a12:	4619      	mov	r1, r3
 8017a14:	68bb      	ldr	r3, [r7, #8]
 8017a16:	440b      	add	r3, r1
 8017a18:	3237      	adds	r2, #55	@ 0x37
 8017a1a:	b2d2      	uxtb	r2, r2
 8017a1c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8017a1e:	68fb      	ldr	r3, [r7, #12]
 8017a20:	011b      	lsls	r3, r3, #4
 8017a22:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8017a24:	7dfb      	ldrb	r3, [r7, #23]
 8017a26:	005b      	lsls	r3, r3, #1
 8017a28:	3301      	adds	r3, #1
 8017a2a:	68ba      	ldr	r2, [r7, #8]
 8017a2c:	4413      	add	r3, r2
 8017a2e:	2200      	movs	r2, #0
 8017a30:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8017a32:	7dfb      	ldrb	r3, [r7, #23]
 8017a34:	3301      	adds	r3, #1
 8017a36:	75fb      	strb	r3, [r7, #23]
 8017a38:	7dfa      	ldrb	r2, [r7, #23]
 8017a3a:	79fb      	ldrb	r3, [r7, #7]
 8017a3c:	429a      	cmp	r2, r3
 8017a3e:	d3d3      	bcc.n	80179e8 <IntToUnicode+0x18>
  }
}
 8017a40:	bf00      	nop
 8017a42:	bf00      	nop
 8017a44:	371c      	adds	r7, #28
 8017a46:	46bd      	mov	sp, r7
 8017a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a4c:	4770      	bx	lr
	...

08017a50 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8017a50:	b580      	push	{r7, lr}
 8017a52:	b08a      	sub	sp, #40	@ 0x28
 8017a54:	af00      	add	r7, sp, #0
 8017a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017a58:	f107 0314 	add.w	r3, r7, #20
 8017a5c:	2200      	movs	r2, #0
 8017a5e:	601a      	str	r2, [r3, #0]
 8017a60:	605a      	str	r2, [r3, #4]
 8017a62:	609a      	str	r2, [r3, #8]
 8017a64:	60da      	str	r2, [r3, #12]
 8017a66:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8017a68:	687b      	ldr	r3, [r7, #4]
 8017a6a:	681b      	ldr	r3, [r3, #0]
 8017a6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8017a70:	d147      	bne.n	8017b02 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017a72:	2300      	movs	r3, #0
 8017a74:	613b      	str	r3, [r7, #16]
 8017a76:	4b25      	ldr	r3, [pc, #148]	@ (8017b0c <HAL_PCD_MspInit+0xbc>)
 8017a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017a7a:	4a24      	ldr	r2, [pc, #144]	@ (8017b0c <HAL_PCD_MspInit+0xbc>)
 8017a7c:	f043 0301 	orr.w	r3, r3, #1
 8017a80:	6313      	str	r3, [r2, #48]	@ 0x30
 8017a82:	4b22      	ldr	r3, [pc, #136]	@ (8017b0c <HAL_PCD_MspInit+0xbc>)
 8017a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017a86:	f003 0301 	and.w	r3, r3, #1
 8017a8a:	613b      	str	r3, [r7, #16]
 8017a8c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8017a8e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8017a92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8017a94:	2300      	movs	r3, #0
 8017a96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017a98:	2300      	movs	r3, #0
 8017a9a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8017a9c:	f107 0314 	add.w	r3, r7, #20
 8017aa0:	4619      	mov	r1, r3
 8017aa2:	481b      	ldr	r0, [pc, #108]	@ (8017b10 <HAL_PCD_MspInit+0xc0>)
 8017aa4:	f7f9 faa0 	bl	8010fe8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8017aa8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8017aac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017aae:	2302      	movs	r3, #2
 8017ab0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017ab2:	2300      	movs	r3, #0
 8017ab4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017ab6:	2300      	movs	r3, #0
 8017ab8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8017aba:	230a      	movs	r3, #10
 8017abc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8017abe:	f107 0314 	add.w	r3, r7, #20
 8017ac2:	4619      	mov	r1, r3
 8017ac4:	4812      	ldr	r0, [pc, #72]	@ (8017b10 <HAL_PCD_MspInit+0xc0>)
 8017ac6:	f7f9 fa8f 	bl	8010fe8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8017aca:	4b10      	ldr	r3, [pc, #64]	@ (8017b0c <HAL_PCD_MspInit+0xbc>)
 8017acc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017ace:	4a0f      	ldr	r2, [pc, #60]	@ (8017b0c <HAL_PCD_MspInit+0xbc>)
 8017ad0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017ad4:	6353      	str	r3, [r2, #52]	@ 0x34
 8017ad6:	2300      	movs	r3, #0
 8017ad8:	60fb      	str	r3, [r7, #12]
 8017ada:	4b0c      	ldr	r3, [pc, #48]	@ (8017b0c <HAL_PCD_MspInit+0xbc>)
 8017adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017ade:	4a0b      	ldr	r2, [pc, #44]	@ (8017b0c <HAL_PCD_MspInit+0xbc>)
 8017ae0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8017ae4:	6453      	str	r3, [r2, #68]	@ 0x44
 8017ae6:	4b09      	ldr	r3, [pc, #36]	@ (8017b0c <HAL_PCD_MspInit+0xbc>)
 8017ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017aea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8017aee:	60fb      	str	r3, [r7, #12]
 8017af0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8017af2:	2200      	movs	r2, #0
 8017af4:	2100      	movs	r1, #0
 8017af6:	2043      	movs	r0, #67	@ 0x43
 8017af8:	f7f9 fa3f 	bl	8010f7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8017afc:	2043      	movs	r0, #67	@ 0x43
 8017afe:	f7f9 fa58 	bl	8010fb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8017b02:	bf00      	nop
 8017b04:	3728      	adds	r7, #40	@ 0x28
 8017b06:	46bd      	mov	sp, r7
 8017b08:	bd80      	pop	{r7, pc}
 8017b0a:	bf00      	nop
 8017b0c:	40023800 	.word	0x40023800
 8017b10:	40020000 	.word	0x40020000

08017b14 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017b14:	b580      	push	{r7, lr}
 8017b16:	b082      	sub	sp, #8
 8017b18:	af00      	add	r7, sp, #0
 8017b1a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8017b1c:	687b      	ldr	r3, [r7, #4]
 8017b1e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8017b22:	687b      	ldr	r3, [r7, #4]
 8017b24:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8017b28:	4619      	mov	r1, r3
 8017b2a:	4610      	mov	r0, r2
 8017b2c:	f7fe fb43 	bl	80161b6 <USBD_LL_SetupStage>
}
 8017b30:	bf00      	nop
 8017b32:	3708      	adds	r7, #8
 8017b34:	46bd      	mov	sp, r7
 8017b36:	bd80      	pop	{r7, pc}

08017b38 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017b38:	b580      	push	{r7, lr}
 8017b3a:	b082      	sub	sp, #8
 8017b3c:	af00      	add	r7, sp, #0
 8017b3e:	6078      	str	r0, [r7, #4]
 8017b40:	460b      	mov	r3, r1
 8017b42:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8017b44:	687b      	ldr	r3, [r7, #4]
 8017b46:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8017b4a:	78fa      	ldrb	r2, [r7, #3]
 8017b4c:	6879      	ldr	r1, [r7, #4]
 8017b4e:	4613      	mov	r3, r2
 8017b50:	00db      	lsls	r3, r3, #3
 8017b52:	4413      	add	r3, r2
 8017b54:	009b      	lsls	r3, r3, #2
 8017b56:	440b      	add	r3, r1
 8017b58:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8017b5c:	681a      	ldr	r2, [r3, #0]
 8017b5e:	78fb      	ldrb	r3, [r7, #3]
 8017b60:	4619      	mov	r1, r3
 8017b62:	f7fe fb7d 	bl	8016260 <USBD_LL_DataOutStage>
}
 8017b66:	bf00      	nop
 8017b68:	3708      	adds	r7, #8
 8017b6a:	46bd      	mov	sp, r7
 8017b6c:	bd80      	pop	{r7, pc}

08017b6e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017b6e:	b580      	push	{r7, lr}
 8017b70:	b082      	sub	sp, #8
 8017b72:	af00      	add	r7, sp, #0
 8017b74:	6078      	str	r0, [r7, #4]
 8017b76:	460b      	mov	r3, r1
 8017b78:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8017b7a:	687b      	ldr	r3, [r7, #4]
 8017b7c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8017b80:	78fa      	ldrb	r2, [r7, #3]
 8017b82:	6879      	ldr	r1, [r7, #4]
 8017b84:	4613      	mov	r3, r2
 8017b86:	00db      	lsls	r3, r3, #3
 8017b88:	4413      	add	r3, r2
 8017b8a:	009b      	lsls	r3, r3, #2
 8017b8c:	440b      	add	r3, r1
 8017b8e:	3320      	adds	r3, #32
 8017b90:	681a      	ldr	r2, [r3, #0]
 8017b92:	78fb      	ldrb	r3, [r7, #3]
 8017b94:	4619      	mov	r1, r3
 8017b96:	f7fe fc1f 	bl	80163d8 <USBD_LL_DataInStage>
}
 8017b9a:	bf00      	nop
 8017b9c:	3708      	adds	r7, #8
 8017b9e:	46bd      	mov	sp, r7
 8017ba0:	bd80      	pop	{r7, pc}

08017ba2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017ba2:	b580      	push	{r7, lr}
 8017ba4:	b082      	sub	sp, #8
 8017ba6:	af00      	add	r7, sp, #0
 8017ba8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8017baa:	687b      	ldr	r3, [r7, #4]
 8017bac:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017bb0:	4618      	mov	r0, r3
 8017bb2:	f7fe fd63 	bl	801667c <USBD_LL_SOF>
}
 8017bb6:	bf00      	nop
 8017bb8:	3708      	adds	r7, #8
 8017bba:	46bd      	mov	sp, r7
 8017bbc:	bd80      	pop	{r7, pc}

08017bbe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017bbe:	b580      	push	{r7, lr}
 8017bc0:	b084      	sub	sp, #16
 8017bc2:	af00      	add	r7, sp, #0
 8017bc4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8017bc6:	2301      	movs	r3, #1
 8017bc8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8017bca:	687b      	ldr	r3, [r7, #4]
 8017bcc:	79db      	ldrb	r3, [r3, #7]
 8017bce:	2b00      	cmp	r3, #0
 8017bd0:	d102      	bne.n	8017bd8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8017bd2:	2300      	movs	r3, #0
 8017bd4:	73fb      	strb	r3, [r7, #15]
 8017bd6:	e008      	b.n	8017bea <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8017bd8:	687b      	ldr	r3, [r7, #4]
 8017bda:	79db      	ldrb	r3, [r3, #7]
 8017bdc:	2b02      	cmp	r3, #2
 8017bde:	d102      	bne.n	8017be6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8017be0:	2301      	movs	r3, #1
 8017be2:	73fb      	strb	r3, [r7, #15]
 8017be4:	e001      	b.n	8017bea <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8017be6:	f7f8 fe9f 	bl	8010928 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8017bea:	687b      	ldr	r3, [r7, #4]
 8017bec:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017bf0:	7bfa      	ldrb	r2, [r7, #15]
 8017bf2:	4611      	mov	r1, r2
 8017bf4:	4618      	mov	r0, r3
 8017bf6:	f7fe fcfd 	bl	80165f4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8017bfa:	687b      	ldr	r3, [r7, #4]
 8017bfc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017c00:	4618      	mov	r0, r3
 8017c02:	f7fe fca4 	bl	801654e <USBD_LL_Reset>
}
 8017c06:	bf00      	nop
 8017c08:	3710      	adds	r7, #16
 8017c0a:	46bd      	mov	sp, r7
 8017c0c:	bd80      	pop	{r7, pc}
	...

08017c10 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017c10:	b580      	push	{r7, lr}
 8017c12:	b082      	sub	sp, #8
 8017c14:	af00      	add	r7, sp, #0
 8017c16:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8017c18:	687b      	ldr	r3, [r7, #4]
 8017c1a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017c1e:	4618      	mov	r0, r3
 8017c20:	f7fe fcf8 	bl	8016614 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8017c24:	687b      	ldr	r3, [r7, #4]
 8017c26:	681b      	ldr	r3, [r3, #0]
 8017c28:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8017c2c:	681b      	ldr	r3, [r3, #0]
 8017c2e:	687a      	ldr	r2, [r7, #4]
 8017c30:	6812      	ldr	r2, [r2, #0]
 8017c32:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8017c36:	f043 0301 	orr.w	r3, r3, #1
 8017c3a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8017c3c:	687b      	ldr	r3, [r7, #4]
 8017c3e:	7adb      	ldrb	r3, [r3, #11]
 8017c40:	2b00      	cmp	r3, #0
 8017c42:	d005      	beq.n	8017c50 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017c44:	4b04      	ldr	r3, [pc, #16]	@ (8017c58 <HAL_PCD_SuspendCallback+0x48>)
 8017c46:	691b      	ldr	r3, [r3, #16]
 8017c48:	4a03      	ldr	r2, [pc, #12]	@ (8017c58 <HAL_PCD_SuspendCallback+0x48>)
 8017c4a:	f043 0306 	orr.w	r3, r3, #6
 8017c4e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8017c50:	bf00      	nop
 8017c52:	3708      	adds	r7, #8
 8017c54:	46bd      	mov	sp, r7
 8017c56:	bd80      	pop	{r7, pc}
 8017c58:	e000ed00 	.word	0xe000ed00

08017c5c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017c5c:	b580      	push	{r7, lr}
 8017c5e:	b082      	sub	sp, #8
 8017c60:	af00      	add	r7, sp, #0
 8017c62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8017c64:	687b      	ldr	r3, [r7, #4]
 8017c66:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017c6a:	4618      	mov	r0, r3
 8017c6c:	f7fe fcee 	bl	801664c <USBD_LL_Resume>
}
 8017c70:	bf00      	nop
 8017c72:	3708      	adds	r7, #8
 8017c74:	46bd      	mov	sp, r7
 8017c76:	bd80      	pop	{r7, pc}

08017c78 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017c78:	b580      	push	{r7, lr}
 8017c7a:	b082      	sub	sp, #8
 8017c7c:	af00      	add	r7, sp, #0
 8017c7e:	6078      	str	r0, [r7, #4]
 8017c80:	460b      	mov	r3, r1
 8017c82:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8017c84:	687b      	ldr	r3, [r7, #4]
 8017c86:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017c8a:	78fa      	ldrb	r2, [r7, #3]
 8017c8c:	4611      	mov	r1, r2
 8017c8e:	4618      	mov	r0, r3
 8017c90:	f7fe fd46 	bl	8016720 <USBD_LL_IsoOUTIncomplete>
}
 8017c94:	bf00      	nop
 8017c96:	3708      	adds	r7, #8
 8017c98:	46bd      	mov	sp, r7
 8017c9a:	bd80      	pop	{r7, pc}

08017c9c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017c9c:	b580      	push	{r7, lr}
 8017c9e:	b082      	sub	sp, #8
 8017ca0:	af00      	add	r7, sp, #0
 8017ca2:	6078      	str	r0, [r7, #4]
 8017ca4:	460b      	mov	r3, r1
 8017ca6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8017ca8:	687b      	ldr	r3, [r7, #4]
 8017caa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017cae:	78fa      	ldrb	r2, [r7, #3]
 8017cb0:	4611      	mov	r1, r2
 8017cb2:	4618      	mov	r0, r3
 8017cb4:	f7fe fd02 	bl	80166bc <USBD_LL_IsoINIncomplete>
}
 8017cb8:	bf00      	nop
 8017cba:	3708      	adds	r7, #8
 8017cbc:	46bd      	mov	sp, r7
 8017cbe:	bd80      	pop	{r7, pc}

08017cc0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017cc0:	b580      	push	{r7, lr}
 8017cc2:	b082      	sub	sp, #8
 8017cc4:	af00      	add	r7, sp, #0
 8017cc6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8017cc8:	687b      	ldr	r3, [r7, #4]
 8017cca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017cce:	4618      	mov	r0, r3
 8017cd0:	f7fe fd58 	bl	8016784 <USBD_LL_DevConnected>
}
 8017cd4:	bf00      	nop
 8017cd6:	3708      	adds	r7, #8
 8017cd8:	46bd      	mov	sp, r7
 8017cda:	bd80      	pop	{r7, pc}

08017cdc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017cdc:	b580      	push	{r7, lr}
 8017cde:	b082      	sub	sp, #8
 8017ce0:	af00      	add	r7, sp, #0
 8017ce2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8017ce4:	687b      	ldr	r3, [r7, #4]
 8017ce6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017cea:	4618      	mov	r0, r3
 8017cec:	f7fe fd55 	bl	801679a <USBD_LL_DevDisconnected>
}
 8017cf0:	bf00      	nop
 8017cf2:	3708      	adds	r7, #8
 8017cf4:	46bd      	mov	sp, r7
 8017cf6:	bd80      	pop	{r7, pc}

08017cf8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8017cf8:	b580      	push	{r7, lr}
 8017cfa:	b082      	sub	sp, #8
 8017cfc:	af00      	add	r7, sp, #0
 8017cfe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8017d00:	687b      	ldr	r3, [r7, #4]
 8017d02:	781b      	ldrb	r3, [r3, #0]
 8017d04:	2b00      	cmp	r3, #0
 8017d06:	d13c      	bne.n	8017d82 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8017d08:	4a20      	ldr	r2, [pc, #128]	@ (8017d8c <USBD_LL_Init+0x94>)
 8017d0a:	687b      	ldr	r3, [r7, #4]
 8017d0c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8017d10:	687b      	ldr	r3, [r7, #4]
 8017d12:	4a1e      	ldr	r2, [pc, #120]	@ (8017d8c <USBD_LL_Init+0x94>)
 8017d14:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8017d18:	4b1c      	ldr	r3, [pc, #112]	@ (8017d8c <USBD_LL_Init+0x94>)
 8017d1a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8017d1e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8017d20:	4b1a      	ldr	r3, [pc, #104]	@ (8017d8c <USBD_LL_Init+0x94>)
 8017d22:	2204      	movs	r2, #4
 8017d24:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8017d26:	4b19      	ldr	r3, [pc, #100]	@ (8017d8c <USBD_LL_Init+0x94>)
 8017d28:	2202      	movs	r2, #2
 8017d2a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8017d2c:	4b17      	ldr	r3, [pc, #92]	@ (8017d8c <USBD_LL_Init+0x94>)
 8017d2e:	2200      	movs	r2, #0
 8017d30:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8017d32:	4b16      	ldr	r3, [pc, #88]	@ (8017d8c <USBD_LL_Init+0x94>)
 8017d34:	2202      	movs	r2, #2
 8017d36:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8017d38:	4b14      	ldr	r3, [pc, #80]	@ (8017d8c <USBD_LL_Init+0x94>)
 8017d3a:	2200      	movs	r2, #0
 8017d3c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8017d3e:	4b13      	ldr	r3, [pc, #76]	@ (8017d8c <USBD_LL_Init+0x94>)
 8017d40:	2200      	movs	r2, #0
 8017d42:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8017d44:	4b11      	ldr	r3, [pc, #68]	@ (8017d8c <USBD_LL_Init+0x94>)
 8017d46:	2200      	movs	r2, #0
 8017d48:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8017d4a:	4b10      	ldr	r3, [pc, #64]	@ (8017d8c <USBD_LL_Init+0x94>)
 8017d4c:	2201      	movs	r2, #1
 8017d4e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8017d50:	4b0e      	ldr	r3, [pc, #56]	@ (8017d8c <USBD_LL_Init+0x94>)
 8017d52:	2200      	movs	r2, #0
 8017d54:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8017d56:	480d      	ldr	r0, [pc, #52]	@ (8017d8c <USBD_LL_Init+0x94>)
 8017d58:	f7fa f8fa 	bl	8011f50 <HAL_PCD_Init>
 8017d5c:	4603      	mov	r3, r0
 8017d5e:	2b00      	cmp	r3, #0
 8017d60:	d001      	beq.n	8017d66 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8017d62:	f7f8 fde1 	bl	8010928 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8017d66:	2180      	movs	r1, #128	@ 0x80
 8017d68:	4808      	ldr	r0, [pc, #32]	@ (8017d8c <USBD_LL_Init+0x94>)
 8017d6a:	f7fb fb26 	bl	80133ba <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8017d6e:	2240      	movs	r2, #64	@ 0x40
 8017d70:	2100      	movs	r1, #0
 8017d72:	4806      	ldr	r0, [pc, #24]	@ (8017d8c <USBD_LL_Init+0x94>)
 8017d74:	f7fb fada 	bl	801332c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8017d78:	2280      	movs	r2, #128	@ 0x80
 8017d7a:	2101      	movs	r1, #1
 8017d7c:	4803      	ldr	r0, [pc, #12]	@ (8017d8c <USBD_LL_Init+0x94>)
 8017d7e:	f7fb fad5 	bl	801332c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8017d82:	2300      	movs	r3, #0
}
 8017d84:	4618      	mov	r0, r3
 8017d86:	3708      	adds	r7, #8
 8017d88:	46bd      	mov	sp, r7
 8017d8a:	bd80      	pop	{r7, pc}
 8017d8c:	200016f0 	.word	0x200016f0

08017d90 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8017d90:	b580      	push	{r7, lr}
 8017d92:	b084      	sub	sp, #16
 8017d94:	af00      	add	r7, sp, #0
 8017d96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017d98:	2300      	movs	r3, #0
 8017d9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017d9c:	2300      	movs	r3, #0
 8017d9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8017da0:	687b      	ldr	r3, [r7, #4]
 8017da2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017da6:	4618      	mov	r0, r3
 8017da8:	f7fa f9e1 	bl	801216e <HAL_PCD_Start>
 8017dac:	4603      	mov	r3, r0
 8017dae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017db0:	7bfb      	ldrb	r3, [r7, #15]
 8017db2:	4618      	mov	r0, r3
 8017db4:	f000 f942 	bl	801803c <USBD_Get_USB_Status>
 8017db8:	4603      	mov	r3, r0
 8017dba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017dbc:	7bbb      	ldrb	r3, [r7, #14]
}
 8017dbe:	4618      	mov	r0, r3
 8017dc0:	3710      	adds	r7, #16
 8017dc2:	46bd      	mov	sp, r7
 8017dc4:	bd80      	pop	{r7, pc}

08017dc6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8017dc6:	b580      	push	{r7, lr}
 8017dc8:	b084      	sub	sp, #16
 8017dca:	af00      	add	r7, sp, #0
 8017dcc:	6078      	str	r0, [r7, #4]
 8017dce:	4608      	mov	r0, r1
 8017dd0:	4611      	mov	r1, r2
 8017dd2:	461a      	mov	r2, r3
 8017dd4:	4603      	mov	r3, r0
 8017dd6:	70fb      	strb	r3, [r7, #3]
 8017dd8:	460b      	mov	r3, r1
 8017dda:	70bb      	strb	r3, [r7, #2]
 8017ddc:	4613      	mov	r3, r2
 8017dde:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017de0:	2300      	movs	r3, #0
 8017de2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017de4:	2300      	movs	r3, #0
 8017de6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8017de8:	687b      	ldr	r3, [r7, #4]
 8017dea:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8017dee:	78bb      	ldrb	r3, [r7, #2]
 8017df0:	883a      	ldrh	r2, [r7, #0]
 8017df2:	78f9      	ldrb	r1, [r7, #3]
 8017df4:	f7fa feb5 	bl	8012b62 <HAL_PCD_EP_Open>
 8017df8:	4603      	mov	r3, r0
 8017dfa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017dfc:	7bfb      	ldrb	r3, [r7, #15]
 8017dfe:	4618      	mov	r0, r3
 8017e00:	f000 f91c 	bl	801803c <USBD_Get_USB_Status>
 8017e04:	4603      	mov	r3, r0
 8017e06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017e08:	7bbb      	ldrb	r3, [r7, #14]
}
 8017e0a:	4618      	mov	r0, r3
 8017e0c:	3710      	adds	r7, #16
 8017e0e:	46bd      	mov	sp, r7
 8017e10:	bd80      	pop	{r7, pc}

08017e12 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017e12:	b580      	push	{r7, lr}
 8017e14:	b084      	sub	sp, #16
 8017e16:	af00      	add	r7, sp, #0
 8017e18:	6078      	str	r0, [r7, #4]
 8017e1a:	460b      	mov	r3, r1
 8017e1c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017e1e:	2300      	movs	r3, #0
 8017e20:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017e22:	2300      	movs	r3, #0
 8017e24:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8017e26:	687b      	ldr	r3, [r7, #4]
 8017e28:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017e2c:	78fa      	ldrb	r2, [r7, #3]
 8017e2e:	4611      	mov	r1, r2
 8017e30:	4618      	mov	r0, r3
 8017e32:	f7fa ff00 	bl	8012c36 <HAL_PCD_EP_Close>
 8017e36:	4603      	mov	r3, r0
 8017e38:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017e3a:	7bfb      	ldrb	r3, [r7, #15]
 8017e3c:	4618      	mov	r0, r3
 8017e3e:	f000 f8fd 	bl	801803c <USBD_Get_USB_Status>
 8017e42:	4603      	mov	r3, r0
 8017e44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017e46:	7bbb      	ldrb	r3, [r7, #14]
}
 8017e48:	4618      	mov	r0, r3
 8017e4a:	3710      	adds	r7, #16
 8017e4c:	46bd      	mov	sp, r7
 8017e4e:	bd80      	pop	{r7, pc}

08017e50 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017e50:	b580      	push	{r7, lr}
 8017e52:	b084      	sub	sp, #16
 8017e54:	af00      	add	r7, sp, #0
 8017e56:	6078      	str	r0, [r7, #4]
 8017e58:	460b      	mov	r3, r1
 8017e5a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017e5c:	2300      	movs	r3, #0
 8017e5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017e60:	2300      	movs	r3, #0
 8017e62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8017e64:	687b      	ldr	r3, [r7, #4]
 8017e66:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017e6a:	78fa      	ldrb	r2, [r7, #3]
 8017e6c:	4611      	mov	r1, r2
 8017e6e:	4618      	mov	r0, r3
 8017e70:	f7fa ffb8 	bl	8012de4 <HAL_PCD_EP_SetStall>
 8017e74:	4603      	mov	r3, r0
 8017e76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017e78:	7bfb      	ldrb	r3, [r7, #15]
 8017e7a:	4618      	mov	r0, r3
 8017e7c:	f000 f8de 	bl	801803c <USBD_Get_USB_Status>
 8017e80:	4603      	mov	r3, r0
 8017e82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017e84:	7bbb      	ldrb	r3, [r7, #14]
}
 8017e86:	4618      	mov	r0, r3
 8017e88:	3710      	adds	r7, #16
 8017e8a:	46bd      	mov	sp, r7
 8017e8c:	bd80      	pop	{r7, pc}

08017e8e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017e8e:	b580      	push	{r7, lr}
 8017e90:	b084      	sub	sp, #16
 8017e92:	af00      	add	r7, sp, #0
 8017e94:	6078      	str	r0, [r7, #4]
 8017e96:	460b      	mov	r3, r1
 8017e98:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017e9a:	2300      	movs	r3, #0
 8017e9c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017e9e:	2300      	movs	r3, #0
 8017ea0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8017ea2:	687b      	ldr	r3, [r7, #4]
 8017ea4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017ea8:	78fa      	ldrb	r2, [r7, #3]
 8017eaa:	4611      	mov	r1, r2
 8017eac:	4618      	mov	r0, r3
 8017eae:	f7fa fffc 	bl	8012eaa <HAL_PCD_EP_ClrStall>
 8017eb2:	4603      	mov	r3, r0
 8017eb4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017eb6:	7bfb      	ldrb	r3, [r7, #15]
 8017eb8:	4618      	mov	r0, r3
 8017eba:	f000 f8bf 	bl	801803c <USBD_Get_USB_Status>
 8017ebe:	4603      	mov	r3, r0
 8017ec0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017ec2:	7bbb      	ldrb	r3, [r7, #14]
}
 8017ec4:	4618      	mov	r0, r3
 8017ec6:	3710      	adds	r7, #16
 8017ec8:	46bd      	mov	sp, r7
 8017eca:	bd80      	pop	{r7, pc}

08017ecc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017ecc:	b480      	push	{r7}
 8017ece:	b085      	sub	sp, #20
 8017ed0:	af00      	add	r7, sp, #0
 8017ed2:	6078      	str	r0, [r7, #4]
 8017ed4:	460b      	mov	r3, r1
 8017ed6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8017ed8:	687b      	ldr	r3, [r7, #4]
 8017eda:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017ede:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8017ee0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017ee4:	2b00      	cmp	r3, #0
 8017ee6:	da0b      	bge.n	8017f00 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8017ee8:	78fb      	ldrb	r3, [r7, #3]
 8017eea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8017eee:	68f9      	ldr	r1, [r7, #12]
 8017ef0:	4613      	mov	r3, r2
 8017ef2:	00db      	lsls	r3, r3, #3
 8017ef4:	4413      	add	r3, r2
 8017ef6:	009b      	lsls	r3, r3, #2
 8017ef8:	440b      	add	r3, r1
 8017efa:	3316      	adds	r3, #22
 8017efc:	781b      	ldrb	r3, [r3, #0]
 8017efe:	e00b      	b.n	8017f18 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8017f00:	78fb      	ldrb	r3, [r7, #3]
 8017f02:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8017f06:	68f9      	ldr	r1, [r7, #12]
 8017f08:	4613      	mov	r3, r2
 8017f0a:	00db      	lsls	r3, r3, #3
 8017f0c:	4413      	add	r3, r2
 8017f0e:	009b      	lsls	r3, r3, #2
 8017f10:	440b      	add	r3, r1
 8017f12:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8017f16:	781b      	ldrb	r3, [r3, #0]
  }
}
 8017f18:	4618      	mov	r0, r3
 8017f1a:	3714      	adds	r7, #20
 8017f1c:	46bd      	mov	sp, r7
 8017f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f22:	4770      	bx	lr

08017f24 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8017f24:	b580      	push	{r7, lr}
 8017f26:	b084      	sub	sp, #16
 8017f28:	af00      	add	r7, sp, #0
 8017f2a:	6078      	str	r0, [r7, #4]
 8017f2c:	460b      	mov	r3, r1
 8017f2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017f30:	2300      	movs	r3, #0
 8017f32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017f34:	2300      	movs	r3, #0
 8017f36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8017f38:	687b      	ldr	r3, [r7, #4]
 8017f3a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017f3e:	78fa      	ldrb	r2, [r7, #3]
 8017f40:	4611      	mov	r1, r2
 8017f42:	4618      	mov	r0, r3
 8017f44:	f7fa fde9 	bl	8012b1a <HAL_PCD_SetAddress>
 8017f48:	4603      	mov	r3, r0
 8017f4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017f4c:	7bfb      	ldrb	r3, [r7, #15]
 8017f4e:	4618      	mov	r0, r3
 8017f50:	f000 f874 	bl	801803c <USBD_Get_USB_Status>
 8017f54:	4603      	mov	r3, r0
 8017f56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017f58:	7bbb      	ldrb	r3, [r7, #14]
}
 8017f5a:	4618      	mov	r0, r3
 8017f5c:	3710      	adds	r7, #16
 8017f5e:	46bd      	mov	sp, r7
 8017f60:	bd80      	pop	{r7, pc}

08017f62 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8017f62:	b580      	push	{r7, lr}
 8017f64:	b086      	sub	sp, #24
 8017f66:	af00      	add	r7, sp, #0
 8017f68:	60f8      	str	r0, [r7, #12]
 8017f6a:	607a      	str	r2, [r7, #4]
 8017f6c:	603b      	str	r3, [r7, #0]
 8017f6e:	460b      	mov	r3, r1
 8017f70:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017f72:	2300      	movs	r3, #0
 8017f74:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017f76:	2300      	movs	r3, #0
 8017f78:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8017f7a:	68fb      	ldr	r3, [r7, #12]
 8017f7c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8017f80:	7af9      	ldrb	r1, [r7, #11]
 8017f82:	683b      	ldr	r3, [r7, #0]
 8017f84:	687a      	ldr	r2, [r7, #4]
 8017f86:	f7fa fef3 	bl	8012d70 <HAL_PCD_EP_Transmit>
 8017f8a:	4603      	mov	r3, r0
 8017f8c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017f8e:	7dfb      	ldrb	r3, [r7, #23]
 8017f90:	4618      	mov	r0, r3
 8017f92:	f000 f853 	bl	801803c <USBD_Get_USB_Status>
 8017f96:	4603      	mov	r3, r0
 8017f98:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8017f9a:	7dbb      	ldrb	r3, [r7, #22]
}
 8017f9c:	4618      	mov	r0, r3
 8017f9e:	3718      	adds	r7, #24
 8017fa0:	46bd      	mov	sp, r7
 8017fa2:	bd80      	pop	{r7, pc}

08017fa4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8017fa4:	b580      	push	{r7, lr}
 8017fa6:	b086      	sub	sp, #24
 8017fa8:	af00      	add	r7, sp, #0
 8017faa:	60f8      	str	r0, [r7, #12]
 8017fac:	607a      	str	r2, [r7, #4]
 8017fae:	603b      	str	r3, [r7, #0]
 8017fb0:	460b      	mov	r3, r1
 8017fb2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017fb4:	2300      	movs	r3, #0
 8017fb6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017fb8:	2300      	movs	r3, #0
 8017fba:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8017fbc:	68fb      	ldr	r3, [r7, #12]
 8017fbe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8017fc2:	7af9      	ldrb	r1, [r7, #11]
 8017fc4:	683b      	ldr	r3, [r7, #0]
 8017fc6:	687a      	ldr	r2, [r7, #4]
 8017fc8:	f7fa fe7f 	bl	8012cca <HAL_PCD_EP_Receive>
 8017fcc:	4603      	mov	r3, r0
 8017fce:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017fd0:	7dfb      	ldrb	r3, [r7, #23]
 8017fd2:	4618      	mov	r0, r3
 8017fd4:	f000 f832 	bl	801803c <USBD_Get_USB_Status>
 8017fd8:	4603      	mov	r3, r0
 8017fda:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8017fdc:	7dbb      	ldrb	r3, [r7, #22]
}
 8017fde:	4618      	mov	r0, r3
 8017fe0:	3718      	adds	r7, #24
 8017fe2:	46bd      	mov	sp, r7
 8017fe4:	bd80      	pop	{r7, pc}

08017fe6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017fe6:	b580      	push	{r7, lr}
 8017fe8:	b082      	sub	sp, #8
 8017fea:	af00      	add	r7, sp, #0
 8017fec:	6078      	str	r0, [r7, #4]
 8017fee:	460b      	mov	r3, r1
 8017ff0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8017ff2:	687b      	ldr	r3, [r7, #4]
 8017ff4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017ff8:	78fa      	ldrb	r2, [r7, #3]
 8017ffa:	4611      	mov	r1, r2
 8017ffc:	4618      	mov	r0, r3
 8017ffe:	f7fa fe9f 	bl	8012d40 <HAL_PCD_EP_GetRxCount>
 8018002:	4603      	mov	r3, r0
}
 8018004:	4618      	mov	r0, r3
 8018006:	3708      	adds	r7, #8
 8018008:	46bd      	mov	sp, r7
 801800a:	bd80      	pop	{r7, pc}

0801800c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801800c:	b480      	push	{r7}
 801800e:	b083      	sub	sp, #12
 8018010:	af00      	add	r7, sp, #0
 8018012:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8018014:	4b03      	ldr	r3, [pc, #12]	@ (8018024 <USBD_static_malloc+0x18>)
}
 8018016:	4618      	mov	r0, r3
 8018018:	370c      	adds	r7, #12
 801801a:	46bd      	mov	sp, r7
 801801c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018020:	4770      	bx	lr
 8018022:	bf00      	nop
 8018024:	20001bd4 	.word	0x20001bd4

08018028 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8018028:	b480      	push	{r7}
 801802a:	b083      	sub	sp, #12
 801802c:	af00      	add	r7, sp, #0
 801802e:	6078      	str	r0, [r7, #4]

}
 8018030:	bf00      	nop
 8018032:	370c      	adds	r7, #12
 8018034:	46bd      	mov	sp, r7
 8018036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801803a:	4770      	bx	lr

0801803c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801803c:	b480      	push	{r7}
 801803e:	b085      	sub	sp, #20
 8018040:	af00      	add	r7, sp, #0
 8018042:	4603      	mov	r3, r0
 8018044:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018046:	2300      	movs	r3, #0
 8018048:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801804a:	79fb      	ldrb	r3, [r7, #7]
 801804c:	2b03      	cmp	r3, #3
 801804e:	d817      	bhi.n	8018080 <USBD_Get_USB_Status+0x44>
 8018050:	a201      	add	r2, pc, #4	@ (adr r2, 8018058 <USBD_Get_USB_Status+0x1c>)
 8018052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018056:	bf00      	nop
 8018058:	08018069 	.word	0x08018069
 801805c:	0801806f 	.word	0x0801806f
 8018060:	08018075 	.word	0x08018075
 8018064:	0801807b 	.word	0x0801807b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8018068:	2300      	movs	r3, #0
 801806a:	73fb      	strb	r3, [r7, #15]
    break;
 801806c:	e00b      	b.n	8018086 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801806e:	2303      	movs	r3, #3
 8018070:	73fb      	strb	r3, [r7, #15]
    break;
 8018072:	e008      	b.n	8018086 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8018074:	2301      	movs	r3, #1
 8018076:	73fb      	strb	r3, [r7, #15]
    break;
 8018078:	e005      	b.n	8018086 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801807a:	2303      	movs	r3, #3
 801807c:	73fb      	strb	r3, [r7, #15]
    break;
 801807e:	e002      	b.n	8018086 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8018080:	2303      	movs	r3, #3
 8018082:	73fb      	strb	r3, [r7, #15]
    break;
 8018084:	bf00      	nop
  }
  return usb_status;
 8018086:	7bfb      	ldrb	r3, [r7, #15]
}
 8018088:	4618      	mov	r0, r3
 801808a:	3714      	adds	r7, #20
 801808c:	46bd      	mov	sp, r7
 801808e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018092:	4770      	bx	lr

08018094 <memset>:
 8018094:	4402      	add	r2, r0
 8018096:	4603      	mov	r3, r0
 8018098:	4293      	cmp	r3, r2
 801809a:	d100      	bne.n	801809e <memset+0xa>
 801809c:	4770      	bx	lr
 801809e:	f803 1b01 	strb.w	r1, [r3], #1
 80180a2:	e7f9      	b.n	8018098 <memset+0x4>

080180a4 <__libc_init_array>:
 80180a4:	b570      	push	{r4, r5, r6, lr}
 80180a6:	4d0d      	ldr	r5, [pc, #52]	@ (80180dc <__libc_init_array+0x38>)
 80180a8:	4c0d      	ldr	r4, [pc, #52]	@ (80180e0 <__libc_init_array+0x3c>)
 80180aa:	1b64      	subs	r4, r4, r5
 80180ac:	10a4      	asrs	r4, r4, #2
 80180ae:	2600      	movs	r6, #0
 80180b0:	42a6      	cmp	r6, r4
 80180b2:	d109      	bne.n	80180c8 <__libc_init_array+0x24>
 80180b4:	4d0b      	ldr	r5, [pc, #44]	@ (80180e4 <__libc_init_array+0x40>)
 80180b6:	4c0c      	ldr	r4, [pc, #48]	@ (80180e8 <__libc_init_array+0x44>)
 80180b8:	f000 f818 	bl	80180ec <_init>
 80180bc:	1b64      	subs	r4, r4, r5
 80180be:	10a4      	asrs	r4, r4, #2
 80180c0:	2600      	movs	r6, #0
 80180c2:	42a6      	cmp	r6, r4
 80180c4:	d105      	bne.n	80180d2 <__libc_init_array+0x2e>
 80180c6:	bd70      	pop	{r4, r5, r6, pc}
 80180c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80180cc:	4798      	blx	r3
 80180ce:	3601      	adds	r6, #1
 80180d0:	e7ee      	b.n	80180b0 <__libc_init_array+0xc>
 80180d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80180d6:	4798      	blx	r3
 80180d8:	3601      	adds	r6, #1
 80180da:	e7f2      	b.n	80180c2 <__libc_init_array+0x1e>
 80180dc:	0801816c 	.word	0x0801816c
 80180e0:	0801816c 	.word	0x0801816c
 80180e4:	0801816c 	.word	0x0801816c
 80180e8:	08018170 	.word	0x08018170

080180ec <_init>:
 80180ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80180ee:	bf00      	nop
 80180f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80180f2:	bc08      	pop	{r3}
 80180f4:	469e      	mov	lr, r3
 80180f6:	4770      	bx	lr

080180f8 <_fini>:
 80180f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80180fa:	bf00      	nop
 80180fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80180fe:	bc08      	pop	{r3}
 8018100:	469e      	mov	lr, r3
 8018102:	4770      	bx	lr
